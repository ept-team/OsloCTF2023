


Gadgets
=======


0x0000000000447c2d: adc ah, bh; ret; 
0x0000000000447de4: adc ah, bh; vzeroupper; ret; 
0x000000000046a273: adc ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000004016b2: adc al, 0; add ah, dh; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x00000000004777b4: adc al, 0; add bh, dh; ret 0; 
0x000000000043be4f: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043beb9: adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000048106e: adc al, 0; add byte ptr [rax], al; syscall; 
0x000000000046866f: adc al, 0; add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret 0xf66; 
0x000000000047064b: adc al, 0x10; lea rbx, [rip + 0x5238c]; mov ebp, 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x00000000004707b4: adc al, 0x10; lea rbx, [rip + 0x52423]; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x0000000000470847: adc al, 0x10; lea rbx, [rip + 0x52490]; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000047061b: adc al, 0x10; mov rbx, rcx; mov r11d, 1; xor ebp, ebp; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004705ab: adc al, 0x10; mov rbx, rcx; mov r9d, 1; mov r10d, 1; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000046fb8f: adc al, 0x10; mov rbx, rcx; mov r9d, 1; xor r10d, r10d; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000040eb34: adc al, 0x10; mov rdx, qword ptr [r11 + rdx*8]; jmp rdx; 
0x000000000040f93f: adc al, 0x10; mov rdx, qword ptr [rcx + rdx*8]; jmp rdx; 
0x000000000040f676: adc al, 0x10; mov rdx, qword ptr [rdi + rdx*8]; jmp rdx; 
0x000000000040f634: adc al, 0x10; mov rdx, qword ptr [rsi + rdx*8]; jmp rdx; 
0x0000000000453321: adc al, 0x11; mov qword ptr [rax + 8], rdx; ret; 
0x000000000045302f: adc al, 0x11; test edx, edx; jne 0x53040; ret; 
0x0000000000424839: adc al, 0x16; sub eax, edx; ret; 
0x0000000000425d50: adc al, 0x16; sub eax, edx; vzeroupper; ret; 
0x0000000000449464: adc al, 0x16; sub eax, edx; xtest; je 0x49471; vzeroall; ret; 
0x000000000044a3f0: adc al, 0x16; sub eax, edx; xtest; je 0x4a3fd; vzeroall; ret; 
0x000000000042a0b5: adc al, 0x16; test r8d, r8d; je 0x2a0bd; xchg eax, edx; sub eax, edx; ret; 
0x0000000000493000: adc al, 0x24; mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x00000000004502e5: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x50301; add rsp, 0x28; ret; 
0x0000000000450df5: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x50e43; add rsp, 0x68; ret; 
0x0000000000450e84: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x50ed3; add rsp, 0x18; ret; 
0x0000000000450f3c: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x50f8b; add rsp, 0x58; ret; 
0x0000000000451178: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x51185; add rsp, 0x28; ret; 
0x00000000004527a3: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x527c5; add rsp, 0x1018; ret; 
0x0000000000452aef: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x52b3d; add rsp, 0x58; ret; 
0x0000000000466ea6: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x66ef5; add rsp, 0x38; ret; 
0x000000000046c4b2: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6c4c2; add rsp, 0xd8; ret; 
0x000000000046c56e: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6c57e; add rsp, 0xd8; ret; 
0x0000000000475e97: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x75f17; add rsp, 0x98; ret; 
0x0000000000479c6a: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x79d33; add rsp, 0x78; ret; 
0x0000000000479dda: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x79e2b; add rsp, 0x58; ret; 
0x0000000000485e1d: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485eef: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fbf: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x85ff4; add rsp, 0x58; ret; 
0x00000000004860dd: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86197; add rsp, 0x68; ret; 
0x00000000004861f3: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86223; add rsp, 0x38; ret; 
0x000000000048dde0: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8dded; add rsp, 0x28; ret; 
0x000000000048dec3: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8ded0; add rsp, 0x38; ret; 
0x000000000048df33: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8df40; add rsp, 0x38; ret; 
0x000000000048e01e: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8e02b; add rsp, 0x38; ret; 
0x000000000048e07e: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8e08b; add rsp, 0x38; ret; 
0x000000000040b744: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xb754; add rsp, 0xd8; ret; 
0x000000000040b802: adc al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xb812; add rsp, 0xd8; ret; 
0x000000000044d356: adc al, 0x3a; sub eax, edx; ret; 
0x000000000042a32d: adc al, 0x3a; sub eax, edx; vzeroupper; ret; 
0x00000000004502ec: adc al, 0x48; add esp, 0x28; ret; 
0x0000000000443b60: adc al, 0x48; lea eax, [rdi + 0x14]; ret; 
0x0000000000493126: adc al, 0x48; lea edx, [rip + 0x39912]; cmp byte ptr [rdx + rsi], 8; jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x0000000000401c8d: adc al, 0x48; mov esi, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000048806b: adc al, 0x48; test edx, edx; jne 0x88090; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000041916b: adc al, 0x5d; ret; 
0x00000000004744bf: adc al, 0x90; mov qword ptr [rax + 0x10], rdi; movups xmmword ptr [rax], xmm0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000474485: adc al, 0x90; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000043d2e0: adc al, 0x91; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043ba0e: adc al, 0x91; sub eax, edx; ret; 
0x00000000004249a3: adc al, 0xa; sub eax, edx; ret; 
0x0000000000425ecd: adc al, 0xa; sub eax, edx; vzeroupper; ret; 
0x0000000000453312: adc al, 0xbf; lea rcx, [rip + 0x72ea5]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000046fb9f: adc al, 0xd0; jmp rdx; 
0x000000000040f943: adc al, 0xd1; jmp rdx; 
0x000000000040eb38: adc al, 0xd3; jmp rdx; 
0x00000000004707bf: adc al, 0xd3; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x00000000004704be: adc al, 0xd3; mov rbx, rcx; jmp rdx; 
0x000000000040f638: adc al, 0xd6; jmp rdx; 
0x000000000040f67a: adc al, 0xd7; jmp rdx; 
0x0000000000463565: adc al, 0xe8; test rdx, rdx; je 0x6356e; call rdx; 
0x00000000004464d8: adc al, 0xe; cmp rdi, rdx; jb 0x464e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043d541: adc al, 0xe; lea rcx, [rip + 0x62b96]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043ba01: adc al, 0xe; lea rcx, [rip + 0x646d6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000042928a: adc al, 0xe; sub eax, edx; ret; 
0x000000000040a850: adc al, 0xeb; sbb eax, 0x441f0f; add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000493192: adc al, 0xf7; ret; 
0x000000000048f8c2: adc al, 0xf8; add cl, ch; imul esi, ebp, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000040b138: adc al, 1; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000447ce8: adc al, ah; vzeroupper; ret; 
0x0000000000447c26: adc al, bh; ret; 
0x0000000000447dd6: adc al, bh; vzeroupper; ret; 
0x0000000000422161: adc al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0x2935; cmovne rax, rdx; ret; 
0x000000000044fd46: adc al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000043bff7: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c061: adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004641ca: adc al, byte ptr [rsi]; add byte ptr [rax], al; nop; ret; 
0x0000000000484d84: adc al, ch; div byte ptr [rdx]; add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004533f9: adc al, ch; jno 0x533cb; cld; dec dword ptr [rax - 0x77]; ret; 
0x0000000000480b67: adc al, ch; ret; 
0x0000000000447b6e: adc al, dh; ret; 
0x0000000000447dca: adc al, dh; vzeroupper; ret; 
0x0000000000447ce7: adc al, r12b; vzeroupper; ret; 
0x0000000000447b6d: adc al, r14b; ret; 
0x0000000000447dc9: adc al, r14b; vzeroupper; ret; 
0x0000000000447c36: adc bh, bh; ret; 
0x0000000000447df6: adc bh, bh; vzeroupper; ret; 
0x0000000000482324: adc bh, byte ptr [rcx]; ret 0x850f; 
0x00000000004823b6: adc bh, byte ptr [rcx]; ret 0xc74; 
0x0000000000479833: adc bh, dl; jmp qword ptr [rsi + 0x2e]; 
0x000000000049312a: adc bl, byte ptr [rcx + 0x3c800003]; xor cl, byte ptr [rax]; jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x0000000000486916: adc bl, ch; jge 0x86963; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000433aa0: adc bl, dh; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000443b36: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000443b56: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000443496: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000443486: adc bl, dh; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000443bb7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000443bd7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000443517: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004434f7: adc bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000443af7: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000443457: adc bl, dh; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000443cb8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004435f8: adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000490dab: adc bl, dh; movups xmm0, xmmword ptr [rip + 0x239ec]; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x0000000000433a9f: adc bl, r14b; movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000443b35: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000443b55: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000443495: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000443485: adc bl, r14b; movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000443bb6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000443bd6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000443516: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004434f6: adc bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000443af6: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000443456: adc bl, r14b; movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000045342e: adc byte ptr [r11 + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000475de5: adc byte ptr [r13 + 0x531574c0], r8b; mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000048ca15: adc byte ptr [r13 + 0x59840fc0], al; add eax, 0x1480000; ret; 
0x000000000048cb34: adc byte ptr [r13 - 0x2d7bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000042a8bf: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000477d6f: adc byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x00000000004190d6: adc byte ptr [r15], cl; adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000447bdd: adc byte ptr [r15], r9b; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004465c0: adc byte ptr [r15], r9b; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004183d1: adc byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x0000000000485d53: adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000413582: adc byte ptr [r8 + 1], r9b; ret; 
0x000000000041aa22: adc byte ptr [r8 + r9*4 + 4], r12b; and eax, 0x972; cmp eax, 1; je 0x1aa38; ret; 
0x0000000000419fb3: adc byte ptr [r8 - 0x77], r9b; ret 0xf8b; 
0x000000000047a497: adc byte ptr [r8], al; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000482a73: adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x0000000000483247: adc byte ptr [r9 + 3], cl; add al, 0x24; test edx, edx; jne 0x83261; mov qword ptr [rbp - 0xb0], r10; call rax; 
0x0000000000483a1e: adc byte ptr [r9 + 3], cl; add al, 0x24; test edx, edx; jne 0x83a2a; call rax; 
0x0000000000483118: adc byte ptr [r9 + 3], cl; add al, 0x24; test esi, esi; jne 0x83124; call rax; 
0x0000000000483a9d: adc byte ptr [r9 + 3], cl; add al, 0x24; test r11d, r11d; jne 0x83ab8; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000046668f: adc byte ptr [rax + 0x13e], bh; syscall; 
0x000000000046668f: adc byte ptr [rax + 0x13e], bh; syscall; cmp rax, -0x1000; ja 0x666f0; ret; 
0x00000000004815d1: adc byte ptr [rax + 0x29], cl; ret 0x394c; 
0x0000000000469f78: adc byte ptr [rax + 0x29], cl; ret 0xc148; 
0x000000000041349c: adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x00000000004183d2: adc byte ptr [rax + 0x39], cl; ret 0x870f; 
0x0000000000465ad8: adc byte ptr [rax + 0x39], cl; ret 0x8e0f; 
0x0000000000454947: adc byte ptr [rax + 0x39], cl; ret 0xee75; 
0x000000000047670e: adc byte ptr [rax + 0x39], cl; ret 0xf475; 
0x000000000048d5d4: adc byte ptr [rax + 0x3b], cl; sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x00000000004506dd: adc byte ptr [rax + 0x4f], bh; syscall; 
0x0000000000485d54: adc byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x0000000000418e3b: adc byte ptr [rax + 1], bh; pop rbx; ret; 
0x000000000045058f: adc byte ptr [rax + 1], bh; syscall; 
0x000000000045058f: adc byte ptr [rax + 1], bh; syscall; cmp rax, -0x1000; ja 0x505f0; ret; 
0x0000000000412c8a: adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x000000000041b8f9: adc byte ptr [rax + 1], cl; ret 0x349; 
0x0000000000413583: adc byte ptr [rax + 1], cl; ret; 
0x000000000045119f: adc byte ptr [rax + 9], bh; syscall; 
0x000000000045119f: adc byte ptr [rax + 9], bh; syscall; cmp rax, -0x1000; ja 0x511d0; ret; 
0x0000000000474778: adc byte ptr [rax + rcx*2 - 0x75], ah; add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rax + 0x972], 0; ret; 
0x000000000041aa23: adc byte ptr [rax + rcx*4 + 4], ah; and eax, 0x972; cmp eax, 1; je 0x1aa38; ret; 
0x0000000000488428: adc byte ptr [rax - 0x39], cl; add eax, 0x43eb4; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000450c4b: adc byte ptr [rax - 0x39], cl; ret; 
0x000000000048869a: adc byte ptr [rax - 0x73], cl; adc eax, 0x11e; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x000000000042223a: adc byte ptr [rax - 0x73], cl; adc eax, 0x23e1e; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x00000000004778b2: adc byte ptr [rax - 0x73], cl; adc eax, 0xfffd4146; lea rax, [rip - 0x2fac1]; cmovne rax, rdx; ret; 
0x0000000000453044: adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000047064c: adc byte ptr [rax - 0x73], cl; sbb eax, 0x5238c; mov ebp, 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x00000000004707b5: adc byte ptr [rax - 0x73], cl; sbb eax, 0x52423; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x0000000000470848: adc byte ptr [rax - 0x73], cl; sbb eax, 0x52490; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000453043: adc byte ptr [rax - 0x73], r9b; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000040f940: adc byte ptr [rax - 0x75], cl; adc al, 0xd1; jmp rdx; 
0x000000000040f635: adc byte ptr [rax - 0x75], cl; adc al, 0xd6; jmp rdx; 
0x000000000040f677: adc byte ptr [rax - 0x75], cl; adc al, 0xd7; jmp rdx; 
0x00000000004506d8: adc byte ptr [rax - 0x75], cl; jl 0x50701; adc byte ptr [rax + 0x4f], bh; syscall; 
0x00000000004129d8: adc byte ptr [rax - 0x75], cl; push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x00000000004129f2: adc byte ptr [rax - 0x75], cl; xchg eax, ebx; nop; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000048dc77: adc byte ptr [rax - 0x77], cl; je 0x8dca0; or al, ch; out dx, al; ret 0xfffe; 
0x0000000000419c2f: adc byte ptr [rax - 0x77], cl; jo 0x19c3c; xor eax, eax; ret; 
0x00000000004932f7: adc byte ptr [rax - 0x77], cl; mov ah, 0xd7; cmp dl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4c01; 
0x00000000004515e7: adc byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x000000000044e28e: adc byte ptr [rax - 0x77], cl; out dx, eax; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000047340d: adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x00000000004733d2: adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm1; ret; 
0x0000000000419b34: adc byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x0000000000419fb4: adc byte ptr [rax - 0x77], cl; ret 0xf8b; 
0x000000000047061c: adc byte ptr [rax - 0x77], cl; retf; mov r11d, 1; xor ebp, ebp; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004705ac: adc byte ptr [rax - 0x77], cl; retf; mov r9d, 1; mov r10d, 1; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000046fb90: adc byte ptr [rax - 0x77], cl; retf; mov r9d, 1; xor r10d, r10d; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004514b1: adc byte ptr [rax - 0x7b], cl; dec dword ptr [rdi]; test dword ptr [rbp + 0x49000000], edx; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000452291: adc byte ptr [rax - 0x7b], cl; dec dword ptr [rdi]; test dword ptr [rbp + 0x49000000], esi; mov edi, dword ptr [rbp]; call rbx; 
0x000000000045147c: adc byte ptr [rax - 0x7b], cl; dec dword ptr [rdi]; test dword ptr [rdx + 0x49000000], ecx; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000451449: adc byte ptr [rax - 0x7b], cl; dec dword ptr [rdi]; test dword ptr [rip + 0x49000001], ebx; mov edi, dword ptr [rbp]; call rbx; 
0x00000000004522ed: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + 0x1d]; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045221f: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + 0x4b]; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004514dd: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + 0x4d]; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522c1: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + 0x69]; mov rdi, qword ptr [r13]; call rbx; 
0x000000000049720e: adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x97224; call rax; 
0x000000000041e26e: adc byte ptr [rax - 0x7b], cl; ror byte ptr [rbx + rcx*4 + 0x44], 0x24; sbb byte ptr [rax - 0x77], cl; ret 0x850f; 
0x000000000048aba1: adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x00000000004955f4: adc byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000451be2: adc byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x00000000004550a3: adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x00000000004552f6: adc byte ptr [rax - 0x7d], cl; ret 0x8310; 
0x000000000040317a: adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000493f32: adc byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x49; mov dword ptr [rax], edx; ret; 
0x000000000049106d: adc byte ptr [rax - 0x7d], cl; ror byte ptr [rax], 0x49; mov dword ptr [rdx], edx; pop rbx; ret; 
0x0000000000418e63: adc byte ptr [rax - 1], bh; pop rbx; ret; 
0x0000000000451663: adc byte ptr [rax - 9], cl; ret 0xfffe; 
0x00000000004292ea: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000043bde2: adc byte ptr [rax], al; add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x000000000043d8bc: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c201: adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000047a498: adc byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x000000000041b97e: adc byte ptr [rax], al; add byte ptr [rax], al; cmova rax, rdx; mov qword ptr [rip + 0xb08ab], rax; ret; 
0x000000000048007e: adc byte ptr [rax], al; add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x000000000047477e: adc byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rax + 0x972], 0; ret; 
0x0000000000450e0e: adc byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x000000000041b6e9: adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000479e94: adc byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000452779: adc byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, 0xcc; syscall; 
0x0000000000439ab8: adc byte ptr [rax], al; add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000040b56c: adc byte ptr [rbp + 0x29], cl; ret; 
0x0000000000420b3e: adc byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000475de6: adc byte ptr [rbp + 0x531574c0], al; mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000048ca16: adc byte ptr [rbp + 0x59840fc0], al; add eax, 0x1480000; ret; 
0x000000000045d0cf: adc byte ptr [rbp + rcx*4 - 0x74], cl; and al, 0x98; add byte ptr [rax], al; add al, ch; ret; 
0x000000000047572a: adc byte ptr [rbp - 0x1f], dh; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000048cb35: adc byte ptr [rbp - 0x2d7bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x00000000004521e6: adc byte ptr [rbp - 0x7b], cl; in al, 0x75; and al, 0x48; mov edi, dword ptr [rbp]; call rbx; 
0x00000000004513bd: adc byte ptr [rbp - 0x7b], cl; in al, 0x75; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004513ef: adc byte ptr [rbp - 0x7b], cl; in eax, dx; jne 0x5146b; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045141f: adc byte ptr [rbp - 0x7b], cl; in eax, dx; jne 0x514a0; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045224b: adc byte ptr [rbp - 0x7b], cl; in eax, dx; jne 0x522b0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000422a59: adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x000000000041a791: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x000000000045342f: adc byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000412ea8: adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000443557: adc byte ptr [rbx + 0xff3174e], cl; jg 0x43566; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000443c17: adc byte ptr [rbx + 0xff3174e], cl; jg 0x43c26; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000443577: adc byte ptr [rbx + 0xff3184e], cl; jg 0x43586; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000443c37: adc byte ptr [rbx + 0xff3184e], cl; jg 0x43c46; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000419b8a: adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000479cd7: adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000453df7: adc byte ptr [rbx - 0x4d], dh; xor eax, eax; ret; 
0x000000000044ffca: adc byte ptr [rbx], al; add bh, dh; ret 0x67; 
0x00000000004845fb: adc byte ptr [rbx], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x300], xmm0; ret; 
0x000000000040a31e: adc byte ptr [rcx + 0x39], cl; ret 0xec75; 
0x000000000048a348: adc byte ptr [rcx + 0xf], al; adc dword ptr [rcx - 0x20], eax; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jne 0x8a2e0; ret; 
0x000000000041be97: adc byte ptr [rcx + 1], cl; ret 0x3948; 
0x0000000000482a74: adc byte ptr [rcx + 3], cl; add al, 0x24; call rax; 
0x0000000000483248: adc byte ptr [rcx + 3], cl; add al, 0x24; test edx, edx; jne 0x83261; mov qword ptr [rbp - 0xb0], r10; call rax; 
0x0000000000483a1f: adc byte ptr [rcx + 3], cl; add al, 0x24; test edx, edx; jne 0x83a2a; call rax; 
0x0000000000483119: adc byte ptr [rcx + 3], cl; add al, 0x24; test esi, esi; jne 0x83124; call rax; 
0x0000000000483a9e: adc byte ptr [rcx + 3], cl; add al, 0x24; test r11d, r11d; jne 0x83ab8; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000040ad12: adc byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000472491: adc byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x000000000040eb35: adc byte ptr [rcx - 0x75], cl; adc al, 0xd3; jmp rdx; 
0x00000000004666bf: adc byte ptr [rcx - 0x77], al; ror byte ptr [rax - 0x75], 0x7c; and al, 8; mov eax, 0x13e; syscall; 
0x0000000000450520: adc byte ptr [rcx - 0x77], al; ror byte ptr [rbx + 0x3108247c], 0xc0; syscall; 
0x0000000000490b31: adc byte ptr [rcx - 0x77], cl; ret; 
0x000000000041b84f: adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000042931d: adc byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x0000000000475d27: adc byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0x20], eax; call 0x882c0; call rbx; 
0x0000000000454f01: adc byte ptr [rcx], al; add byte ptr [rax], al; mov eax, r12d; pop r12; ret; 
0x00000000004460c7: adc byte ptr [rcx], ch; cmp edx, ecx; jle 0x460e4; movsxd rax, ecx; ret; 
0x0000000000476b9e: adc byte ptr [rcx], cl; ret 0x3949; 
0x0000000000420c43: adc byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x0000000000493c0f: adc byte ptr [rdi + 1], bh; jmp rax; 
0x00000000004466c6: adc byte ptr [rdi + rcx + 0x11], al; add cl, byte ptr [rdi]; adc dword ptr [rcx], eax; ret; 
0x0000000000403502: adc byte ptr [rdi + rsi - 9], dh; ret 0; 
0x00000000004744c4: adc byte ptr [rdi], cl; adc dword ptr [rax], eax; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000004190d7: adc byte ptr [rdi], cl; adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000447bde: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000446731: adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004465c1: adc byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000444123: adc byte ptr [rdi], cl; test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000429701: adc byte ptr [rdi], cl; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004297f1: adc byte ptr [rdi], cl; xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000429611: adc byte ptr [rdi], cl; xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000042a059: adc byte ptr [rdi], cl; xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x0000000000429bb1: adc byte ptr [rdi], cl; xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000429341: adc byte ptr [rdi], cl; xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x0000000000429d91: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000429521: adc byte ptr [rdi], cl; xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000429f71: adc byte ptr [rdi], cl; xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000429e81: adc byte ptr [rdi], cl; xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004297c3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004298b3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004296d3: adc byte ptr [rdi], cl; xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429431: adc byte ptr [rdi], cl; xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x00000000004295e3: adc byte ptr [rdi], cl; xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429403: adc byte ptr [rdi], cl; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004294f3: adc byte ptr [rdi], cl; xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429313: adc byte ptr [rdi], cl; xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x000000000044df80: adc byte ptr [rdx + 1], ch; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044df06: adc byte ptr [rdx + 1], ch; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000445bf6: adc byte ptr [rdx], al; jne 0x45c10; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45bf0; ret; 
0x0000000000445ca6: adc byte ptr [rdx], al; jne 0x45cc0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45ca0; ret; 
0x0000000000445bf5: adc byte ptr [rdx], r8b; jne 0x45c10; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45bf0; ret; 
0x0000000000445ca5: adc byte ptr [rdx], r8b; jne 0x45cc0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45ca0; ret; 
0x0000000000490dae: adc byte ptr [rip + 0x239ec], al; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x000000000041d0a8: adc byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x29; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x0000000000423585: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000004377bb: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x00000000004235cb: adc byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000042a8c0: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000477d70: adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x00000000004468d1: adc byte ptr [rsi + rdx - 0x10], bl; movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000044646f: adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004465b7: adc byte ptr [rsi + rdx - 0x20], bl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000453bee: adc byte ptr [rsi - 0x3617fffc], bl; or bl, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000436dfe: adc byte ptr [rsi - 0x75], ah; mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000443537: adc byte ptr [rsi - 0x75], ah; sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004521e5: adc byte ptr gs:[rbp - 0x7b], cl; in al, 0x75; and al, 0x48; mov edi, dword ptr [rbp]; call rbx; 
0x00000000004513bc: adc byte ptr gs:[rbp - 0x7b], cl; in al, 0x75; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000048c103: adc cl, byte ptr [rax + 1]; ret 0x8d49; 
0x000000000040bb38: adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rbx + rcx*4 + 0x74]; ret 0x4c40; 
0x000000000049317d: adc cl, byte ptr [rax - 0x75]; or al, 0xf7; cmp al, 8; jne 0x1618; mov qword ptr [rcx], rdx; ret; 
0x0000000000466de9: adc cl, byte ptr [rax - 0x7d]; ret 0x4810; 
0x00000000004115ed: adc cl, byte ptr [rax - 0x7d]; ret 0xeb01; 
0x00000000004547d3: adc cl, byte ptr [rax - 0x7d]; ret; 
0x000000000043ff15: adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x000000000041458d: adc cl, byte ptr [rbx + 0x42394c42]; cmovne rax, rcx; ret; 
0x000000000040bb3b: adc cl, byte ptr [rbx + rcx*4 + 0x74]; ret 0x4c40; 
0x00000000004134d8: adc cl, ch; retf 0xfffe; jmp qword ptr [rsi - 0x70]; 
0x00000000004888b9: adc dh, byte ptr [rbx - 0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000447ea7: adc dil, r15b; ret; 
0x0000000000419c2d: adc dword ptr [rax + 0x10], eax; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x000000000047aace: adc dword ptr [rax + 0x29], ecx; ret 0x149; 
0x0000000000484600: adc dword ptr [rax + 0x300], eax; ret; 
0x0000000000484650: adc dword ptr [rax + 0x308], eax; ret; 
0x0000000000473a7b: adc dword ptr [rax + 0x30], eax; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c8a7: adc dword ptr [rax + 0x39], ecx; ret; 
0x000000000047422b: adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x0000000000447b6c: adc dword ptr [rax + rdx - 0x10], eax; ret; 
0x0000000000464fad: adc dword ptr [rax - 0x39], ecx; ret 0xffe0; 
0x000000000041b7be: adc dword ptr [rax - 0x3f], ecx; call 0x508effca; add dword ptr [rax - 0x77], ecx; adc eax, 0xa9ffa; ret; 
0x0000000000413221: adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000418dae: adc dword ptr [rax - 0x75], ecx; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000000048faf8: adc dword ptr [rax - 0x75], ecx; or byte ptr [rcx + rcx*4 - 0x16], cl; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000046507d: adc dword ptr [rax - 0x75], ecx; pop rax; mov rdx, -0x20; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x000000000046acd9: adc dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x0000000000467420: adc dword ptr [rax - 0xdf6b], ecx; jmp qword ptr [rsi + 0xf]; 
0x000000000043d8bb: adc dword ptr [rax], 0x83480000; ret 0x4910; 
0x000000000043c197: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d7bf: adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000479e38: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000479e38: adc dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x79e50; ret; 
0x00000000004744c6: adc dword ptr [rax], eax; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000447b69: adc dword ptr [rax], eax; movups xmmword ptr [rax + rdx - 0x10], xmm0; ret; 
0x0000000000473413: adc dword ptr [rax], eax; ret; 
0x00000000004733d8: adc dword ptr [rax], ecx; ret; 
0x000000000040171e: adc dword ptr [rax], edi; test rax, rax; je 0x1730; mov edi, 0x4c6ae0; jmp rax; 
0x000000000048a0dc: adc dword ptr [rbp + 0x18], esi; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000047229e: adc dword ptr [rbx + 0x18], eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000041a933: adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000414e43: adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x00000000004745c7: adc dword ptr [rbx + 0x28], eax; add rsp, 0x28; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000041a937: adc dword ptr [rbx + 0x28], eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000414e47: adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x0000000000454122: adc dword ptr [rbx + 0x2d8], eax; syscall; 
0x0000000000418e33: adc dword ptr [rbx + 0x38], eax; mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x0000000000418647: adc dword ptr [rbx + 0x38], eax; pop rbx; pop rbp; pop r12; ret; 
0x00000000004598ec: adc dword ptr [rbx + 0x48], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418116: adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x0000000000414e3f: adc dword ptr [rbx + 8], eax; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000415246: adc dword ptr [rbx + 8], eax; pop rbx; ret; 
0x00000000004160c5: adc dword ptr [rbx + 8], ecx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047a49e: adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000410d45: adc dword ptr [rbx], ecx; add byte ptr [rax - 0x75], cl; add al, 0xf8; ret; 
0x00000000004190d5: adc dword ptr [rcx + 0x10], eax; movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004190d9: adc dword ptr [rcx + 0x20], eax; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004190dd: adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004190e1: adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004370cd: adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004370d4: adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004370db: adc dword ptr [rcx + 7], edi; ret; 
0x000000000048a350: adc dword ptr [rcx - 0x10], ecx; cmp r10, r11; jne 0x8a2e0; ret; 
0x000000000048a34b: adc dword ptr [rcx - 0x20], eax; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jne 0x8a2e0; ret; 
0x0000000000436d76: adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000436d3a: adc dword ptr [rcx - 1], edi; ret; 
0x0000000000436d6f: adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436f6d: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d33: adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436f66: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d2c: adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436f5f: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d25: adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000454114: adc dword ptr [rcx], eax; add byte ptr [rax], al; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x00000000004466cc: adc dword ptr [rcx], eax; ret; 
0x0000000000447bdc: adc dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000044672f: adc dword ptr [rdi + 0x10], ebp; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004465bf: adc dword ptr [rdi + 0x10], ecx; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000447be0: adc dword ptr [rdi + 0x20], eax; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000446733: adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000447be4: adc dword ptr [rdi + 0x30], eax; ret; 
0x0000000000446737: adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000419020: adc dword ptr [rdi + 0x58], eax; test rax, rax; je 0x19037; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000418eea: adc dword ptr [rdi + 0xa0], eax; ret; 
0x0000000000436d68: adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446235: adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000041802c: adc dword ptr [rdi + 8], eax; ret; 
0x0000000000417ff1: adc dword ptr [rdi + 8], ecx; ret; 
0x0000000000447aed: adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004468e5: adc dword ptr [rdi + rdx - 0x10], ebx; ret; 
0x0000000000446477: adc dword ptr [rdi + rdx - 0x10], ecx; ret; 
0x00000000004465c3: adc dword ptr [rdi + rdx - 0x10], edx; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044661c: adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000446621: adc dword ptr [rdi + rdx - 0x20], ebp; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004465c8: adc dword ptr [rdi + rdx - 0x20], ebx; ret; 
0x00000000004468e0: adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x00000000004468db: adc dword ptr [rdi + rdx - 0x30], ecx; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000446626: adc dword ptr [rdi + rdx - 0x30], esi; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004468d6: adc dword ptr [rdi + rdx - 0x40], eax; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000044662b: adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000447b76: adc dword ptr [rdi - 0x10], eax; ret; 
0x0000000000447b72: adc dword ptr [rdi - 0x20], eax; movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000437228: adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043722f: adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000437236: adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043723d: adc dword ptr [rdi - 8], edi; ret; 
0x000000000043e95b: adc dword ptr [rdi], 0x148b0006; xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000488464: adc dword ptr [rdi], eax; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x43e70], 0; ret; 
0x0000000000447bd9: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004465bc: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044672c: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000446474: adc dword ptr [rdi], eax; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447af2: adc dword ptr [rdi], eax; ret; 
0x0000000000436d62: adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000445720: adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000044622f: adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446250: adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x00000000004466c4: adc dword ptr [rdx + 0x10], edi; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004466c0: adc dword ptr [rdx + 0x20], esi; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000473b0b: adc dword ptr [rdx + 0x30], eax; mov dword ptr [rbx + 0x74], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x00000000004466bc: adc dword ptr [rdx + 0x30], ebp; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000044673c: adc dword ptr [rdx + rdi - 0x10], eax; ret; 
0x00000000004466c9: adc dword ptr [rdx], eax; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000454073: adc dword ptr [rip + 0x78287], eax; ret; 
0x0000000000454063: adc dword ptr [rip + 0x782a7], eax; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x78287], xmm0; ret; 
0x000000000048a1d0: adc dword ptr [rsi + 0x18], esp; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000042a155: adc dword ptr [rsi + 0xf000003], -0x4a; add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000004460a7: adc dword ptr [rsi + 0xf], esp; outsd dx, dword ptr [rsi]; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rax], al; ret 0xf66; 
0x0000000000446375: adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000044637c: adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446383: adc dword ptr [rsi + 3], edx; ret; 
0x0000000000446412: adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446419: adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446420: adc dword ptr [rsi + 7], edx; ret; 
0x0000000000446222: adc dword ptr [rsi - 1], edx; ret; 
0x000000000044621b: adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446214: adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044620d: adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000488230: adc dword ptr [rsi], eax; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x000000000044636f: adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000043c196: adc dword ptr es:[rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004573c5: adc eax, 0; xor r8d, r8d; xor ecx, ecx; xor edx, edx; push rax; call rbx; 
0x0000000000422e2a: adc eax, 0x11321; cmovne rax, rdx; ret; 
0x000000000048869d: adc eax, 0x11e; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x000000000047782c: adc eax, 0x15cf; lea rax, [rip + 0x18c8]; cmove rax, rdx; ret; 
0x000000000042318d: adc eax, 0x164be; cmovne rax, rdx; ret; 
0x0000000000423378: adc eax, 0x1bd03; lea rax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x0000000000422358: adc eax, 0x1d303; lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223c8: adc eax, 0x1d413; lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x00000000004221e6: adc eax, 0x1de35; cmovne rax, rdx; ret; 
0x0000000000423106: adc eax, 0x1e6c5; cmovne rax, rdx; ret; 
0x0000000000497213: adc eax, 0x20478b48; test rax, rax; je 0x97224; call rax; 
0x0000000000452c0e: adc eax, 0x20c48348; pop rbx; pop rbp; pop r12; ret; 
0x0000000000422d48: adc eax, 0x21653; cmovne rax, rdx; ret; 
0x00000000004220ea: adc eax, 0x21f91; cmovne rax, rdx; ret; 
0x0000000000423255: adc eax, 0x231f6; lea rax, [rip + 0x232df]; cmove rax, rdx; ret; 
0x0000000000423075: adc eax, 0x233c6; lea rax, [rip + 0x2347f]; cmove rax, rdx; ret; 
0x0000000000422e65: adc eax, 0x235e6; lea rax, [rip + 0x236cf]; cmove rax, rdx; ret; 
0x0000000000423295: adc eax, 0x23836; lea rax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230b5: adc eax, 0x23a06; lea rax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422ea5: adc eax, 0x23c26; lea rax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x000000000042223d: adc eax, 0x23e1e; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x000000000042323d: adc eax, 0x2400e; lea rax, [rip + 0x24077]; cmove rax, rdx; ret; 
0x0000000000488b7a: adc eax, 0x24048b49; pop rbx; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x000000000042305d: adc eax, 0x241de; lea rax, [rip + 0x24227]; cmove rax, rdx; ret; 
0x0000000000422e4d: adc eax, 0x243fe; lea rax, [rip + 0x24467]; cmove rax, rdx; ret; 
0x0000000000422f24: adc eax, 0x24c17; lea rax, [rip + 0x24b90]; cmovne rax, rdx; ret; 
0x0000000000422f06: adc eax, 0x24d55; lea rax, [rip + 0x24dae]; cmove rax, rdx; ret; 
0x0000000000422f64: adc eax, 0x24eb7; cmove rax, rdx; ret; 
0x00000000004231db: adc eax, 0x25530; lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000422ffb: adc eax, 0x25700; lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000422deb: adc eax, 0x25920; lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000422f74: adc eax, 0x25f27; lea rax, [rip + 0x25f80]; cmove rax, rdx; ret; 
0x000000000047d54a: adc eax, 0x268fe801; cli; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x0000000000422cfc: adc eax, 0x27edf; lea rax, [rip + 0x2ac38]; cmove rax, rdx; ret; 
0x0000000000423275: adc eax, 0x27f56; lea rax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x0000000000423095: adc eax, 0x28126; lea rax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e85: adc eax, 0x28346; lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x000000000042331c: adc eax, 0x288bf; lea rax, [rip + 0x2a918]; cmove rax, rdx; ret; 
0x0000000000422fa0: adc eax, 0x28a7b; lea rax, [rip + 0x28ad4]; cmove rax, rdx; ret; 
0x0000000000422166: adc eax, 0x2935; cmovne rax, rdx; ret; 
0x0000000000493129: adc eax, 0x39912; cmp byte ptr [rdx + rsi], 8; jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x000000000048892f: adc eax, 0x440c4; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000433f55: adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433f50: adc eax, 0x477f0ff3; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004533a7: adc eax, 0x4800072e; shl eax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x78ebe], rax; lea rax, [rip + 0x78eaf]; ret; 
0x0000000000423180: adc eax, 0x4802e680; lea eax, [rip + 0x14275]; lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x000000000042244d: adc eax, 0x4802e680; lea eax, [rip + 0x3cf8]; lea rdx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x0000000000422d3b: adc eax, 0x4802e680; lea eax, [rip + 0x827a]; lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x0000000000477890: adc eax, 0x4804e580; lea eax, [rip - 0x2fdfb]; lea rdx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x000000000042ad8a: adc eax, 0x48c7ff48; add eax, edi; vzeroupper; ret; 
0x0000000000403082: adc eax, 0x53a89; call 0x54c70; mov rsi, rbp; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x000000000042245a: adc eax, 0x5551; cmovne rax, rdx; ret; 
0x000000000043e9a8: adc eax, 0x61733; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043e98e: adc eax, 0x6174d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000464f89: adc eax, 0x61aaa; cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x000000000043d328: adc eax, 0x62db3; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043d30e: adc eax, 0x62dcd; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b778: adc eax, 0x64963; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b75e: adc eax, 0x6497d; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047780f: adc eax, 0x64c; lea rax, [rip + 0x295]; cmove rax, rdx; ret; 
0x00000000004395fe: adc eax, 0x66add; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004533a6: adc eax, 0x72e15; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x78ebe], rax; lea rax, [rip + 0x78eaf]; ret; 
0x00000000004532f6: adc eax, 0x72ec5; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x53310; ret; 
0x000000000045353e: adc eax, 0x73e45; mov qword ptr [rdi + 0x460], rdx; add rsp, 8; ret; 
0x00000000004232ff: adc eax, 0x7b4c; lea rax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x0000000000422cdf: adc eax, 0x7e9c; lea rax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x0000000000490e36: adc eax, 0x80003bc; ret; 
0x000000000044674e: adc eax, 0x80bc5; jae 0x46760; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000043bd21: adc eax, 0x83480000; ret 0xe910; 
0x0000000000410d75: adc eax, 0x89066; add rax, rdx; ret; 
0x000000000044fbb4: adc eax, 0x8948fffb; ret; 
0x000000000047782e: adc eax, 0x8d480000; add eax, 0x18c8; cmove rax, rdx; ret; 
0x000000000041b7c9: adc eax, 0xa9ffa; ret; 
0x000000000044e388: adc eax, 0xaa3; cmovne rax, rdx; ret; 
0x0000000000419f11: adc eax, 0xae29a; jne 0x19f30; mov qword ptr [rip + 0xae299], rbx; add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x0000000000476528: adc eax, 0xba3; lea rax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x000000000044c96a: adc eax, 0xbc0f48f3; iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000477778: adc eax, 0xc73; cmovne rax, rdx; ret; 
0x0000000000401c85: adc eax, 0xca5d6; mov edi, dword ptr [rsp + 0x14]; mov rsi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000047832a: adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000042321a: adc eax, 0xe441; cmovne rax, rdx; ret; 
0x000000000042303a: adc eax, 0xe601; cmovne rax, rdx; ret; 
0x000000000045cb5e: adc eax, 0xf7000005; ret 0; 
0x0000000000475dea: adc eax, 0xfb894853; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000047789d: adc eax, 0xfffd039e; cmove rax, rdx; ret; 
0x00000000004778b5: adc eax, 0xfffd4146; lea rax, [rip - 0x2fac1]; cmovne rax, rdx; ret; 
0x0000000000422c7d: adc eax, 0xfffffc9e; lea rax, [rip + 0x22e87]; cmove rax, rdx; ret; 
0x0000000000416a25: adc eax, dword ptr [eax]; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000044e3c4: adc eax, dword ptr [rax]; add bh, dh; ret 0; 
0x000000000040f415: adc eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; je 0xf440; cmp byte ptr [rcx + rcx*4 - 6], cl; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x0000000000416a26: adc eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000043d61e: adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000049404c: adc eax, dword ptr [rbp + 0x31]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x0000000000487edd: adc eax, eax; ret; 
0x0000000000488016: adc eax, edx; pop rbp; pop rbx; ret; 
0x00000000004883b0: adc ebx, ebp; mov ebp, 0x8ec8348; call 0x1aaa0; xor eax, eax; add rsp, 8; ret; 
0x0000000000491d12: adc ecx, dword ptr [rax + 0x63]; ret 0xbc80; 
0x0000000000493dc5: adc ecx, dword ptr [rax - 0x75]; add al, 0x24; mov rdi, r15; mov rsi, qword ptr [r14]; call rax; 
0x00000000004188fc: adc ecx, dword ptr [rax - 0x75]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000046a340: adc ecx, dword ptr [rax - 0x77]; ret 0xc148; 
0x000000000040aad9: adc ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000482a6d: adc ecx, dword ptr [rbx + rcx*4 + 0x3b]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000045424c: adc ecx, dword ptr [rcx + rcx*4 + 0x48]; mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x00000000004016dc: adc edi, dword ptr [rax]; test rax, rax; je 0x16f0; mov edi, 0x4c6ae0; jmp rax; 
0x000000000042c226: adc edi, dword ptr [rsi]; jmp rdx; 
0x000000000046212f: adc edi, edi; jmp qword ptr [rsi + 0x66]; 
0x000000000048708a: adc edx, eax; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000048d735: adc edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x00000000004223c9: adc edx, esp; add dword ptr [rax], eax; lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x00000000004370cc: adc qword ptr [rcx + 5], rbp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004370d3: adc qword ptr [rcx + 6], rsi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004370da: adc qword ptr [rcx + 7], rdi; ret; 
0x0000000000436d75: adc qword ptr [rcx - 1], rbx; ret; 
0x0000000000436d39: adc qword ptr [rcx - 1], rdi; ret; 
0x0000000000436d6e: adc qword ptr [rcx - 2], rdx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436f6c: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d32: adc qword ptr [rcx - 2], rsi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436f65: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d2b: adc qword ptr [rcx - 3], rbp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436f5e: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d24: adc qword ptr [rcx - 4], rsp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436d67: adc qword ptr [rdi + 1], rcx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446234: adc qword ptr [rdi + 1], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000437227: adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043722e: adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000437235: adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043723c: adc qword ptr [rdi - 8], rdi; ret; 
0x0000000000436d61: adc qword ptr [rdi], rax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x000000000044622e: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044624f: adc qword ptr [rdi], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446374: adc qword ptr [rsi + 1], rdx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000044637b: adc qword ptr [rsi + 2], rdx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446382: adc qword ptr [rsi + 3], rdx; ret; 
0x0000000000446411: adc qword ptr [rsi + 5], rdx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446418: adc qword ptr [rsi + 6], rdx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000044641f: adc qword ptr [rsi + 7], rdx; ret; 
0x0000000000446221: adc qword ptr [rsi - 1], rdx; ret; 
0x000000000044621a: adc qword ptr [rsi - 2], rdx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446213: adc qword ptr [rsi - 3], rdx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044620c: adc qword ptr [rsi - 4], rdx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044636e: adc qword ptr [rsi], rdx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000048d734: adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000484d83: adc r8b, bpl; div byte ptr [rdx]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000044fd45: adc r8b, byte ptr [r8]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000488015: adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000046212e: adc rdi, r15; jmp qword ptr [rsi + 0x66]; 
0x0000000000487089: adc rdx, r8; mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x00000000004170ba: add ah, byte ptr [rax - 0x76b70002]; ret; 
0x000000000040c12a: add ah, byte ptr [rbx]; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004475c0: add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jg 0x475cb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000447516: add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jp 0x4751f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000044637e: add ah, byte ptr [rdx - 0xf]; jl 0x463cb; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000442ed3: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000441713: add ah, byte ptr [rsi - 0x75]; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x00000000004016b4: add ah, dh; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000488698: add al, 0; adc byte ptr [rax - 0x73], cl; adc eax, 0x11e; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000489aae: add al, 0; add al, byte ptr [rax]; add byte ptr [rax], al; test byte ptr [rip + 0x42b09], 0x40; jne 0x89abe; ret; 
0x000000000045cb53: add al, 0; add bh, dh; ret 0; 
0x000000000047bdb2: add al, 0; add byte ptr [rax + 0x39], cl; ret 0xbf77; 
0x0000000000453b83: add al, 0; add byte ptr [rax + 0x39], cl; ret; 
0x00000000004507ca: add al, 0; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000422d7e: add al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x8638; jne 0x22d2d; ret; 
0x0000000000429c77: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e4df: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429ca5: add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000485c15: add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000048aca1: add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x000000000048842e: add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004783b3: add al, 0; add byte ptr [rax], al; ret; 
0x00000000004104f9: add al, 0; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r10; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x00000000004130a3: add al, 0; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000041b79a: add al, 0; add byte ptr [rsi + 1], dh; ret; 
0x0000000000484257: add al, 0; add cl, ch; ret 0xffef; 
0x00000000004686ff: add al, 0; add dh, dh; ret 0xf50; 
0x00000000004805b3: add al, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004806f5: add al, 0; add rsp, 8; ret; 
0x0000000000488932: add al, 0; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000455f99: add al, 0; call 0x44c0; endbr64; lea rax, [rip + 0x702b5]; ret; 
0x000000000045026f: add al, 0; call 0x44c0; nop word ptr cs:[rax + rax]; endbr64; mov eax, 0x18; syscall; 
0x000000000041a9b9: add al, 0; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000403f43: add al, 0; cmp eax, -1; je 0x3ff0; add rsp, 0x98; ret; 
0x00000000004885ff: add al, 0; cmp eax, 1; jg 0x88638; pop rbp; ret; 
0x00000000004806c9: add al, 0; cmp rcx, rdi; je 0x806d8; ret; 
0x0000000000488929: add al, 0; jae 0x88939; mov rdx, qword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000489ab8: add al, 0; jne 0x89abe; ret; 
0x0000000000485be9: add al, 0; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x85c00; ret; 
0x0000000000455f92: add al, 0; lea rdi, [rip + 0x47f4d]; call 0x44c0; endbr64; lea rax, [rip + 0x702b5]; ret; 
0x0000000000454aa7: add al, 0; mov eax, 0x15; syscall; 
0x0000000000482638: add al, 0; mov qword ptr [rdi + 0x458], rcx; test byte ptr [rax + 0x31c], 4; jne 0x82658; or byte ptr [rdi + 0x31d], 0x40; ret; 
0x00000000004805ac: add al, 0; mov qword ptr [rip + 0x4c2fb], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004222f8: add al, 0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000488b18: add al, 0; ret; 
0x000000000045304a: add al, 0x11; ret; 
0x000000000044de08: add al, 0x16; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x4ddf8; ret; 
0x000000000043e98a: add al, 0x17; lea rdx, [rip + 0x6174d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043d30a: add al, 0x17; lea rdx, [rip + 0x62dcd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b75a: add al, 0x17; lea rdx, [rip + 0x6497d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004395fa: add al, 0x17; lea rdx, [rip + 0x66add]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ca15: add al, 0x17; movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x4ca00; sub eax, ecx; ret; 
0x000000000044d50a: add al, 0x17; movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x4d4f0; sub eax, ecx; ret; 
0x0000000000424835: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000425d4c: add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000044c11e: add al, 0x17; ret; 
0x00000000004247ca: add al, 0x17; sub eax, ecx; ret; 
0x000000000044400e: add al, 0x17; vzeroupper; ret; 
0x0000000000414eb8: add al, 0x1e; or eax, dword ptr [rax]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000454f13: add al, 0x24; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000490c43: add al, 0x24; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000004909b7: add al, 0x24; add rsp, 0x38; ret; 
0x00000000004909ae: add al, 0x24; call 0x90d40; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000040a12d: add al, 0x24; call rax; 
0x0000000000493da5: add al, 0x24; mov dword ptr [rsp + 8], ecx; call rax; 
0x0000000000412d46: add al, 0x24; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000040a2b2: add al, 0x24; mov r13, r15; add r15, r14; call rax; 
0x0000000000493dc8: add al, 0x24; mov rdi, r15; mov rsi, qword ptr [r14]; call rax; 
0x000000000040a0a2: add al, 0x24; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000040a24e: add al, 0x24; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000488b7d: add al, 0x24; pop rbx; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x000000000048324b: add al, 0x24; test edx, edx; jne 0x83261; mov qword ptr [rbp - 0xb0], r10; call rax; 
0x0000000000483a22: add al, 0x24; test edx, edx; jne 0x83a2a; call rax; 
0x000000000048311c: add al, 0x24; test esi, esi; jne 0x83124; call rax; 
0x0000000000483aa1: add al, 0x24; test r11d, r11d; jne 0x83ab8; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000048007c: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x000000000047477c: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rax + 0x972], 0; ret; 
0x000000000041b6e7: add al, 0x25; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000464fee: add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000041aa26: add al, 0x25; jb 0x1aa33; add byte ptr [rax], al; cmp eax, 1; je 0x1aa38; ret; 
0x00000000004504e6: add al, 0x25; sbb byte ptr [rax], al; add byte ptr [rax], al; test eax, eax; jne 0x50500; syscall; 
0x0000000000487df4: add al, 0x25; sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x87e75; leave; ret; 
0x0000000000476fce: add al, 0x31; ret; 
0x0000000000476eca: add al, 0x37; ret; 
0x000000000044d352: add al, 0x38; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; ret; 
0x000000000042a329: add al, 0x38; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x0000000000477aa6: add al, 0x39; bnd je 0x77aaf; test edx, edx; jne 0x77aa0; ret; 
0x000000000041c6ed: add al, 0x39; ret; 
0x00000000004192bf: add al, 0x3a; ret; 
0x000000000040ecef: add al, 0x3d; scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rip - 0x76ffffeb], eax; ret 0xc083; 
0x0000000000401a95: add al, 0x44; movzx eax, cl; mov rax, r8; pop rbx; ret; 
0x00000000004439cb: add al, 0x48; lea eax, [rdi + 5]; ret; 
0x0000000000442ec9: add al, 0x48; lea eax, [rdx + 4]; ret; 
0x0000000000442edb: add al, 0x48; lea eax, [rdx + 5]; ret; 
0x00000000004220e0: add al, 0x48; lea eax, [rip + 0x1c8d8]; lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x0000000000477893: add al, 0x48; lea eax, [rip - 0x2fdfb]; lea rdx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x000000000041b7c2: add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0xa9ffa], rdx; ret; 
0x0000000000423375: add al, 0x48; lea edx, [rip + 0x1bd03]; lea rax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x0000000000422355: add al, 0x48; lea edx, [rip + 0x1d303]; lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223c5: add al, 0x48; lea edx, [rip + 0x1d413]; lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x000000000047780c: add al, 0x48; lea edx, [rip + 0x64c]; lea rax, [rip + 0x295]; cmove rax, rdx; ret; 
0x00000000004232fc: add al, 0x48; lea edx, [rip + 0x7b4c]; lea rax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x0000000000422cdc: add al, 0x48; lea edx, [rip + 0x7e9c]; lea rax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x0000000000476525: add al, 0x48; lea edx, [rip + 0xba3]; lea rax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x0000000000433c6a: add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x0000000000453db0: add al, 0x48; mov eax, dword ptr [rdx + rax]; cmp rax, -1; je 0x53dfa; ret; 
0x0000000000441709: add al, 0x48; mov eax, edi; ret; 
0x0000000000433c63: add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000043f438: add al, 0x48; xor eax, eax; ret; 
0x0000000000453df2: add al, 0x4c; cmp eax, dword ptr [rcx + rsi + 0x10]; jae 0x53dad; xor eax, eax; ret; 
0x000000000044df88: add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x0000000000408dfa: add al, 0x5b; ret; 
0x000000000044c30e: add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x0000000000442ed7: add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000441717: add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000436deb: add al, 0x72; or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000447f9c: add al, 0x73; cmp al, byte ptr [rbx + 0x3c7701fa]; jb 0x47f84; mov byte ptr [rax], sil; ret; 
0x0000000000447c0c: add al, 0x73; sbb al, byte ptr [rbx + 0x1c7701fa]; jb 0x47be7; mov byte ptr [rax], sil; ret; 
0x000000000047de34: add al, 0x75; fld dword ptr [rbx + 0x7505087a]; rol dword ptr [rcx + 0x4e470c7a], cl; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000044e3bc: add al, 0x75; mov ecx, 0x58d48c3; cdq; adc eax, dword ptr [rax]; add bh, dh; ret 0; 
0x00000000004777ac: add al, 0x75; mov ecx, 0x58d48c3; leave; adc al, 0; add bh, dh; ret 0; 
0x000000000045c549: add al, 0x77; ret 0x3948; 
0x000000000044de12: add al, 0x81; je 0x4ddf8; ret; 
0x000000000043ba0b: add al, 0x81; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044de0e: add al, 0x81; sub eax, dword ptr [rcx + r8*4]; je 0x4ddf8; ret; 
0x000000000043d2e3: add al, 0x81; sub eax, edx; ret; 
0x0000000000439607: add al, 0x82; sub eax, ecx; ret; 
0x0000000000477aaa: add al, 0x85; sal byte ptr [rbp - 0xf], cl; ret; 
0x0000000000478e6a: add al, 0x87; cmovle rax, rcx; ret; 
0x0000000000478e3c: add al, 0x87; ret; 
0x0000000000479046: add al, 0x87; vzeroupper; ret; 
0x0000000000442ec6: add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x0000000000441706: add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x0000000000456b3c: add al, 0x88; add eax, 0x75a3d; pop rbx; ret; 
0x000000000046c8a5: add al, 0x89; adc dword ptr [rax + 0x39], ecx; ret; 
0x000000000040c790: add al, 0x89; ret 0x9d89; 
0x0000000000418577: add al, 0xa8; add dword ptr [rsp - 0x77], esi; ret 0xc883; 
0x000000000048d35c: add al, 0xd0; mov rsi, qword ptr [rax + 8]; call 0x54de0; nop word ptr [rax + rax]; ret; 
0x0000000000466f5e: add al, 0xd1; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000046313c: add al, 0xd8; test rax, rax; je 0x63145; call rax; 
0x0000000000496f35: add al, 0xd8; test rax, rax; je 0x96f3e; call rax; 
0x0000000000463131: add al, 0xde; lea rax, [rip + 0x61ae6]; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x63145; call rax; 
0x0000000000433fd3: add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000410d4a: add al, 0xf8; ret; 
0x000000000042c096: add al, 0xf; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x0000000000429286: add al, 0xf; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000045c58f: add al, 0xf; xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x1676; 
0x000000000045d43c: add al, 0xf; xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x1776; 
0x000000000045f083: add al, 0xf; xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x876; 
0x0000000000460877: add al, 0xf; xchg esi, esp; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x3676; 
0x00000000004756a1: add al, 1; je 0x755e8; xor eax, eax; ret; 
0x000000000047594f: add al, 1; je 0x758fe; mov eax, 0x83; ret; 
0x0000000000401e23: add al, 2; add byte ptr [rax], al; mov qword ptr [rip + 0xca552], rax; pop rbx; ret; 
0x000000000043f067: add al, 2; cmovne rax, rcx; vzeroupper; ret; 
0x0000000000449407: add al, 2; cmovne rax, rcx; xtest; je 0x49416; vzeroall; ret; 
0x0000000000453db3: add al, 2; cmp rax, -1; je 0x53dfa; ret; 
0x00000000004533b1: add al, 2; mov qword ptr [rip + 0x78ebe], rax; lea rax, [rip + 0x78eaf]; ret; 
0x000000000041bfe9: add al, 5; add byte ptr [rax - 0x7d], cl; ret; 
0x000000000044ac4a: add al, 7; cmovle rax, rcx; ret; 
0x000000000042abea: add al, 7; cmovle rax, rcx; vzeroupper; ret; 
0x000000000043ea11: add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000043ec3c: add al, 7; ret; 
0x000000000042b8f1: add al, 7; sub eax, ecx; ret; 
0x000000000042b4aa: add al, 7; sub eax, ecx; vzeroupper; ret; 
0x00000000004483aa: add al, 7; sub eax, ecx; xtest; je 0x483b7; vzeroall; ret; 
0x000000000042499f: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000425ec9: add al, 8; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000422f2d: add al, byte ptr [r8]; cmovne rax, rdx; ret; 
0x000000000042305f: add al, byte ptr [r8]; lea rax, [rip + 0x24227]; cmove rax, rdx; ret; 
0x0000000000422e4f: add al, byte ptr [r8]; lea rax, [rip + 0x24467]; cmove rax, rdx; ret; 
0x00000000004505e1: add al, byte ptr [r8]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000043ff11: add al, byte ptr [rax + rax*8 - 0xb7ed8c]; ret 0x2288; 
0x000000000045cb47: add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x000000000047bc4d: add al, byte ptr [rax]; add byte ptr [rax + 0x29], cl; ret; 
0x000000000041562c: add al, byte ptr [rax]; add byte ptr [rax + 0x40c6c749], dl; imul ecx, dword ptr [rax + rax + 0x48], -0x39; ret; 
0x00000000004540c4: add al, byte ptr [rax]; add byte ptr [rax + 0xda], bh; syscall; 
0x000000000042a6b2: add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000042a26a: add al, byte ptr [rax]; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000046bca8: add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x0000000000401e24: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; add eax, 0xca552; pop rbx; ret; 
0x000000000047a16e: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; fucomip st(0); pop rdx; cli; jmp qword ptr [rsi + 0x48]; 
0x000000000041e912: add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000429e57: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d0a1: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429e85: add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000464f76: add al, byte ptr [rax]; add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x00000000004880fd: add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x000000000041aac1: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000041ad3a: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x0000000000414951: add al, byte ptr [rax]; add byte ptr [rax], al; mov eax, r9d; syscall; 
0x000000000041aa5b: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000048471e: add al, byte ptr [rax]; add byte ptr [rax], al; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000475d52: add al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000000478393: add al, byte ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000489ab0: add al, byte ptr [rax]; add byte ptr [rax], al; test byte ptr [rip + 0x42b09], 0x40; jne 0x89abe; ret; 
0x00000000004527ff: add al, byte ptr [rax]; add byte ptr [rax], al; test eax, eax; cmove eax, edx; add rsp, 8; ret; 
0x0000000000474f1c: add al, byte ptr [rax]; add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xef; mov eax, r13d; syscall; 
0x000000000045cb3f: add al, byte ptr [rax]; add byte ptr [rbp - 0x1f77f02e], al; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x000000000041ef96: add al, byte ptr [rax]; add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x0000000000445724: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000408a04: add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0fe08], al; ret 2; 
0x000000000048bbff: add al, byte ptr [rax]; add byte ptr [rcx + 0x248b4ce8], cl; ret 0xf41; 
0x0000000000487af3: add al, byte ptr [rax]; add byte ptr [rcx - 0x73], cl; or byte ptr [r8 + 0x39], r9b; ret; 
0x000000000041b388: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x6974; 
0x000000000041afc4: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x840f; 
0x000000000047581f: add al, byte ptr [rax]; add byte ptr [rcx], bh; ret 0x850f; 
0x0000000000484643: add al, byte ptr [rax]; add byte ptr [rsi + 0x48], ah; movd mm0, esi; punpcklqdq xmm0, xmm2; movups xmmword ptr [rax + 0x308], xmm0; ret; 
0x000000000046741a: add al, byte ptr [rax]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; adc dword ptr [rax - 0xdf6b], ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000422ee8: add al, byte ptr [rax]; add dh, dh; ret 0x7420; 
0x0000000000411206: add al, byte ptr [rax]; add dh, dh; ret 0x7504; 
0x0000000000474abf: add al, byte ptr [rax]; call 0x14cc0; nop word ptr cs:[rax + rax]; neg eax; ret; 
0x0000000000422c87: add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x00000000004220ed: add al, byte ptr [rax]; cmovne rax, rdx; ret; 
0x0000000000490db2: add al, byte ptr [rax]; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x000000000044c0f8: add al, byte ptr [rax]; lea rax, [rdi + 2]; ret; 
0x0000000000443fd8: add al, byte ptr [rax]; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000423258: add al, byte ptr [rax]; lea rax, [rip + 0x232df]; cmove rax, rdx; ret; 
0x0000000000423078: add al, byte ptr [rax]; lea rax, [rip + 0x2347f]; cmove rax, rdx; ret; 
0x0000000000422e68: add al, byte ptr [rax]; lea rax, [rip + 0x236cf]; cmove rax, rdx; ret; 
0x0000000000423298: add al, byte ptr [rax]; lea rax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230b8: add al, byte ptr [rax]; lea rax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422ea8: add al, byte ptr [rax]; lea rax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x0000000000422240: add al, byte ptr [rax]; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x0000000000423240: add al, byte ptr [rax]; lea rax, [rip + 0x24077]; cmove rax, rdx; ret; 
0x0000000000423060: add al, byte ptr [rax]; lea rax, [rip + 0x24227]; cmove rax, rdx; ret; 
0x0000000000422e50: add al, byte ptr [rax]; lea rax, [rip + 0x24467]; cmove rax, rdx; ret; 
0x0000000000422f27: add al, byte ptr [rax]; lea rax, [rip + 0x24b90]; cmovne rax, rdx; ret; 
0x0000000000422f09: add al, byte ptr [rax]; lea rax, [rip + 0x24dae]; cmove rax, rdx; ret; 
0x00000000004231de: add al, byte ptr [rax]; lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000422ffe: add al, byte ptr [rax]; lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000422dee: add al, byte ptr [rax]; lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000422f77: add al, byte ptr [rax]; lea rax, [rip + 0x25f80]; cmove rax, rdx; ret; 
0x0000000000423278: add al, byte ptr [rax]; lea rax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x0000000000423098: add al, byte ptr [rax]; lea rax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e88: add al, byte ptr [rax]; lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x0000000000422fa3: add al, byte ptr [rax]; lea rax, [rip + 0x28ad4]; cmove rax, rdx; ret; 
0x000000000042331f: add al, byte ptr [rax]; lea rax, [rip + 0x2a918]; cmove rax, rdx; ret; 
0x0000000000422cff: add al, byte ptr [rax]; lea rax, [rip + 0x2ac38]; cmove rax, rdx; ret; 
0x0000000000422f60: add al, byte ptr [rax]; lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x0000000000480e54: add al, byte ptr [rax]; mov eax, 0x59; mov rbp, rsp; mov rsi, rbp; syscall; 
0x00000000004626af: add al, byte ptr [rax]; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000045053f: add al, byte ptr [rax]; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000454ff8: add al, byte ptr [rax]; nop word ptr [rax + rax]; ret; 
0x000000000044cec8: add al, byte ptr [rax]; ret; 
0x0000000000423125: add al, byte ptr [rax]; test ch, 4; jne 0x230ea; ret; 
0x0000000000422125: add al, byte ptr [rax]; test edx, 0x40000000; je 0x22101; ret; 
0x0000000000422375: add al, byte ptr [rax]; test edx, 0x40000000; je 0x22347; ret; 
0x00000000004223e5: add al, byte ptr [rax]; test edx, 0x40000000; je 0x223b7; ret; 
0x0000000000423395: add al, byte ptr [rax]; test edx, 0x40000000; je 0x23367; ret; 
0x000000000043fdb8: add al, byte ptr [rax]; vzeroupper; ret; 
0x0000000000490833: add al, byte ptr [rax]; xor edx, edx; xor esi, esi; xor edi, edi; call 0x54de0; call rax; 
0x0000000000478012: add al, byte ptr [rbp - 0x7c968a40]; ret 0xf40; 
0x000000000048d226: add al, byte ptr [rbx - 0x1f7cfc1a]; add eax, dword ptr [rbx - 0x6bf0fe02]; ret 0xf883; 
0x00000000004115e2: add al, byte ptr [rcx - 0x77]; ret 0xe883; 
0x0000000000407a23: add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000478326: add al, byte ptr [rdx + rdx*8 - 0x2e77ea8c]; and cl, 0xf; je 0x78350; ret; 
0x0000000000488163: add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x0000000000422c86: add al, byte ptr cs:[rax]; cmove rax, rdx; ret; 
0x000000000042223f: add al, byte ptr ds:[rax]; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x0000000000422e6e: add al, byte ptr ss:[rax]; cmove rax, rdx; ret; 
0x00000000004170b8: add al, ch; add ah, byte ptr [rax - 0x76b70002]; ret; 
0x00000000004749c8: add al, ch; add bh, dl; jmp qword ptr [rsi - 0x70]; 
0x000000000041436f: add al, ch; add r15, rdi; jmp qword ptr [rsi + 0x66]; 
0x000000000040e9eb: add al, ch; call rdi; 
0x000000000041e48b: add al, ch; call rsp; 
0x00000000004972be: add al, ch; cld; sal esi, 1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000474ac0: add al, ch; cli; add edx, edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004581c0: add al, ch; cli; ret 0xfffa; 
0x0000000000403086: add al, ch; in al, 0x1b; add eax, 0xee894800; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x000000000047e8ce: add al, ch; in al, dx; pop rbx; clc; jmp qword ptr [rsi + 0x66]; 
0x000000000047e86e: add al, ch; insb byte ptr [rdi], dx; std; jmp qword ptr [rsi - 0x7f]; 
0x000000000045b543: add al, ch; ja 0x5b4d6; cli; inc dword ptr [rcx - 0x77]; ret 0x29e9; 
0x0000000000484748: add al, ch; jb 0x84751; stc; jmp qword ptr [rsi - 0x70]; 
0x000000000044e944: add al, ch; jbe 0x4e9ab; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000046d894: add al, ch; je 0x6d893; jmp qword ptr [rsi + 0xf]; 
0x0000000000475c3c: add al, ch; jle 0x75c28; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000048b46b: add al, ch; jmp qword ptr [rcx - 1]; 
0x000000000044ff41: add al, ch; jns 0x4ff8a; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000047cb6c: add al, ch; jns 0x7cb69; jmp qword ptr [rsi + 0xf]; 
0x000000000041f45b: add al, ch; lahf; ret; 
0x0000000000453bf1: add al, ch; leave; or bl, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000042025c: add al, ch; mov bh, 0xff; jmp qword ptr [rsi + 0x66]; 
0x0000000000476178: add al, ch; mov dl, 0xae; cli; dec dword ptr [rax - 0x77]; ret; 
0x000000000046442c: add al, ch; mov es, word ptr [rax]; cli; jmp qword ptr [rsi + 0x66]; 
0x00000000004609d4: add al, ch; out 0x3a, al; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000042049c: add al, ch; out dx, al; mov ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000040cc61: add al, ch; pop rcx; js 0xcc65; jmp qword ptr [rsi + 0xf]; 
0x000000000044ed60: add al, ch; pop rdx; push rdi; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000045745c: add al, ch; pop rsi; sar dl, 1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000403fda: add al, ch; push rax; ret; 
0x000000000045f165: add al, ch; push rbp; push rbx; cli; dec dword ptr [rbp - 0x77]; ret; 
0x0000000000453e89: add al, ch; push rcx; mov ebp, 0x8948fffc; ret 0x8548; 
0x000000000048558e: add al, ch; pushfq; mov ebx, 0xc748fff7; ret 0xffff; 
0x000000000045d6f8: add al, ch; ret 0xfa6d; 
0x0000000000416917: add al, ch; ret; 
0x000000000041e508: add al, ch; sar bh, cl; jmp qword ptr [rsi - 0x70]; 
0x000000000048ccc1: add al, ch; stc; ja 0x8ccbd; jmp qword ptr [rsi + 0xf]; 
0x0000000000450270: add al, ch; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000450b91: add al, ch; sub dword ptr [rcx], edi; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000048c06e: add al, ch; test dil, r14b; jmp qword ptr [rsi + 0x66]; 
0x000000000048b290: add al, ch; wait; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000460934: add al, ch; xchg byte ptr [rbx], bh; cli; dec dword ptr [rcx - 0x77]; dec dword ptr [rbp - 0x77]; ret 0xc1e9; 
0x0000000000488376: add al, dh; cmpxchg dword ptr [rdi], edx; jne 0x883b3; xor eax, eax; ret; 
0x0000000000488161: add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x000000000041fb7f: add bh, al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x3d74; 
0x000000000046fb61: add bh, al; and al, 0x50; and byte ptr [rax], al; add byte ptr [rax], al; jmp rdx; 
0x000000000046fb59: add bh, al; and al, 0x54; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsp + 0x50], 0x20; jmp rdx; 
0x000000000040eaeb: add bh, al; and al, 0x58; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rsp + 0x40], 0x20; jmp rdx; 
0x000000000046df1b: add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000040d43c: add bh, al; test dword ptr [rax], edx; idiv edi; call qword ptr [rax]; 
0x0000000000467e1c: add bh, al; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000040aad7: add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000045cb59: add bh, bh; dec dword ptr [rdi]; test byte ptr [rip - 0x8fffffb], dl; ret 0; 
0x00000000004031ec: add bh, bh; idiv esi; jmp qword ptr [rsi + 0xf]; 
0x0000000000403177: add bh, bh; push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000496f3b: add bh, bh; ror byte ptr [rax - 0x7d], 1; ret; 
0x0000000000488148: add bh, byte ptr [rax + 1]; ret; 
0x0000000000409fe9: add bh, byte ptr [rax - 1]; pop rbp; ret; 
0x000000000044fab3: add bh, byte ptr [rax - 1]; ret; 
0x00000000004747e2: add bh, byte ptr [rbp + rax]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x539fe], eax; ret; 
0x0000000000492ea4: add bh, byte ptr [rdi + 1]; call rax; 
0x0000000000477898: add bh, ch; dec dword ptr [rax - 0x73]; adc eax, 0xfffd039e; cmove rax, rdx; ret; 
0x000000000044dd2f: add bh, ch; jmp qword ptr [rsi + 0x66]; 
0x000000000047786e: add bh, ch; push rsi; ret 0x7420; 
0x00000000004958eb: add bh, dh; jmp qword ptr [rsi - 0x70]; 
0x00000000004034fc: add bh, dh; ret 0; 
0x000000000044ffcc: add bh, dh; ret 0x67; 
0x000000000045cb49: add bh, dh; ret 0xf800; 
0x000000000047e2c1: add bh, dh; ret; 
0x00000000004749cb: add bh, dl; jmp qword ptr [rsi - 0x70]; 
0x000000000047a548: add bl, byte ptr [rbx + 0x4c]; mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x00000000004943bd: add bl, byte ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000047a547: add bl, byte ptr gs:[rbx + 0x4c]; mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x0000000000414474: add bl, ch; ret 0x4e8; 
0x000000000040a73d: add bl, ch; ret 0x55bf; 
0x000000000045242d: add bl, ch; sub dword ptr [rax - 0x77], ecx; ret 0xabe; 
0x0000000000480e52: add bl, dh; add al, byte ptr [rax]; mov eax, 0x59; mov rbp, rsp; mov rsi, rbp; syscall; 
0x000000000044c206: add bl, dh; bsf eax, eax; add rax, rdi; cmp sil, byte ptr [rax]; jne 0x4c231; ret; 
0x000000000044ac15: add bl, dh; bsf eax, eax; add rax, rdi; ret; 
0x000000000042abb5: add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000043f22f: add bl, dh; bsf eax, eax; add rdi, -0x80; add rax, rdi; vzeroupper; ret; 
0x000000000043fa9f: add bl, dh; bsf eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000044c25f: add bl, dh; bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x4c231; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c3df: add bl, dh; bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x4c3d9; lea rax, [rdi + rax]; ret; 
0x000000000042adaf: add bl, dh; bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044f0ef: add bl, dh; bsf eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x000000000044f0cf: add bl, dh; bsf eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x000000000044f7df: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x000000000044f7cf: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000044d70f: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000044d6ff: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000044d6ef: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x61]; ret; 
0x000000000044d6df: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x000000000044f7ef: add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000044c4ef: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044ae1f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000044ac8f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044ac9f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044acaf: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044db7f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0xa0]; ret; 
0x000000000044db8f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0xc0]; ret; 
0x000000000044bd4f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax - 0x60]; vzeroupper; ret; 
0x0000000000478eaf: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000478ebf: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000478ecf: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000478edf: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000047936f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0xa0]; ret; 
0x000000000047937f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0xc0]; ret; 
0x0000000000478e35: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000047903f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000044c65f: add bl, dh; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000044f09a: add bl, dh; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000043f86f: add bl, dh; bsf eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x000000000043f85f: add bl, dh; bsf eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x000000000043f83f: add bl, dh; bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000000044cfbf: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000044cfcf: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x000000000044cfdf: add bl, dh; bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000042ae3f: add bl, dh; bsf eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042af9f: add bl, dh; bsf eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000044d8bf: add bl, dh; bsf eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d8cf: add bl, dh; bsf eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044f9df: add bl, dh; bsf eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044f9bf: add bl, dh; bsf eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000490db3: add bl, dh; divps xmm0, xmmword ptr [rip + 0x239e8]; ret; 
0x000000000044344f: add bl, dh; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044346f: add bl, dh; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004434ef: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004434af: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004434cf: add bl, dh; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044358f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000443adf: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x000000000044343f: add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044c25e: add bl, sil; bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x4c231; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c3de: add bl, sil; bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x4c3d9; lea rax, [rdi + rax]; ret; 
0x000000000044d6ee: add bl, sil; bsf eax, eax; lea eax, [rcx + rax - 0x61]; ret; 
0x000000000047904e: add bl, sil; bsf eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000044aeae: add bl, sil; bsf eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000047903e: add bl, sil; bsf eax, eax; lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000043f83e: add bl, sil; bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000000044d8be: add bl, sil; bsf eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044f9de: add bl, sil; bsf eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044344e: add bl, sil; movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044346e: add bl, sil; movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004434ee: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004434ce: add bl, sil; movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000047804e: add bpl, al; std; xlatb; rol dword ptr [rbp - 0x3aa78a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000475d50: add byte ptr [r10], r8b; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; mov eax, 0xca; syscall; 
0x0000000000479dbf: add byte ptr [r13 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000474f86: add byte ptr [r14 + rdi - 0x77], r14b; ret 0x48e9; 
0x0000000000450f16: add byte ptr [r14 + rsi + 0x44], sil; mov edx, eax; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000419a55: add byte ptr [r8 - 0x77], r9b; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x0000000000411cec: add byte ptr [r8 - 0x77], r9b; pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x000000000047f10f: add byte ptr [r8 - 0x77], r9b; ret 0x314c; 
0x0000000000495f4f: add byte ptr [rax + 0x107550fa], al; xor eax, eax; ret; 
0x00000000004442ce: add byte ptr [rax + 0x1478d48], dl; ret; 
0x0000000000454aa8: add byte ptr [rax + 0x15], bh; syscall; 
0x000000000047492f: add byte ptr [rax + 0x16], bh; ret; 
0x000000000041dc4d: add byte ptr [rax + 0x1c840f01], ch; or byte ptr [rax], al; add byte ptr [rcx - 0x73], cl; dec dword ptr [r9 - 0x7b]; ret; 
0x000000000048805a: add byte ptr [rax + 0x21], cl; ret 0xc148; 
0x000000000047be28: add byte ptr [rax + 0x29], cl; ret 0x8b4c; 
0x000000000047f947: add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x000000000047bc89: add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x0000000000401c03: add byte ptr [rax + 0x29], cl; ret; 
0x000000000047c69c: add byte ptr [rax + 0x29], cl; ror byte ptr [rbp + rcx*4 + 0x34], 1; ret; 
0x000000000047948b: add byte ptr [rax + 0x39480000], al; ret; 
0x0000000000451041: add byte ptr [rax + 0x39], cl; clc; jb 0x51050; xor eax, eax; ret; 
0x0000000000493d4c: add byte ptr [rax + 0x39], cl; or byte ptr [rdi + 2], r14b; sbb eax, eax; ret; 
0x000000000045f05f: add byte ptr [rax + 0x39], cl; ret 0x3676; 
0x000000000041fb85: add byte ptr [rax + 0x39], cl; ret 0x3d74; 
0x0000000000415547: add byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000047bdb4: add byte ptr [rax + 0x39], cl; ret 0xbf77; 
0x000000000041d0af: add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x0000000000456d44: add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000040c12d: add byte ptr [rax + 0x39], cl; ret; 
0x000000000047d530: add byte ptr [rax + 0x39], cl; retf 0xf48; ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x000000000047430e: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x14], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041926e: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x1c], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004186bb: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x27], 1; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000474270: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x2a], 1; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004191db: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x2f], 1; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000412522: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x31], 1; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x0000000000412708: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x3c], 1; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004736fb: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x3f], 1; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000411e3f: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x4b], 1; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000418065: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x5d], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000418605: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x65], 1; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000418750: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0x6a], 1; movzx esi, byte ptr [r14]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000041815b: add byte ptr [rax + 0x39], cl; sal byte ptr [rsi + 0xf], 1; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004806ca: add byte ptr [rax + 0x39], cl; stc; je 0x806d8; ret; 
0x00000000004152ac: add byte ptr [rax + 0x39], r9b; ret; 
0x000000000047430d: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x14], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041926d: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x1c], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004186ba: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x27], 1; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000047426f: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x2a], 1; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004191da: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x2f], 1; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000412521: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x31], 1; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x0000000000412707: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x3c], 1; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004736fa: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x3f], 1; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000411e3e: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x4b], 1; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000418064: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x5d], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000418604: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x65], 1; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000041874f: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0x6a], 1; movzx esi, byte ptr [r14]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000041815a: add byte ptr [rax + 0x39], r9b; sal byte ptr [rsi + 0xf], 1; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041562e: add byte ptr [rax + 0x40c6c749], dl; imul ecx, dword ptr [rax + rax + 0x48], -0x39; ret; 
0x0000000000450e11: add byte ptr [rax + 0x48], bh; syscall; 
0x0000000000480e55: add byte ptr [rax + 0x59], bh; mov rbp, rsp; mov rsi, rbp; syscall; 
0x00000000004635f8: add byte ptr [rax + 0x63], cl; ret 0x8948; 
0x000000000040bea4: add byte ptr [rax + 0x63], cl; ret; 
0x000000000040f6b5: add byte ptr [rax + 0x63], cl; ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd6; jmp rdx; 
0x000000000048e503: add byte ptr [rax + 0x74], ah; sub dword ptr [rax - 0x75], ecx; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000043ff0f: add byte ptr [rax + 0x74c08402], cl; adc cl, byte ptr [rax - 1]; ret 0x2288; 
0x0000000000422f54: add byte ptr [rax + 0x75], al; fadd qword ptr [rax - 0x72b7fd1a]; add eax, 0x24f1e; lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x000000000044396f: add byte ptr [rax + 0x78d4837], cl; ret; 
0x0000000000403093: add byte ptr [rax + 0x9e], bh; syscall; 
0x000000000041ad9f: add byte ptr [rax + 0xba], bh; syscall; 
0x000000000041aa63: add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000475da6: add byte ptr [rax + 0xca], bh; syscall; cmp rax, -0x1000; ja 0x75dc0; ret; 
0x000000000041ab20: add byte ptr [rax + 0xca], bh; syscall; ret; 
0x000000000041aac4: add byte ptr [rax + 0xca], bh; xor sil, 0x80; syscall; 
0x00000000004652fb: add byte ptr [rax + 0xd], bh; syscall; 
0x00000000004540c6: add byte ptr [rax + 0xda], bh; syscall; 
0x000000000044fa97: add byte ptr [rax + 0xe4], bh; syscall; 
0x000000000041acef: add byte ptr [rax + 0xe], bh; syscall; 
0x0000000000476e29: add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000459217: add byte ptr [rax + 0xf], cl; mov esi, 0x83480142; ret 0x4101; 
0x000000000040aeef: add byte ptr [rax + 0xf], cl; mov esi, 0x83480143; ret; 
0x000000000041a9ba: add byte ptr [rax + 0xf], cl; sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x0000000000488674: add byte ptr [rax + 0xf], cl; scasd eax, dword ptr [rdi]; ror dword ptr [rax - 0x73], 0x84; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000044d6cf: add byte ptr [rax + 0xf], cl; stosd dword ptr [rdi], eax; tzcnt eax, eax; ret; 
0x000000000043f82f: add byte ptr [rax + 0xf], cl; stosd dword ptr [rdi], eax; tzcnt eax, eax; vzeroupper; ret; 
0x000000000048815c: add byte ptr [rax + 1], bh; mov dword ptr [rdx], 0xffffc002; ret; 
0x00000000004755c2: add byte ptr [rax + 1], bh; ret; 
0x000000000042a6b4: add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000047c88d: add byte ptr [rax + 1], cl; ret 0xba41; 
0x000000000041db5a: add byte ptr [rax + 1], cl; ret; 
0x00000000004881d2: add byte ptr [rax + 2], bh; ret; 
0x000000000042a26c: add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000041f640: add byte ptr [rax + 9], cl; ret; 
0x0000000000422d7d: add byte ptr [rax + rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x8638; jne 0x22d2d; ret; 
0x000000000041a9b8: add byte ptr [rax + rax], al; cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000451059: add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041ebd9: add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000497020: add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; xor al, ch; ret; 
0x000000000048934f: add byte ptr [rax + rcx*4 + 0x4d], al; ret; 
0x00000000004221fa: add byte ptr [rax - 0x108af71a], al; lea rax, [rip + 0x1d8a9]; test ch, 4; jne 0x221ca; ret; 
0x000000000042311a: add byte ptr [rax - 0x108af71a], al; lea rax, [rip + 0x20ba9]; test ch, 4; jne 0x230ea; ret; 
0x000000000042217a: add byte ptr [rax - 0x108af71a], al; lea rax, [rip + 0x3b89]; test ch, 4; jne 0x2214a; ret; 
0x0000000000467db2: add byte ptr [rax - 0x13b43], al; jmp qword ptr [rsi + 0xf]; 
0x0000000000422107: add byte ptr [rax - 0x198af71a], al; lea rax, [rip + 0x1ccec]; test ch, 4; jne 0x220de; ret; 
0x000000000044e3ad: add byte ptr [rax - 0x218af71a], al; lea rax, [rip + 0xca6]; and ch, 4; jne 0x4e378; ret; 
0x000000000047779d: add byte ptr [rax - 0x218af71a], al; lea rax, [rip + 0xdf6]; and ch, 4; jne 0x77768; ret; 
0x0000000000422d75: add byte ptr [rax - 0x298af71b], al; and esi, 0x400; lea rax, [rip + 0x8638]; jne 0x22d2d; ret; 
0x0000000000419f8e: add byte ptr [rax - 0x39], cl; add eax, 0xae21e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000048d695: add byte ptr [rax - 0x39], cl; ret 0x9f70; 
0x0000000000409fdf: add byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x000000000046bcaa: add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x00000000004224d6: add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000040c3da: add byte ptr [rax - 0x39], cl; ret; 
0x000000000047839f: add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000004783df: add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000047838f: add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000004783cf: add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000046522f: add byte ptr [rax - 0x39], cl; ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x000000000045104f: add byte ptr [rax - 0x39], cl; sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041ebcf: add byte ptr [rax - 0x39], cl; sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000045034f: add byte ptr [rax - 0x39], cl; sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000044fac7: add byte ptr [rax - 0x39], cl; sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rsi], ah; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004651ff: add byte ptr [rax - 0x39], cl; sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000412f7c: add byte ptr [rax - 0x39], r9b; ret; 
0x000000000043f0de: add byte ptr [rax - 0x3f43f00d], dl; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000044c21e: add byte ptr [rax - 0x3f43f00d], dl; cmp sil, byte ptr [rdi + rax + 0x60]; jne 0x4c231; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000042aebe: add byte ptr [rax - 0x3f43f00d], dl; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000476d5f: add byte ptr [rax - 0x3f7cb7f8], cl; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000046dfed: add byte ptr [rax - 0x3f], cl; clc; add cl, byte ptr [rax + 0x29]; ret 0xf48; 
0x0000000000461e43: add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x00000000004627f4: add byte ptr [rax - 0x3f], cl; ret 0x4911; 
0x00000000004627cb: add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x000000000040acf2: add byte ptr [rax - 0x3f], cl; ret 0xf11; 
0x000000000048813f: add byte ptr [rax - 0x3ffe], bh; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000044e3b9: add byte ptr [rax - 0x468afb1b], al; ret; 
0x0000000000488158: add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000045124e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x1c; syscall; 
0x0000000000479a6e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x66; syscall; 
0x0000000000479a6e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x66; syscall; ret; 
0x0000000000479ade: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x0000000000479b0e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x0000000000479b3e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x0000000000479b6e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x000000000045121e: add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xa; syscall; 
0x00000000004778af: add byte ptr [rax - 0x72b7ef1b], al; adc eax, 0xfffd4146; lea rax, [rip - 0x2fac1]; cmovne rax, rdx; ret; 
0x000000000042328f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x23836; lea rax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230af: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x23a06; lea rax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422e9f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x23c26; lea rax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x000000000042326f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x27f56; lea rax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x000000000042308f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x28126; lea rax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e7f: add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x28346; lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x0000000000422e27: add byte ptr [rax - 0x73], cl; adc eax, 0x11321; cmovne rax, rdx; ret; 
0x000000000042318a: add byte ptr [rax - 0x73], cl; adc eax, 0x164be; cmovne rax, rdx; ret; 
0x00000000004221e3: add byte ptr [rax - 0x73], cl; adc eax, 0x1de35; cmovne rax, rdx; ret; 
0x0000000000423103: add byte ptr [rax - 0x73], cl; adc eax, 0x1e6c5; cmovne rax, rdx; ret; 
0x0000000000422d45: add byte ptr [rax - 0x73], cl; adc eax, 0x21653; cmovne rax, rdx; ret; 
0x00000000004220e7: add byte ptr [rax - 0x73], cl; adc eax, 0x21f91; cmovne rax, rdx; ret; 
0x0000000000422f61: add byte ptr [rax - 0x73], cl; adc eax, 0x24eb7; cmove rax, rdx; ret; 
0x0000000000422163: add byte ptr [rax - 0x73], cl; adc eax, 0x2935; cmovne rax, rdx; ret; 
0x0000000000422457: add byte ptr [rax - 0x73], cl; adc eax, 0x5551; cmovne rax, rdx; ret; 
0x000000000044e385: add byte ptr [rax - 0x73], cl; adc eax, 0xaa3; cmovne rax, rdx; ret; 
0x0000000000477775: add byte ptr [rax - 0x73], cl; adc eax, 0xc73; cmovne rax, rdx; ret; 
0x0000000000423217: add byte ptr [rax - 0x73], cl; adc eax, 0xe441; cmovne rax, rdx; ret; 
0x0000000000423037: add byte ptr [rax - 0x73], cl; adc eax, 0xe601; cmovne rax, rdx; ret; 
0x000000000044df84: add byte ptr [rax - 0x73], cl; add al, 0x4c; lea ecx, [rsp + 0x20]; call rbx; 
0x000000000043ea0e: add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000477830: add byte ptr [rax - 0x73], cl; add eax, 0x18c8; cmove rax, rdx; ret; 
0x000000000042337c: add byte ptr [rax - 0x73], cl; add eax, 0x1b86c; cmove rax, rdx; ret; 
0x000000000042235c: add byte ptr [rax - 0x73], cl; add eax, 0x1cf2c; cmove rax, rdx; ret; 
0x00000000004223cc: add byte ptr [rax - 0x73], cl; add eax, 0x1d05c; cmove rax, rdx; ret; 
0x0000000000423259: add byte ptr [rax - 0x73], cl; add eax, 0x232df; cmove rax, rdx; ret; 
0x0000000000423079: add byte ptr [rax - 0x73], cl; add eax, 0x2347f; cmove rax, rdx; ret; 
0x0000000000422e69: add byte ptr [rax - 0x73], cl; add eax, 0x236cf; cmove rax, rdx; ret; 
0x0000000000423299: add byte ptr [rax - 0x73], cl; add eax, 0x2389f; cmove rax, rdx; ret; 
0x00000000004230b9: add byte ptr [rax - 0x73], cl; add eax, 0x23a4f; cmove rax, rdx; ret; 
0x0000000000422ea9: add byte ptr [rax - 0x73], cl; add eax, 0x23c8f; cmove rax, rdx; ret; 
0x0000000000422241: add byte ptr [rax - 0x73], cl; add eax, 0x23d67; cmovne rax, rdx; ret; 
0x0000000000423241: add byte ptr [rax - 0x73], cl; add eax, 0x24077; cmove rax, rdx; ret; 
0x0000000000423061: add byte ptr [rax - 0x73], cl; add eax, 0x24227; cmove rax, rdx; ret; 
0x0000000000422e51: add byte ptr [rax - 0x73], cl; add eax, 0x24467; cmove rax, rdx; ret; 
0x0000000000422f28: add byte ptr [rax - 0x73], cl; add eax, 0x24b90; cmovne rax, rdx; ret; 
0x0000000000422f0a: add byte ptr [rax - 0x73], cl; add eax, 0x24dae; cmove rax, rdx; ret; 
0x00000000004231df: add byte ptr [rax - 0x73], cl; add eax, 0x25599; cmove rax, rdx; ret; 
0x0000000000422fff: add byte ptr [rax - 0x73], cl; add eax, 0x25749; cmove rax, rdx; ret; 
0x0000000000422def: add byte ptr [rax - 0x73], cl; add eax, 0x25989; cmove rax, rdx; ret; 
0x0000000000422f78: add byte ptr [rax - 0x73], cl; add eax, 0x25f80; cmove rax, rdx; ret; 
0x0000000000423279: add byte ptr [rax - 0x73], cl; add eax, 0x27fbf; cmove rax, rdx; ret; 
0x0000000000423099: add byte ptr [rax - 0x73], cl; add eax, 0x2816f; cmove rax, rdx; ret; 
0x0000000000422e89: add byte ptr [rax - 0x73], cl; add eax, 0x283af; cmove rax, rdx; ret; 
0x0000000000422fa4: add byte ptr [rax - 0x73], cl; add eax, 0x28ad4; cmove rax, rdx; ret; 
0x000000000042338f: add byte ptr [rax - 0x73], cl; add eax, 0x290c9; test edx, 0x40000000; je 0x23367; ret; 
0x0000000000477813: add byte ptr [rax - 0x73], cl; add eax, 0x295; cmove rax, rdx; ret; 
0x000000000042211f: add byte ptr [rax - 0x73], cl; add eax, 0x2a099; test edx, 0x40000000; je 0x22101; ret; 
0x0000000000423320: add byte ptr [rax - 0x73], cl; add eax, 0x2a918; cmove rax, rdx; ret; 
0x000000000042236f: add byte ptr [rax - 0x73], cl; add eax, 0x2ac09; test edx, 0x40000000; je 0x22347; ret; 
0x0000000000422d00: add byte ptr [rax - 0x73], cl; add eax, 0x2ac38; cmove rax, rdx; ret; 
0x00000000004223df: add byte ptr [rax - 0x73], cl; add eax, 0x2b299; test edx, 0x40000000; je 0x223b7; ret; 
0x00000000004886a1: add byte ptr [rax - 0x73], cl; add eax, 0x67; cmovne rax, rdx; ret; 
0x0000000000423303: add byte ptr [rax - 0x73], cl; add eax, 0x7655; cmove rax, rdx; ret; 
0x00000000004533b9: add byte ptr [rax - 0x73], cl; add eax, 0x78eaf; ret; 
0x0000000000422ce3: add byte ptr [rax - 0x73], cl; add eax, 0x7945; cmove rax, rdx; ret; 
0x0000000000422d80: add byte ptr [rax - 0x73], cl; add eax, 0x8638; jne 0x22d2d; ret; 
0x000000000047652c: add byte ptr [rax - 0x73], cl; add eax, 0x89c; cmove rax, rdx; ret; 
0x000000000047653f: add byte ptr [rax - 0x73], cl; add eax, 0xf29; test edx, 0x40000000; je 0x76517; ret; 
0x0000000000477a24: add byte ptr [rax - 0x73], cl; add qword ptr [rbp + rcx*4 + 0x4c], rcx; and al, 0x38; call rbx; 
0x000000000047dd4b: add byte ptr [rax - 0x73], cl; call 0x41641eaf; pop rbp; pop rbp; ret; 
0x0000000000480e4e: add byte ptr [rax - 0x73], cl; cmp eax, 0x2de02; mov eax, 0x59; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000455f93: add byte ptr [rax - 0x73], cl; cmp eax, 0x47f4d; call 0x44c0; endbr64; lea rax, [rip + 0x702b5]; ret; 
0x0000000000466637: add byte ptr [rax - 0x73], cl; cmp eax, 0x661c1; call 0x1ab10; xor eax, eax; add rsp, 8; ret; 
0x000000000040ac70: add byte ptr [rax - 0x73], cl; cmp eax, 0x8e305; call 0x44c0; xor eax, eax; ret; 
0x0000000000485bea: add byte ptr [rax - 0x73], cl; dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x85c00; ret; 
0x0000000000480081: add byte ptr [rax - 0x73], cl; js 0x800a2; mov eax, 0xca; syscall; 
0x000000000048c024: add byte ptr [rax - 0x73], cl; js 0x8c045; mov eax, 0xca; syscall; 
0x000000000048c250: add byte ptr [rax - 0x73], cl; js 0x8c271; mov eax, 0xca; syscall; 
0x00000000004906c5: add byte ptr [rax - 0x73], cl; js 0x906e6; mov eax, 0xca; syscall; 
0x0000000000490904: add byte ptr [rax - 0x73], cl; js 0x90925; mov eax, 0xca; syscall; 
0x00000000004540bf: add byte ptr [rax - 0x73], cl; mov ebx, 0x2d0; mov eax, 0xda; syscall; 
0x0000000000414eb4: add byte ptr [rax - 0x73], cl; or eax, 0xb1e04; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x000000000042927e: add byte ptr [rax - 0x73], cl; or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000409e91: add byte ptr [rax - 0x73], cl; pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x0000000000420b5a: add byte ptr [rax - 0x73], cl; push rax; dec dword ptr [rax - 0x7b]; ret 0x840f; 
0x00000000004519a7: add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000450e07: add byte ptr [rax - 0x73], cl; push rsp; and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000040ac69: add byte ptr [rax - 0x73], cl; xor eax, 0x8e2ff; lea rdi, [rip + 0x8e305]; call 0x44c0; xor eax, eax; ret; 
0x00000000004707bc: add byte ptr [rax - 0x75], cl; adc al, 0xd3; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x00000000004704bb: add byte ptr [rax - 0x75], cl; adc al, 0xd3; mov rbx, rcx; jmp rdx; 
0x000000000045509f: add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000401c82: add byte ptr [rax - 0x75], cl; adc eax, 0xca5d6; mov edi, dword ptr [rsp + 0x14]; mov rsi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000491d0f: add byte ptr [rax - 0x75], cl; adc ecx, dword ptr [rax + 0x63]; ret 0xbc80; 
0x00000000004909b4: add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x000000000040a1cf: add byte ptr [rax - 0x75], cl; add al, 0x24; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000463139: add byte ptr [rax - 0x75], cl; add al, 0xd8; test rax, rax; je 0x63145; call rax; 
0x0000000000496f32: add byte ptr [rax - 0x75], cl; add al, 0xd8; test rax, rax; je 0x96f3e; call rax; 
0x0000000000410d47: add byte ptr [rax - 0x75], cl; add al, 0xf8; ret; 
0x0000000000442f7f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x000000000044164f: add byte ptr [rax - 0x75], cl; add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000047772f: add byte ptr [rax - 0x75], cl; add eax, 0x54e39; ret; 
0x000000000047771f: add byte ptr [rax - 0x75], cl; add eax, 0x54e41; ret; 
0x000000000047770f: add byte ptr [rax - 0x75], cl; add eax, 0x54e49; ret; 
0x00000000004776ff: add byte ptr [rax - 0x75], cl; add eax, 0x54e51; ret; 
0x00000000004776ef: add byte ptr [rax - 0x75], cl; add eax, 0x54e59; ret; 
0x00000000004776df: add byte ptr [rax - 0x75], cl; add eax, 0x54e61; ret; 
0x00000000004776cf: add byte ptr [rax - 0x75], cl; add eax, 0x54e69; ret; 
0x00000000004776bf: add byte ptr [rax - 0x75], cl; add eax, 0x54e71; ret; 
0x00000000004776af: add byte ptr [rax - 0x75], cl; add eax, 0x54e79; ret; 
0x000000000047769f: add byte ptr [rax - 0x75], cl; add eax, 0x54e81; ret; 
0x0000000000477687: add byte ptr [rax - 0x75], cl; add eax, 0x54ee9; ret; 
0x0000000000454f18: add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000454ebb: add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000045b6fd: add byte ptr [rax - 0x75], cl; and al, 0x28; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000460216: add byte ptr [rax - 0x75], cl; and al, 0x28; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea6d: add byte ptr [rax - 0x75], cl; and al, 0x28; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000450540: add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x000000000042e0df: add byte ptr [rax - 0x75], cl; cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2bf: add byte ptr [rax - 0x75], cl; hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e8af: add byte ptr [rax - 0x75], cl; int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004129d4: add byte ptr [rax - 0x75], cl; jae 0x129e9; mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x0000000000459b26: add byte ptr [rax - 0x75], cl; je 0x59b4f; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046f923: add byte ptr [rax - 0x75], cl; je 0x6f94c; or byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x19]; call qword ptr [rbp + 0x38]; 
0x000000000040f417: add byte ptr [rax - 0x75], cl; je 0xf440; cmp byte ptr [rcx + rcx*4 - 6], cl; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000042e4af: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e6af: add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000047ba8f: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + 0x48], 0x89; ret; 
0x000000000047b952: add byte ptr [rax - 0x75], cl; or byte ptr [r8 - 0x7d], cl; ret; 
0x000000000041be8f: add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x75], cl; push rdx; adc byte ptr [rcx + 1], cl; ret 0x3948; 
0x00000000004551d7: add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7d], cl; ret 0x4110; 
0x00000000004551af: add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7d], cl; ret 0xbd10; 
0x00000000004552c7: add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7d], cl; ret 0xc610; 
0x0000000000404599: add byte ptr [rax - 0x75], cl; pop rsp; ret; 
0x000000000041b847: add byte ptr [rax - 0x75], cl; push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x0000000000414c2f: add byte ptr [rax - 0x75], cl; push rbx; or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000433bef: add byte ptr [rax - 0x75], cl; push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000042db5f: add byte ptr [rax - 0x75], cl; push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043342f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043339f: add byte ptr [rax - 0x75], cl; push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000471097: add byte ptr [rax - 0x75], cl; push rsi; or byte ptr [rax - 0x73], cl; or byte ptr [rax - 0x77], cl; or cl, r13b; ret; 
0x000000000043363f: add byte ptr [rax - 0x75], cl; push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000041566b: add byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000004162f5: add byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000042dd1f: add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000412062: add byte ptr [rax - 0x75], cl; xchg eax, edi; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000497024: add byte ptr [rax - 0x75], cl; xor al, ch; ret; 
0x0000000000451a87: add byte ptr [rax - 0x75], cl; xor byte ptr [rcx + rcx*4 - 9], cl; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x00000000004052bd: add byte ptr [rax - 0x76b7bcc8], al; ret; 
0x0000000000464f86: add byte ptr [rax - 0x77], cl; adc eax, 0x61aaa; cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x00000000004909ab: add byte ptr [rax - 0x77], cl; add al, 0x24; call 0x90d40; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000464f7f: add byte ptr [rax - 0x77], cl; add eax, 0x61aa9; mov qword ptr [rip + 0x61aaa], rdx; cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x000000000041ba41: add byte ptr [rax - 0x77], cl; add eax, 0xa9d27; ret; 
0x000000000041ba21: add byte ptr [rax - 0x77], cl; add eax, 0xa9d3f; ret; 
0x000000000041ba01: add byte ptr [rax - 0x77], cl; add eax, 0xa9d57; ret; 
0x0000000000401e26: add byte ptr [rax - 0x77], cl; add eax, 0xca552; pop rbx; ret; 
0x0000000000481706: add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x80f90; add rsp, 0xd8; ret; 
0x0000000000479e88: add byte ptr [rax - 0x77], cl; and al, 0x28; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x00000000004160c0: add byte ptr [rax - 0x77], cl; call 0x84c71d7; pop rbx; pop rbp; pop r12; ret; 
0x0000000000447c1f: add byte ptr [rax - 0x77], cl; cmp byte ptr [rax - 0x77], cl; jl 0x47c37; clc; ret; 
0x0000000000453370: add byte ptr [rax - 0x77], cl; cmp eax, 0x78f18; cmp qword ptr [rip + 0x78ef8], 0; je 0x533a0; lea rax, [rip + 0x78ee7]; ret; 
0x0000000000416a28: add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000041494c: add byte ptr [rax - 0x77], cl; fidivr word ptr [rdi + 2]; mov eax, r9d; syscall; 
0x0000000000454156: add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0x14e]; syscall; 
0x000000000047a170: add byte ptr [rax - 0x77], cl; fucomip st(0); pop rdx; cli; jmp qword ptr [rsi + 0x48]; 
0x0000000000419a56: add byte ptr [rax - 0x77], cl; imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x0000000000480e5a: add byte ptr [rax - 0x77], cl; in eax, 0x48; mov esi, ebp; syscall; 
0x00000000004506d3: add byte ptr [rax - 0x77], cl; jl 0x506fc; adc byte ptr [rax - 0x75], cl; jl 0x50701; adc byte ptr [rax + 0x4f], bh; syscall; 
0x0000000000404218: add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x00000000004845f7: add byte ptr [rax - 0x77], cl; nop; adc byte ptr [rbx], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x300], xmm0; ret; 
0x000000000048d6a3: add byte ptr [rax - 0x77], cl; nop; js 0x8d6ac; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004540b4: add byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; add eax, 0x78250; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x00000000004805ad: add byte ptr [rax - 0x77], cl; or eax, 0x4c2fb; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040308b: add byte ptr [rax - 0x77], cl; out dx, al; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x0000000000475d55: add byte ptr [rax - 0x77], cl; out dx, eax; mov eax, 0xca; syscall; 
0x0000000000475cbf: add byte ptr [rax - 0x77], cl; out dx, eax; mov eax, r8d; syscall; 
0x0000000000413788: add byte ptr [rax - 0x77], cl; out dx, eax; pop rbp; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000041655a: add byte ptr [rax - 0x77], cl; out dx, eax; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000041b2e4: add byte ptr [rax - 0x77], cl; out dx, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000411ced: add byte ptr [rax - 0x77], cl; pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x000000000040c8cd: add byte ptr [rax - 0x77], cl; ret 0x2548; 
0x0000000000488294: add byte ptr [rax - 0x77], cl; ret 0x2944; 
0x000000000040c3e8: add byte ptr [rax - 0x77], cl; ret 0x2949; 
0x00000000004129c5: add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000047f110: add byte ptr [rax - 0x77], cl; ret 0x314c; 
0x00000000004162fc: add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000046aa5f: add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x000000000046e79f: add byte ptr [rax - 0x77], cl; ret 0x8349; 
0x00000000004115bf: add byte ptr [rax - 0x77], cl; ret 0x8945; 
0x0000000000461dd4: add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000480abf: add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000041e914: add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x000000000041a9aa: add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000488901: add byte ptr [rax - 0x77], cl; ret 0xd8b; 
0x0000000000481511: add byte ptr [rax - 0x77], cl; ret 0xf6e8; 
0x0000000000454d0d: add byte ptr [rax - 0x77], cl; ret 0xff85; 
0x0000000000416ba3: add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000403792: add byte ptr [rax - 0x77], cl; ret; 
0x00000000004292ec: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0x7f10; 
0x000000000043bde4: add byte ptr [rax - 0x77], cl; retf 0x8349; ret 0xf10; 
0x00000000004881df: add byte ptr [rax - 0x77], cl; ror byte ptr [rax + 0xf], 1; mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; ret; 
0x0000000000485c85: add byte ptr [rax - 0x77], cl; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000496722: add byte ptr [rax - 0x77], cl; sbb eax, 0x31a66; test rbx, rbx; jne 0x96710; pop rbx; ret; 
0x000000000047a0a1: add byte ptr [rax - 0x77], cl; test dword ptr [rcx - 0x77], 0x70d3e8f4; clc; dec dword ptr [rax - 0x77]; ret; 
0x000000000045f3aa: add byte ptr [rax - 0x77], cl; xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000040c3e7: add byte ptr [rax - 0x77], r9b; ret 0x2949; 
0x00000000004154fd: add byte ptr [rax - 0x77], r9b; ret 0x294c; 
0x000000000048810f: add byte ptr [rax - 0x7b], cl; div byte ptr [rbp - 0x13]; cmp cx, 0x7fff; jne 0x880fc; mov eax, 1; ret; 
0x0000000000473a5e: add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000420e52: add byte ptr [rax - 0x7b], cl; ret 0x840f; 
0x0000000000493213: add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x45; and al, 0x10; add rsp, 0x28; ret; 
0x000000000041209e: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000047025b: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0x12; 
0x0000000000487b65: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0xfffd; 
0x000000000041219d: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004537fa: add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret; 
0x00000000004806af: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp*8 + 0x31], 0xc0; ret; 
0x000000000040100e: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000455716: add byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rbp + 0x48], 0x8b; push rax; or byte ptr [rcx + 0x3f095], cl; add dh, dh; ret 0x7402; 
0x000000000048ab98: add byte ptr [rax - 0x7b], cl; sal byte ptr [rsi + rsi*2 + 0x48], 0x8b; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x000000000041fa05: add byte ptr [rax - 0x7d], cl; clc; push qword ptr [rsp + rcx + 0x48]; add esp, 8; ret; 
0x0000000000447b61: add byte ptr [rax - 0x7d], cl; cli; and byte ptr [rdi + 0x18], dh; movups xmmword ptr [rax], xmm0; movups xmmword ptr [rax + rdx - 0x10], xmm0; ret; 
0x000000000044ba36: add byte ptr [rax - 0x7d], cl; cli; ja 0x4bb09; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000047493f: add byte ptr [rax - 0x7d], cl; cmp dword ptr [rax], eax; jns 0x748cf; mov eax, 0x6e; ret; 
0x0000000000453377: add byte ptr [rax - 0x7d], cl; cmp eax, 0x78ef8; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x78ee7]; ret; 
0x000000000046c99b: add byte ptr [rax - 0x7d], cl; in al, dx; or al, ch; sbb edi, dword ptr [rbx - 7]; jmp qword ptr [rsi + 0x66]; 
0x000000000041edd7: add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x0000000000445bef: add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000044e54f: add byte ptr [rax - 0x7d], cl; ret 0x4001; 
0x000000000044ddf7: add byte ptr [rax - 0x7d], cl; ret 0x4501; 
0x00000000004573e5: add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000048af6f: add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000044e78f: add byte ptr [rax - 0x7d], cl; ret 0x4817; 
0x0000000000459246: add byte ptr [rax - 0x7d], cl; ret 0x4901; 
0x0000000000429319: add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000047218e: add byte ptr [rax - 0x7d], cl; ret 0x8904; 
0x0000000000472506: add byte ptr [rax - 0x7d], cl; ret 0x8908; 
0x000000000041f826: add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x000000000040801c: add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x000000000040799b: add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x00000000004767f8: add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000043bb83: add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429347: add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000454697: add byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x00000000004057a7: add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004248df: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000043f56f: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x00000000004619fd: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + rcx*2], 0x83; ret; 
0x000000000045bcfc: add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + rcx*2], 0x89; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000488d95: add byte ptr [rax - 0x7d], cl; ror dword ptr [rax], 0x83; ret 0x8001; 
0x0000000000464f78: add byte ptr [rax - 0x7f], cl; ret 0x200; 
0x0000000000425e55: add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000040c731: add byte ptr [rax - 0x7f], cl; ret; 
0x0000000000491ec3: add byte ptr [rax - 0x80], al; call qword ptr [rcx]; 
0x0000000000412e0b: add byte ptr [rax - 0x80], al; std; add dword ptr [rsi + rbp - 0x77], esi; ret 0xc085; 
0x000000000046e82f: add byte ptr [rax - 0x8e343], al; jmp qword ptr [rax]; 
0x00000000004664ad: add byte ptr [rax - 1], bh; pop rbp; pop r12; pop r13; ret; 
0x000000000041379f: add byte ptr [rax - 1], bh; pop rbp; ret; 
0x000000000041459f: add byte ptr [rax - 1], bh; ret; 
0x00000000004846e2: add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x000000000041c261: add byte ptr [rax - 9], cl; fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x21], cl; ret; 
0x000000000041c0c4: add byte ptr [rax - 9], cl; fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x000000000045bd05: add byte ptr [rax], 0; add byte ptr [rax + 0x39], cl; ret; 
0x000000000041aa60: add byte ptr [rax], 0; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000475cbc: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; out dx, eax; mov eax, r8d; syscall; 
0x0000000000416ba0: add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000425e52: add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000042a8db: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042a8fb: add byte ptr [rax], 0; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000040aad3: add byte ptr [rax], 0; add byte ptr [rax], al; call qword ptr [rbx]; 
0x000000000041918b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov rax, -1; ret; 
0x0000000000485c2b: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000419edb: add byte ptr [rax], 0; add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x000000000042338b: add byte ptr [rax], 0; add byte ptr [rax], al; lea rax, [rip + 0x290c9]; test edx, 0x40000000; je 0x23367; ret; 
0x000000000042236b: add byte ptr [rax], 0; add byte ptr [rax], al; lea rax, [rip + 0x2ac09]; test edx, 0x40000000; je 0x22347; ret; 
0x00000000004223db: add byte ptr [rax], 0; add byte ptr [rax], al; lea rax, [rip + 0x2b299]; test edx, 0x40000000; je 0x223b7; ret; 
0x000000000047653b: add byte ptr [rax], 0; add byte ptr [rax], al; lea rax, [rip + 0xf29]; test edx, 0x40000000; je 0x76517; ret; 
0x000000000048d373: add byte ptr [rax], 0; add byte ptr [rax], al; mov dword ptr fs:[0x48], r8d; ret; 
0x000000000044fa93: add byte ptr [rax], 0; add byte ptr [rax], al; mov eax, 0xe4; syscall; 
0x0000000000433fdb: add byte ptr [rax], 0; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x00000000004543ab: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [r10]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x0000000000454263: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x0000000000433e1b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000040be8b: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x0000000000450e93: add byte ptr [rax], 0; add byte ptr [rax], al; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004515db: add byte ptr [rax], 0; add byte ptr [rax], al; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; mov rdi, rbp; call rax; 
0x000000000044343b: add byte ptr [rax], 0; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000043412b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004340bb: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000043fd9b: add byte ptr [rax], 0; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000044e413: add byte ptr [rax], 0; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000488b8b: add byte ptr [rax], 0; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x000000000041bb4b: add byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x00000000004806ab: add byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x806a4; xor eax, eax; ret; 
0x000000000044f7db: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x000000000044f7cb: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000044d70b: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000044d6fb: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000044d6db: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x000000000044f7eb: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000044c66b: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004790db: add byte ptr [rax], 0; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000041fa13: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x0000000000409fa3: add byte ptr [rax], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000401cbb: add byte ptr [rax], 0; add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x0000000000484723: add byte ptr [rax], 0; add byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x0000000000447e96: add byte ptr [rax], 0; add byte ptr [rdi + 0x64], dh; vmovdqu64 zmmword ptr [rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000433073: add byte ptr [rax], 0; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000484601: add byte ptr [rax], 3; add byte ptr [rax], al; ret; 
0x0000000000403500: add byte ptr [rax], al; adc byte ptr [rdi + rsi - 9], dh; ret 0; 
0x0000000000476176: add byte ptr [rax], al; add al, ch; mov dl, 0xae; cli; dec dword ptr [rax - 0x77]; ret; 
0x0000000000403fd8: add byte ptr [rax], al; add al, ch; push rax; ret; 
0x000000000041d1a5: add byte ptr [rax], al; add al, ch; ret; 
0x000000000048b28e: add byte ptr [rax], al; add al, ch; wait; cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000488374: add byte ptr [rax], al; add al, dh; cmpxchg dword ptr [rdi], edx; jne 0x883b3; xor eax, eax; ret; 
0x000000000048815f: add byte ptr [rax], al; add bh, al; add al, byte ptr [rdx]; sar bh, 0xff; ret; 
0x000000000046fb5f: add byte ptr [rax], al; add bh, al; and al, 0x50; and byte ptr [rax], al; add byte ptr [rax], al; jmp rdx; 
0x000000000046e622: add byte ptr [rax], al; add bh, al; test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000040d43a: add byte ptr [rax], al; add bh, al; test dword ptr [rax], edx; idiv edi; call qword ptr [rax]; 
0x0000000000467e1a: add byte ptr [rax], al; add bh, al; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x000000000040aad5: add byte ptr [rax], al; add bh, bh; adc ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000047e2bf: add byte ptr [rax], al; add bh, dh; ret; 
0x0000000000414472: add byte ptr [rax], al; add bl, ch; ret 0x4e8; 
0x000000000044ac13: add byte ptr [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; ret; 
0x000000000042abb3: add byte ptr [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000044f7dd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x000000000044f7cd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000044d70d: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000044d6fd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000044d6dd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x000000000044f7ed: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000044c4ed: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c4bd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000478ead: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x00000000004790dd: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000478e33: add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000044f098: add byte ptr [rax], al; add bl, dh; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000044343d: add byte ptr [rax], al; add bl, dh; movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000479dbd: add byte ptr [rax], al; add byte ptr [r13 + rbp - 0x48], sil; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000495f4d: add byte ptr [rax], al; add byte ptr [rax + 0x107550fa], al; xor eax, eax; ret; 
0x00000000004442cc: add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x000000000047be26: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8b4c; 
0x000000000047f945: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0x8d48; 
0x000000000047bc87: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret 0xc148; 
0x000000000046c65a: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000047c69a: add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ror byte ptr [rbp + rcx*4 + 0x34], 1; ret; 
0x0000000000493d4a: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; or byte ptr [rdi + 2], r14b; sbb eax, eax; ret; 
0x000000000046087b: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x3676; 
0x000000000041fb83: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x3d74; 
0x0000000000456d41: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000045bd06: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000047d52e: add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; retf 0xf48; ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x0000000000450e0f: add byte ptr [rax], al; add byte ptr [rax + 0x48], bh; syscall; 
0x00000000004635f6: add byte ptr [rax], al; add byte ptr [rax + 0x63], cl; ret 0x8948; 
0x000000000044396d: add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000041aa61: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x0000000000475da4: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; cmp rax, -0x1000; ja 0x75dc0; ret; 
0x000000000041ab1e: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; ret; 
0x000000000041aac2: add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; xor sil, 0x80; syscall; 
0x00000000004652f9: add byte ptr [rax], al; add byte ptr [rax + 0xd], bh; syscall; 
0x000000000044fa95: add byte ptr [rax], al; add byte ptr [rax + 0xe4], bh; syscall; 
0x000000000041ad3b: add byte ptr [rax], al; add byte ptr [rax + 0xe], bh; syscall; 
0x000000000040aeed: add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480143; ret; 
0x0000000000488074: add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x00000000004881d0: add byte ptr [rax], al; add byte ptr [rax + 2], bh; ret; 
0x000000000044c7cd: add byte ptr [rax], al; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000041f63e: add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret; 
0x000000000049701e: add byte ptr [rax], al; add byte ptr [rax + rcx*2 - 0x75], ah; add byte ptr [rax - 0x75], cl; xor al, ch; ret; 
0x0000000000419f8c: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; add eax, 0xae21e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045038d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x00000000004224d4: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000040c3d8: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000047839d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000004783dd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000047838d: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000004783cd: add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000046dfeb: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; clc; add cl, byte ptr [rax + 0x29]; ret 0xf48; 
0x0000000000461e41: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4811; 
0x00000000004627f2: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x4911; 
0x00000000004627c9: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0x6411; 
0x000000000040acf0: add byte ptr [rax], al; add byte ptr [rax - 0x3f], cl; ret 0xf11; 
0x0000000000488156: add byte ptr [rax], al; add byte ptr [rax - 0x47ff76b7], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000045124c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x1c; syscall; 
0x0000000000479a6c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x66; syscall; 
0x0000000000479a6c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x66; syscall; ret; 
0x0000000000479adc: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x0000000000479b0c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x0000000000479b3c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x0000000000479b6c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x000000000045121c: add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xa; syscall; 
0x00000000004778ad: add byte ptr [rax], al; add byte ptr [rax - 0x72b7ef1b], al; adc eax, 0xfffd4146; lea rax, [rip - 0x2fac1]; cmovne rax, rdx; ret; 
0x000000000042328d: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x23836; lea rax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230ad: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x23a06; lea rax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422e9d: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x23c26; lea rax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x000000000042326d: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x27f56; lea rax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x000000000042308d: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x28126; lea rax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e7d: add byte ptr [rax], al; add byte ptr [rax - 0x72b7fd1b], al; adc eax, 0x28346; lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x000000000043ea0c: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add al, 7; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042338d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x290c9; test edx, 0x40000000; je 0x23367; ret; 
0x000000000042236d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2ac09; test edx, 0x40000000; je 0x22347; ret; 
0x00000000004223dd: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0x2b299; test edx, 0x40000000; je 0x223b7; ret; 
0x000000000047653d: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; add eax, 0xf29; test edx, 0x40000000; je 0x76517; ret; 
0x000000000048007f: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x800a2; mov eax, 0xca; syscall; 
0x000000000048c022: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x8c045; mov eax, 0xca; syscall; 
0x000000000048c24e: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x8c271; mov eax, 0xca; syscall; 
0x00000000004906c3: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x906e6; mov eax, 0xca; syscall; 
0x0000000000490902: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; js 0x90925; mov eax, 0xca; syscall; 
0x0000000000414eb2: add byte ptr [rax], al; add byte ptr [rax - 0x73], cl; or eax, 0xb1e04; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x00000000004704b9: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc al, 0xd3; mov rbx, rcx; jmp rdx; 
0x000000000045509d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000047772d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e39; ret; 
0x000000000047771d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e41; ret; 
0x000000000047770d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e49; ret; 
0x00000000004776fd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e51; ret; 
0x00000000004776ed: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e59; ret; 
0x00000000004776dd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e61; ret; 
0x00000000004776cd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e69; ret; 
0x00000000004776bd: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e71; ret; 
0x00000000004776ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e79; ret; 
0x000000000047769d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e81; ret; 
0x0000000000454f16: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000454eb9: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000042e4ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e6ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000041be8d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x75], cl; push rdx; adc byte ptr [rcx + 1], cl; ret 0x3948; 
0x00000000004551ad: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7d], cl; ret 0xbd10; 
0x00000000004553a5: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7d], cl; ret 0xc610; 
0x00000000004162f3: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000042dd1d: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000412060: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xchg eax, edi; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x0000000000451a85: add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; xor byte ptr [rcx + rcx*4 - 9], cl; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x000000000041ba3f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa9d27; ret; 
0x000000000041ba1f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa9d3f; ret; 
0x000000000041b9ff: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa9d57; ret; 
0x0000000000481704: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; and al, 0x18; call 0x80f90; add rsp, 0xd8; ret; 
0x000000000041494a: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fidivr word ptr [rdi + 2]; mov eax, r9d; syscall; 
0x0000000000454154: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fistp qword ptr [rax + 0x14e]; syscall; 
0x0000000000480e58: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; in eax, 0x48; mov esi, ebp; syscall; 
0x0000000000404216: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x0000000000475d53: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; mov eax, 0xca; syscall; 
0x0000000000475cbd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; mov eax, r8d; syscall; 
0x000000000041b2e2: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000040c8cb: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2548; 
0x0000000000488292: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x2944; 
0x00000000004129c3: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000004162fa: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000046aa5d: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000480abd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000048a4ad: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000048150f: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xf6e8; 
0x0000000000416ba1: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000403790: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004881dd: add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ror byte ptr [rax + 0xf], 1; mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; ret; 
0x0000000000473a5c: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x0000000000470259: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0x12; 
0x00000000004806ad: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + rbp*8 + 0x31], 0xc0; ret; 
0x000000000040100c: add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x000000000047493d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; cmp dword ptr [rax], eax; jns 0x748cf; mov eax, 0x6e; ret; 
0x000000000041edd5: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x110; 
0x0000000000445bed: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000044e54d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4001; 
0x000000000044ddf5: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4501; 
0x00000000004573e3: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x000000000048af6d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000044e78d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4817; 
0x000000000042a033: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040801a: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x0000000000407999: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x000000000043d241: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000042a05d: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000040b13a: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004248dd: add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x0000000000425e53: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000454133: add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret; 
0x000000000046e82d: add byte ptr [rax], al; add byte ptr [rax - 0x8e343], al; jmp qword ptr [rax]; 
0x00000000004664ab: add byte ptr [rax], al; add byte ptr [rax - 1], bh; pop rbp; pop r12; pop r13; ret; 
0x000000000041459d: add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000041c0c2: add byte ptr [rax], al; add byte ptr [rax - 9], cl; fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x000000000044c4eb: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c4bb: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000478eab: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000495f4b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x107550fa], al; xor eax, eax; ret; 
0x00000000004442ca: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x1478d48], dl; ret; 
0x000000000041fb81: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x3d74; 
0x000000000044396b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0x78d4837], cl; ret; 
0x000000000040aeeb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 0xf], cl; mov esi, 0x83480143; ret; 
0x000000000044c7cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000045038b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x000000000047839b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x00000000004783db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000047838b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x00000000004783cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x000000000045124a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x1c; syscall; 
0x0000000000479a6a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x66; syscall; 
0x0000000000479ada: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x90; syscall; 
0x0000000000479b0a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x91; syscall; 
0x0000000000479b3a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x92; syscall; 
0x0000000000479b6a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0x93; syscall; 
0x000000000045121a: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x5e1f00d], dl; mov eax, 0xa; syscall; 
0x000000000045509b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000047772b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e39; ret; 
0x000000000047771b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e41; ret; 
0x000000000047770b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e49; ret; 
0x00000000004776fb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e51; ret; 
0x00000000004776eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e59; ret; 
0x00000000004776db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e61; ret; 
0x00000000004776cb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e69; ret; 
0x00000000004776bb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e71; ret; 
0x00000000004776ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e79; ret; 
0x000000000047769b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; add eax, 0x54e81; ret; 
0x00000000004551ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x7d], cl; ret 0xbd10; 
0x0000000000414bbb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; fidivr word ptr [rdi + 2]; mov eax, r9d; syscall; 
0x000000000046aa5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000480abb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8b48; 
0x000000000048a4ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000445beb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x3a01; 
0x000000000044e54b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4001; 
0x000000000048af6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000044e78b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4817; 
0x000000000041ac6b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004248db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000046e82b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 0x8e343], al; jmp qword ptr [rax]; 
0x000000000041459b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000041a76b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0xf41; 
0x0000000000475734: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x00000000004190e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000045b01b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rax + 0x39], cl; ret; 
0x000000000048a2db: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ror byte ptr [rcx - 0x7d], 1; ret 0x4901; 
0x000000000044337b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x000000000042242b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + 0xa9f9615], cl; add bh, dh; ret 0; 
0x000000000040a8ab: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000445e2b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000048e7eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000046cadb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000048478b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x73], cl; add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x0000000000424c3b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042353b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x0000000000419f5b: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi + 0xae24a05], al; add byte ptr [rbx + 0x57f01f8], al; ret; 
0x000000000042a8eb: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000041a76d: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0xf41; 
0x00000000004511e9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0xb; syscall; 
0x0000000000443349: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000044dda9: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044bc39: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000479359: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000477e39: add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x000000000046c5bb: add byte ptr [rax], al; add byte ptr [rax], al; add cl, ch; in eax, 0xfa; jmp qword ptr [rsi + 0x2e]; 
0x0000000000411fab: add byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x7420; 
0x000000000047835c: add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000041fd79: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000458299: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000485c17: add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000042a8dc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042a8ec: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042a8fc: add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000040aad4: add byte ptr [rax], al; add byte ptr [rax], al; call qword ptr [rbx]; 
0x0000000000495f4c: add byte ptr [rax], al; add byte ptr [rax], al; cmp dl, 0x50; jne 0x95f65; xor eax, eax; ret; 
0x000000000047493c: add byte ptr [rax], al; add byte ptr [rax], al; cmp qword ptr [rcx], 0; jns 0x748cf; mov eax, 0x6e; ret; 
0x000000000045027c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0x18; syscall; 
0x000000000041867c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000464ffc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046501c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000041918c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, -1; ret; 
0x0000000000485c2c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000419ecc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049319c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000045822c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x743c5]; ret; 
0x0000000000419eac: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0xab2a5]; ret; 
0x0000000000419edc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x00000000004016bc: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x0000000000417d6c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; test byte ptr [rdi], 0x80; jne 0x17d80; ret; 
0x000000000041910c: add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000048246d: add byte ptr [rax], al; add byte ptr [rax], al; je 0x82474; lock inc dword ptr [rsi + 0x10]; pop rbx; ret; 
0x000000000044434c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000044435c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000044436c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000044437c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000044438c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x00000000004442dc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x00000000004442ec: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x00000000004442fc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000044430c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000044431c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000044432c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000044433c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000043ea0b: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042338c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x290c9]; test edx, 0x40000000; je 0x23367; ret; 
0x000000000042236c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x2ac09]; test edx, 0x40000000; je 0x22347; ret; 
0x00000000004223dc: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0x2b299]; test edx, 0x40000000; je 0x223b7; ret; 
0x000000000047653c: add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rip + 0xf29]; test edx, 0x40000000; je 0x76517; ret; 
0x0000000000401869: add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x0000000000442e7c: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000004416cc: add byte ptr [rax], al; add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000044396c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044333c: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000040eaf0: add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rsp + 0x40], 0x20; jmp rdx; 
0x000000000044335c: add byte ptr [rax], al; add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000408df4: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rax + 4], ebx; pop rbx; ret; 
0x000000000046fb5e: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsp + 0x50], 0x20; jmp rdx; 
0x000000000048d374: add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr fs:[0x48], r8d; ret; 
0x000000000044397c: add byte ptr [rax], al; add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000044fa94: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xe4; syscall; 
0x000000000041459c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000488073: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 1; ret; 
0x00000000004881cf: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 2; ret; 
0x000000000044fb1c: add byte ptr [rax], al; add byte ptr [rax], al; mov eax, edx; syscall; 
0x000000000044337c: add byte ptr [rax], al; add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x0000000000433fdc: add byte ptr [rax], al; add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000041902b: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x0000000000419f8b: add byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rip + 0xae21e], 0; ret; 
0x000000000047773c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x000000000047838c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000047839c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000004783ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000004783bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000004783cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000004783dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000047772c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e39]; ret; 
0x000000000047771c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e41]; ret; 
0x000000000047770c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e49]; ret; 
0x00000000004776fc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e51]; ret; 
0x00000000004776ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e59]; ret; 
0x00000000004776dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e61]; ret; 
0x00000000004776cc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e69]; ret; 
0x00000000004776bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e71]; ret; 
0x00000000004776ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e79]; ret; 
0x000000000047769c: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e81]; ret; 
0x0000000000454f15: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x000000000048e7ec: add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; ret; 
0x00000000004433bc: add byte ptr [rax], al; add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004543ac: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [r10]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x000000000048dd4f: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x460]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000454264: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x0000000000433e1c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000040be8c: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x0000000000450e94: add byte ptr [rax], al; add byte ptr [rax], al; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004515dc: add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; mov rdi, rbp; call rax; 
0x0000000000414bbc: add byte ptr [rax], al; add byte ptr [rax], al; mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x000000000044343c: add byte ptr [rax], al; add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000474226: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000418111: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000047a499: add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x000000000042799c: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000044cebc: add byte ptr [rax], al; add byte ptr [rax], al; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000043412c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004340bc: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000043fd9c: add byte ptr [rax], al; add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000474acc: add byte ptr [rax], al; add byte ptr [rax], al; neg eax; ret; 
0x000000000042ab29: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000044d6c8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; bts rax, rsi; tzcnt eax, eax; ret; 
0x0000000000452b48: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 0x63; syscall; 
0x0000000000451028: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 0xc; syscall; 
0x0000000000493229: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004338b8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000465228: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000042db58: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433a48: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004339c8: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044c659: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042b778: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000477289: add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x000000000044c4b2: add byte ptr [rax], al; add byte ptr [rax], al; nop word ptr cs:[rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000045124b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x1c; syscall; 
0x0000000000479a6b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x66; syscall; 
0x0000000000479adb: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x90; syscall; 
0x0000000000479b0b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x91; syscall; 
0x0000000000479b3b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x92; syscall; 
0x0000000000479b6b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0x93; syscall; 
0x000000000045121b: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0xa; syscall; 
0x00000000004511ea: add byte ptr [rax], al; add byte ptr [rax], al; nop; endbr64; mov eax, 0xb; syscall; 
0x00000000004442cb: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x00000000004442bb: add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x000000000044334a: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000047837b: add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x000000000044ddaa: add byte ptr [rax], al; add byte ptr [rax], al; nop; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044bc3a: add byte ptr [rax], al; add byte ptr [rax], al; nop; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000047935a: add byte ptr [rax], al; add byte ptr [rax], al; nop; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000475736: add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x0000000000488155: add byte ptr [rax], al; add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000044e414: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000488b8c: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004626b5: add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000419ca1: add byte ptr [rax], al; add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000040848c: add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000419162: add byte ptr [rax], al; add byte ptr [rax], al; test byte ptr [rbp], 0x80; jne 0x19180; pop rbp; ret; 
0x000000000040100b: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x00000000004016de: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x16f0; mov edi, 0x4c6ae0; jmp rax; 
0x0000000000401720: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x1730; mov edi, 0x4c6ae0; jmp rax; 
0x00000000004806ac: add byte ptr [rax], al; add byte ptr [rax], al; test rax, rax; je 0x806a4; xor eax, eax; ret; 
0x000000000044ae0c: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000044f7dc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x000000000044f7cc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000044d70c: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000044d6fc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000044d6dc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x000000000044f7ec: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000044c4ec: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c4bc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000478eac: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x00000000004790dc: add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000044baac: add byte ptr [rax], al; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000046c5aa: add byte ptr [rax], al; add byte ptr [rax], al; xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x6c5c0; ret; 
0x0000000000419f5c: add byte ptr [rax], al; add byte ptr [rax], al; xchg dword ptr [rip + 0xae24a], eax; cmp eax, 1; jg 0x19f70; ret; 
0x000000000041fa14: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x0000000000409fa4: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042ad9c: add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000401cbc: add byte ptr [rax], al; add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x00000000004440fc: add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004502e8: add byte ptr [rax], al; add byte ptr [rbp + 0x14], dh; add rsp, 0x28; ret; 
0x00000000004527a6: add byte ptr [rax], al; add byte ptr [rbp + 0x1a], dh; add rsp, 0x1018; ret; 
0x000000000044e470: add byte ptr [rax], al; add byte ptr [rbp + 0x1f], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000048dd67: add byte ptr [rax], al; add byte ptr [rbp + 0x24], dh; mov rdx, qword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000479f19: add byte ptr [rax], al; add byte ptr [rbp + 0x26], dh; mov eax, r9d; add rsp, 0x38; ret; 
0x00000000004861f6: add byte ptr [rax], al; add byte ptr [rbp + 0x28], dh; add rsp, 0x38; ret; 
0x0000000000485e20: add byte ptr [rax], al; add byte ptr [rbp + 0x29], dh; add rsp, 0x58; ret; 
0x0000000000485ef2: add byte ptr [rax], al; add byte ptr [rbp + 0x2d], dh; add rsp, 0x58; ret; 
0x00000000004154ac: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x000000000045b01d: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rax + 0x39], cl; ret; 
0x000000000046fb97: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x75], cl; adc al, 0xd0; jmp rdx; 
0x0000000000475d97: add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000004799f9: add byte ptr [rax], al; add byte ptr [rbp + 0x3c], dh; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000468667: add byte ptr [rax], al; add byte ptr [rbp + 0x3d850fc9], al; adc al, 0; add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret 0xf66; 
0x0000000000421d4b: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000046c23b: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000479a02: add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000004653ca: add byte ptr [rax], al; add byte ptr [rbp + 0x45], dh; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000452af2: add byte ptr [rax], al; add byte ptr [rbp + 0x46], dh; add rsp, 0x58; ret; 
0x0000000000450df8: add byte ptr [rax], al; add byte ptr [rbp + 0x46], dh; add rsp, 0x68; ret; 
0x0000000000450e87: add byte ptr [rax], al; add byte ptr [rbp + 0x47], dh; add rsp, 0x18; ret; 
0x0000000000466ea9: add byte ptr [rax], al; add byte ptr [rbp + 0x47], dh; add rsp, 0x38; ret; 
0x0000000000450f3f: add byte ptr [rax], al; add byte ptr [rbp + 0x47], dh; add rsp, 0x58; ret; 
0x0000000000411a07: add byte ptr [rax], al; add byte ptr [rbp + 0x48], dh; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000000479ddd: add byte ptr [rax], al; add byte ptr [rbp + 0x49], dh; add rsp, 0x58; ret; 
0x0000000000411b85: add byte ptr [rax], al; add byte ptr [rbp + 0x4a], dh; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x00000000004152ed: add byte ptr [rax], al; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x0000000000454ef9: add byte ptr [rax], al; add byte ptr [rbp + 0x51], dh; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000040d9fc: add byte ptr [rax], al; add byte ptr [rbp + 0x57890fc0], al; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000475e9a: add byte ptr [rax], al; add byte ptr [rbp + 0x78], dh; add rsp, 0x98; ret; 
0x0000000000487df7: add byte ptr [rax], al; add byte ptr [rbp + 0x79], dh; leave; ret; 
0x00000000004217e9: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000000452987: add byte ptr [rax], al; add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000045117b: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x000000000048dec6: add byte ptr [rax], al; add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x00000000004748a1: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000000485d09: add byte ptr [rax], al; add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000041d1dd: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000490f49: add byte ptr [rax], al; add byte ptr [rbp + 7], dh; cmp qword ptr [r9 + 0x38], 0; je 0x90fa4; add rsp, 0x18; ret; 
0x000000000040b747: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x000000000041b739: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; and eax, 0x38; cmp eax, 8; je 0x1b747; ret; 
0x000000000047472f: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; and edx, 0x38; cmp edx, 8; je 0x7473d; ret; 
0x0000000000479d70: add byte ptr [rax], al; add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x000000000046c652: add byte ptr [rax], al; add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000452800: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; add rsp, 8; ret; 
0x0000000000452a3c: add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x0000000000479c48: add byte ptr [rax], al; add byte ptr [rbp - 0x479e8a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000450589: add byte ptr [rax], al; add byte ptr [rbp - 0x47ef8a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004542e5: add byte ptr [rax], al; add byte ptr [rbp - 0x75], cl; or cl, byte ptr [rbx + rcx*4 + 0x50]; cmp byte ptr [rbp - 0x6af0be37], al; ret; 
0x0000000000402087: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ret; 
0x000000000048a2dd: add byte ptr [rax], al; add byte ptr [rbp - 0x77], cl; ror byte ptr [rcx - 0x7d], 1; ret 0x4901; 
0x0000000000416a55: add byte ptr [rax], al; add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x00000000004749f6: add byte ptr [rax], al; add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000004439ad: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044337d: add byte ptr [rax], al; add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x00000000004166ba: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x000000000042206a: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000411a10: add byte ptr [rax], al; add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000042242d: add byte ptr [rax], al; add byte ptr [rbx + 0xa9f9615], cl; add bh, dh; ret 0; 
0x0000000000433f6d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433efd: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433e8d: add byte ptr [rax], al; add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000451d78: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x5e], cl; or byte ptr [rcx - 0xa], al; ret; 
0x000000000040a8ad: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000046615d: add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x7b], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000411ce8: add byte ptr [rax], al; add byte ptr [rbx - 0x76b7ffbb], cl; pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x0000000000402040: add byte ptr [rax], al; add byte ptr [rbx - 0x7a07dba4], cl; test byte ptr [rdi], 0x9f; ret 0xc031; 
0x00000000004719d3: add byte ptr [rax], al; add byte ptr [rbx - 0x7cb7fbb5], cl; ret; 
0x000000000043fd01: add byte ptr [rax], al; add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x000000000045303d: add byte ptr [rax], al; add byte ptr [rcx + 0x104e23c1], cl; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000045e969: add byte ptr [rax], al; add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x0000000000456cd2: add byte ptr [rax], al; add byte ptr [rcx + 0x39], al; fdiv dword ptr [rsi + rcx - 0x77]; add eax, 0x6ddb0; pop rbx; ret; 
0x0000000000454356: add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; leave; jbe 0x5437d; ret; 
0x0000000000488d8d: add byte ptr [rax], al; add byte ptr [rcx + 0x3f490], cl; add byte ptr [rax - 0x7d], cl; ror dword ptr [rax], 0x83; ret 0x8001; 
0x00000000004129f7: add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x000000000048246e: add byte ptr [rax], al; add byte ptr [rcx + rax - 0x10], dh; inc dword ptr [rsi + 0x10]; pop rbx; ret; 
0x00000000004763af: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004794fa: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000414952: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x000000000047561c: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x0000000000475979: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000475e6e: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x3a], cl; mov eax, 0xe; syscall; 
0x0000000000461fda: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; pop r12; ret; 
0x000000000048e7ed: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000041ae56: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; lea rsi, [rip + 0x7fb1d]; syscall; 
0x000000000040be8d: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x0000000000415ef0: add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x00000000004154ee: add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; mov byte ptr [rax + 0x6b], 0x4c; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004705b3: add byte ptr [rax], al; add byte ptr [rcx - 0x46], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004652f3: add byte ptr [rax], al; add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x00000000004846dd: add byte ptr [rax], al; add byte ptr [rcx - 0x73], cl; add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x0000000000411313: add byte ptr [rax], al; add byte ptr [rcx - 0x74b7cbbd], cl; jl 0x11341; or byte ptr [rbx - 0x7bf00002], al; ret; 
0x000000000048231f: add byte ptr [rax], al; add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0x850f; 
0x00000000004705b9: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; adc al, 0xd0; jmp rdx; 
0x0000000000451483: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; jge 0x5148a; call rbx; 
0x00000000004514b8: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; jge 0x514bf; call rbx; 
0x0000000000452298: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; jge 0x5229f; call rbx; 
0x00000000004515dd: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; mov rax, qword ptr ss:[rsp + 0x10]; mov rdi, rbp; call rax; 
0x000000000040c3d1: add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000045c0c9: add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000408075: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; fisttp word ptr [rax - 0x7d]; ret; 
0x000000000047668d: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8948; 
0x00000000004039ab: add byte ptr [rax], al; add byte ptr [rcx - 0x77], cl; ret 0x8ae8; 
0x0000000000424c3d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042353d: add byte ptr [rax], al; add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000045d81b: add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0x7501; 
0x000000000042afe4: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 1; 
0x000000000042b00a: add byte ptr [rax], al; add byte ptr [rcx - 9], cl; ret 2; 
0x0000000000470623: add byte ptr [rax], al; add byte ptr [rcx], dh; in eax, dx; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004220a7: add byte ptr [rax], al; add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000477d4a: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x000000000042a89a: add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x000000000041ae9e: add byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0xa], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000416760: add byte ptr [rax], al; add byte ptr [rcx], dh; shr al, 0x46; ret; 
0x000000000046c5ab: add byte ptr [rax], al; add byte ptr [rdi + 0x1f88307], al; jg 0x6c5c0; ret; 
0x0000000000447e97: add byte ptr [rax], al; add byte ptr [rdi + 0x64], dh; vmovdqu64 zmmword ptr [rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000419f5d: add byte ptr [rax], al; add byte ptr [rdi + 0xae24a05], al; add byte ptr [rbx + 0x57f01f8], al; ret; 
0x0000000000417ad5: add byte ptr [rax], al; add byte ptr [rdi + 0xb06d205], al; add byte ptr [rbx + 0x3d7f01f8], al; add rsp, 8; ret; 
0x0000000000410d39: add byte ptr [rax], al; add byte ptr [rdi + 0xe], dh; movsxd rdi, edi; lea rax, [rip + 0xb11b8]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000492fdf: add byte ptr [rax], al; add byte ptr [rdi + 1], bh; call rax; 
0x0000000000455384: add byte ptr [rax], al; add byte ptr [rdi + rcx + 0x45], al; ror byte ptr [rax - 0x75], 1; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000420350: add byte ptr [rax], al; add byte ptr [rdi + rcx + 0x46], cl; ret 0x2a8; 
0x0000000000474227: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x0000000000418112: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x000000000047a49a: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000447ae9: add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000433074: add byte ptr [rax], al; add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000401a4d: add byte ptr [rax], al; add byte ptr [rdi], cl; lahf; ret 0x3145; 
0x00000000004340bd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000043fd9d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000046f55d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0xb5; pop rax; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x000000000044cebd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000043412d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000041080c: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x8901; 
0x000000000042799d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042a8fd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042a8ed: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000042a90d: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x2a950; add rax, rdi; ret; 
0x000000000042a8dd: add byte ptr [rax], al; add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000000475d29: add byte ptr [rax], al; add byte ptr [rdi], cl; sub dword ptr [rsp + 0x20], eax; call 0x882c0; call rbx; 
0x0000000000479c6d: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rbp + 0x48000000], edi; add esp, 0x78; ret; 
0x00000000004860e0: add byte ptr [rax], al; add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x000000000040ecf2: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rip - 0x76ffffeb], eax; ret 0xc083; 
0x0000000000488f77: add byte ptr [rax], al; add byte ptr [rdi], cl; xchg eax, esp; ret 0xde89; 
0x000000000042b71d: add byte ptr [rax], al; add byte ptr [rdx + 0x5e], dh; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000479db8: add byte ptr [rax], al; add byte ptr [rip + 0x410000], dil; je 0x79df0; mov eax, 0x101; syscall; 
0x000000000044c4b3: add byte ptr [rax], al; add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000041aa5c: add byte ptr [rax], al; add byte ptr [rsi + 0x80], bh; mov eax, 0xca; syscall; 
0x000000000048471f: add byte ptr [rax], al; add byte ptr [rsi + 0x80], bh; mov eax, r9d; syscall; 
0x000000000041ab19: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000041ab19: add byte ptr [rax], al; add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x000000000041a76f: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000047c12a: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x0000000000419ca2: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x0000000000458dd9: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret 0x4166; 
0x000000000042a802: add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000475974: add byte ptr [rax], al; add byte ptr [rsi + 1], bh; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000041b96a: add byte ptr [rax], al; add byte ptr [rsi + 1], dh; ret; 
0x000000000041fa2b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; cmp byte ptr [rip + 0xac7e5], 0; jne 0x1fa40; ret; 
0x00000000004511eb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0xb; syscall; 
0x000000000045036b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000442e6b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000044334b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000443acb: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044d52b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000044ddab: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044bc3b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044bd3b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; lea rax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x000000000047935b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000477e3b: add byte ptr [rax], al; add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x00000000004416cd: add byte ptr [rax], al; add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000473b6d: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x00000000004182cf: add byte ptr [rax], al; add byte ptr [rsi - 1], bh; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x00000000004641c6: add byte ptr [rax], al; add cl, ch; adc al, byte ptr [rsi]; add byte ptr [rax], al; nop; ret; 
0x000000000046c5bd: add byte ptr [rax], al; add cl, ch; in eax, 0xfa; jmp qword ptr [rsi + 0x2e]; 
0x000000000040d486: add byte ptr [rax], al; add cl, ch; ret 0xfffc; 
0x0000000000419790: add byte ptr [rax], al; add cl, ch; ret; 
0x0000000000413596: add byte ptr [rax], al; add cl, ch; retf 0xfffc; jmp qword ptr [rsi - 0x70]; 
0x000000000040186a: add byte ptr [rax], al; add cl, cl; ret; 
0x000000000047477f: add byte ptr [rax], al; add dh, al; xor byte ptr [rdx + 9], 0; add byte ptr [rax], al; ret; 
0x0000000000489ab1: add byte ptr [rax], al; add dh, dh; add eax, 0x42b09; jne 0x89abe; ret; 
0x00000000004231fd: add byte ptr [rax], al; add dh, dh; add eax, 0xa91c6; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x000000000042301d: add byte ptr [rax], al; add dh, dh; add eax, 0xa93a6; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x0000000000422e0d: add byte ptr [rax], al; add dh, dh; add eax, 0xa95b6; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x000000000045572f: add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x0000000000411fad: add byte ptr [rax], al; add dh, dh; ret 0x7420; 
0x0000000000445581: add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x000000000041b3a4: add byte ptr [rax], al; add dh, dh; ret 0x7502; 
0x0000000000467655: add byte ptr [rax], al; add dh, dh; ret 0xf01; 
0x000000000043f848: add byte ptr [rax], al; add eax, ecx; vzeroupper; ret; 
0x000000000046584e: add byte ptr [rax], al; add r14, r15; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000047835e: add byte ptr [rax], al; add rax, 3; ret; 
0x000000000042a6b3: add byte ptr [rax], al; add rax, rdi; add rax, rcx; ret; 
0x0000000000418e5e: add byte ptr [rax], al; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000420b39: add byte ptr [rax], al; add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000004541a4: add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x000000000041fcdd: add byte ptr [rax], al; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000413884: add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041fe2a: add byte ptr [rax], al; add rsp, 0x18; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000049335e: add byte ptr [rax], al; add rsp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000041423f: add byte ptr [rax], al; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000450429: add byte ptr [rax], al; add rsp, 0x68; pop rbp; pop r12; ret; 
0x00000000004860e7: add byte ptr [rax], al; add rsp, 0x68; ret; 
0x000000000044df48: add byte ptr [rax], al; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000004907a0: add byte ptr [rax], al; add rsp, 0x78; pop rbp; pop r12; ret; 
0x0000000000479c74: add byte ptr [rax], al; add rsp, 0x78; ret; 
0x00000000004904d5: add byte ptr [rax], al; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000403f4c: add byte ptr [rax], al; add rsp, 0x98; ret; 
0x0000000000472918: add byte ptr [rax], al; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000461fd4: add byte ptr [rax], al; add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000472b66: add byte ptr [rax], al; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000472b44: add byte ptr [rax], al; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000413c57: add byte ptr [rax], al; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000004886f5: add byte ptr [rax], al; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000457516: add byte ptr [rax], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000453548: add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000041b219: add byte ptr [rax], al; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004778ae: add byte ptr [rax], al; and ch, 0x10; lea rdx, [rip - 0x2beba]; lea rax, [rip - 0x2fac1]; cmovne rax, rdx; ret; 
0x000000000042328e: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0x23836]; lea rax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230ae: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0x23a06]; lea rax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422e9e: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0x23c26]; lea rax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x000000000042326e: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0x27f56]; lea rax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x000000000042308e: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0x28126]; lea rax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e7e: add byte ptr [rax], al; and ch, 2; lea rdx, [rip + 0x28346]; lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x000000000044e3b8: add byte ptr [rax], al; and ch, 4; jne 0x4e378; ret; 
0x00000000004777a8: add byte ptr [rax], al; and ch, 4; jne 0x77768; ret; 
0x0000000000475625: add byte ptr [rax], al; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000042a8de: add byte ptr [rax], al; bsf eax, eax; add rax, rdi; ret; 
0x000000000042a8ee: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042a8fe: add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000044b02e: add byte ptr [rax], al; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042a90e: add byte ptr [rax], al; bsf eax, eax; sub rdx, rax; jbe 0x2a950; add rax, rdi; ret; 
0x000000000043f4d0: add byte ptr [rax], al; bsf rax, rdx; ret; 
0x000000000044eee5: add byte ptr [rax], al; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004247be: add byte ptr [rax], al; bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000476e28: add byte ptr [rax], al; bsr rax, rax; add rax, rdi; ret; 
0x0000000000476ec2: add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000414cd9: add byte ptr [rax], al; call 0x14870; endbr64; cmp qword ptr [rip + 0xb02e4], 0; je 0x14cef; ret; 
0x0000000000403f3e: add byte ptr [rax], al; call 0x50da0; cmp eax, -1; je 0x3ff0; add rsp, 0x98; ret; 
0x0000000000473a39: add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000403176: add byte ptr [rax], al; call qword ptr [rbx + 0x10]; 
0x000000000040aad6: add byte ptr [rax], al; call qword ptr [rbx]; 
0x0000000000492ea8: add byte ptr [rax], al; call rax; 
0x000000000041b980: add byte ptr [rax], al; cmova rax, rdx; mov qword ptr [rip + 0xb08ab], rax; ret; 
0x000000000048e49b: add byte ptr [rax], al; cmove edx, eax; call 0x7de50; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000422ce9: add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000422169: add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000495f4e: add byte ptr [rax], al; cmp dl, 0x50; jne 0x95f65; xor eax, eax; ret; 
0x000000000047566b: add byte ptr [rax], al; cmp eax, 0x21; je 0x756d0; mov eax, 0x16; ret; 
0x000000000041aa2a: add byte ptr [rax], al; cmp eax, 1; je 0x1aa38; ret; 
0x0000000000445a38: add byte ptr [rax], al; cmp eax, ecx; jne 0x45af5; xor eax, eax; ret; 
0x0000000000422327: add byte ptr [rax], al; cmp ecx, 0x120; je 0x22338; ret; 
0x0000000000422397: add byte ptr [rax], al; cmp ecx, 0x120; je 0x223a8; ret; 
0x0000000000422ca7: add byte ptr [rax], al; cmp ecx, 0x120; je 0x22cb8; ret; 
0x00000000004232c7: add byte ptr [rax], al; cmp ecx, 0x120; je 0x232d8; ret; 
0x0000000000423347: add byte ptr [rax], al; cmp ecx, 0x120; je 0x23358; ret; 
0x00000000004764f7: add byte ptr [rax], al; cmp ecx, 0x120; je 0x76508; ret; 
0x00000000004777d7: add byte ptr [rax], al; cmp ecx, 0x120; je 0x777e8; ret; 
0x000000000044ce24: add byte ptr [rax], al; cmp edx, 1; ja 0x4cec0; je 0x4ceb0; mov byte ptr [rdi], 0; ret; 
0x0000000000473a19: add byte ptr [rax], al; cmp qword ptr [rax + 0x30], 0; je 0x73a28; ret; 
0x000000000047493e: add byte ptr [rax], al; cmp qword ptr [rcx], 0; jns 0x748cf; mov eax, 0x6e; ret; 
0x0000000000493d4b: add byte ptr [rax], al; cmp qword ptr [rsi + 8], rcx; ja 0x93d55; sbb eax, eax; ret; 
0x0000000000456cd3: add byte ptr [rax], al; cmp r8d, ebx; je 0x56ce8; mov dword ptr [rip + 0x6ddb0], eax; pop rbx; ret; 
0x0000000000454357: add byte ptr [rax], al; cmp r9, rcx; jbe 0x5437d; ret; 
0x000000000041fbb0: add byte ptr [rax], al; cmp rax, rsi; jne 0x1fb80; mov dword ptr [rip + 0xac663], 0; ret; 
0x0000000000447b60: add byte ptr [rax], al; cmp rdx, 0x20; ja 0x47b80; movups xmmword ptr [rax], xmm0; movups xmmword ptr [rax + rdx - 0x10], xmm0; ret; 
0x000000000044ba35: add byte ptr [rax], al; cmp rdx, 0x40; ja 0x4bb09; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000447e35: add byte ptr [rax], al; cmp rdx, 0x80; ja 0x47f09; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000045027e: add byte ptr [rax], al; endbr64; mov eax, 0x18; syscall; 
0x000000000041867e: add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x000000000049591e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x95930; ret; 
0x0000000000495c6e: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x95c80; ret; 
0x0000000000456cae: add byte ptr [rax], al; endbr64; mov eax, dword ptr [rip + 0x75926]; test eax, eax; je 0x56cc0; ret; 
0x00000000004504de: add byte ptr [rax], al; endbr64; mov eax, dword ptr fs:[0x18]; test eax, eax; jne 0x50500; syscall; 
0x0000000000464fde: add byte ptr [rax], al; endbr64; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x0000000000464ffe: add byte ptr [rax], al; endbr64; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x000000000046501e: add byte ptr [rax], al; endbr64; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x000000000041918e: add byte ptr [rax], al; endbr64; mov rax, -1; ret; 
0x0000000000485c2e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000419ece: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049319e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047478e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x52313], eax; ret; 
0x000000000041ba6e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xb07b6], eax; ret; 
0x000000000041b7ee: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa9fe1], rax; ret; 
0x000000000041b76e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xaa001], rax; ret; 
0x000000000045822e: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x743c5]; ret; 
0x0000000000419eae: add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0xab2a5]; ret; 
0x0000000000419ede: add byte ptr [rax], al; endbr64; mov rax, rdi; ret; 
0x00000000004806be: add byte ptr [rax], al; endbr64; mov rcx, qword ptr [rip + 0x4c1d5]; cmp rcx, rdi; je 0x806d8; ret; 
0x00000000004016be: add byte ptr [rax], al; endbr64; ret; 
0x00000000004979ae: add byte ptr [rax], al; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000417d6e: add byte ptr [rax], al; endbr64; test byte ptr [rdi], 0x80; jne 0x17d80; ret; 
0x000000000044ee2e: add byte ptr [rax], al; endbr64; test rsi, rsi; jne 0x4ee3d; xor rax, rax; ret; 
0x000000000041910e: add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x0000000000450f8e: add byte ptr [rax], al; endbr64; xor eax, eax; syscall; 
0x00000000004016b3: add byte ptr [rax], al; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000410d3a: add byte ptr [rax], al; ja 0x10d4c; movsxd rdi, edi; lea rax, [rip + 0xb11b8]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x00000000004472d8: add byte ptr [rax], al; ja 0x473c0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000447e98: add byte ptr [rax], al; ja 0x47f00; vmovdqu64 zmmword ptr [rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000447e3c: add byte ptr [rax], al; ja 0x47f09; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000042b71e: add byte ptr [rax], al; jb 0x2b780; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000044861e: add byte ptr [rax], al; jb 0x48680; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000041b79b: add byte ptr [rax], al; jbe 0x1b7a0; ret; 
0x000000000041b7db: add byte ptr [rax], al; jbe 0x1b7e0; ret; 
0x000000000041b96b: add byte ptr [rax], al; jbe 0x1b970; ret; 
0x0000000000414cea: add byte ptr [rax], al; je 0x14cef; ret; 
0x000000000042212a: add byte ptr [rax], al; je 0x22101; ret; 
0x000000000042232d: add byte ptr [rax], al; je 0x22338; ret; 
0x000000000042237a: add byte ptr [rax], al; je 0x22347; ret; 
0x000000000042239d: add byte ptr [rax], al; je 0x223a8; ret; 
0x00000000004223ea: add byte ptr [rax], al; je 0x223b7; ret; 
0x0000000000422cad: add byte ptr [rax], al; je 0x22cb8; ret; 
0x00000000004232cd: add byte ptr [rax], al; je 0x232d8; ret; 
0x000000000042334d: add byte ptr [rax], al; je 0x23358; ret; 
0x000000000042339a: add byte ptr [rax], al; je 0x23367; ret; 
0x000000000043fd1d: add byte ptr [rax], al; je 0x3fda0; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000443f3d: add byte ptr [rax], al; je 0x43fc0; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x000000000044c05d: add byte ptr [rax], al; je 0x4c0e0; mov byte ptr [rdi], 0; lea rax, [rdi]; ret; 
0x000000000044ce2d: add byte ptr [rax], al; je 0x4ceb0; mov byte ptr [rdi], 0; ret; 
0x000000000044e3ca: add byte ptr [rax], al; je 0x4e3a7; ret; 
0x000000000045337e: add byte ptr [rax], al; je 0x533a0; lea rax, [rip + 0x78ee7]; ret; 
0x00000000004764fd: add byte ptr [rax], al; je 0x76508; ret; 
0x000000000047654a: add byte ptr [rax], al; je 0x76517; ret; 
0x00000000004777ba: add byte ptr [rax], al; je 0x77797; ret; 
0x00000000004777dd: add byte ptr [rax], al; je 0x777e8; ret; 
0x000000000048246f: add byte ptr [rax], al; je 0x82474; lock inc dword ptr [rsi + 0x10]; pop rbx; ret; 
0x0000000000493c13: add byte ptr [rax], al; jmp rax; 
0x000000000046fb68: add byte ptr [rax], al; jmp rdx; 
0x0000000000411a08: add byte ptr [rax], al; jne 0x11a54; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000000411b86: add byte ptr [rax], al; jne 0x11bd4; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x000000000041387e: add byte ptr [rax], al; jne 0x1391a; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000414239: add byte ptr [rax], al; jne 0x14332; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000419b75: add byte ptr [rax], al; jne 0x19b88; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x000000000041b73a: add byte ptr [rax], al; jne 0x1b746; and eax, 0x38; cmp eax, 8; je 0x1b747; ret; 
0x000000000041d1de: add byte ptr [rax], al; jne 0x1d1e9; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000041fa39: add byte ptr [rax], al; jne 0x1fa40; ret; 
0x00000000004217ea: add byte ptr [rax], al; jne 0x217f8; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000000422d86: add byte ptr [rax], al; jne 0x22d2d; ret; 
0x000000000042b768: add byte ptr [rax], al; jne 0x2b4a0; ret; 
0x0000000000448668: add byte ptr [rax], al; jne 0x483a0; ret; 
0x000000000044e471: add byte ptr [rax], al; jne 0x4e494; add rsp, 0x20; pop rbx; ret; 
0x00000000004502e9: add byte ptr [rax], al; jne 0x50301; add rsp, 0x28; ret; 
0x0000000000450423: add byte ptr [rax], al; jne 0x504d3; add rsp, 0x68; pop rbp; pop r12; ret; 
0x0000000000450df9: add byte ptr [rax], al; jne 0x50e43; add rsp, 0x68; ret; 
0x0000000000450e88: add byte ptr [rax], al; jne 0x50ed3; add rsp, 0x18; ret; 
0x0000000000450f40: add byte ptr [rax], al; jne 0x50f8b; add rsp, 0x58; ret; 
0x000000000045117c: add byte ptr [rax], al; jne 0x51185; add rsp, 0x28; ret; 
0x000000000045119c: add byte ptr [rax], al; jne 0x511b0; mov eax, 9; syscall; 
0x00000000004527a7: add byte ptr [rax], al; jne 0x527c5; add rsp, 0x1018; ret; 
0x0000000000452988: add byte ptr [rax], al; jne 0x52996; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000452a18: add byte ptr [rax], al; jne 0x52a26; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000452af3: add byte ptr [rax], al; jne 0x52b3d; add rsp, 0x58; ret; 
0x0000000000453639: add byte ptr [rax], al; jne 0x53650; mov r8, qword ptr [rip + 0x73d44]; mov rax, r8; ret; 
0x0000000000454efa: add byte ptr [rax], al; jne 0x54f4f; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x00000000004653cb: add byte ptr [rax], al; jne 0x65414; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000466eaa: add byte ptr [rax], al; jne 0x66ef5; add rsp, 0x38; ret; 
0x000000000046c4b6: add byte ptr [rax], al; jne 0x6c4c2; add rsp, 0xd8; ret; 
0x000000000046c572: add byte ptr [rax], al; jne 0x6c57e; add rsp, 0xd8; ret; 
0x0000000000474730: add byte ptr [rax], al; jne 0x7473c; and edx, 0x38; cmp edx, 8; je 0x7473d; ret; 
0x00000000004748a2: add byte ptr [rax], al; jne 0x748ac; add rsp, 0x10; pop rbp; ret; 
0x0000000000474b50: add byte ptr [rax], al; jne 0x74b5a; add rsp, 0x10; pop rbp; ret; 
0x0000000000475e9b: add byte ptr [rax], al; jne 0x75f17; add rsp, 0x98; ret; 
0x00000000004799fa: add byte ptr [rax], al; jne 0x79a3a; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000479c6e: add byte ptr [rax], al; jne 0x79d33; add rsp, 0x78; ret; 
0x0000000000479d71: add byte ptr [rax], al; jne 0x79d7d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000479dde: add byte ptr [rax], al; jne 0x79e2b; add rsp, 0x58; ret; 
0x0000000000479f1a: add byte ptr [rax], al; jne 0x79f44; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000485d0a: add byte ptr [rax], al; jne 0x85d14; add rsp, 0x20; pop rbx; ret; 
0x0000000000485e21: add byte ptr [rax], al; jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485ef3: add byte ptr [rax], al; jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fc3: add byte ptr [rax], al; jne 0x85ff4; add rsp, 0x58; ret; 
0x00000000004860e1: add byte ptr [rax], al; jne 0x86197; add rsp, 0x68; ret; 
0x00000000004861f7: add byte ptr [rax], al; jne 0x86223; add rsp, 0x38; ret; 
0x0000000000487df8: add byte ptr [rax], al; jne 0x87e75; leave; ret; 
0x000000000048d99b: add byte ptr [rax], al; jne 0x8daa2; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048dd68: add byte ptr [rax], al; jne 0x8dd90; mov rdx, qword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000048dde4: add byte ptr [rax], al; jne 0x8dded; add rsp, 0x28; ret; 
0x000000000048dec7: add byte ptr [rax], al; jne 0x8ded0; add rsp, 0x38; ret; 
0x000000000048df37: add byte ptr [rax], al; jne 0x8df40; add rsp, 0x38; ret; 
0x000000000048e022: add byte ptr [rax], al; jne 0x8e02b; add rsp, 0x38; ret; 
0x000000000048e082: add byte ptr [rax], al; jne 0x8e08b; add rsp, 0x38; ret; 
0x00000000004904cf: add byte ptr [rax], al; jne 0x906ef; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000049079a: add byte ptr [rax], al; jne 0x9092e; add rsp, 0x78; pop rbp; pop r12; ret; 
0x0000000000490f4a: add byte ptr [rax], al; jne 0x90f55; cmp qword ptr [r9 + 0x38], 0; je 0x90fa4; add rsp, 0x18; ret; 
0x000000000040b748: add byte ptr [rax], al; jne 0xb754; add rsp, 0xd8; ret; 
0x000000000040b806: add byte ptr [rax], al; jne 0xb812; add rsp, 0xd8; ret; 
0x000000000040193a: add byte ptr [rax], al; lea rax, [rbx + 1]; pop rbx; ret; 
0x000000000044434e: add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000044435e: add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000044436e: add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000044437e: add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000044438e: add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x00000000004442ad: add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x00000000004442de: add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x00000000004442ee: add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x00000000004442fe: add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000044430e: add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000044431e: add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000044425a: add byte ptr [rax], al; lea rax, [rdi + 7]; ret; 
0x000000000044432e: add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000044433e: add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000043ea0d: add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000047782f: add byte ptr [rax], al; lea rax, [rip + 0x18c8]; cmove rax, rdx; ret; 
0x000000000042338e: add byte ptr [rax], al; lea rax, [rip + 0x290c9]; test edx, 0x40000000; je 0x23367; ret; 
0x0000000000477812: add byte ptr [rax], al; lea rax, [rip + 0x295]; cmove rax, rdx; ret; 
0x000000000042211e: add byte ptr [rax], al; lea rax, [rip + 0x2a099]; test edx, 0x40000000; je 0x22101; ret; 
0x000000000042236e: add byte ptr [rax], al; lea rax, [rip + 0x2ac09]; test edx, 0x40000000; je 0x22347; ret; 
0x00000000004223de: add byte ptr [rax], al; lea rax, [rip + 0x2b299]; test edx, 0x40000000; je 0x223b7; ret; 
0x00000000004886a0: add byte ptr [rax], al; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000423302: add byte ptr [rax], al; lea rax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x0000000000422ce2: add byte ptr [rax], al; lea rax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x0000000000422d7f: add byte ptr [rax], al; lea rax, [rip + 0x8638]; jne 0x22d2d; ret; 
0x000000000047652b: add byte ptr [rax], al; lea rax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x000000000047653e: add byte ptr [rax], al; lea rax, [rip + 0xf29]; test edx, 0x40000000; je 0x76517; ret; 
0x000000000042927d: add byte ptr [rax], al; lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000414eb3: add byte ptr [rax], al; lea rcx, [rip + 0xb1e04]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000480080: add byte ptr [rax], al; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000480e4d: add byte ptr [rax], al; lea rdi, [rip + 0x2de02]; mov eax, 0x59; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000466636: add byte ptr [rax], al; lea rdi, [rip + 0x661c1]; call 0x1ab10; xor eax, eax; add rsp, 8; ret; 
0x0000000000422e26: add byte ptr [rax], al; lea rdx, [rip + 0x11321]; cmovne rax, rdx; ret; 
0x0000000000422d44: add byte ptr [rax], al; lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x0000000000422162: add byte ptr [rax], al; lea rdx, [rip + 0x2935]; cmovne rax, rdx; ret; 
0x0000000000422456: add byte ptr [rax], al; lea rdx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x000000000044e384: add byte ptr [rax], al; lea rdx, [rip + 0xaa3]; cmovne rax, rdx; ret; 
0x0000000000477774: add byte ptr [rax], al; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x0000000000423216: add byte ptr [rax], al; lea rdx, [rip + 0xe441]; cmovne rax, rdx; ret; 
0x0000000000423036: add byte ptr [rax], al; lea rdx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x0000000000450e06: add byte ptr [rax], al; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000040ac68: add byte ptr [rax], al; lea rsi, [rip + 0x8e2ff]; lea rdi, [rip + 0x8e305]; call 0x44c0; xor eax, eax; ret; 
0x000000000040186b: add byte ptr [rax], al; leave; ret; 
0x0000000000488375: add byte ptr [rax], al; lock cmpxchg dword ptr [rdi], edx; jne 0x883b3; xor eax, eax; ret; 
0x0000000000442e7e: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x00000000004416ce: add byte ptr [rax], al; mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000474780: add byte ptr [rax], al; mov byte ptr [rax + 0x972], 0; ret; 
0x000000000044a0e3: add byte ptr [rax], al; mov byte ptr [rdi], 0; xtest; je 0x4a0f1; vzeroall; ret; 
0x000000000044396e: add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044333e: add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000040eaf2: add byte ptr [rax], al; mov byte ptr [rsp + 0x40], 0x20; jmp rdx; 
0x0000000000454192: add byte ptr [rax], al; mov byte ptr fs:[0x971], 0; mov byte ptr fs:[0x972], 0; add rsp, 0x10; pop rbx; ret; 
0x000000000045419b: add byte ptr [rax], al; mov byte ptr fs:[0x972], 0; add rsp, 0x10; pop rbx; ret; 
0x000000000044398e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x000000000044335e: add byte ptr [rax], al; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000408df6: add byte ptr [rax], al; mov dword ptr [rax + 4], ebx; pop rbx; ret; 
0x000000000041694c: add byte ptr [rax], al; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x0000000000488160: add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000475f40: add byte ptr [rax], al; mov dword ptr [rip + 0x50b80], eax; add rsp, 8; ret; 
0x0000000000475f35: add byte ptr [rax], al; mov dword ptr [rip + 0x50b87], eax; call 0x79b70; mov dword ptr [rip + 0x50b80], eax; add rsp, 8; ret; 
0x000000000041ba60: add byte ptr [rax], al; mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041b711: add byte ptr [rax], al; mov dword ptr [rsi], eax; mov byte ptr [rdx + 0x971], dil; xor eax, eax; ret; 
0x000000000046fb60: add byte ptr [rax], al; mov dword ptr [rsp + 0x50], 0x20; jmp rdx; 
0x000000000046fb58: add byte ptr [rax], al; mov dword ptr [rsp + 0x54], 0; mov dword ptr [rsp + 0x50], 0x20; jmp rdx; 
0x000000000040eaea: add byte ptr [rax], al; mov dword ptr [rsp + 0x58], 0; mov byte ptr [rsp + 0x40], 0x20; jmp rdx; 
0x000000000048d376: add byte ptr [rax], al; mov dword ptr fs:[0x48], r8d; ret; 
0x000000000043404e: add byte ptr [rax], al; mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x000000000044397e: add byte ptr [rax], al; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000474ad6: add byte ptr [rax], al; mov eax, 0x16; ret; 
0x0000000000450e10: add byte ptr [rax], al; mov eax, 0x48; syscall; 
0x0000000000403092: add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x000000000041ad9e: add byte ptr [rax], al; mov eax, 0xba; syscall; 
0x000000000041aa62: add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x0000000000475da5: add byte ptr [rax], al; mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x75dc0; ret; 
0x000000000041ab1f: add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x000000000041aac3: add byte ptr [rax], al; mov eax, 0xca; xor sil, 0x80; syscall; 
0x00000000004652fa: add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x00000000004540c5: add byte ptr [rax], al; mov eax, 0xda; syscall; 
0x000000000044fa96: add byte ptr [rax], al; mov eax, 0xe4; syscall; 
0x000000000041ad3c: add byte ptr [rax], al; mov eax, 0xe; syscall; 
0x00000000004664ac: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x000000000041379e: add byte ptr [rax], al; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000041459e: add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x00000000004755c1: add byte ptr [rax], al; mov eax, 1; ret; 
0x00000000004881d1: add byte ptr [rax], al; mov eax, 2; ret; 
0x00000000004747de: add byte ptr [rax], al; mov eax, dword ptr [rip + 0x57c02]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x539fe], eax; ret; 
0x000000000044fb1e: add byte ptr [rax], al; mov eax, edx; syscall; 
0x0000000000454f03: add byte ptr [rax], al; mov eax, r12d; pop r12; ret; 
0x0000000000411c9f: add byte ptr [rax], al; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000461fdb: add byte ptr [rax], al; mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000414953: add byte ptr [rax], al; mov eax, r9d; syscall; 
0x00000000004439ae: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044337e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x000000000044cede: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000044338e: add byte ptr [rax], al; mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x000000000045303e: add byte ptr [rax], al; mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000422c9f: add byte ptr [rax], al; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x22cb8; ret; 
0x00000000004232bf: add byte ptr [rax], al; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x232d8; ret; 
0x00000000004764ef: add byte ptr [rax], al; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x76508; ret; 
0x00000000004777cf: add byte ptr [rax], al; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x777e8; ret; 
0x0000000000492fe0: add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000433f6e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433efe: add byte ptr [rax], al; mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433e8e: add byte ptr [rax], al; mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433fde: add byte ptr [rax], al; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000041aa5d: add byte ptr [rax], al; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000484720: add byte ptr [rax], al; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000041ab1a: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041ab1a: add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000473b6e: add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004182d0: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x0000000000418ab0: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004193b7: add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rdx + 0x18]; 
0x0000000000475975: add byte ptr [rax], al; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004845f6: add byte ptr [rax], al; mov qword ptr [rax + 0x310], rdx; movups xmmword ptr [rax + 0x300], xmm0; ret; 
0x000000000048d6a2: add byte ptr [rax], al; mov qword ptr [rax + 0x378], rdx; pop rbx; ret; 
0x000000000041902d: add byte ptr [rax], al; mov qword ptr [rax + 8], 0; ret; 
0x0000000000447c1e: add byte ptr [rax], al; mov qword ptr [rax], rdi; mov qword ptr [rax + rdx - 8], rdi; ret; 
0x000000000048dd58: add byte ptr [rax], al; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000040c3f9: add byte ptr [rax], al; mov qword ptr [rbp - 0x8a0], r8; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040d2d8: add byte ptr [rax], al; mov qword ptr [rbp - 0x8a0], r8; mov rdx, r13; mov rsi, r11; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040e0a0: add byte ptr [rax], al; mov qword ptr [rbp - 0x8a0], r8; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040d02b: add byte ptr [rax], al; mov qword ptr [rbp - 0x8b8], r8; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000485c84: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000048e0a6: add byte ptr [rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000048e1ea: add byte ptr [rax], al; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000458294: add byte ptr [rax], al; mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004882d2: add byte ptr [rax], al; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000412068: add byte ptr [rax], al; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x00000000004540b3: add byte ptr [rax], al; mov qword ptr [rdx + 8], rax; mov qword ptr [rip + 0x78250], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000496721: add byte ptr [rax], al; mov qword ptr [rip + 0x31a66], rbx; test rbx, rbx; jne 0x96710; pop rbx; ret; 
0x0000000000464f7e: add byte ptr [rax], al; mov qword ptr [rip + 0x61aa9], rax; mov qword ptr [rip + 0x61aaa], rdx; cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x000000000041ba40: add byte ptr [rax], al; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba20: add byte ptr [rax], al; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041ba00: add byte ptr [rax], al; mov qword ptr [rip + 0xa9d57], rax; ret; 
0x0000000000419f8d: add byte ptr [rax], al; mov qword ptr [rip + 0xae21e], 0; ret; 
0x0000000000401e25: add byte ptr [rax], al; mov qword ptr [rip + 0xca552], rax; pop rbx; ret; 
0x0000000000488088: add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x0000000000404217: add byte ptr [rax], al; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004506d2: add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rsp + 0x10]; mov eax, 0x4f; syscall; 
0x0000000000481705: add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x80f90; add rsp, 0xd8; ret; 
0x0000000000479e87: add byte ptr [rax], al; mov qword ptr [rsp + 0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x00000000004909aa: add byte ptr [rax], al; mov qword ptr [rsp], rax; call 0x90d40; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000041a9f8: add byte ptr [rax], al; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000046508d: add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004705b4: add byte ptr [rax], al; mov r10d, 1; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004652f4: add byte ptr [rax], al; mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000042db3e: add byte ptr [rax], al; mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004651fe: add byte ptr [rax], al; mov rax, -0x48; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x000000000044fac6: add byte ptr [rax], al; mov rax, -0x48; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000045104e: add byte ptr [rax], al; mov rax, -0x48; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041ebce: add byte ptr [rax], al; mov rax, -0x48; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x00000000004511bc: add byte ptr [rax], al; mov rax, -1; ret; 
0x000000000047838e: add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000047839e: add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000004783ae: add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000004783be: add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000004783ce: add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000004783de: add byte ptr [rax], al; mov rax, 7; ret; 
0x0000000000413792: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000418fbd: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x18fb8; ret; 
0x000000000041fba9: add byte ptr [rax], al; mov rax, qword ptr [rax + 0x870]; cmp rax, rsi; jne 0x1fb80; mov dword ptr [rip + 0xac663], 0; ret; 
0x000000000048dcee: add byte ptr [rax], al; mov rax, qword ptr [rbx + 0x10]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000047772e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e39]; ret; 
0x000000000047771e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e41]; ret; 
0x000000000047770e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e49]; ret; 
0x00000000004776fe: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e51]; ret; 
0x00000000004776ee: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e59]; ret; 
0x00000000004776de: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e61]; ret; 
0x00000000004776ce: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e69]; ret; 
0x00000000004776be: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e71]; ret; 
0x00000000004776ae: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e79]; ret; 
0x000000000047769e: add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e81]; ret; 
0x0000000000454f17: add byte ptr [rax], al; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x00000000004666e2: add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000004909b3: add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x00000000004543de: add byte ptr [rax], al; mov rax, r10; mov rcx, rdi; cmp r9, rax; jge 0x54378; ret; 
0x00000000004794fb: add byte ptr [rax], al; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000048e7ee: add byte ptr [rax], al; mov rax, r8; ret; 
0x0000000000493350: add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000416a27: add byte ptr [rax], al; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004881de: add byte ptr [rax], al; mov rax, rdx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x0000000000480e59: add byte ptr [rax], al; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000446bbe: add byte ptr [rax], al; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000042defe: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0de: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2be: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e4ae: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e6ae: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e8ae: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042dd1e: add byte ptr [rax], al; mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004439fe: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004433be: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x00000000004433ce: add byte ptr [rax], al; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000454eba: add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000451477: add byte ptr [rax], al; mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x51510; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514ac: add byte ptr [rax], al; mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x51550; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000451444: add byte ptr [rax], al; mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x51570; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522bc: add byte ptr [rax], al; mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x52330; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045228c: add byte ptr [rax], al; mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x52350; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000451451: add byte ptr [rax], al; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000465575: add byte ptr [rax], al; mov rdi, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000047561d: add byte ptr [rax], al; mov rdi, r8; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000047597a: add byte ptr [rax], al; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000040185e: add byte ptr [rax], al; mov rdi, rax; call 0x11ed0; mov eax, 0; leave; ret; 
0x000000000040180d: add byte ptr [rax], al; mov rdi, rax; call 0x12570; nop; pop rbp; ret; 
0x0000000000475d54: add byte ptr [rax], al; mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000000475cbe: add byte ptr [rax], al; mov rdi, rbp; mov eax, r8d; syscall; 
0x0000000000413787: add byte ptr [rax], al; mov rdi, rbp; pop rbp; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000416559: add byte ptr [rax], al; mov rdi, rbp; pop rbx; pop rbp; pop r12; jmp rax; 
0x000000000041b2e3: add byte ptr [rax], al; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000418a3e: add byte ptr [rax], al; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004114ef: add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000454155: add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x000000000045038e: add byte ptr [rax], al; mov rdx, -0x48; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000045054e: add byte ptr [rax], al; mov rdx, -0x48; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000004543ae: add byte ptr [rax], al; mov rdx, qword ptr [r10]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x00000000004705ba: add byte ptr [rax], al; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004704ba: add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000048dd51: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0x460]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000412061: add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x0000000000493f3e: add byte ptr [rax], al; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x0000000000401c81: add byte ptr [rax], al; mov rdx, qword ptr [rip + 0xca5d6]; mov edi, dword ptr [rsp + 0x14]; mov rsi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000433dae: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433d3e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433cce: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433bee: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433b7e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433b0e: add byte ptr [rax], al; mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000454266: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x0000000000433e1e: add byte ptr [rax], al; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000004104fa: add byte ptr [rax], al; mov rdx, r13; mov rsi, r10; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000041ae57: add byte ptr [rax], al; mov rdx, r14; lea rsi, [rip + 0x7fb1d]; syscall; 
0x000000000040be8e: add byte ptr [rax], al; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000041630e: add byte ptr [rax], al; mov rdx, r14; mov rsi, r13; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000046fdfe: add byte ptr [rax], al; mov rdx, r14; mov rsi, r15; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x0000000000415ef1: add byte ptr [rax], al; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000471104: add byte ptr [rax], al; mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000041ace4: add byte ptr [rax], al; mov rdx, rbp; lea rsi, [rip + 0x7fc90]; mov eax, 0xe; syscall; 
0x0000000000450e96: add byte ptr [rax], al; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004515de: add byte ptr [rax], al; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; mov rdi, rbp; call rax; 
0x0000000000451a86: add byte ptr [rax], al; mov rsi, qword ptr [rax]; mov rdi, r14; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x00000000004129d3: add byte ptr [rax], al; mov rsi, qword ptr [rbx + 0x10]; mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x000000000040f416: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x38]; mov rdx, r15; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000046f922: add byte ptr [rax], al; mov rsi, qword ptr [rsp + 8]; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp + 0x38]; 
0x0000000000475e6f: add byte ptr [rax], al; mov rsi, r8; mov eax, 0xe; syscall; 
0x000000000045428e: add byte ptr [rax], al; mov rsi, r8; mov rdx, rdi; cmp r9, rsi; jge 0x54248; ret; 
0x000000000041494b: add byte ptr [rax], al; mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x0000000000447dee: add byte ptr [rax], al; mov word ptr [rax], di; mov byte ptr [rax + rdx - 1], dil; vzeroupper; ret; 
0x0000000000475d2a: add byte ptr [rax], al; movaps xmmword ptr [rsp + 0x20], xmm0; call 0x882c0; call rbx; 
0x000000000044358e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x000000000044343e: add byte ptr [rax], al; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000454116: add byte ptr [rax], al; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000484644: add byte ptr [rax], al; movq xmm0, rsi; punpcklqdq xmm0, xmm2; movups xmmword ptr [rax + 0x308], xmm0; ret; 
0x000000000040f6b4: add byte ptr [rax], al; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rsi + rdx*8]; jmp rdx; 
0x000000000044646c: add byte ptr [rax], al; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004845fd: add byte ptr [rax], al; movups xmmword ptr [rax + 0x300], xmm0; ret; 
0x0000000000474228: add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000418113: add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000047a49b: add byte ptr [rax], al; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x0000000000447aea: add byte ptr [rax], al; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000041a9e9: add byte ptr [rax], al; movzx eax, al; mov dword ptr [rdi + 0x10], eax; mov byte ptr fs:[0x972], 0; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000044d309: add byte ptr [rax], al; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042a2eb: add byte ptr [rax], al; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000044d34e: add byte ptr [rax], al; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; ret; 
0x000000000042a325: add byte ptr [rax], al; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000041832e: add byte ptr [rax], al; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044d159: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042a158: add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000044561e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044560e: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000004455fe: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000004455ee: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000004455de: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000004455ce: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000445978: add byte ptr [rax], al; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x45af5; xor eax, eax; ret; 
0x000000000042799e: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042a4fe: add byte ptr [rax], al; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000000044c0ee: add byte ptr [rax], al; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x000000000044cebe: add byte ptr [rax], al; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000043fdae: add byte ptr [rax], al; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000043412e: add byte ptr [rax], al; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x0000000000443fbe: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000004340be: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000043fd9e: add byte ptr [rax], al; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000474ace: add byte ptr [rax], al; neg eax; ret; 
0x000000000048d8d5: add byte ptr [rax], al; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x0000000000403171: add byte ptr [rax], al; nop dword ptr [rax + rax]; call qword ptr [rbx + 0x10]; 
0x000000000042ab2b: add byte ptr [rax], al; nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000044d6ca: add byte ptr [rax], al; nop dword ptr [rax]; bts rax, rsi; tzcnt eax, eax; ret; 
0x000000000043f82b: add byte ptr [rax], al; nop dword ptr [rax]; bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x00000000004185bb: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x185d0; ret; 
0x0000000000452b4a: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 0x63; syscall; 
0x000000000045102a: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov eax, 0xc; syscall; 
0x000000000049322b: add byte ptr [rax], al; nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004416bb: add byte ptr [rax], al; nop dword ptr [rax]; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000442eaa: add byte ptr [rax], al; nop dword ptr [rax]; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x00000000004338ba: add byte ptr [rax], al; nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000045034a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, -0x48; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000046522a: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000442dfb: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000044164b: add byte ptr [rax], al; nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000042db5a: add byte ptr [rax], al; nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004515d7: add byte ptr [rax], al; nop dword ptr [rax]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; mov rdi, rbp; call rax; 
0x00000000004455bb: add byte ptr [rax], al; nop dword ptr [rax]; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x00000000004247db: add byte ptr [rax], al; nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000433a4a: add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004339ca: add byte ptr [rax], al; nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044c65b: add byte ptr [rax], al; nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042b77a: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000047728b: add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000401cb7: add byte ptr [rax], al; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000044c4b4: add byte ptr [rax], al; nop word ptr cs:[rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000041fa2c: add byte ptr [rax], al; nop; endbr64; cmp byte ptr [rip + 0xac7e5], 0; jne 0x1fa40; ret; 
0x000000000045124d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x1c; syscall; 
0x0000000000479a6d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x66; syscall; 
0x0000000000479a6d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x66; syscall; ret; 
0x0000000000479add: add byte ptr [rax], al; nop; endbr64; mov eax, 0x90; syscall; 
0x0000000000479b0d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x91; syscall; 
0x0000000000479b3d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x92; syscall; 
0x0000000000479b6d: add byte ptr [rax], al; nop; endbr64; mov eax, 0x93; syscall; 
0x000000000045121d: add byte ptr [rax], al; nop; endbr64; mov eax, 0xa; syscall; 
0x00000000004511ec: add byte ptr [rax], al; nop; endbr64; mov eax, 0xb; syscall; 
0x000000000045036c: add byte ptr [rax], al; nop; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x00000000004442cd: add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x00000000004442bd: add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x0000000000442e6c: add byte ptr [rax], al; nop; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000044334c: add byte ptr [rax], al; nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000047837d: add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x0000000000443acc: add byte ptr [rax], al; nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044d52c: add byte ptr [rax], al; nop; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x00000000004641cc: add byte ptr [rax], al; nop; ret; 
0x000000000044ddac: add byte ptr [rax], al; nop; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044bc3c: add byte ptr [rax], al; nop; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044bd3c: add byte ptr [rax], al; nop; tzcnt eax, eax; lea rax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x000000000047935c: add byte ptr [rax], al; nop; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000475738: add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x0000000000403508: add byte ptr [rax], al; or byte ptr [rbx + rbx - 9], dh; ret 0; 
0x0000000000488157: add byte ptr [rax], al; or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000041524e: add byte ptr [rax], al; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004748eb: add byte ptr [rax], al; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x000000000042a829: add byte ptr [rax], al; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000421d4c: add byte ptr [rax], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000046c23c: add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000479a03: add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x000000000044e416: add byte ptr [rax], al; pop rbp; ret; 
0x00000000004749f7: add byte ptr [rax], al; pop rbx; pop r12; pop r13; ret; 
0x0000000000476405: add byte ptr [rax], al; pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x00000000004166bb: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000042206b: add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000411a11: add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000401e39: add byte ptr [rax], al; pop rbx; ret; 
0x0000000000416a56: add byte ptr [rax], al; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000419ca3: add byte ptr [rax], al; pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000401776: add byte ptr [rax], al; ret; 
0x00000000004931b9: add byte ptr [rax], al; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000044d923: add byte ptr [rax], al; sub eax, ecx; cmp rsi, rax; ja 0x4d727; mov eax, esi; ret; 
0x000000000044fa46: add byte ptr [rax], al; sub eax, ecx; cmp rsi, rax; ja 0x4f807; mov eax, esi; ret; 
0x000000000040eb2a: add byte ptr [rax], al; sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [r11 + rdx*8]; jmp rdx; 
0x000000000040f7ba: add byte ptr [rax], al; sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rdi + rdx*8]; jmp rdx; 
0x000000000040f62a: add byte ptr [rax], al; sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rsi + rdx*8]; jmp rdx; 
0x0000000000419b86: add byte ptr [rax], al; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000474356: add byte ptr [rax], al; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x00000000004192c6: add byte ptr [rax], al; sub rax, rcx; sub eax, 1; ret; 
0x0000000000446051: add byte ptr [rax], al; sub rax, rdx; ret; 
0x000000000048259e: add byte ptr [rax], al; sub rsp, 8; call 0x53f00; xor eax, eax; add rsp, 8; ret; 
0x0000000000403097: add byte ptr [rax], al; syscall; 
0x000000000045037a: add byte ptr [rax], al; syscall; cmp eax, 0xfffff000; ja 0x50390; xor eax, eax; ret; 
0x0000000000450593: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x505f0; ret; 
0x0000000000450627: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x50638; ret; 
0x0000000000450d77: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x50d88; ret; 
0x0000000000450fc7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x50fd8; ret; 
0x00000000004511a3: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x511d0; ret; 
0x0000000000466693: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x666f0; ret; 
0x0000000000475daa: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x75dc0; ret; 
0x0000000000479853: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x79860; ret; 
0x0000000000479e3a: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x79e50; ret; 
0x000000000048e3b7: add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x8e3c8; ret; 
0x0000000000450287: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x50294; ret; 
0x00000000004511f7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x51204; ret; 
0x0000000000451227: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x51234; ret; 
0x0000000000451257: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x51264; ret; 
0x0000000000452b57: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x52b64; ret; 
0x0000000000479a47: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x79a54; ret; 
0x0000000000479ab7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x79ac4; ret; 
0x0000000000479ae7: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x79af4; ret; 
0x0000000000479b17: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x79b24; ret; 
0x0000000000479b47: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x79b54; ret; 
0x0000000000479b77: add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x79b84; ret; 
0x000000000041ab24: add byte ptr [rax], al; syscall; ret; 
0x00000000004442a4: add byte ptr [rax], al; test ah, 0x40; jne 0x44390; lea rax, [rdi + 0xf]; ret; 
0x0000000000444252: add byte ptr [rax], al; test al, 0x40; jne 0x44320; lea rax, [rdi + 7]; ret; 
0x000000000048263f: add byte ptr [rax], al; test byte ptr [rax + 0x31c], 4; jne 0x82658; or byte ptr [rdi + 0x31d], 0x40; ret; 
0x0000000000419164: add byte ptr [rax], al; test byte ptr [rbp], 0x80; jne 0x19180; pop rbp; ret; 
0x0000000000489ab2: add byte ptr [rax], al; test byte ptr [rip + 0x42b09], 0x40; jne 0x89abe; ret; 
0x0000000000422185: add byte ptr [rax], al; test ch, 4; jne 0x2214a; ret; 
0x00000000004441c5: add byte ptr [rax], al; test dh, 0x40; jne 0x44100; lea rax, [rdi + 0xf]; ret; 
0x000000000044420b: add byte ptr [rax], al; test dh, 4; jne 0x44100; lea rax, [rdi + 0xb]; ret; 
0x0000000000444142: add byte ptr [rax], al; test dl, 0x40; jne 0x44100; lea rax, [rdi + 7]; ret; 
0x0000000000444170: add byte ptr [rax], al; test dl, 4; jne 0x44100; lea rax, [rdi + 3]; ret; 
0x0000000000452801: add byte ptr [rax], al; test eax, eax; cmove eax, edx; add rsp, 8; ret; 
0x0000000000452a3d: add byte ptr [rax], al; test eax, eax; cmove eax, edx; ret; 
0x00000000004504ea: add byte ptr [rax], al; test eax, eax; jne 0x50500; syscall; 
0x000000000045058a: add byte ptr [rax], al; test eax, eax; jne 0x505a0; mov eax, 1; syscall; 
0x000000000046668a: add byte ptr [rax], al; test eax, eax; jne 0x666a0; mov eax, 0x13e; syscall; 
0x0000000000479c49: add byte ptr [rax], al; test eax, eax; jne 0x79cb0; mov eax, 0x101; syscall; 
0x0000000000422f1e: add byte ptr [rax], al; test eax, eax; lea rdx, [rip + 0x24c17]; lea rax, [rip + 0x24b90]; cmovne rax, rdx; ret; 
0x000000000044e3c5: add byte ptr [rax], al; test edx, 0x40000000; je 0x4e3a7; ret; 
0x0000000000476545: add byte ptr [rax], al; test edx, 0x40000000; je 0x76517; ret; 
0x00000000004777b5: add byte ptr [rax], al; test edx, 0x40000000; je 0x77797; ret; 
0x0000000000493212: add byte ptr [rax], al; test rax, rax; cmovne rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000040100d: add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000040100d: add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; add rsp, 8; ret; 
0x00000000004016e0: add byte ptr [rax], al; test rax, rax; je 0x16f0; mov edi, 0x4c6ae0; jmp rax; 
0x0000000000401722: add byte ptr [rax], al; test rax, rax; je 0x1730; mov edi, 0x4c6ae0; jmp rax; 
0x00000000004806ae: add byte ptr [rax], al; test rax, rax; je 0x806a4; xor eax, eax; ret; 
0x000000000044c205: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; cmp sil, byte ptr [rax]; jne 0x4c231; ret; 
0x000000000044ac14: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042abb4: add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000043f22e: add byte ptr [rax], al; tzcnt eax, eax; add rdi, -0x80; add rax, rdi; vzeroupper; ret; 
0x000000000042adae: add byte ptr [rax], al; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044f7de: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x000000000044f7ce: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000044d70e: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000044d6fe: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000044d6de: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x000000000044f7ee: add byte ptr [rax], al; tzcnt eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000044c4ee: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044ae1e: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000044ac8e: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044ac9e: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044acae: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000478eae: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000478ebe: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000478ece: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000478ede: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000478e34: add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000044f099: add byte ptr [rax], al; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000044cfbe: add byte ptr [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000044cfce: add byte ptr [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x000000000044cfde: add byte ptr [rax], al; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000042ae3e: add byte ptr [rax], al; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042af9e: add byte ptr [rax], al; tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000044733e: add byte ptr [rax], al; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446aed: add byte ptr [rax], al; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000447c82: add byte ptr [rax], al; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044b1ef: add byte ptr [rax], al; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000447fae: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044baae: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000044ba3f: add byte ptr [rax], al; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000447272: add byte ptr [rax], al; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000447eae: add byte ptr [rax], al; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000447e42: add byte ptr [rax], al; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000046c5ac: add byte ptr [rax], al; xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x6c5c0; ret; 
0x0000000000419f5e: add byte ptr [rax], al; xchg dword ptr [rip + 0xae24a], eax; cmp eax, 1; jg 0x19f70; ret; 
0x0000000000417ad6: add byte ptr [rax], al; xchg dword ptr [rip + 0xb06d2], eax; cmp eax, 1; jg 0x17b20; add rsp, 8; ret; 
0x000000000041fa16: add byte ptr [rax], al; xor eax, eax; add rsp, 8; ret; 
0x000000000045277a: add byte ptr [rax], al; xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x00000000004220a8: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000493365: add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000041523d: add byte ptr [rax], al; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000409fa6: add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042a4ee: add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x0000000000470624: add byte ptr [rax], al; xor ebp, ebp; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000041ae50: add byte ptr [rax], al; xor edi, edi; mov eax, 0xe; mov rdx, r14; lea rsi, [rip + 0x7fb1d]; syscall; 
0x0000000000401cbe: add byte ptr [rax], al; xor edi, edi; mov eax, edx; syscall; 
0x0000000000450ffe: add byte ptr [rax], al; xor edi, edi; syscall; 
0x0000000000450ffe: add byte ptr [rax], al; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x51010; ret; 
0x000000000041ae9f: add byte ptr [rax], al; xor edx, edx; mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000041ad32: add byte ptr [rax], al; xor edx, edx; mov rsi, rbp; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000419694: add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rcx + 0x58]; 
0x0000000000411c48: add byte ptr [rax], al; xor esi, esi; mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x0000000000475d98: add byte ptr [rax], al; xor r10d, r10d; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000046fb98: add byte ptr [rax], al; xor r10d, r10d; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x0000000000474f1d: add byte ptr [rax], al; xor r10d, r10d; xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x00000000004440fe: add byte ptr [rax], al; xor rax, rax; ret; 
0x000000000041aac8: add byte ptr [rax], al; xor sil, 0x80; syscall; 
0x000000000041b25c: add byte ptr [rax], al; xor sil, 0x81; syscall; 
0x0000000000401867: add byte ptr [rax], bh; leave; ret; 
0x0000000000401e37: add byte ptr [rax], cl; add byte ptr [rax], al; pop rbx; ret; 
0x000000000047776d: add byte ptr [rax], cl; lea rax, [rip + 0x9da]; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x000000000044e37d: add byte ptr [rax], cl; lea rax, [rip + 0xa6a]; lea rdx, [rip + 0xaa3]; cmovne rax, rdx; ret; 
0x0000000000422c79: add byte ptr [rax], cl; lea rdx, [rip - 0x362]; lea rax, [rip + 0x22e87]; cmove rax, rdx; ret; 
0x0000000000490e32: add byte ptr [rax], cl; mov byte ptr [rip + 0x3bc15], 8; ret; 
0x0000000000490e2b: add byte ptr [rax], cl; mov byte ptr [rip + 0x3bc1b], 8; mov byte ptr [rip + 0x3bc15], 8; ret; 
0x0000000000490e24: add byte ptr [rax], cl; mov byte ptr [rip + 0x3bc21], 8; mov byte ptr [rip + 0x3bc1b], 8; mov byte ptr [rip + 0x3bc15], 8; ret; 
0x0000000000490e1d: add byte ptr [rax], cl; mov byte ptr [rip + 0x3bc27], 8; mov byte ptr [rip + 0x3bc21], 8; mov byte ptr [rip + 0x3bc1b], 8; mov byte ptr [rip + 0x3bc15], 8; ret; 
0x0000000000490e39: add byte ptr [rax], cl; ret; 
0x0000000000479498: add byte ptr [rax], dl; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000488699: add byte ptr [rax], dl; lea rdx, [rip + 0x11e]; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000422239: add byte ptr [rax], dl; lea rdx, [rip + 0x23e1e]; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x0000000000418e5d: add byte ptr [rax], r8b; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000472b65: add byte ptr [rax], r8b; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000457515: add byte ptr [rax], r8b; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048066d: add byte ptr [rax], r8b; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000403175: add byte ptr [rax], r8b; call qword ptr [rbx + 0x10]; 
0x0000000000456cad: add byte ptr [rax], r8b; endbr64; mov eax, dword ptr [rip + 0x75926]; test eax, eax; je 0x56cc0; ret; 
0x0000000000464fdd: add byte ptr [rax], r8b; endbr64; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x0000000000419e6d: add byte ptr [rax], r8b; endbr64; mov rax, -1; ret; 
0x000000000047478d: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x52313], eax; ret; 
0x000000000041b76d: add byte ptr [rax], r8b; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xaa001], rax; ret; 
0x0000000000419e9d: add byte ptr [rax], r8b; endbr64; ret; 
0x000000000042211d: add byte ptr [rax], r8b; lea rax, [rip + 0x2a099]; test edx, 0x40000000; je 0x22101; ret; 
0x0000000000466635: add byte ptr [rax], r8b; lea rdi, [rip + 0x661c1]; call 0x1ab10; xor eax, eax; add rsp, 8; ret; 
0x0000000000450e05: add byte ptr [rax], r8b; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000044398d: add byte ptr [rax], r8b; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000474ad5: add byte ptr [rax], r8b; mov eax, 0x16; ret; 
0x000000000041ad9d: add byte ptr [rax], r8b; mov eax, 0xba; syscall; 
0x000000000041379d: add byte ptr [rax], r8b; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000041517d: add byte ptr [rax], r8b; mov eax, 0xffffffff; ret; 
0x00000000004747dd: add byte ptr [rax], r8b; mov eax, dword ptr [rip + 0x57c02]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x539fe], eax; ret; 
0x000000000044336d: add byte ptr [rax], r8b; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000447c1d: add byte ptr [rax], r8b; mov qword ptr [rax], rdi; mov qword ptr [rax + rdx - 8], rdi; ret; 
0x000000000044fac5: add byte ptr [rax], r8b; mov rax, -0x48; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000045104d: add byte ptr [rax], r8b; mov rax, -0x48; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041ebcd: add byte ptr [rax], r8b; mov rax, -0x48; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x00000000004543dd: add byte ptr [rax], r8b; mov rax, r10; mov rcx, rdi; cmp r9, rax; jge 0x54378; ret; 
0x000000000044b2bd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004439fd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004433cd: add byte ptr [rax], r8b; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000045054d: add byte ptr [rax], r8b; mov rdx, -0x48; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000493f3d: add byte ptr [rax], r8b; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x00000000004433ad: add byte ptr [rax], r8b; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000045428d: add byte ptr [rax], r8b; mov rsi, r8; mov rdx, rdi; cmp r9, rsi; jge 0x54248; ret; 
0x0000000000447ded: add byte ptr [rax], r8b; mov word ptr [rax], di; mov byte ptr [rax + rdx - 1], dil; vzeroupper; ret; 
0x000000000041832d: add byte ptr [rax], r8b; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044561d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044560d: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000004455fd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000004455ed: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000004455dd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000004455cd: add byte ptr [rax], r8b; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000044c0ed: add byte ptr [rax], r8b; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x000000000043fdad: add byte ptr [rax], r8b; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000041524d: add byte ptr [rax], r8b; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000401775: add byte ptr [rax], r8b; ret; 
0x0000000000419b85: add byte ptr [rax], r8b; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000474355: add byte ptr [rax], r8b; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x00000000004192c5: add byte ptr [rax], r8b; sub rax, rcx; sub eax, 1; ret; 
0x000000000044ae1d: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000044ac8d: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044ac9d: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044acad: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000478ebd: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000478ecd: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000478edd: add byte ptr [rax], r8b; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000044cfbd: add byte ptr [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000044cfcd: add byte ptr [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x000000000044cfdd: add byte ptr [rax], r8b; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000042ae3d: add byte ptr [rax], r8b; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044733d: add byte ptr [rax], r8b; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447fad: add byte ptr [rax], r8b; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000447ead: add byte ptr [rax], r8b; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x000000000041414d: add byte ptr [rax], r8b; xor eax, eax; ret; 
0x000000000042a4ed: add byte ptr [rax], r8b; xor eax, eax; vzeroupper; ret; 
0x000000000045119d: add byte ptr [rbp + 0x10], dh; mov eax, 9; syscall; 
0x000000000045119d: add byte ptr [rbp + 0x10], dh; mov eax, 9; syscall; cmp rax, -0x1000; ja 0x511d0; ret; 
0x000000000049317b: add byte ptr [rbp + 0x12], dh; mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x1618; mov qword ptr [rcx], rdx; ret; 
0x000000000045363a: add byte ptr [rbp + 0x13], dh; mov r8, qword ptr [rip + 0x73d44]; mov rax, r8; ret; 
0x0000000000453daa: add byte ptr [rbp + 0x13], dh; shl rax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x53dfa; ret; 
0x00000000004502ea: add byte ptr [rbp + 0x14], dh; add rsp, 0x28; ret; 
0x0000000000493124: add byte ptr [rbp + 0x14], dh; lea rdx, [rip + 0x39912]; cmp byte ptr [rdx + rsi], 8; jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x0000000000488069: add byte ptr [rbp + 0x14], dh; test rdx, rdx; jne 0x88090; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x0000000000452c0c: add byte ptr [rbp + 0x15], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000422d39: add byte ptr [rbp + 0x15], dh; and dh, 2; lea rax, [rip + 0x827a]; lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x0000000000419f15: add byte ptr [rbp + 0x18], dh; mov qword ptr [rip + 0xae299], rbx; add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x00000000004527a8: add byte ptr [rbp + 0x1a], dh; add rsp, 0x1018; ret; 
0x000000000044e472: add byte ptr [rbp + 0x1f], dh; add rsp, 0x20; pop rbx; ret; 
0x0000000000412ea2: add byte ptr [rbp + 0x21], dh; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000048dd69: add byte ptr [rbp + 0x24], dh; mov rdx, qword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000479f1b: add byte ptr [rbp + 0x26], dh; mov eax, r9d; add rsp, 0x38; ret; 
0x00000000004861f8: add byte ptr [rbp + 0x28], dh; add rsp, 0x38; ret; 
0x0000000000485e22: add byte ptr [rbp + 0x29], dh; add rsp, 0x58; ret; 
0x0000000000485ef4: add byte ptr [rbp + 0x2d], dh; add rsp, 0x58; ret; 
0x00000000004154ae: add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x000000000041bc6f: add byte ptr [rbp + 0x31], al; in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000045b01f: add byte ptr [rbp + 0x31], al; ror byte ptr [rax + 0x39], cl; ret; 
0x0000000000414672: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0xf], 0x4c; mov esi, ebp; mov rdi, r15; call rbx; 
0x000000000046fb99: add byte ptr [rbp + 0x31], al; ror byte ptr [rcx - 0x75], cl; adc al, 0xd0; jmp rdx; 
0x00000000004573c7: add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx; 
0x0000000000474f1e: add byte ptr [rbp + 0x31], al; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xef; mov eax, r13d; syscall; 
0x0000000000475d99: add byte ptr [rbp + 0x31], al; sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x00000000004620f9: add byte ptr [rbp + 0x31], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000004799fb: add byte ptr [rbp + 0x3c], dh; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000468669: add byte ptr [rbp + 0x3d850fc9], al; adc al, 0; add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret 0xf66; 
0x0000000000401f06: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000421d4d: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; pop r14; ret; 
0x000000000046c23d: add byte ptr [rbp + 0x41], bl; pop rsp; pop r13; ret; 
0x0000000000479a04: add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000004653cc: add byte ptr [rbp + 0x45], dh; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000452af4: add byte ptr [rbp + 0x46], dh; add rsp, 0x58; ret; 
0x0000000000450dfa: add byte ptr [rbp + 0x46], dh; add rsp, 0x68; ret; 
0x0000000000450e89: add byte ptr [rbp + 0x47], dh; add rsp, 0x18; ret; 
0x0000000000466eab: add byte ptr [rbp + 0x47], dh; add rsp, 0x38; ret; 
0x0000000000450f41: add byte ptr [rbp + 0x47], dh; add rsp, 0x58; ret; 
0x000000000048bff0: add byte ptr [rbp + 0x480375d2], al; mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x000000000046542c: add byte ptr [rbp + 0x480f75c0], al; add esp, 8; ret; 
0x0000000000411a09: add byte ptr [rbp + 0x48], dh; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000000479ddf: add byte ptr [rbp + 0x49], dh; add rsp, 0x58; ret; 
0x0000000000411b87: add byte ptr [rbp + 0x4a], dh; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x000000000041da22: add byte ptr [rbp + 0x4b], dh; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000488300: add byte ptr [rbp + 0x4c1374f6], al; mov eax, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, r8; jmp rax; 
0x0000000000412120: add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x0000000000454efb: add byte ptr [rbp + 0x51], dh; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x000000000040d9fe: add byte ptr [rbp + 0x57890fc0], al; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000409fd5: add byte ptr [rbp + 0x5d0675c0], al; ret; 
0x0000000000452c95: add byte ptr [rbp + 0x5f], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000041ef90: add byte ptr [rbp + 0x66850ff6], al; add al, byte ptr [rax]; add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x0000000000475e9c: add byte ptr [rbp + 0x78], dh; add rsp, 0x98; ret; 
0x0000000000487df9: add byte ptr [rbp + 0x79], dh; leave; ret; 
0x00000000004217eb: add byte ptr [rbp + 0xa], dh; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000000452989: add byte ptr [rbp + 0xa], dh; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x000000000048e125: add byte ptr [rbp + 0xb], dh; add rsp, 0x38; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000048b115: add byte ptr [rbp + 0xb], dh; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000486a8f: add byte ptr [rbp + 0xf], cl; lodsd eax, dword ptr [rsi]; ret; 
0x000000000048697f: add byte ptr [rbp + 0xf], cl; movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000419b76: add byte ptr [rbp + 0xf], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000470653: add byte ptr [rbp + 1], bh; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000041fa3a: add byte ptr [rbp + 3], dh; ret; 
0x000000000045117d: add byte ptr [rbp + 5], dh; add rsp, 0x28; ret; 
0x000000000048dec8: add byte ptr [rbp + 5], dh; add rsp, 0x38; ret; 
0x00000000004748a3: add byte ptr [rbp + 6], dh; add rsp, 0x10; pop rbp; ret; 
0x0000000000485d0b: add byte ptr [rbp + 6], dh; add rsp, 0x20; pop rbx; ret; 
0x000000000041d1df: add byte ptr [rbp + 7], dh; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000490f4b: add byte ptr [rbp + 7], dh; cmp qword ptr [r9 + 0x38], 0; je 0x90fa4; add rsp, 0x18; ret; 
0x000000000040b749: add byte ptr [rbp + 8], dh; add rsp, 0xd8; ret; 
0x000000000041b73b: add byte ptr [rbp + 8], dh; and eax, 0x38; cmp eax, 8; je 0x1b747; ret; 
0x0000000000474731: add byte ptr [rbp + 8], dh; and edx, 0x38; cmp edx, 8; je 0x7473d; ret; 
0x0000000000479d72: add byte ptr [rbp + 8], dh; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000454fb9: add byte ptr [rbp + 9], dh; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000479dc0: add byte ptr [rbp + rbp - 0x48], dh; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000042fe41: add byte ptr [rbp + rcx*4 + 0x1d], cl; iretd; ret 6; 
0x000000000042d851: add byte ptr [rbp + rcx*4 + 0x1d], cl; jmp rsi; 
0x000000000046c654: add byte ptr [rbp + rcx*4 + 0x2c], cl; test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000047682f: add byte ptr [rbp + rcx*4 + 0x58], cl; dec dword ptr [rcx - 0x77]; ret 0x3948; 
0x000000000041db76: add byte ptr [rbp - 0x1b], dh; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x000000000045cb41: add byte ptr [rbp - 0x1f77f02e], al; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x0000000000469fef: add byte ptr [rbp - 0x2dce00b9], cl; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x000000000047de43: add byte ptr [rbp - 0x36], dh; ret; 
0x000000000042af67: add byte ptr [rbp - 0x3a2b8b37], 0xfd; xlatb; rol dword ptr [rbp - 0x3ad38a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000452802: add byte ptr [rbp - 0x3dbbf040], al; add rsp, 8; ret; 
0x0000000000452a3e: add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x0000000000479c4a: add byte ptr [rbp - 0x479e8a40], al; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000045058b: add byte ptr [rbp - 0x47ef8a40], al; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000422d87: add byte ptr [rbp - 0x5d], dh; ret; 
0x000000000041b0c3: add byte ptr [rbp - 0x6af0bf37], al; mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000491450: add byte ptr [rbp - 0x6e7bf025], al; add edi, esi; inc dword ptr [rbx - 0x72b7fe15]; push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x00000000004542e7: add byte ptr [rbp - 0x75], cl; or cl, byte ptr [rbx + rcx*4 + 0x50]; cmp byte ptr [rbp - 0x6af0be37], al; ret; 
0x000000000047fe77: add byte ptr [rbp - 0x76b7febe], cl; ret 0x8b49; 
0x0000000000457351: add byte ptr [rbp - 0x77], cl; int1; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000044eb6c: add byte ptr [rbp - 0x77], cl; int1; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rcx, r12; call rbx; 
0x0000000000402089: add byte ptr [rbp - 0x77], cl; ret; 
0x000000000048a2df: add byte ptr [rbp - 0x77], cl; ror byte ptr [rcx - 0x7d], 1; ret 0x4901; 
0x00000000004626bf: add byte ptr [rbp - 0x7cf78140], al; call 0x848afcb; pop rbx; ret; 
0x000000000041ef98: add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x000000000041ef7f: add byte ptr [rbp - 0x7cfeb9], cl; add esi, dword ptr [rbp + rdi - 0x77]; ret 0xb48b; 
0x000000000043ba09: add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x0000000000466610: add byte ptr [rbx + 0x227f01f8], al; xor eax, eax; add rsp, 8; ret; 
0x00000000004573c4: add byte ptr [rbx + 0x314500d0], al; sal byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx; 
0x0000000000416a57: add byte ptr [rbx + 0x31], bl; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000488600: add byte ptr [rbx + 0x327f01f8], al; pop rbp; ret; 
0x00000000004439df: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x000000000044339f: add byte ptr [rbx + 0x3568b0e], cl; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000417add: add byte ptr [rbx + 0x3d7f01f8], al; add rsp, 8; ret; 
0x00000000004749f8: add byte ptr [rbx + 0x41], bl; pop rsp; pop r13; ret; 
0x00000000004439af: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x000000000044337f: add byte ptr [rbx + 0x477880e], cl; mov dword ptr [rdi], ecx; ret; 
0x0000000000442eaf: add byte ptr [rbx + 0x48028901], cl; lea eax, [rdx + 3]; ret; 
0x0000000000401c89: add byte ptr [rbx + 0x4814247c], cl; mov esi, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000443fef: add byte ptr [rbx + 0x48178916], cl; lea eax, [rdi + 3]; vzeroupper; ret; 
0x00000000004823ad: add byte ptr [rbx + 0x4a53c05], cl; add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0xc74; 
0x000000000042e8cf: add byte ptr [rbx + 0x4e8bf956], cl; cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e6cf: add byte ptr [rbx + 0x4e8bfa56], cl; cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e4cf: add byte ptr [rbx + 0x4e8bfb56], cl; cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004458cb: add byte ptr [rbx + 0x4e8bfc47], cl; cld; cmp eax, ecx; jne 0x45ae0; xor eax, eax; ret; 
0x00000000004338bf: add byte ptr [rbx + 0x5789fc56], cl; cld; ret; 
0x00000000004747df: add byte ptr [rbx + 0x57c0205], cl; add cl, al; call 0x1e7caf7; mov dword ptr [rip + 0x539fe], eax; ret; 
0x0000000000419f65: add byte ptr [rbx + 0x57f01f8], al; ret; 
0x0000000000476406: add byte ptr [rbx + 0x5d], bl; mov eax, r12d; pop r12; ret; 
0x000000000041534f: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; jmp rax; 
0x0000000000476c53: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x00000000004166bc: add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000407ec0: add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000411a12: add byte ptr [rbx + 0x5d], bl; ret; 
0x000000000047566c: add byte ptr [rbx + 0x5e7421f8], al; mov eax, 0x16; ret; 
0x000000000040f62b: add byte ptr [rbx + 0x634820ea], al; ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd6; jmp rdx; 
0x000000000040f7bb: add byte ptr [rbx + 0x634820ea], al; ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd7; jmp rdx; 
0x000000000040eb2b: add byte ptr [rbx + 0x634820ea], al; ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rcx - 0x75], cl; adc al, 0xd3; jmp rdx; 
0x0000000000482a67: add byte ptr [rbx + 0x7525087b], al; adc ecx, dword ptr [rbx + rcx*4 + 0x3b]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x000000000041aa2b: add byte ptr [rbx + 0x77401f8], al; ret; 
0x000000000041bb60: add byte ptr [rbx + 0xa7401f8], al; add rsp, 8; ret; 
0x00000000004230d9: add byte ptr [rbx + 0xa93f40d], cl; add dh, dh; ret 0x7420; 
0x0000000000422d19: add byte ptr [rbx + 0xa96ac15], cl; add dh, dh; shl dword ptr [rax], 0x74; or bh, dh; ret 0; 
0x000000000042242f: add byte ptr [rbx + 0xa9f9615], cl; add bh, dh; ret 0; 
0x00000000004221b9: add byte ptr [rbx + 0xaa3140d], cl; add dh, dh; ret 0x7420; 
0x0000000000422139: add byte ptr [rbx + 0xaa3940d], cl; add dh, dh; ret 0x7420; 
0x0000000000419f1e: add byte ptr [rbx + 0xae28e05], al; add byte ptr [rcx], al; pop rbx; ret; 
0x000000000041fb07: add byte ptr [rbx + 0xb7f01f8], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000446752: add byte ptr [rbx + 0xb], dh; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004152e9: add byte ptr [rbx + 0xc08d], cl; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x000000000048892a: add byte ptr [rbx + 0xc], dh; mov rdx, qword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000433f6f: add byte ptr [rbx + 0xe8b0156], cl; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433eff: add byte ptr [rbx + 0xe8b0256], cl; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433e8f: add byte ptr [rbx + 0xe8b0356], cl; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000456b95: add byte ptr [rbx + rbx*2], cl; ret; 
0x000000000045a8eb: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x18; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045da5b: add byte ptr [rbx + rcx*4 + 0x4c], cl; and al, 0x38; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000488007: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000048d867: add byte ptr [rbx + rcx*4 + 0x57], cl; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000451d7a: add byte ptr [rbx + rcx*4 + 0x5e], cl; or byte ptr [rcx - 0xa], al; ret; 
0x000000000040a857: add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000046615f: add byte ptr [rbx + rcx*4 + 0x7b], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000466964: add byte ptr [rbx + rcx*4 + 4], cl; ret 0x8840; 
0x0000000000466a3c: add byte ptr [rbx + rcx*4 + 4], cl; ret 0x8d48; 
0x000000000045532f: add byte ptr [rbx + rsi + 0x42], al; or byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x8310; 
0x0000000000412098: add byte ptr [rbx - 0x18], dl; fild dword ptr [r8]; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x0000000000456b36: add byte ptr [rbx - 0x377c0c20], al; add al, 0x88; add eax, 0x75a3d; pop rbx; ret; 
0x0000000000473e47: add byte ptr [rbx - 0x3b7cb7fe], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004036ee: add byte ptr [rbx - 0x3d76fd38], al; mov esi, edx; mov edi, 0x3002; mov eax, 0x9e; syscall; 
0x000000000045c0c0: add byte ptr [rbx - 0x72b3fd20], al; mov word ptr [rax + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000442ebf: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x00000000004416ff: add byte ptr [rbx - 0x75fd76ff], cl; add al, 0x88; add al, 0x48; mov eax, edi; ret; 
0x0000000000411cea: add byte ptr [rbx - 0x76b7ffbb], cl; pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x00000000004713c7: add byte ptr [rbx - 0x78f0d008], al; mov ecx, 0x89000007; ret 0xc083; 
0x0000000000402042: add byte ptr [rbx - 0x7a07dba4], cl; test byte ptr [rdi], 0x9f; ret 0xc031; 
0x0000000000403f44: add byte ptr [rbx - 0x7bf00008], al; movabs byte ptr [0x98c48148000000], al; add byte ptr [rax], al; ret; 
0x0000000000475663: add byte ptr [rbx - 0x7bf0ce08], al; xchg eax, ebx; add dword ptr [rax], eax; add byte ptr [rbx + 0x5e7421f8], al; mov eax, 0x16; ret; 
0x0000000000445726: add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x0000000000408a06: add byte ptr [rbx - 0x7bf0fe08], al; ret 2; 
0x0000000000470927: add byte ptr [rbx - 0x7cb7f7a6], cl; ret 0x8d08; 
0x0000000000455277: add byte ptr [rbx - 0x7cb7f7be], cl; ret 0x4110; 
0x0000000000455227: add byte ptr [rbx - 0x7cb7f7be], cl; ret 0xbb10; 
0x00000000004719d5: add byte ptr [rbx - 0x7cb7fbb5], cl; ret; 
0x000000000046c01f: add byte ptr [rbx - 0x7cb7fbbd], cl; ret; 
0x00000000004028f6: add byte ptr [rbx - 0x7cbefe3a], al; ret; 
0x000000000044c03a: add byte ptr [rbx - 0x7cf0f706], al; in al, dx; add byte ptr [rax], al; add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x000000000043fd03: add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x0000000000484602: add byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x0000000000456b05: add byte ptr [rbx], al; pop rbx; ret; 
0x0000000000419b87: add byte ptr [rbx], ch; push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x000000000045303f: add byte ptr [rcx + 0x104e23c1], cl; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000447ddf: add byte ptr [rcx + 0x107c8938], cl; cld; vzeroupper; ret; 
0x000000000046a432: add byte ptr [rcx + 0x21], cl; ret; 
0x000000000048bc01: add byte ptr [rcx + 0x248b4ce8], cl; ret 0xf41; 
0x000000000041357f: add byte ptr [rcx + 0x2b], cl; adc byte ptr [r8 + 1], r9b; ret; 
0x000000000045e96b: add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x000000000045ed01: add byte ptr [rcx + 0x3948fc56], cl; ret; 
0x0000000000456cd4: add byte ptr [rcx + 0x39], al; fdiv dword ptr [rsi + rcx - 0x77]; add eax, 0x6ddb0; pop rbx; ret; 
0x0000000000454358: add byte ptr [rcx + 0x39], cl; leave; jbe 0x5437d; ret; 
0x000000000043f59f: add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000476807: add byte ptr [rcx + 0x39], cl; ror byte ptr [rdi], cl; test byte ptr [rdx], bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x0000000000488d8f: add byte ptr [rcx + 0x3f490], cl; add byte ptr [rax - 0x7d], cl; ror dword ptr [rax], 0x83; ret 0x8001; 
0x0000000000418fb7: add byte ptr [rcx + 0x807448], al; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x18fb8; ret; 
0x00000000004129f9: add byte ptr [rcx + 1], cl; ret; 
0x0000000000482470: add byte ptr [rcx + rax - 0x10], dh; inc dword ptr [rsi + 0x10]; pop rbx; ret; 
0x000000000044e286: add byte ptr [rcx + rcx*4 - 0x16], cl; mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000044ecfb: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x00000000004104fb: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r10; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000040c017: add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000044e13d: add byte ptr [rcx + rcx*4 - 0x16], cl; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x000000000041aeeb: add byte ptr [rcx + rcx*4 - 0x1e], al; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000041ad7b: add byte ptr [rcx + rcx*4 - 0x1e], al; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x000000000041adad: add byte ptr [rcx + rcx*4 - 0x1e], al; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000454f04: add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x0000000000411ca0: add byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; ret; 
0x00000000004807c4: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004222f9: add byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x0000000000489e89: add byte ptr [rcx + rcx*4 - 0x30], cl; add rsp, 0x28; ret; 
0x00000000004543df: add byte ptr [rcx + rcx*4 - 0x30], cl; mov rcx, rdi; cmp r9, rax; jge 0x54378; ret; 
0x0000000000414954: add byte ptr [rcx + rcx*4 - 0x38], al; syscall; 
0x000000000047561e: add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000047597b: add byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000475e70: add byte ptr [rcx + rcx*4 - 0x3a], cl; mov eax, 0xe; syscall; 
0x000000000045428f: add byte ptr [rcx + rcx*4 - 0x3a], cl; mov rdx, rdi; cmp r9, rsi; jge 0x54248; ret; 
0x0000000000476d9d: add byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000461fdc: add byte ptr [rcx + rcx*4 - 0x40], al; pop rbp; pop r12; ret; 
0x000000000040ac18: add byte ptr [rcx + rcx*4 - 0x40], cl; add qword ptr [rip + 0xbd13c], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000453643: add byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000040d02c: add byte ptr [rcx + rcx*4 - 0x7b], cl; idiv rdi; dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000041ae58: add byte ptr [rcx + rcx*4 - 0xe], cl; lea rsi, [rip + 0x7fb1d]; syscall; 
0x000000000040be8f: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000041630f: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000046fdff: add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r15; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x0000000000415ef2: add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000471105: add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000040aacb: add byte ptr [rcx + rdi - 0x1d], cl; jae 0xaae3; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000040aaca: add byte ptr [rcx + rdi - 0x1d], r9b; jae 0xaae3; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000047a6bc: add byte ptr [rcx + rdi - 0x37], dh; xor eax, eax; ret; 
0x000000000041c38c: add byte ptr [rcx + rdx + 0x48], dh; mov dword ptr [rdx + 0x28], ecx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000458544: add byte ptr [rcx - 0x17f7dbbc], cl; ret 0xfc25; 
0x00000000004154f0: add byte ptr [rcx - 0x39], cl; mov byte ptr [rax + 0x6b], 0x4c; add byte ptr [rax - 0x39], cl; ret; 
0x000000000040c3e1: add byte ptr [rcx - 0x39], cl; shr byte ptr [rax + 0x48004c72], 0x89; ret 0x2949; 
0x000000000040c3e0: add byte ptr [rcx - 0x39], r9b; shr byte ptr [rax + 0x48004c72], 0x89; ret 0x2949; 
0x000000000041b712: add byte ptr [rcx - 0x4577bffa], cl; jno 0x1b723; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004705b5: add byte ptr [rcx - 0x46], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004652f5: add byte ptr [rcx - 0x46], al; or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x00000000004705eb: add byte ptr [rcx - 0x47], al; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000047267f: add byte ptr [rcx - 0x73], al; dec dword ptr [r9 - 0x74b6cfbd]; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000480225: add byte ptr [rcx - 0x73], al; push rax; add dword ptr [rcx - 0x6efa09f0], ecx; ret; 
0x00000000004846df: add byte ptr [rcx - 0x73], cl; add byte ptr [rax - 3], 0xff; dec dword ptr [rax + 0x39]; ret; 
0x00000000004600d0: add byte ptr [rcx - 0x73], cl; add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000041dc55: add byte ptr [rcx - 0x73], cl; dec dword ptr [r9 - 0x7b]; ret; 
0x0000000000487af5: add byte ptr [rcx - 0x73], cl; or byte ptr [r8 + 0x39], r9b; ret; 
0x00000000004026df: add byte ptr [rcx - 0x73fce71e], al; and dword ptr [rcx + 9], eax; ret 0x58b; 
0x0000000000411315: add byte ptr [rcx - 0x74b7cbbd], cl; jl 0x11341; or byte ptr [rbx - 0x7bf00002], al; ret; 
0x0000000000482321: add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0x850f; 
0x00000000004823b3: add byte ptr [rcx - 0x75], al; adc bh, byte ptr [rcx]; ret 0xc74; 
0x000000000047f10c: add byte ptr [rcx - 0x75], al; add byte ptr [r8 - 0x77], r9b; ret 0x314c; 
0x00000000004705bb: add byte ptr [rcx - 0x75], cl; adc al, 0xd0; jmp rdx; 
0x000000000040a123: add byte ptr [rcx - 0x75], cl; cmp al, 0x24; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x0000000000451452: add byte ptr [rcx - 0x75], cl; jge 0x51457; call rbx; 
0x0000000000451445: add byte ptr [rcx - 0x75], cl; jge 0x5145a; test rdi, rdi; jne 0x51570; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000451485: add byte ptr [rcx - 0x75], cl; jge 0x5148a; call rbx; 
0x0000000000451478: add byte ptr [rcx - 0x75], cl; jge 0x5148d; test rdi, rdi; jne 0x51510; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514ba: add byte ptr [rcx - 0x75], cl; jge 0x514bf; call rbx; 
0x00000000004514ad: add byte ptr [rcx - 0x75], cl; jge 0x514c2; test rdi, rdi; jne 0x51550; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045229a: add byte ptr [rcx - 0x75], cl; jge 0x5229f; call rbx; 
0x000000000045228d: add byte ptr [rcx - 0x75], cl; jge 0x522a2; test rdi, rdi; jne 0x52350; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522bd: add byte ptr [rcx - 0x75], cl; jge 0x522d2; test rdi, rdi; jne 0x52330; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004515df: add byte ptr [rcx - 0x75], cl; mov rax, qword ptr ss:[rsp + 0x10]; mov rdi, rbp; call rax; 
0x000000000048a7f4: add byte ptr [rcx - 0x75], cl; sbb byte ptr [rax + 0x39], r9b; ret; 
0x00000000004710e8: add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000040c3d3: add byte ptr [rcx - 0x75], cl; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004130a5: add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000045d595: add byte ptr [rcx - 0x77], al; ret 0x5a58; 
0x000000000045c0cb: add byte ptr [rcx - 0x77], al; ret; 
0x0000000000474943: add byte ptr [rcx - 0x77], bh; mov eax, 0x6e; ret; 
0x0000000000414d79: add byte ptr [rcx - 0x77], cl; call 0xffffffffceec610c; nop dword ptr [rax]; xor eax, eax; ret; 
0x0000000000408077: add byte ptr [rcx - 0x77], cl; fisttp word ptr [rax - 0x7d]; ret; 
0x000000000041ec3a: add byte ptr [rcx - 0x77], cl; or byte ptr [rax + 0x39], cl; ret; 
0x000000000040f02a: add byte ptr [rcx - 0x77], cl; ret 0x1b8; 
0x00000000004100dd: add byte ptr [rcx - 0x77], cl; ret 0x48e9; 
0x000000000041ca45: add byte ptr [rcx - 0x77], cl; ret 0x8948; 
0x00000000004039ad: add byte ptr [rcx - 0x77], cl; ret 0x8ae8; 
0x000000000046a45a: add byte ptr [rcx - 0x77], cl; ret 0x8d48; 
0x000000000041ce0a: add byte ptr [rcx - 0x77], cl; ret 0xbd41; 
0x000000000042254f: add byte ptr [rcx - 0x77], cl; ret; 
0x00000000004739fc: add byte ptr [rcx - 0x7cb7e8f4], cl; ret 0x4804; 
0x000000000046e052: add byte ptr [rcx - 0x7d], al; out dx, al; add dword ptr [rax - 0x8e343], eax; jmp qword ptr [rax]; 
0x0000000000468fb7: add byte ptr [rcx - 0x7d], al; out dx, eax; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000489e45: add byte ptr [rcx - 0x7d], cl; ret 0x4801; 
0x0000000000424c3f: add byte ptr [rcx - 0x7d], cl; ret 0x7f10; 
0x000000000042353f: add byte ptr [rcx - 0x7d], cl; ret 0xf10; 
0x000000000040ca12: add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000047720b: add byte ptr [rcx - 0x876b730], cl; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000045d81d: add byte ptr [rcx - 0xa], al; ret 0x7501; 
0x000000000045a2b3: add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x000000000042afe6: add byte ptr [rcx - 9], cl; ret 1; 
0x000000000042b00c: add byte ptr [rcx - 9], cl; ret 2; 
0x000000000047bf1a: add byte ptr [rcx*2 - 0x9be1a77], al; ret; 
0x000000000041ba3d: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa9d27; ret; 
0x000000000041ba1d: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa9d3f; ret; 
0x000000000041b9fd: add byte ptr [rcx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; add eax, 0xa9d57; ret; 
0x00000000004748e9: add byte ptr [rcx], al; add byte ptr [rax], al; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x000000000044604f: add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000488c6b: add byte ptr [rcx], al; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000040ac22: add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000479db9: add byte ptr [rcx], al; cmp eax, 0x410000; je 0x79df0; mov eax, 0x101; syscall; 
0x0000000000479dbe: add byte ptr [rcx], al; je 0x79df0; mov eax, 0x101; syscall; 
0x000000000040176f: add byte ptr [rcx], al; pop rbp; ret; 
0x0000000000419f24: add byte ptr [rcx], al; pop rbx; ret; 
0x0000000000481f80: add byte ptr [rcx], bh; ret 0x373; 
0x000000000041b38a: add byte ptr [rcx], bh; ret 0x6974; 
0x000000000041afc6: add byte ptr [rcx], bh; ret 0x840f; 
0x0000000000475821: add byte ptr [rcx], bh; ret 0x850f; 
0x000000000041db40: add byte ptr [rcx], bh; ret 0xa7e; 
0x0000000000450359: add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000047ccdd: add byte ptr [rcx], cl; rol byte ptr [rcx - 0x78], 1; xchg dword ptr [rsi], ebx; add eax, dword ptr [rax]; add cl, ch; ret 0xfff2; 
0x0000000000458802: add byte ptr [rcx], dh; div byte ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x0000000000470625: add byte ptr [rcx], dh; in eax, dx; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000041c29f: add byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000477d4c: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x000000000042a89c: add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6620; 
0x00000000004219df: add byte ptr [rcx], dh; ror byte ptr [rax - 0x73], 0x35; ret; 
0x000000000045277b: add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, 0xcc; syscall; 
0x000000000041ad33: add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], cl; out dx, al; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000041aea0: add byte ptr [rcx], dh; ror byte ptr [rcx + rcx*4 - 0xa], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000419695: add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rcx + 0x58]; 
0x000000000048836f: add byte ptr [rcx], dh; sar byte ptr [rdx + 1], 0xf0; cmpxchg dword ptr [rdi], edx; jne 0x883b3; xor eax, eax; ret; 
0x0000000000464cc7: add byte ptr [rcx], dh; shr al, 0x11; ret 0xfffe; 
0x0000000000416762: add byte ptr [rcx], dh; shr al, 0x46; ret; 
0x0000000000467081: add byte ptr [rcx], dh; shr al, 0xe7; mov esi, 0x2ebffffe; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000048c037: add byte ptr [rcx], dh; shr bl, 0x9f; nop dword ptr [rax]; call rax; 
0x0000000000411c49: add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xef; call qword ptr [rbx + 0x10]; 
0x000000000041c29e: add byte ptr [rcx], sil; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000046c5ad: add byte ptr [rdi + 0x1f88307], al; jg 0x6c5c0; ret; 
0x0000000000447e99: add byte ptr [rdi + 0x64], dh; vmovdqu64 zmmword ptr [rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000419f5f: add byte ptr [rdi + 0xae24a05], al; add byte ptr [rbx + 0x57f01f8], al; ret; 
0x0000000000417ad7: add byte ptr [rdi + 0xb06d205], al; add byte ptr [rbx + 0x3d7f01f8], al; add rsp, 8; ret; 
0x0000000000410d3b: add byte ptr [rdi + 0xe], dh; movsxd rdi, edi; lea rax, [rip + 0xb11b8]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000492fe1: add byte ptr [rdi + 1], bh; call rax; 
0x0000000000422ffc: add byte ptr [rdi + 2], dl; add byte ptr [rax - 0x73], cl; add eax, 0x25749; cmove rax, rdx; ret; 
0x0000000000455386: add byte ptr [rdi + rcx + 0x45], al; ror byte ptr [rax - 0x75], 1; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000420352: add byte ptr [rdi + rcx + 0x46], cl; ret 0x2a8; 
0x000000000041715a: add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x000000000048823f: add byte ptr [rdi + rcx - 0x43], cl; ret 0x8949; 
0x0000000000490f52: add byte ptr [rdi + rcx*2 + 0x48], dh; add esp, 0x18; ret; 
0x000000000044646d: add byte ptr [rdi], cl; adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004845fe: add byte ptr [rdi], cl; adc dword ptr [rax + 0x300], eax; ret; 
0x0000000000474229: add byte ptr [rdi], cl; adc dword ptr [rax + 0x40], eax; pop rbx; ret; 
0x0000000000447b6a: add byte ptr [rdi], cl; adc dword ptr [rax + rdx - 0x10], eax; ret; 
0x0000000000418114: add byte ptr [rdi], cl; adc dword ptr [rbx + 0x48], eax; pop rbx; ret; 
0x000000000047a49c: add byte ptr [rdi], cl; adc dword ptr [rbx], eax; pop rbx; ret; 
0x0000000000447aeb: add byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000045037b: add byte ptr [rdi], cl; add eax, 0xfff0003d; push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x000000000044a0e7: add byte ptr [rdi], cl; add esi, edx; je 0x4a0f1; vzeroall; ret; 
0x0000000000433076: add byte ptr [rdi], cl; cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000401a4f: add byte ptr [rdi], cl; lahf; ret 0x3145; 
0x000000000044c0df: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000443fbf: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000004340bf: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000043fd9f: add byte ptr [rdi], cl; mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x000000000046f55f: add byte ptr [rdi], cl; mov bh, 0xb5; pop rax; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x000000000044c0ef: add byte ptr [rdi], cl; mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x000000000044cebf: add byte ptr [rdi], cl; mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000043fdaf: add byte ptr [rdi], cl; mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000041832f: add byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043412f: add byte ptr [rdi], cl; mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x00000000004073bf: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000408037: add byte ptr [rdi], cl; mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x0000000000409eaf: add byte ptr [rdi], cl; mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000044560f: add byte ptr [rdi], cl; mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000004455ff: add byte ptr [rdi], cl; mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000004455cf: add byte ptr [rdi], cl; mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004455ef: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000004455df: add byte ptr [rdi], cl; mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000041080e: add byte ptr [rdi], cl; mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x8901; 
0x000000000041a9ea: add byte ptr [rdi], cl; mov dh, 0xc0; mov dword ptr [rdi + 0x10], eax; mov byte ptr fs:[0x972], 0; mov qword ptr fs:[0x2f8], rdi; ret; 
0x00000000004247df: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042a4ff: add byte ptr [rdi], cl; mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000000042a8cf: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042a8ff: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042a8ef: add byte ptr [rdi], cl; mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x000000000042a90f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x2a950; add rax, rdi; ret; 
0x000000000042a91f: add byte ptr [rdi], cl; mov esp, 0xc22948c0; jbe 0x2a950; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042a8df: add byte ptr [rdi], cl; mov esp, 0xf80148c0; ret; 
0x0000000000475d2b: add byte ptr [rdi], cl; sub dword ptr [rsp + 0x20], eax; call 0x882c0; call rbx; 
0x00000000004895b1: add byte ptr [rdi], cl; test byte ptr [rax + rax - 0x76b40000], bh; dec dword ptr [rax - 0x7d]; ret; 
0x000000000040e81e: add byte ptr [rdi], cl; test byte ptr [rdi - 0x9ffffdf], ah; ret; 
0x0000000000450424: add byte ptr [rdi], cl; test dword ptr [rax + 0x48000000], ebp; add esp, 0x68; pop rbp; pop r12; ret; 
0x0000000000479c6f: add byte ptr [rdi], cl; test dword ptr [rbp + 0x48000000], edi; add esp, 0x78; ret; 
0x00000000004860e2: add byte ptr [rdi], cl; test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x000000000040ecf4: add byte ptr [rdi], cl; xchg dword ptr [rip - 0x76ffffeb], eax; ret 0xc083; 
0x0000000000455461: add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8348; 
0x0000000000455b9d: add byte ptr [rdi], cl; xchg eax, ebp; ret 0x8d48; 
0x0000000000455b7c: add byte ptr [rdi], cl; xchg eax, esp; ret 0x8d48; 
0x0000000000488f79: add byte ptr [rdi], cl; xchg eax, esp; ret 0xde89; 
0x00000000004416bf: add byte ptr [rdx + 0x48028801], cl; mov eax, edi; ret; 
0x000000000042b71f: add byte ptr [rdx + 0x5e], dh; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000452a39: add byte ptr [rdx + 0x64], bh; test eax, eax; cmove eax, edx; ret; 
0x0000000000414947: add byte ptr [rdx + 1], bh; mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x0000000000414946: add byte ptr [rdx + 1], dil; mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x00000000004220db: add byte ptr [rdx + rbx - 0x7d], dh; loope 0x220e5; lea rax, [rip + 0x1c8d8]; lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x0000000000485a5b: add byte ptr [rdx + rdx - 0x7d], dh; ret 0x4901; 
0x0000000000447ea1: add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax + 0x7f]; adc dil, r15b; ret; 
0x0000000000447fc5: add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax]; jg 0x48010; adc bh, bh; ret; 
0x000000000044bba5: add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax]; jg 0x4bbf0; adc bh, bh; ret; 
0x000000000041f23d: add byte ptr [rdx - 0x7d], cl; xor qword ptr [rax], r9; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000475d51: add byte ptr [rdx], al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; out dx, eax; mov eax, 0xca; syscall; 
0x0000000000489aaf: add byte ptr [rdx], al; add byte ptr [rax], al; add dh, dh; add eax, 0x42b09; jne 0x89abe; ret; 
0x000000000046508b: add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x000000000042215b: add byte ptr [rdx], al; lea rax, [rip + 0x123c]; lea rdx, [rip + 0x2935]; cmovne rax, rdx; ret; 
0x00000000004230fb: add byte ptr [rdx], al; lea rax, [rip + 0x1ce2c]; lea rdx, [rip + 0x1e6c5]; cmovne rax, rdx; ret; 
0x00000000004221db: add byte ptr [rdx], al; lea rax, [rip + 0x1dc5c]; lea rdx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x0000000000477a22: add byte ptr [rdx], ch; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x00000000004888b8: add byte ptr [rdx], dl; jae 0x888b0; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000479dbb: add byte ptr [rip + 0x410000], bh; je 0x79df0; mov eax, 0x101; syscall; 
0x0000000000479dba: add byte ptr [rip + 0x410000], dil; je 0x79df0; mov eax, 0x101; syscall; 
0x0000000000416b15: add byte ptr [rip - 0x15141b8c], bl; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000475657: add byte ptr [rip - 0x5cf0b800], cl; ret 0x820f; 
0x000000000046b647: add byte ptr [rip - 0x6f117], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000044c4b5: add byte ptr [rsi + 0x2e], ah; nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000454068: add byte ptr [rsi + 0x48], ah; movd mm0, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x78287], xmm0; ret; 
0x0000000000454117: add byte ptr [rsi + 0x48], ah; movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000484645: add byte ptr [rsi + 0x48], ah; movd mm0, esi; punpcklqdq xmm0, xmm2; movups xmmword ptr [rax + 0x308], xmm0; ret; 
0x000000000041aa5e: add byte ptr [rsi + 0x80], bh; mov eax, 0xca; syscall; 
0x0000000000484721: add byte ptr [rsi + 0x80], bh; mov eax, r9d; syscall; 
0x000000000041ab1b: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; 
0x000000000041ab1b: add byte ptr [rsi + 0x81], bh; mov eax, 0xca; syscall; ret; 
0x00000000004460ab: add byte ptr [rsi + 0xf], ah; cmp byte ptr [rax], al; ret 0xf66; 
0x000000000041a771: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000047c12c: add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x0000000000477d6b: add byte ptr [rsi + 0xf], ah; jbe 0x77dbf; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x000000000042a8bb: add byte ptr [rsi + 0xf], ah; je 0x2a90f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000419ca4: add byte ptr [rsi + 0xf], ah; out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x0000000000458ddb: add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret 0x4166; 
0x0000000000468671: add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret 0xf66; 
0x0000000000402720: add byte ptr [rsi + 0xf], ah; outsb dx, byte ptr [rsi]; ret; 
0x000000000046741c: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; adc dword ptr [rax - 0xdf6b], ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000467452: add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x000000000042a804: add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000475976: add byte ptr [rsi + 1], bh; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000041b79c: add byte ptr [rsi + 1], dh; ret; 
0x000000000045337f: add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x78ee7]; ret; 
0x0000000000474f87: add byte ptr [rsi + rdi - 0x77], dh; ret 0x48e9; 
0x0000000000419fc7: add byte ptr [rsi + rdx + 0x48], dh; mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x19ff8; movzx eax, byte ptr [rax]; ret; 
0x0000000000454cb7: add byte ptr [rsi + rdx + 0x48], dh; test edx, edx; je 0x54cd0; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x0000000000450f17: add byte ptr [rsi + rsi + 0x44], dh; mov edx, eax; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000041fa2d: add byte ptr [rsi - 0x70], ah; endbr64; cmp byte ptr [rip + 0xac7e5], 0; jne 0x1fa40; ret; 
0x00000000004511ed: add byte ptr [rsi - 0x70], ah; endbr64; mov eax, 0xb; syscall; 
0x000000000045036d: add byte ptr [rsi - 0x70], ah; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000442e6d: add byte ptr [rsi - 0x70], ah; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000047833d: add byte ptr [rsi - 0x70], ah; mov ch, dh; and ch, 0xf; je 0x78360; add rax, 2; ret; 
0x000000000044334d: add byte ptr [rsi - 0x70], ah; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004435ed: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004435ad: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004435cd: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000443acd: add byte ptr [rsi - 0x70], ah; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044d52d: add byte ptr [rsi - 0x70], ah; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000046521d: add byte ptr [rsi - 0x70], ah; nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x00000000004641cd: add byte ptr [rsi - 0x70], ah; ret; 
0x000000000044ddad: add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000477f1d: add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044bc3d: add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044bd3d: add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; lea rax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x000000000047935d: add byte ptr [rsi - 0x70], ah; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000477e3d: add byte ptr [rsi - 0x70], ah; xor eax, eax; ret; 
0x00000000004416cf: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004416df: add byte ptr [rsi - 0x75], ah; add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000473b6f: add byte ptr [rsi - 1], bh; call qword ptr [rax + 0x18]; 
0x00000000004182d1: add byte ptr [rsi - 1], bh; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x0000000000418ab1: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004193b8: add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rdx + 0x18]; 
0x000000000044fad1: add byte ptr [rsi], ah; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000465209: add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000040ba5a: add byte ptr cs:[rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000044fad2: add byte ptr es:[rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000048e0a5: add byte ptr es:[rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000452a3b: add byte ptr fs:[rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x0000000000447dc5: add ch, al; cli; jg 0x47e0e; adc al, dh; vzeroupper; ret; 
0x000000000047804f: add ch, al; std; xlatb; rol dword ptr [rbp - 0x3aa78a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000479331: add ch, al; sti; xchg eax, ebx; rol byte ptr [rbp - 0x3ac98a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044dd84: add ch, al; sti; xchg eax, ebx; rol byte ptr [rbp - 0x3acc8a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044db4e: add ch, al; sti; xchg eax, ebx; rol byte ptr [rbp - 0x3ad68a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044c49a: add ch, al; sti; xchg eax, ebx; rol byte ptr [rbp - 0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000044bbfe: add ch, al; sti; xchg eax, ebx; rol byte ptr [rbp - 0xc868b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000041130e: add ch, bl; ret 0x5b8; 
0x00000000004747e5: add cl, al; call 0x1e7caf7; mov dword ptr [rip + 0x539fe], eax; ret; 
0x0000000000407a20: add cl, al; cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000466e58: add cl, byte ptr [r8 - 0x73]; add ecx, dword ptr [rcx + 0x39]; ret; 
0x00000000004416e7: add cl, byte ptr [r8 - 0x76b7fdbe]; clc; ret; 
0x0000000000477dc7: add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; add rax, rdi; ret; 
0x0000000000477de7: add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000477e07: add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477e27: add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000477b30: add cl, byte ptr [rax + 0x29]; jbe 0x77e40; add rax, rdi; add rax, rcx; ret; 
0x000000000046dff1: add cl, byte ptr [rax + 0x29]; ret 0xf48; 
0x000000000044f39f: add cl, byte ptr [rax + 0x39]; int1; jb 0x4f124; mov rax, r8; vzeroupper; ret; 
0x000000000047f43d: add cl, byte ptr [rax + 0x39]; ret 0x860f; 
0x000000000045c42b: add cl, byte ptr [rax + 0x39]; ret; 
0x0000000000466e37: add cl, byte ptr [rax + 0x428d4801]; add dword ptr [rcx + 0x39], ecx; ret; 
0x000000000045f07f: add cl, byte ptr [rax + 0xf04064c]; xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x876; 
0x0000000000413225: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x00000000004133dc: add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0xf748; 
0x000000000044f0b2: add cl, byte ptr [rax + 0xf]; stosd dword ptr [rdi], eax; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000466e56: add cl, byte ptr [rax - 0x72b7fdbf]; add ecx, dword ptr [rcx + 0x39]; ret; 
0x0000000000423252: add cl, byte ptr [rax - 0x73]; adc eax, 0x231f6; lea rax, [rip + 0x232df]; cmove rax, rdx; ret; 
0x0000000000423072: add cl, byte ptr [rax - 0x73]; adc eax, 0x233c6; lea rax, [rip + 0x2347f]; cmove rax, rdx; ret; 
0x0000000000422e62: add cl, byte ptr [rax - 0x73]; adc eax, 0x235e6; lea rax, [rip + 0x236cf]; cmove rax, rdx; ret; 
0x0000000000423292: add cl, byte ptr [rax - 0x73]; adc eax, 0x23836; lea rax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230b2: add cl, byte ptr [rax - 0x73]; adc eax, 0x23a06; lea rax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422ea2: add cl, byte ptr [rax - 0x73]; adc eax, 0x23c26; lea rax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x000000000042323a: add cl, byte ptr [rax - 0x73]; adc eax, 0x2400e; lea rax, [rip + 0x24077]; cmove rax, rdx; ret; 
0x000000000042305a: add cl, byte ptr [rax - 0x73]; adc eax, 0x241de; lea rax, [rip + 0x24227]; cmove rax, rdx; ret; 
0x0000000000422e4a: add cl, byte ptr [rax - 0x73]; adc eax, 0x243fe; lea rax, [rip + 0x24467]; cmove rax, rdx; ret; 
0x00000000004231d8: add cl, byte ptr [rax - 0x73]; adc eax, 0x25530; lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000422ff8: add cl, byte ptr [rax - 0x73]; adc eax, 0x25700; lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000422de8: add cl, byte ptr [rax - 0x73]; adc eax, 0x25920; lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000423272: add cl, byte ptr [rax - 0x73]; adc eax, 0x27f56; lea rax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x0000000000423092: add cl, byte ptr [rax - 0x73]; adc eax, 0x28126; lea rax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e82: add cl, byte ptr [rax - 0x73]; adc eax, 0x28346; lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x000000000043f064: add cl, byte ptr [rax - 0x73]; add al, 2; cmovne rax, rcx; vzeroupper; ret; 
0x000000000042215c: add cl, byte ptr [rax - 0x73]; add eax, 0x123c; lea rdx, [rip + 0x2935]; cmovne rax, rdx; ret; 
0x0000000000423183: add cl, byte ptr [rax - 0x73]; add eax, 0x14275; lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x00000000004230fc: add cl, byte ptr [rax - 0x73]; add eax, 0x1ce2c; lea rdx, [rip + 0x1e6c5]; cmovne rax, rdx; ret; 
0x00000000004221dc: add cl, byte ptr [rax - 0x73]; add eax, 0x1dc5c; lea rdx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x0000000000422f5a: add cl, byte ptr [rax - 0x73]; add eax, 0x24f1e; lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x0000000000422450: add cl, byte ptr [rax - 0x73]; add eax, 0x3cf8; lea rdx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x0000000000422d3e: add cl, byte ptr [rax - 0x73]; add eax, 0x827a; lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x0000000000423210: add cl, byte ptr [rax - 0x73]; add eax, 0x8eb8; lea rdx, [rip + 0xe441]; cmovne rax, rdx; ret; 
0x0000000000423030: add cl, byte ptr [rax - 0x73]; add eax, 0x9078; lea rdx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x0000000000422e20: add cl, byte ptr [rax - 0x73]; add eax, 0xbc88; lea rdx, [rip + 0x11321]; cmovne rax, rdx; ret; 
0x0000000000466e59: add cl, byte ptr [rax - 0x73]; add ecx, dword ptr [rcx + 0x39]; ret; 
0x0000000000442f85: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000441775: add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000004416a5: add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x00000000004416e8: add cl, byte ptr [rax - 0x76b7fdbe]; clc; ret; 
0x00000000004533b2: add cl, byte ptr [rax - 0x77]; add eax, 0x78ebe; lea rax, [rip + 0x78eaf]; ret; 
0x0000000000441655: add cl, byte ptr [rax - 0x77]; clc; ret; 
0x000000000045d673: add cl, byte ptr [rax - 0x77]; ret 0x840f; 
0x0000000000422a5c: add cl, byte ptr [rax - 0x7d]; ret 0x4802; 
0x000000000043fea0: add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000459c09: add cl, byte ptr [rax - 0x7d]; ret 0x4902; 
0x00000000004104b2: add cl, byte ptr [rax - 0x7d]; ret 0x8301; 
0x000000000040fa4c: add cl, byte ptr [rax - 0x7d]; ret 0x8302; 
0x00000000004717f1: add cl, byte ptr [rax - 0x7d]; ret 0x8304; 
0x000000000043ff03: add cl, byte ptr [rax - 0x7d]; ret 0xe908; 
0x00000000004057c5: add cl, byte ptr [rax - 0x7d]; ret 0xf01; 
0x0000000000481426: add cl, byte ptr [rax - 0x7d]; ret; 
0x000000000045c0c3: add cl, byte ptr [rbp + rcx*4 - 0x74]; and al, 0x88; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000433f02: add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000441723: add cl, byte ptr [rbx + 0x42890341]; add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x0000000000442f05: add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000441765: add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000450e24: add cl, byte ptr [rbx + 0x750c2444]; ret 0xd8f7; 
0x0000000000414ce8: add cl, byte ptr [rbx]; add byte ptr [rax], al; je 0x14cef; ret; 
0x0000000000466e4d: add cl, byte ptr [rcx + 0x39]; ret; 
0x00000000004036f1: add cl, byte ptr [rcx - 0x4029763e]; add dh, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x000000000040d89f: add cl, byte ptr [rcx - 0x8977b]; jmp qword ptr [rsi + 0x2e]; 
0x00000000004466ca: add cl, byte ptr [rdi]; adc dword ptr [rcx], eax; ret; 
0x0000000000478980: add cl, byte ptr [rdi]; add esi, edx; je 0x7898a; vzeroall; ret; 
0x00000000004416e5: add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000442ec3: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; lea eax, [rdx + 4]; ret; 
0x0000000000441703: add cl, byte ptr [rdx + 0x42880441]; add al, 0x48; mov eax, edi; ret; 
0x00000000004641c8: add cl, ch; adc al, byte ptr [rsi]; add byte ptr [rax], al; nop; ret; 
0x000000000048f8c4: add cl, ch; imul esi, ebp, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000046c5bf: add cl, ch; in eax, 0xfa; jmp qword ptr [rsi + 0x2e]; 
0x0000000000496e80: add cl, ch; push -0x5d; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000484259: add cl, ch; ret 0xffef; 
0x000000000047cce6: add cl, ch; ret 0xfff2; 
0x000000000045e343: add cl, ch; ret 0xfff8; 
0x000000000040d488: add cl, ch; ret 0xfffc; 
0x0000000000419792: add cl, ch; ret; 
0x0000000000413598: add cl, ch; retf 0xfffc; jmp qword ptr [rsi - 0x70]; 
0x0000000000439aba: add cl, ch; retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x000000000047b838: add cl, ch; sar ebp, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000480b00: add cl, ch; sbb dl, byte ptr [rax - 1]; jmp qword ptr [rsi + 0x2e]; 
0x000000000040186c: add cl, cl; ret; 
0x0000000000474781: add dh, al; xor byte ptr [rdx + 9], 0; add byte ptr [rax], al; ret; 
0x00000000004340b3: add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000453302: add dh, byte ptr [rax + 0x48]; cmp dword ptr [rax + 8], 0; je 0x53310; ret; 
0x00000000004036f7: add dh, byte ptr [rax]; add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x0000000000445bf7: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45bf0; ret; 
0x0000000000445ca7: add dh, byte ptr [rbp + 0x16]; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45ca0; ret; 
0x0000000000452ad2: add dh, byte ptr [rbp + 0x2b]; xor r8d, r8d; mov eax, 0x19; syscall; 
0x0000000000484717: add dh, byte ptr [rbp + 0x36]; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000004847c7: add dh, byte ptr [rbp + 0x3e]; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000473a31: add dh, byte ptr [rbp + 0x74]; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000044c448: add dh, byte ptr [rbp - 0x72]; add rax, rdx; ret; 
0x0000000000422e16: add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x0000000000436dfc: add dh, byte ptr [rdx + 0x10]; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000446293: add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000041ef9e: add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x0000000000489ab3: add dh, dh; add eax, 0x42b09; jne 0x89abe; ret; 
0x00000000004231ff: add dh, dh; add eax, 0xa91c6; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x000000000042301f: add dh, dh; add eax, 0xa93a6; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x0000000000422e0f: add dh, dh; add eax, 0xa95b6; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x000000000042115e: add dh, dh; ret 0x7402; 
0x0000000000455731: add dh, dh; ret 0x7404; 
0x0000000000411faf: add dh, dh; ret 0x7420; 
0x0000000000444157: add dh, dh; ret 0x7501; 
0x000000000041b3a6: add dh, dh; ret 0x7502; 
0x0000000000411208: add dh, dh; ret 0x7504; 
0x0000000000444129: add dh, dh; ret 0x7510; 
0x0000000000444136: add dh, dh; ret 0x7520; 
0x0000000000444143: add dh, dh; ret 0x7540; 
0x0000000000467657: add dh, dh; ret 0xf01; 
0x000000000045b497: add dh, dh; ret 0xf02; 
0x000000000041e763: add dh, dh; ret 0xf0f; 
0x000000000040353b: add dh, dh; ret 0xf20; 
0x00000000004677d7: add dh, dh; ret 0xf50; 
0x000000000040e80f: add dh, dh; ret; 
0x0000000000422d1f: add dh, dh; shl dword ptr [rax], 0x74; or bh, dh; ret 0; 
0x000000000046442f: add dl, bh; jmp qword ptr [rsi + 0x66]; 
0x0000000000466e48: add dword ptr [r8 - 0x73], ecx; add cl, byte ptr [rcx + 0x39]; ret; 
0x0000000000409eb2: add dword ptr [r8 - 0x7d], ecx; ret; 
0x0000000000442e71: add dword ptr [rax + 0x28d4802], ecx; ret; 
0x00000000004475f8: add dword ptr [rax + 0x29], ecx; int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000046088f: add dword ptr [rax + 0x39], ecx; ret 0x2476; 
0x000000000045c56f: add dword ptr [rax + 0x39], ecx; ret 0x4076; 
0x000000000045d41b: add dword ptr [rax + 0x39], ecx; ret 0x4276; 
0x0000000000418c54: add dword ptr [rax + 0x39], ecx; ret 0xee75; 
0x00000000004141e2: add dword ptr [rax + 0x39], ecx; ret 0xf075; 
0x00000000004188bb: add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000497993: add dword ptr [rax + 0x39], ecx; sal dword ptr [rcx + rcx*4 + 0x48], 0x89; ret 0xc148; 
0x000000000049753b: add dword ptr [rax + 0x39], ecx; sal dword ptr [rdi + rax*4 + 0x48], 0x89; ret 0xc148; 
0x0000000000497693: add dword ptr [rax + 0x39], ecx; sal dword ptr [rdx + rcx*4 + 0x48], 0x89; ret 0xc148; 
0x0000000000491411: add dword ptr [rax + 0x63], ecx; ret; 
0x000000000045c58b: add dword ptr [rax + 0xf04074c], ecx; xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x1676; 
0x00000000004192b3: add dword ptr [rax + 0xf740a39], eax; cmp rcx, rsi; ja 0x192b0; lea eax, [rdx + rdi]; ret; 
0x000000000047a159: add dword ptr [rax + 1], ecx; ret; 
0x0000000000486167: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x0000000000409f7f: add dword ptr [rax + 1], ecx; ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000475cb5: add dword ptr [rax + rdi + 0x45], esi; xor edx, edx; mov esi, 0x80; mov rdi, rbp; mov eax, r8d; syscall; 
0x0000000000474776: add dword ptr [rax + rdx + 0x64], esi; mov rax, qword ptr [0x10]; mov byte ptr [rax + 0x972], 0; ret; 
0x0000000000466e46: add dword ptr [rax - 0x72b7febf], ecx; add cl, byte ptr [rcx + 0x39]; ret; 
0x0000000000466e49: add dword ptr [rax - 0x73], ecx; add cl, byte ptr [rcx + 0x39]; ret; 
0x0000000000466e39: add dword ptr [rax - 0x73], ecx; add dword ptr [rcx + 0x39], ecx; ret; 
0x000000000049145b: add dword ptr [rax - 0x73], ecx; push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x000000000041f6c0: add dword ptr [rax - 0x73], ecx; push rsp; ret 0xe8f0; 
0x0000000000407993: add dword ptr [rax - 0x75], ecx; mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x00000000004416c1: add dword ptr [rax - 0x776b7fe], ecx; ret; 
0x000000000045353b: add dword ptr [rax - 0x77], ecx; adc eax, 0x73e45; mov qword ptr [rdi + 0x460], rdx; add rsp, 8; ret; 
0x000000000041b7c6: add dword ptr [rax - 0x77], ecx; adc eax, 0xa9ffa; ret; 
0x0000000000442f82: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000441772: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; add eax, 0x5428948; mov rax, rdi; ret; 
0x00000000004416a2: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x75]; or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000441652: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x0000000000442f02: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890541]; add eax, 0x8428d48; ret; 
0x0000000000441762: add dword ptr [rax - 0x77], ecx; add cl, byte ptr [rbx + 0x42890841]; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000046b641: add dword ptr [rax - 0x77], ecx; push rbp; sub dh, al; add byte ptr [rip - 0x6f117], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000458957: add dword ptr [rax - 0x77], ecx; ret 0x2b48; 
0x000000000047a523: add dword ptr [rax - 0x77], ecx; ret 0x8948; 
0x000000000040a968: add dword ptr [rax - 0x77], ecx; ret 0x8949; 
0x000000000047fe7a: add dword ptr [rax - 0x77], ecx; ret 0x8b49; 
0x0000000000488c07: add dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x000000000047bdd3: add dword ptr [rax - 0x77], ecx; xor cl, byte ptr [rax - 0x7d]; ret 0x4838; 
0x0000000000422a54: add dword ptr [rax - 0x78], eax; je 0x22a65; adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x0000000000476a2f: add dword ptr [rax - 0x78], eax; jl 0x76a68; adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x0000000000407e87: add dword ptr [rax - 0x7cb700b2], ecx; ret 0x4901; 
0x0000000000465fc2: add dword ptr [rax - 0x7d], ecx; ret 0x4001; 
0x000000000045921c: add dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x00000000004073c3: add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x000000000046c1e3: add dword ptr [rax - 0x7d], ecx; ret 0x8404; 
0x000000000044e5d9: add dword ptr [rax - 0x7d], ecx; ret 0x8801; 
0x00000000004105fe: add dword ptr [rax - 0x7d], ecx; ret 0x8901; 
0x000000000040803b: add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x0000000000409eb3: add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000046e056: add dword ptr [rax - 0x8e343], eax; jmp qword ptr [rax]; 
0x000000000043f846: add dword ptr [rax], 0xc8010000; vzeroupper; ret; 
0x000000000040e9e9: add dword ptr [rax], eax; add al, ch; call rdi; 
0x000000000045f05d: add dword ptr [rax], eax; add byte ptr [rax + 0x39], cl; ret 0x3676; 
0x000000000040bea2: add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x0000000000476e27: add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000494995: add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000048869f: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; add eax, 0x67; cmovne rax, rdx; ret; 
0x0000000000420b58: add dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; push rax; dec dword ptr [rax - 0x7b]; ret 0x840f; 
0x0000000000415669: add dword ptr [rax], eax; add byte ptr [rax - 0x75], cl; test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000049749a: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000047da43: add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000420e50: add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; ret 0x840f; 
0x0000000000429f47: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000472504: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8908; 
0x000000000041f824: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x00000000004767f6: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000043e77f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429f75: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000047a28f: add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000491ec1: add dword ptr [rax], eax; add byte ptr [rax - 0x80], al; call qword ptr [rcx]; 
0x00000000004573e1: add dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4801; 
0x0000000000492ea6: add dword ptr [rax], eax; add byte ptr [rax], al; call rax; 
0x0000000000493d49: add dword ptr [rax], eax; add byte ptr [rax], al; cmp qword ptr [rsi + 8], rcx; ja 0x93d55; sbb eax, eax; ret; 
0x0000000000493c11: add dword ptr [rax], eax; add byte ptr [rax], al; jmp rax; 
0x0000000000488373: add dword ptr [rax], eax; add byte ptr [rax], al; lock cmpxchg dword ptr [rdi], edx; jne 0x883b3; xor eax, eax; ret; 
0x000000000048815e: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000041ba5e: add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041ab3c: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x000000000041ab3c: add dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x00000000004934cb: add dword ptr [rax], eax; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000041ab18: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041ab18: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000475973: add dword ptr [rax], eax; add byte ptr [rax], al; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000041ba3e: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba1e: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041b9fe: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d57], rax; ret; 
0x0000000000488086: add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x00000000004705b2: add dword ptr [rax], eax; add byte ptr [rax], al; mov r10d, 1; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x0000000000475978: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000041b2e1: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004114ed: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x00000000004705b8: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004704b8: add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000414949: add dword ptr [rax], eax; add byte ptr [rax], al; mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x0000000000475d28: add dword ptr [rax], eax; add byte ptr [rax], al; movaps xmmword ptr [rsp + 0x20], xmm0; call 0x882c0; call rbx; 
0x000000000046c23a: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000422069: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000472b4b: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000418e3d: add dword ptr [rax], eax; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004755c4: add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000450591: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x0000000000450591: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x505f0; ret; 
0x0000000000450fc5: add dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x50fd8; ret; 
0x0000000000470622: add dword ptr [rax], eax; add byte ptr [rax], al; xor ebp, ebp; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000046fb96: add dword ptr [rax], eax; add byte ptr [rax], al; xor r10d, r10d; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x0000000000419b74: add dword ptr [rax], eax; add byte ptr [rbp + 0xf], dh; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000492db1: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000456c28: add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000047566a: add dword ptr [rax], eax; add byte ptr [rbx + 0x5e7421f8], al; mov eax, 0x16; ret; 
0x00000000004028f4: add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe3a], al; ret; 
0x000000000044c038: add dword ptr [rax], eax; add byte ptr [rbx - 0x7cf0f706], al; in al, dx; add byte ptr [rax], al; add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x0000000000454f02: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0x20], al; pop r12; ret; 
0x000000000041630d: add dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 0xe], cl; mov rsi, r13; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000047267d: add dword ptr [rax], eax; add byte ptr [rcx - 0x73], al; dec dword ptr [r9 - 0x74b6cfbd]; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000451450: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; jge 0x51457; call rbx; 
0x000000000048a7f2: add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; sbb byte ptr [rax + 0x39], r9b; ret; 
0x000000000045a2b1: add dword ptr [rax], eax; add byte ptr [rcx - 0xa], al; ret 0xf04; 
0x0000000000419693: add dword ptr [rax], eax; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rcx + 0x58]; 
0x0000000000411c47: add dword ptr [rax], eax; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xef; call qword ptr [rbx + 0x10]; 
0x0000000000417158: add dword ptr [rax], eax; add byte ptr [rdi + rcx - 0x42], cl; ret 0x4a8d; 
0x000000000044646b: add dword ptr [rax], eax; add byte ptr [rdi], cl; adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000450379: add dword ptr [rax], eax; add byte ptr [rdi], cl; add eax, 0xfff0003d; push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x0000000000454115: add dword ptr [rax], eax; add byte ptr [rsi + 0x48], ah; movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000418aaf: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004193b6: add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rdx + 0x18]; 
0x0000000000444155: add dword ptr [rax], eax; add dh, dh; ret 0x7501; 
0x0000000000444162: add dword ptr [rax], eax; add dh, dh; ret 0x7502; 
0x000000000044416f: add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x0000000000444127: add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000444134: add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000444141: add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x000000000041e761: add dword ptr [rax], eax; add dh, dh; ret 0xf0f; 
0x0000000000475d34: add dword ptr [rax], eax; call rbx; 
0x0000000000422362: add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000004221e9: add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x000000000042337b: add dword ptr [rax], eax; lea rax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x000000000042235b: add dword ptr [rax], eax; lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223cb: add dword ptr [rax], eax; lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x0000000000423189: add dword ptr [rax], eax; lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x00000000004221e2: add dword ptr [rax], eax; lea rdx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x0000000000423102: add dword ptr [rax], eax; lea rdx, [rip + 0x1e6c5]; cmovne rax, rdx; ret; 
0x00000000004220e6: add dword ptr [rax], eax; lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x0000000000401866: add dword ptr [rax], eax; mov eax, 0; leave; ret; 
0x000000000042231f: add dword ptr [rax], eax; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x22338; ret; 
0x000000000042238f: add dword ptr [rax], eax; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x223a8; ret; 
0x000000000042333f: add dword ptr [rax], eax; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x23358; ret; 
0x0000000000401815: add dword ptr [rax], eax; nop; pop rbp; ret; 
0x0000000000422112: add dword ptr [rax], eax; test ch, 4; jne 0x220de; ret; 
0x0000000000422205: add dword ptr [rax], eax; test ch, 4; jne 0x221ca; ret; 
0x000000000046542b: add dword ptr [rax], eax; test eax, eax; jne 0x65440; add rsp, 8; ret; 
0x0000000000409fd4: add dword ptr [rax], eax; test eax, eax; jne 0x9fe0; pop rbp; ret; 
0x0000000000454cb5: add dword ptr [rax], edx; je 0x54cd0; test rdx, rdx; je 0x54cd0; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x0000000000403090: add dword ptr [rax], esi; add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x0000000000411c46: add dword ptr [rax], r8d; add byte ptr [rcx], dh; test byte ptr [rax - 0x77], 0xef; call qword ptr [rbx + 0x10]; 
0x00000000004743fb: add dword ptr [rbp + 0x12], esi; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000445f67: add dword ptr [rbp + 0x16], esi; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45f60; sub rax, 1; ret; 
0x0000000000445e17: add dword ptr [rbp + 0x16], esi; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x45e10; lea rax, [rcx - 1]; ret; 
0x000000000041ab37: add dword ptr [rbp + 0x31], 0x1bad2; add byte ptr [rax], al; mov eax, 0xca; syscall; 
0x000000000041ab37: add dword ptr [rbp + 0x31], 0x1bad2; add byte ptr [rax], al; mov eax, 0xca; syscall; ret; 
0x000000000044df0c: add dword ptr [rbp + rcx*4 + 0x4c], ecx; and al, 0x20; call rbx; 
0x0000000000477a28: add dword ptr [rbp + rcx*4 + 0x4c], ecx; and al, 0x38; call rbx; 
0x000000000042317e: add dword ptr [rbp + rdx - 0x80], esi; out 2, al; lea rax, [rip + 0x14275]; lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x000000000042244b: add dword ptr [rbp + rdx - 0x80], esi; out 2, al; lea rax, [rip + 0x3cf8]; lea rdx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x0000000000401f2f: add dword ptr [rbp - 0x77], ecx; ret; 
0x0000000000433f72: add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x000000000041db3a: add dword ptr [rbx + 0xa7c6305], ecx; add byte ptr [rcx], bh; ret 0xa7e; 
0x000000000040198f: add dword ptr [rbx + 0xf], ebx; scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0x41c3; 
0x0000000000402460: add dword ptr [rbx - 0x50f0fe40], eax; ret 0x518d; 
0x0000000000401986: add dword ptr [rbx - 0x50f0fe40], eax; ret 0x538d; 
0x000000000040fa3c: add dword ptr [rbx - 0x67ccf17], eax; or dword ptr [rdi], ecx; xchg dword ptr [rdi + 0xffffff5], esp; mov dh, 0x4a; add cl, byte ptr [rax - 0x7d]; ret 0x8302; 
0x000000000041f6bd: add dword ptr [rbx - 0x72b7fe20], eax; push rsp; ret 0xe8f0; 
0x000000000040297f: add dword ptr [rbx - 0x76bbfff4], ebx; ret 0xe281; 
0x0000000000475c33: add dword ptr [rbx], 0x3d8d4800; stosd dword ptr [rdi], eax; add dword ptr [rbx], 0xe87ee800; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000475c3a: add dword ptr [rbx], 0xe87ee800; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000442ef1: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000441721: add dword ptr [rcx + 0x3418b02], ecx; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x000000000041e1cc: add dword ptr [rcx + 0x39], ecx; ret 0x870f; 
0x0000000000466e3d: add dword ptr [rcx + 0x39], ecx; ret; 
0x0000000000442ed1: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000441711: add dword ptr [rcx + 0x418b6602], ecx; add al, 0x66; mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000442ec1: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000441701: add dword ptr [rcx + 0x4418a02], ecx; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x00000000004018e4: add dword ptr [rcx + 0xf], eax; xchg eax, esp; ret; 
0x000000000041875d: add dword ptr [rcx + rcx*4 - 0x19], ecx; call qword ptr [rbx + 0x18]; 
0x0000000000480229: add dword ptr [rcx - 0x6efa09f0], ecx; ret; 
0x0000000000477a1e: add dword ptr [rcx - 0x75], ecx; jge 0x77a23; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x00000000004416f1: add dword ptr [rcx - 0x776b7fe], ecx; ret; 
0x000000000041caa3: add dword ptr [rcx - 0x77], ecx; push rdx; or byte ptr [rcx + 0x39], cl; ret 0x850f; 
0x000000000040ca0c: add dword ptr [rcx - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000487618: add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x00000000004028f9: add dword ptr [rcx - 0x7d], eax; ret; 
0x000000000040b41b: add dword ptr [rcx - 0x7d], ecx; ret 0x8401; 
0x000000000048544d: add dword ptr [rcx - 0x7d], ecx; rol byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x32], cl; movsx eax, cl; neg eax; ret; 
0x00000000004028fd: add dword ptr [rcx - 0x7d], ecx; rol dword ptr [rcx + rcx*2], 0x83; ret 0x4104; 
0x0000000000450405: add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000042b004: add dword ptr [rcx], ebp; ror byte ptr [rdi], 1; test dword ptr [rax + rax - 0x8b70000], ecx; ret 2; 
0x000000000044df08: add dword ptr [rcx], esi; shr byte ptr [rdx + 1], cl; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000447c11: add dword ptr [rdi + 0x1c], esi; jb 0x47be7; mov byte ptr [rax], sil; ret; 
0x0000000000479808: add dword ptr [rdi + 0x1d], edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000466613: add dword ptr [rdi + 0x22], edi; xor eax, eax; add rsp, 8; ret; 
0x000000000044bb97: add dword ptr [rdi + 0x26], esi; jb 0x4bb7f; mov byte ptr [rax], sil; ret; 
0x0000000000411e76: add dword ptr [rdi + 0x27], edi; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000040adec: add dword ptr [rdi + 0x31], edi; add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000488603: add dword ptr [rdi + 0x32], edi; pop rbp; ret; 
0x000000000046c380: add dword ptr [rdi + 0x35], edi; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000447db6: add dword ptr [rdi + 0x37], esi; jb 0x47d73; mov byte ptr [rax], sil; vzeroupper; ret; 
0x000000000046a05a: add dword ptr [rdi + 0x3b], edi; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000447fa1: add dword ptr [rdi + 0x3c], esi; jb 0x47f84; mov byte ptr [rax], sil; ret; 
0x0000000000417ae0: add dword ptr [rdi + 0x3d], edi; add rsp, 8; ret; 
0x0000000000475a3c: add dword ptr [rdi + 0x49], edi; nop; add rsp, 0x18; ret; 
0x0000000000475b58: add dword ptr [rdi + 0x55], edi; nop; add rsp, 0x18; ret; 
0x00000000004118a3: add dword ptr [rdi + 0xa], edi; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000041fb0a: add dword ptr [rdi + 0xb], edi; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c5b2: add dword ptr [rdi + 0xb], edi; ret; 
0x0000000000475320: add dword ptr [rdi + 0xc], 1; nop; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000419f68: add dword ptr [rdi + 5], edi; ret; 
0x000000000040f329: add dword ptr [rdi + rcx + 0x45], eax; ret 0x448b; 
0x0000000000402463: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0x518d; 
0x0000000000401989: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0x538d; 
0x0000000000402469: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x0000000000402477: add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xebe9; 
0x000000000048c3df: add dword ptr [rdi], ecx; xchg eax, ebp; ror byte ptr [rcx + 0x3ff4705], 0; add rsp, 0x18; ret; 
0x0000000000486cd7: add dword ptr [rdi], ecx; xchg eax, edx; ret 0x8948; 
0x000000000048d22f: add dword ptr [rdi], ecx; xchg eax, esp; ret 0xf883; 
0x000000000044de0f: add dword ptr [rdx + 0x2b], 0xe2748104; ret; 
0x00000000004462a0: add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000436e11: add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000488935: add dword ptr [rdx + rax*2], 1; ret; 
0x0000000000401e22: add dword ptr [rdx + rax], 0; add byte ptr [rax - 0x77], cl; add eax, 0xca552; pop rbx; ret; 
0x000000000041bb63: add dword ptr [rdx + rcx + 0x48], esi; add esp, 8; ret; 
0x0000000000485451: add dword ptr [rdx + rdx*8 - 0x41f0318b], eax; sal edi, 0xd8; ret; 
0x0000000000436d6a: add dword ptr [rdx - 0x2f], esp; jl 0x36db7; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446237: add dword ptr [rdx - 0xf], esp; jl 0x46284; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446377: add dword ptr [rdx - 0xf], esp; jl 0x463c4; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000042a269: add dword ptr [rdx], 0; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000422e8e: add dword ptr [rdx], 0; cmove rax, rdx; ret; 
0x0000000000422e87: add dword ptr [rdx], 0; lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x000000000042309e: add dword ptr [rdx], 0x440f4800; ret 0x66c3; 
0x0000000000423097: add dword ptr [rdx], 0x58d4800; outsd dx, dword ptr [rsi]; add dword ptr [rdx], 0x440f4800; ret 0x66c3; 
0x000000000044df82: add dword ptr [rdx], ebp; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000419f1f: add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x000000000040ac1d: add dword ptr [rip + 0xbd13c], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412e0f: add dword ptr [rsi + rbp - 0x77], esi; ret 0xc085; 
0x000000000048f231: add dword ptr [rsi + rcx - 0x77], esi; ret 0xc083; 
0x00000000004416d2: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004416e2: add dword ptr [rsi - 0x77], esp; add cl, byte ptr [rdx + 0x42880241]; add cl, byte ptr [rax - 0x77]; clc; ret; 
0x00000000004883f6: add dword ptr [rsi - 0xc], edi; sub rsp, 8; call 0x1ab30; xor eax, eax; add rsp, 8; ret; 
0x0000000000418579: add dword ptr [rsp - 0x77], esi; ret 0xc883; 
0x0000000000423096: add dword ptr es:[rdx], 0x58d4800; outsd dx, dword ptr [rsi]; add dword ptr [rdx], 0x440f4800; ret 0x66c3; 
0x000000000042318f: add dword ptr fs:[rax], eax; cmovne rax, rdx; ret; 
0x0000000000420b57: add dword ptr gs:[rax], eax; add byte ptr [rax - 0x73], cl; push rax; dec dword ptr [rax - 0x7b]; ret 0x840f; 
0x00000000004460c5: add eax, 0x10; sub edx, esi; cmp edx, ecx; jle 0x460e4; movsxd rax, ecx; ret; 
0x000000000045331e: add eax, 0x11148b48; mov qword ptr [rax + 8], rdx; ret; 
0x000000000042215f: add eax, 0x123c; lea rdx, [rip + 0x2935]; cmovne rax, rdx; ret; 
0x000000000044e3c2: add eax, 0x1399; test edx, 0x40000000; je 0x4e3a7; ret; 
0x0000000000423186: add eax, 0x14275; lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x000000000048ca1c: add eax, 0x1480000; ret; 
0x000000000047084e: add eax, 0x148b4800; ror dword ptr [rax - 0x77], cl; retf; jmp rdx; 
0x00000000004777b2: add eax, 0x14c9; test edx, 0x40000000; je 0x77797; ret; 
0x000000000048f2e4: add eax, 0x1543948; and byte ptr [rdi], cl; xchg eax, ebp; ret 0xc931; 
0x0000000000477833: add eax, 0x18c8; cmove rax, rdx; ret; 
0x000000000042337f: add eax, 0x1b86c; cmove rax, rdx; ret; 
0x000000000042333c: add eax, 0x1b8af; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x23358; ret; 
0x00000000004705ea: add eax, 0x1b94100; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc al, 0xd3; mov rbx, rcx; jmp rdx; 
0x0000000000470652: add eax, 0x1bd00; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000403085: add eax, 0x1be4e800; add eax, 0xee894800; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x00000000004220e3: add eax, 0x1c8d8; lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x000000000042210f: add eax, 0x1ccec; test ch, 4; jne 0x220de; ret; 
0x00000000004230ff: add eax, 0x1ce2c; lea rdx, [rip + 0x1e6c5]; cmovne rax, rdx; ret; 
0x000000000042235f: add eax, 0x1cf2c; cmove rax, rdx; ret; 
0x00000000004223cf: add eax, 0x1d05c; cmove rax, rdx; ret; 
0x000000000042238c: add eax, 0x1d09f; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x223a8; ret; 
0x0000000000422202: add eax, 0x1d8a9; test ch, 4; jne 0x221ca; ret; 
0x00000000004221df: add eax, 0x1dc5c; lea rdx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x000000000046508a: add eax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004533ae: add eax, 0x2048b48; mov qword ptr [rip + 0x78ebe], rax; lea rax, [rip + 0x78eaf]; ret; 
0x0000000000423122: add eax, 0x20ba9; test ch, 4; jne 0x230ea; ret; 
0x000000000044f250: add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043f985: add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000422c84: add eax, 0x22e87; cmove rax, rdx; ret; 
0x000000000042325c: add eax, 0x232df; cmove rax, rdx; ret; 
0x000000000042307c: add eax, 0x2347f; cmove rax, rdx; ret; 
0x0000000000422e6c: add eax, 0x236cf; cmove rax, rdx; ret; 
0x000000000042329c: add eax, 0x2389f; cmove rax, rdx; ret; 
0x0000000000490db7: add eax, 0x239e8; ret; 
0x0000000000490daf: add eax, 0x239ec; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x00000000004230bc: add eax, 0x23a4f; cmove rax, rdx; ret; 
0x0000000000422eac: add eax, 0x23c8f; cmove rax, rdx; ret; 
0x0000000000422244: add eax, 0x23d67; cmovne rax, rdx; ret; 
0x0000000000423244: add eax, 0x24077; cmove rax, rdx; ret; 
0x0000000000423064: add eax, 0x24227; cmove rax, rdx; ret; 
0x0000000000422e54: add eax, 0x24467; cmove rax, rdx; ret; 
0x00000000004532fe: add eax, 0x2448d48; jo 0x5334d; cmp dword ptr [rax + 8], 0; je 0x53310; ret; 
0x0000000000422f2b: add eax, 0x24b90; cmovne rax, rdx; ret; 
0x0000000000422f0d: add eax, 0x24dae; cmove rax, rdx; ret; 
0x0000000000422f5d: add eax, 0x24f1e; lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x00000000004231e2: add eax, 0x25599; cmove rax, rdx; ret; 
0x0000000000423002: add eax, 0x25749; cmove rax, rdx; ret; 
0x0000000000422df2: add eax, 0x25989; cmove rax, rdx; ret; 
0x0000000000422f7b: add eax, 0x25f80; cmove rax, rdx; ret; 
0x000000000042327c: add eax, 0x27fbf; cmove rax, rdx; ret; 
0x000000000042309c: add eax, 0x2816f; cmove rax, rdx; ret; 
0x0000000000422e8c: add eax, 0x283af; cmove rax, rdx; ret; 
0x0000000000422fa7: add eax, 0x28ad4; cmove rax, rdx; ret; 
0x000000000045117f: add eax, 0x28c48348; ret; 
0x0000000000423392: add eax, 0x290c9; test edx, 0x40000000; je 0x23367; ret; 
0x0000000000477816: add eax, 0x295; cmove rax, rdx; ret; 
0x0000000000422122: add eax, 0x2a099; test edx, 0x40000000; je 0x22101; ret; 
0x0000000000423323: add eax, 0x2a918; cmove rax, rdx; ret; 
0x0000000000422372: add eax, 0x2ac09; test edx, 0x40000000; je 0x22347; ret; 
0x0000000000422d03: add eax, 0x2ac38; cmove rax, rdx; ret; 
0x00000000004223e2: add eax, 0x2b299; test edx, 0x40000000; je 0x223b7; ret; 
0x000000000049732f: add eax, 0x354c0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000496edd: add eax, 0x3576a; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000048deca: add eax, 0x38c48348; ret; 
0x000000000048a404: add eax, 0x3aac7; pop rbx; pop rbp; pop r12; ret; 
0x0000000000422182: add eax, 0x3b89; test ch, 4; jne 0x2214a; ret; 
0x0000000000475f3b: add eax, 0x3c2ee800; add byte ptr [rax], al; mov dword ptr [rip + 0x50b80], eax; add rsp, 8; ret; 
0x0000000000422453: add eax, 0x3cf8; lea rdx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x000000000048c3e4: add eax, 0x3ff47; add rsp, 0x18; ret; 
0x0000000000450632: add eax, 0x401f0fc3; add byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x000000000044f35e: add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa5e: add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000047f7d9: add eax, 0x41c50149; call qword ptr [rbp + 0x68]; 
0x000000000048ac9e: add eax, 0x41d81; add byte ptr [rax], al; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000489ab5: add eax, 0x42b09; jne 0x89abe; ret; 
0x0000000000489aab: add eax, 0x42f4c; add al, byte ptr [rax]; add byte ptr [rax], al; test byte ptr [rip + 0x42b09], 0x40; jne 0x89abe; ret; 
0x0000000000488b15: add eax, 0x437a6; ret; 
0x00000000004885fc: add eax, 0x43cdf; cmp eax, 1; jg 0x88638; pop rbp; ret; 
0x0000000000488695: add eax, 0x43d33; adc byte ptr [rax - 0x73], cl; adc eax, 0x11e; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x000000000048846f: add eax, 0x43e70; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000048842b: add eax, 0x43eb4; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000488926: add eax, 0x440c5; jae 0x88939; mov rdx, qword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000442f08: add eax, 0x48054289; lea eax, [rdx + 8]; ret; 
0x0000000000441738: add eax, 0x48054289; mov eax, edi; ret; 
0x0000000000433bf3: add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443a76: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x0000000000443406: add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x00000000004370cf: add eax, 0x487c5162; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000446414: add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000466a3b: add eax, 0x48b4c00; ret 0x8d48; 
0x0000000000477897: add eax, 0x48fffd02; lea edx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x000000000041630c: add eax, 0x4c000001; mov edx, esi; mov rsi, r13; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x00000000004806f2: add eax, 0x4c1b9; add rsp, 8; ret; 
0x00000000004805a9: add eax, 0x4c2f2; mov qword ptr [rip + 0x4c2fb], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000475f43: add eax, 0x50b80; add rsp, 8; ret; 
0x0000000000475f38: add eax, 0x50b87; call 0x79b70; mov dword ptr [rip + 0x50b80], eax; add rsp, 8; ret; 
0x0000000000474af9: add eax, 0x51fd2; ret; 
0x0000000000474ae8: add eax, 0x51fd3; ret; 
0x00000000004747c8: add eax, 0x522ef; ret; 
0x00000000004747b8: add eax, 0x522fb; ret; 
0x00000000004747a8: add eax, 0x52307; ret; 
0x0000000000474798: add eax, 0x52313; ret; 
0x00000000004747ed: add eax, 0x539fe; ret; 
0x0000000000442f89: add eax, 0x5428948; lea rax, [rdx + 0xc]; ret; 
0x0000000000441779: add eax, 0x5428948; mov rax, rdi; ret; 
0x0000000000477769: add eax, 0x54c5f; or byte ptr [rax - 0x73], cl; add eax, 0x9da; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x0000000000477732: add eax, 0x54e39; ret; 
0x0000000000477722: add eax, 0x54e41; ret; 
0x0000000000477712: add eax, 0x54e49; ret; 
0x0000000000477702: add eax, 0x54e51; ret; 
0x00000000004776f2: add eax, 0x54e59; ret; 
0x00000000004776e2: add eax, 0x54e61; ret; 
0x00000000004776d2: add eax, 0x54e69; ret; 
0x00000000004776c2: add eax, 0x54e71; ret; 
0x00000000004776b2: add eax, 0x54e79; ret; 
0x00000000004776a2: add eax, 0x54e81; ret; 
0x0000000000477692: add eax, 0x54e89; ret; 
0x000000000047768a: add eax, 0x54ee9; ret; 
0x00000000004747e1: add eax, 0x57c02; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x539fe], eax; ret; 
0x000000000046355a: add eax, 0x616c1; mov qword ptr [r14 - 0x80], rdx; mov rdx, qword ptr [rax + rbp*8]; test rdx, rdx; je 0x6356e; call rdx; 
0x000000000044f2fa: add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa0a: add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000464f82: add eax, 0x61aa9; mov qword ptr [rip + 0x61aaa], rdx; cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x0000000000463135: add eax, 0x61ae6; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x63145; call rax; 
0x000000000046660c: add eax, 0x661ef; cmp eax, 1; jg 0x66638; xor eax, eax; add rsp, 8; ret; 
0x00000000004886a4: add eax, 0x67; cmovne rax, rdx; ret; 
0x0000000000461e86: add eax, 0x6a7bd; ret; 
0x0000000000456cdb: add eax, 0x6ddb0; pop rbx; ret; 
0x0000000000455fa6: add eax, 0x702b5; ret; 
0x0000000000452a8e: add eax, 0x7360d; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004536b0: add eax, 0x73ca3; mov qword ptr [rsi], rax; ret; 
0x00000000004536a6: add eax, 0x73cbd; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x73ca3]; mov qword ptr [rsi], rax; ret; 
0x000000000045363f: add eax, 0x73d44; mov rax, r8; ret; 
0x00000000004534f2: add eax, 0x73e59; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x0000000000458246: add eax, 0x743bd; ret; 
0x0000000000458236: add eax, 0x743c5; ret; 
0x0000000000410d6d: add eax, 0x74c08566; or eax, 0x66158d48; nop; or byte ptr [rax], al; add rax, rdx; ret; 
0x000000000044fa76: add eax, 0x7500d; test rax, rax; je 0x4fa98; sub rsp, 8; call rax; 
0x0000000000451106: add eax, 0x7506d; test rax, rax; je 0x51111; ret; 
0x00000000004940c4: add eax, 0x7542fa80; or dword ptr [rdi], 0xffffffb6; push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000456cb5: add eax, 0x75926; test eax, eax; je 0x56cc0; ret; 
0x0000000000456b6f: add eax, 0x75a0c; ret; 
0x0000000000456b62: add eax, 0x75a19; pop rbx; and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x75a0c], al; ret; 
0x0000000000456b3e: add eax, 0x75a3d; pop rbx; ret; 
0x0000000000456b32: add eax, 0x75a49; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x75a3d], al; pop rbx; ret; 
0x0000000000456adf: add eax, 0x75a9c; ret; 
0x0000000000456ad2: add eax, 0x75aa9; pop rbx; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x75a9c], al; ret; 
0x0000000000456aae: add eax, 0x75acd; pop rbx; ret; 
0x0000000000456aa2: add eax, 0x75ad9; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x75acd], al; pop rbx; ret; 
0x0000000000423306: add eax, 0x7655; cmove rax, rdx; ret; 
0x00000000004232bc: add eax, 0x769f; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x232d8; ret; 
0x00000000004540bb: add eax, 0x78250; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000454074: add eax, 0x78287; ret; 
0x0000000000454064: add eax, 0x782a7; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x78287], xmm0; ret; 
0x00000000004533bc: add eax, 0x78eaf; ret; 
0x00000000004533b5: add eax, 0x78ebe; lea rax, [rip + 0x78eaf]; ret; 
0x0000000000453384: add eax, 0x78ee7; ret; 
0x0000000000422ce6: add eax, 0x7945; cmove rax, rdx; ret; 
0x0000000000452a35: add eax, 0x79886; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000422c9c: add eax, 0x798f; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x22cb8; ret; 
0x000000000047de3a: add eax, 0x7a81d375; or al, 0x47; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000045103d: add eax, 0x7b226; cmp rax, rdi; jb 0x51050; xor eax, eax; ret; 
0x000000000044e379: add eax, 0x7e04f; or byte ptr [rax - 0x73], cl; add eax, 0xa6a; lea rdx, [rip + 0xaa3]; cmovne rax, rdx; ret; 
0x0000000000422d41: add eax, 0x827a; lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x00000000004018de: add eax, 0x8307e083; clc; add dword ptr [rcx + 0xf], eax; xchg eax, esp; ret; 
0x0000000000429b87: add eax, 0x83480000; ret 0x4910; 
0x000000000043cd61: add eax, 0x83480000; ret 0xe910; 
0x0000000000429bb5: add eax, 0x83480000; ret 0xeb10; 
0x0000000000442f0b: add eax, 0x8428d48; ret; 
0x0000000000422d83: add eax, 0x8638; jne 0x22d2d; ret; 
0x000000000040ecf7: add eax, 0x89000015; ret 0xc083; 
0x0000000000463243: add eax, 0x89480000; ret 0x294c; 
0x0000000000414d77: add eax, 0x89490000; call 0xffffffffceec610c; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000047652f: add eax, 0x89c; cmove rax, rdx; ret; 
0x000000000047f10a: add eax, 0x8b410000; add byte ptr [r8 - 0x77], r9b; ret 0x314c; 
0x000000000047776c: add eax, 0x8d480800; add eax, 0x9da; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x00000000004600ce: add eax, 0x8d490000; add r9b, byte ptr [r8 + 0x39]; ret; 
0x0000000000423213: add eax, 0x8eb8; lea rdx, [rip + 0xe441]; cmovne rax, rdx; ret; 
0x0000000000423033: add eax, 0x9078; lea rdx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x0000000000477771: add eax, 0x9da; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x000000000044e381: add eax, 0xa6a; lea rdx, [rip + 0xaa3]; cmovne rax, rdx; ret; 
0x000000000041da1e: add eax, 0xa7ddd; jne 0x1da70; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000423201: add eax, 0xa91c6; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x0000000000423021: add eax, 0xa93a6; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x0000000000422e11: add eax, 0xa95b6; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x000000000041ba44: add eax, 0xa9d27; ret; 
0x000000000041ba63: add eax, 0xa9d38; ret; 
0x000000000041ba24: add eax, 0xa9d3f; ret; 
0x000000000041ba59: add eax, 0xa9d46; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041ba04: add eax, 0xa9d57; ret; 
0x000000000041ba39: add eax, 0xa9d66; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba19: add eax, 0xa9d86; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041b7fa: add eax, 0xa9fe1; ret; 
0x000000000041b78a: add eax, 0xa9fe9; ret; 
0x000000000041b7e3: add eax, 0xa9ff0; ret; 
0x000000000041b77a: add eax, 0xaa001; ret; 
0x0000000000422235: add eax, 0xaa193; adc byte ptr [rax - 0x73], cl; adc eax, 0x23e1e; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x00000000004221d7: add eax, 0xaa1f0; add cl, byte ptr [rax - 0x73]; add eax, 0x1dc5c; lea rdx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x0000000000419eb6: add eax, 0xab2a5; ret; 
0x000000000041fbb8: add eax, 0xac663; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000419f91: add eax, 0xae21e; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000419f61: add eax, 0xae24a; cmp eax, 1; jg 0x19f70; ret; 
0x0000000000417ad9: add eax, 0xb06d2; cmp eax, 1; jg 0x17b20; add rsp, 8; ret; 
0x000000000041ba79: add eax, 0xb07b6; ret; 
0x000000000041b988: add eax, 0xb08ab; ret; 
0x0000000000410d43: add eax, 0xb11b8; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000422e23: add eax, 0xbc88; lea rdx, [rip + 0x11321]; cmovne rax, rdx; ret; 
0x00000000004747e4: add eax, 0xbe8c100; and eax, 1; mov dword ptr [rip + 0x539fe], eax; ret; 
0x000000000045414e: add eax, 0xbed23153; and byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x000000000040a319: add eax, 0xc0834800; adc byte ptr [rcx + 0x39], cl; ret 0xec75; 
0x0000000000442f8d: add eax, 0xc428d48; ret; 
0x0000000000443a7d: add eax, 0xc478d48; ret; 
0x000000000040d4db: add eax, 0xc7480000; ret; 
0x0000000000401e32: add eax, 0xca545; add byte ptr [rax], cl; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000401e29: add eax, 0xca552; pop rbx; ret; 
0x000000000044e3b5: add eax, 0xca6; and ch, 4; jne 0x4e378; ret; 
0x00000000004777a5: add eax, 0xdf6; and ch, 4; jne 0x77768; ret; 
0x000000000040308a: add eax, 0xee894800; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x0000000000433f5a: add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000476542: add eax, 0xf29; test edx, 0x40000000; je 0x76517; ret; 
0x0000000000433f63: add eax, 0xf7f0ff3; ret; 
0x000000000045037d: add eax, 0xfff0003d; push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x0000000000477896: add eax, 0xfffd0205; lea rdx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x00000000004778bc: add eax, 0xfffd053f; cmovne rax, rdx; ret; 
0x00000000004019b6: add eax, 1; ret; 
0x000000000048544f: add eax, 1; test dl, dl; jne 0x85424; movsx eax, cl; neg eax; ret; 
0x0000000000478348: add eax, 2; ret; 
0x0000000000478361: add eax, 3; ret; 
0x0000000000477aa4: add eax, 4; cmp edx, esi; je 0x77aaf; test edx, edx; jne 0x77aa0; ret; 
0x000000000049106f: add eax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000493f34: add eax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000464fed: add eax, dword ptr [0]; ret; 
0x0000000000453e87: add eax, dword ptr [rax]; add al, ch; push rcx; mov ebp, 0x8948fffc; ret 0x8548; 
0x000000000045242b: add eax, dword ptr [rax]; add bl, ch; sub dword ptr [rax - 0x77], ecx; ret 0xabe; 
0x000000000048e501: add eax, dword ptr [rax]; add byte ptr [rax + 0x74], ah; sub dword ptr [rax - 0x75], ecx; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000004755c0: add eax, dword ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x0000000000477b37: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000047c88b: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret 0xba41; 
0x000000000048cb3b: add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000048d693: add eax, dword ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0x9f70; 
0x00000000004909b2: add eax, dword ptr [rax]; add byte ptr [rax - 0x75], cl; add al, 0x24; add rsp, 0x38; ret; 
0x0000000000457b0d: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x000000000047a09f: add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; test dword ptr [rcx - 0x77], 0x70d3e8f4; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000429d67: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000047218c: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8904; 
0x000000000043cf01: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429d95: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000488d93: add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ror dword ptr [rax], 0x83; ret 0x8001; 
0x000000000040c72f: add eax, dword ptr [rax]; add byte ptr [rax - 0x7f], cl; ret; 
0x0000000000496ee0: add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x00000000004783a3: add eax, dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000450d75: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000450d75: add eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x50d88; ret; 
0x000000000045ecff: add eax, dword ptr [rax]; add byte ptr [rcx + 0x3948fc56], cl; ret; 
0x0000000000480223: add eax, dword ptr [rax]; add byte ptr [rcx - 0x73], al; push rax; add dword ptr [rcx - 0x6efa09f0], ecx; ret; 
0x00000000004710e6: add eax, dword ptr [rax]; add byte ptr [rcx - 0x75], cl; test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x000000000047bf18: add eax, dword ptr [rax]; add byte ptr [rcx*2 - 0x9be1a77], al; ret; 
0x00000000004845fc: add eax, dword ptr [rax]; add byte ptr [rdi], cl; adc dword ptr [rax + 0x300], eax; ret; 
0x0000000000485a59: add eax, dword ptr [rax]; add byte ptr [rdx + rdx - 0x7d], dh; ret 0x4901; 
0x000000000047cce4: add eax, dword ptr [rax]; add cl, ch; ret 0xfff2; 
0x000000000045e341: add eax, dword ptr [rax]; add cl, ch; ret 0xfff8; 
0x0000000000455723: add eax, dword ptr [rax]; add dh, dh; ret 0x7402; 
0x000000000041e838: add eax, dword ptr [rax]; add dh, dh; ret 0xf0f; 
0x000000000048c3e7: add eax, dword ptr [rax]; add rsp, 0x18; ret; 
0x0000000000488cb5: add eax, dword ptr [rax]; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x000000000049312c: add eax, dword ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x000000000041bb5f: add eax, dword ptr [rax]; cmp eax, 1; je 0x1bb70; add rsp, 8; ret; 
0x000000000041fa04: add eax, dword ptr [rax]; cmp rax, -1; je 0x1fa18; add rsp, 8; ret; 
0x0000000000488673: add eax, dword ptr [rax]; imul rax, rcx; lea rax, [rax + rdx + 0x4000]; ret; 
0x000000000041aeea: add eax, dword ptr [rax]; mov edx, r12d; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000041ad7a: add eax, dword ptr [rax]; mov edx, r12d; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x000000000041adac: add eax, dword ptr [rax]; mov edx, r12d; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000489e88: add eax, dword ptr [rax]; mov rax, r10; add rsp, 0x28; ret; 
0x000000000041bb47: add eax, dword ptr [rax]; nop dword ptr [rax]; ret; 
0x000000000048a407: add eax, dword ptr [rax]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000496728: add eax, dword ptr [rax]; test rbx, rbx; jne 0x96710; pop rbx; ret; 
0x000000000041156e: add eax, dword ptr [rbp - 0x77]; ret 0x8341; 
0x00000000004841e3: add eax, dword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x88], r9; call rax; 
0x000000000048d229: add eax, dword ptr [rbx - 0x17cfc20]; add dword ptr [rdi], ecx; xchg eax, esp; ret 0xf883; 
0x000000000048d22c: add eax, dword ptr [rbx - 0x6bf0fe02]; ret 0xf883; 
0x000000000048fb01: add eax, dword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000456c49: add eax, dword ptr [rcx + 0x5c]; shl eax, cl; ret; 
0x000000000045b028: add eax, dword ptr [rcx + 0xf]; xchg eax, ebp; ret 0x8d47; 
0x0000000000453049: add eax, dword ptr [rcx + rdx]; ret; 
0x000000000045d43b: add eax, dword ptr [rdi + rcx]; xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x1776; 
0x0000000000488b81: add eax, dword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x0000000000482a76: add eax, dword ptr [rsp]; call rax; 
0x000000000048324a: add eax, dword ptr [rsp]; test edx, edx; jne 0x83261; mov qword ptr [rbp - 0xb0], r10; call rax; 
0x0000000000483a21: add eax, dword ptr [rsp]; test edx, edx; jne 0x83a2a; call rax; 
0x000000000048311b: add eax, dword ptr [rsp]; test esi, esi; jne 0x83124; call rax; 
0x0000000000483aa0: add eax, dword ptr [rsp]; test r11d, r11d; jne 0x83ab8; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x0000000000469ff8: add eax, eax; mov eax, r8d; ret; 
0x0000000000403155: add eax, ebp; in eax, 0xff; dec dword ptr [rax - 0x39]; ret; 
0x000000000047b48f: add eax, ebp; mov ebx, 0xebfff85c; int 0x66; nop dword ptr [rax + rax]; ret; 
0x0000000000479bd5: add eax, ecx; add rsi, 8; cmp rdi, rsi; jne 0x79bb8; mov eax, r8d; ret; 
0x000000000042a6b9: add eax, ecx; ret; 
0x0000000000446106: add eax, ecx; sub rax, rdi; ret; 
0x000000000042aeae: add eax, ecx; vzeroupper; ret; 
0x000000000044908e: add eax, ecx; xtest; je 0x49099; vzeroall; ret; 
0x000000000042a6b6: add eax, edi; add rax, rcx; ret; 
0x000000000044c20c: add eax, edi; cmp sil, byte ptr [rax]; jne 0x4c231; ret; 
0x000000000042a8e4: add eax, edi; ret; 
0x00000000004785e8: add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000044f1fd: add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000042abbb: add eax, edi; vzeroupper; ret; 
0x000000000044808a: add eax, edi; xtest; je 0x48095; vzeroall; ret; 
0x0000000000478a2d: add eax, edi; xtest; je 0x78a38; vzeroall; ret; 
0x0000000000488922: add eax, edx; cmp rax, qword ptr [rip + 0x440c5]; jae 0x88939; mov rdx, qword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000044b151: add eax, edx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042b649: add eax, edx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042b906: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x10]; movzx eax, byte ptr [rdi + rax - 0x10]; sub eax, ecx; ret; 
0x000000000044b1b0: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000042b684: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044b19d: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000042b664: add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000410d7b: add eax, edx; ret; 
0x000000000043f426: add eax, edx; sub rax, rdi; ret; 
0x000000000044effb: add eax, edx; sub rax, rdi; shr rax, 2; ret; 
0x000000000043f280: add eax, edx; vzeroupper; ret; 
0x0000000000449aa0: add eax, edx; xtest; je 0x49aab; vzeroall; ret; 
0x0000000000482472: add eax, esi; inc dword ptr [rsi + 0x10]; pop rbx; ret; 
0x000000000044d156: add ebp, 3; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042ad19: add ebp, eax; std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x00000000004883eb: add ebp, edx; xor eax, eax; ret; 
0x000000000048fb41: add ebx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000004903ce: add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x0000000000434123: add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000441725: add ecx, dword ptr [r9 - 0x76b7fcbe]; clc; ret; 
0x000000000045c599: add ecx, dword ptr [rax + 0x39]; ret 0x1676; 
0x000000000045d446: add ecx, dword ptr [rax + 0x39]; ret 0x1776; 
0x000000000045f08d: add ecx, dword ptr [rax + 0x39]; ret 0x876; 
0x000000000045c212: add ecx, dword ptr [rax + 0x39]; ret; 
0x000000000049145f: add ecx, dword ptr [rax + 0x63]; ret; 
0x0000000000452a8b: add ecx, dword ptr [rax - 0x77]; add eax, 0x7360d; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000441729: add ecx, dword ptr [rax - 0x77]; clc; ret; 
0x0000000000418572: add ecx, dword ptr [rax - 0x7b]; push qword ptr [rsp + rax - 0x58]; add dword ptr [rsp - 0x77], esi; ret 0xc883; 
0x00000000004715d1: add ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000488b4c: add ecx, dword ptr [rbp - 0x3f7a00b0]; je 0x88b6e; lea rbx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000433e92: add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004439e4: add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000004433a4: add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x0000000000466e5d: add ecx, dword ptr [rcx + 0x39]; ret; 
0x000000000047ee32: add ecx, dword ptr [rcx + 1]; ret 0x8b48; 
0x000000000048fb02: add ecx, dword ptr [rcx + rcx*4 - 0x1a]; mov edi, ebp; call rax; 
0x0000000000441726: add ecx, dword ptr [rcx - 0x76b7fcbe]; clc; ret; 
0x000000000041b2bd: add ecx, dword ptr [rdi]; xchg eax, ebp; ret 0xc231; 
0x0000000000465429: add ecx, dword ptr [rdx]; add dword ptr [rax], eax; test eax, eax; jne 0x65440; add rsp, 8; ret; 
0x000000000044c9e7: add ecx, eax; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; ret; 
0x0000000000426010: add ecx, eax; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000044c9e4: add ecx, edx; add rcx, r8; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; ret; 
0x000000000043f235: add edi, -0x80; add rax, rdi; vzeroupper; ret; 
0x000000000043eff5: add edi, -0x80; cmp sil, byte ptr [rdi + rax]; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x0000000000478606: add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6b6: add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x000000000042ac45: add edi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000043eea5: add edi, 0x21; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x0000000000478626: add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6c6: add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x000000000042ac55: add edi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000043eec5: add edi, 0x41; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x0000000000478646: add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6d6: add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x000000000042ac65: add edi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000043ee65: add edi, 0x61; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x0000000000422067: add edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000423379: add edi, dword ptr [rbp - 0x72b7ffff]; add eax, 0x1b86c; cmove rax, rdx; ret; 
0x000000000044f7e6: add edi, ebp; ret; 
0x000000000044d716: add edi, ebx; ret; 
0x0000000000414372: add edi, edi; jmp qword ptr [rsi + 0x66]; 
0x000000000040a2b8: add edi, esi; call rax; 
0x000000000049140c: add edi, esi; inc dword ptr [rbx + 0x634801eb]; ret; 
0x0000000000491456: add edi, esi; inc dword ptr [rbx - 0x72b7fe15]; push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x000000000044f7f6: add edi, esi; ret; 
0x000000000044f7d6: add edi, esp; ret; 
0x000000000044d715: add edi, r11d; ret; 
0x000000000044f7d5: add edi, r12d; ret; 
0x000000000044f7e5: add edi, r13d; ret; 
0x000000000044f7f5: add edi, r14d; ret; 
0x0000000000419b42: add edx, 0x60; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000489dc5: add edx, dword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000048e422: add edx, dword ptr [rax + 8]; add rsp, 8; movzx edi, bpl; pop rbx; pop rbp; jmp rdx; 
0x0000000000454390: add edx, eax; mov qword ptr [rdx + 0x48], r9; mov qword ptr [rdx + 0x38], rax; mov qword ptr [rdx + 0x40], rcx; mov byte ptr [rdx + 0x50], 1; ret; 
0x0000000000487092: add edx, eax; mov rax, rdx; pop rbx; ret; 
0x0000000000422359: add edx, ebx; add dword ptr [rax], eax; lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x0000000000493f19: add edx, ecx; test dil, dil; js 0x93f40; mov qword ptr [r8], rdx; ret; 
0x0000000000495fb9: add edx, ecx; test dil, dil; js 0x95fe0; mov qword ptr [r8], rdx; ret; 
0x0000000000474ac3: add edx, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000042b8c5: add esi, 0x10; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042b8e5: add esi, 0x10; bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000479bd8: add esi, 8; cmp rdi, rsi; jne 0x79bb8; mov eax, r8d; ret; 
0x000000000040372d: add esi, dword ptr [rax]; add byte ptr [rax], al; mov eax, 0x9e; syscall; 
0x000000000041ef85: add esi, dword ptr [rbp + rdi - 0x77]; ret 0xb48b; 
0x0000000000456c21: add esi, dword ptr [rbp - 0x56]; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x000000000046267e: add esi, dword ptr [rdi + rax + 0x5b]; ret; 
0x0000000000401f2a: add esi, eax; and al, 0xf3; add dword ptr [rbp - 0x77], ecx; ret; 
0x0000000000434043: add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000004464de: add esi, ebx; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000041f514: add esi, ebx; stosq qword ptr [rdi], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000491236: add esi, edi; dec dword ptr [rax + 0x63]; ret; 
0x0000000000473102: add esi, edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004655b9: add esi, edi; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000044b587: add esi, edi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000447650: add esi, edi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000044808d: add esi, edx; je 0x48095; vzeroall; ret; 
0x00000000004483af: add esi, edx; je 0x483b7; vzeroall; ret; 
0x00000000004487ac: add esi, edx; je 0x487b4; vzeroall; ret; 
0x0000000000448fb4: add esi, edx; je 0x48fbc; vzeroall; ret; 
0x0000000000449091: add esi, edx; je 0x49099; vzeroall; ret; 
0x000000000044940e: add esi, edx; je 0x49416; vzeroall; ret; 
0x0000000000449469: add esi, edx; je 0x49471; vzeroall; ret; 
0x0000000000449aa3: add esi, edx; je 0x49aab; vzeroall; ret; 
0x0000000000449d2c: add esi, edx; je 0x49d34; vzeroall; ret; 
0x000000000044a0e9: add esi, edx; je 0x4a0f1; vzeroall; ret; 
0x000000000044a37f: add esi, edx; je 0x4a387; vzeroall; ret; 
0x000000000044a3f5: add esi, edx; je 0x4a3fd; vzeroall; ret; 
0x000000000044abba: add esi, edx; je 0x4abc2; vzeroall; ret; 
0x000000000044f72d: add esi, edx; je 0x4f735; vzeroall; ret; 
0x00000000004773ea: add esi, edx; je 0x773f2; vzeroall; ret; 
0x0000000000478982: add esi, edx; je 0x7898a; vzeroall; ret; 
0x0000000000478a30: add esi, edx; je 0x78a38; vzeroall; ret; 
0x0000000000419bf0: add esi, edx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000419c2a: add esi, edx; movups xmmword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x000000000044ca34: add esi, edx; tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042303b: add esi, esp; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000044604d: add esp, 0x100; sub rax, rdx; ret; 
0x00000000004527ac: add esp, 0x1018; ret; 
0x0000000000418e61: add esp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000418e39: add esp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000040ad10: add esp, 0x10; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000047248f: add esp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000420b3c: add esp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000004748a7: add esp, 0x10; pop rbp; ret; 
0x0000000000418166: add esp, 0x10; pop rbx; jmp rax; 
0x0000000000412ea6: add esp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004541a7: add esp, 0x10; pop rbx; ret; 
0x0000000000420c41: add esp, 0x10; xor eax, eax; pop rbp; pop r12; pop r13; ret; 
0x0000000000454eff: add esp, 0x110; mov eax, r12d; pop r12; ret; 
0x00000000004653d3: add esp, 0x148; ret; 
0x000000000040adf0: add esp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000494051: add esp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000041da26: add esp, 0x18; pop rbp; pop r12; ret; 
0x0000000000494105: add esp, 0x18; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000040b9d9: add esp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000413887: add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000450e8d: add esp, 0x18; ret; 
0x000000000041fe2d: add esp, 0x18; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000492dae: add esp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000456c25: add esp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004749f1: add esp, 0x20; mov eax, 0x16; pop rbx; pop r12; pop r13; ret; 
0x0000000000418902: add esp, 0x20; pop rbx; jmp rax; 
0x00000000004749dd: add esp, 0x20; pop rbx; pop r12; pop r13; ret; 
0x0000000000452c10: add esp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000044e476: add esp, 0x20; pop rbx; ret; 
0x0000000000418db4: add esp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000000049334c: add esp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000493361: add esp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004745cb: add esp, 0x28; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000048ae66: add esp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004118a7: add esp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004502ee: add esp, 0x28; ret; 
0x0000000000466ff5: add esp, 0x30; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000490c06: add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000484c55: add esp, 0x30; ret; 
0x000000000048e129: add esp, 0x38; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000417cab: add esp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000414242: add esp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000466eaf: add esp, 0x38; ret; 
0x0000000000475c96: add esp, 0x40; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000044fe72: add esp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000450f45: add esp, 0x58; ret; 
0x00000000004217ef: add esp, 0x60; mov rax, r12; pop r12; ret; 
0x000000000045042c: add esp, 0x68; pop rbp; pop r12; ret; 
0x0000000000450dfe: add esp, 0x68; ret; 
0x000000000044df4b: add esp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000004907a3: add esp, 0x78; pop rbp; pop r12; ret; 
0x0000000000477995: add esp, 0x78; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000479c77: add esp, 0x78; ret; 
0x000000000045298d: add esp, 0x88; pop rbx; pop rbp; ret; 
0x00000000004904d8: add esp, 0x98; pop rbp; pop r12; ret; 
0x0000000000403f4f: add esp, 0x98; ret; 
0x00000000004794f7: add esp, 0xa0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000047291b: add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004799ff: add esp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000461fd7: add esp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000040b74d: add esp, 0xd8; ret; 
0x0000000000411a0d: add esp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000000472b69: add esp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000472b47: add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000413c10: add esp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000466f61: add esp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000004510af: add esp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000480751: add esp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004520cb: add esp, 8; mov rdi, rbp; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x0000000000418253: add esp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000048e426: add esp, 8; movzx edi, bpl; pop rbx; pop rbp; jmp rdx; 
0x0000000000452079: add esp, 8; pop rbp; pop r12; ret; 
0x0000000000415ac2: add esp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000404777: add esp, 8; pop rbx; pop rbp; ret; 
0x0000000000401017: add esp, 8; ret; 
0x000000000041b21c: add esp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040ac81: add esp, 8; xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x00000000004475c7: add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x0000000000418641: add esp, dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x0000000000436d69: add qword ptr [r10 - 0x2f], r12; jl 0x36db7; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x00000000004704b7: add qword ptr [rax], rax; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000477a27: add qword ptr [rbp + rcx*4 + 0x4c], rcx; and al, 0x38; call rbx; 
0x000000000040fa3b: add qword ptr [rbx - 0x67ccf17], rax; or dword ptr [rdi], ecx; xchg dword ptr [rdi + 0xffffff5], esp; mov dh, 0x4a; add cl, byte ptr [rax - 0x7d]; ret 0x8302; 
0x000000000040ac1c: add qword ptr [rip + 0xbd13c], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000434122: add r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x0000000000466ff4: add r12d, 0x30; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000042ad18: add r13, r8; std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x00000000004655b8: add r14, r15; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x0000000000453301: add r14b, byte ptr [rax + 0x48]; cmp dword ptr [rax + 8], 0; je 0x53310; ret; 
0x00000000004340b2: add r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x0000000000434042: add r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x000000000040a2b7: add r15, r14; call rax; 
0x0000000000414371: add r15, rdi; jmp qword ptr [rsi + 0x66]; 
0x000000000048544e: add r8, 1; test dl, dl; jne 0x85424; movsx eax, cl; neg eax; ret; 
0x000000000041ad79: add r8, qword ptr [r8]; mov edx, r12d; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x000000000041adab: add r8, qword ptr [r8]; mov edx, r12d; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000429d94: add r8, qword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000041aee9: add r8, qword ptr [rax]; mov edx, r12d; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000041af1b: add r8, qword ptr [rax]; mov edx, r12d; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000045d43a: add r8, qword ptr [rdi + rcx]; xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x1776; 
0x000000000041aee8: add r8, qword ptr fs:[rax]; mov edx, r12d; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x0000000000422e55: add r8b, byte ptr [eax]; cmove rax, rdx; ret; 
0x0000000000422f0f: add r8b, byte ptr [r8]; cmove rax, rdx; ret; 
0x000000000044c0f7: add r8b, byte ptr [r8]; lea rax, [rdi + 2]; ret; 
0x0000000000443fd7: add r8b, byte ptr [r8]; lea rax, [rdi + 2]; vzeroupper; ret; 
0x0000000000422f08: add r8b, byte ptr [r8]; lea rax, [rip + 0x24dae]; cmove rax, rdx; ret; 
0x0000000000422f5f: add r8b, byte ptr [r8]; lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x000000000044cec7: add r8b, byte ptr [r8]; ret; 
0x000000000043fdb7: add r8b, byte ptr [r8]; vzeroupper; ret; 
0x0000000000422e56: add r8b, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000422f26: add r8b, byte ptr [rax]; lea rax, [rip + 0x24b90]; cmovne rax, rdx; ret; 
0x0000000000469ff7: add r8d, eax; mov eax, r8d; ret; 
0x0000000000479bd4: add r8d, ecx; add rsi, 8; cmp rdi, rsi; jne 0x79bb8; mov eax, r8d; ret; 
0x000000000043f866: add r8d, ecx; vzeroupper; ret; 
0x0000000000478628: add r8d, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6c8: add r8d, edi; vzeroupper; ret; 
0x00000000004600d3: add r9b, byte ptr [r8 + 0x39]; ret; 
0x000000000047776b: add rax, -0x72b7f800; add eax, 0x9da; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x00000000004460c4: add rax, 0x10; sub edx, esi; cmp edx, ecx; jle 0x460e4; movsxd rax, ecx; ret; 
0x0000000000465089: add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000478350: add rax, 1; ret; 
0x0000000000478347: add rax, 2; ret; 
0x0000000000478360: add rax, 3; ret; 
0x0000000000477aa3: add rax, 4; cmp edx, esi; je 0x77aaf; test edx, edx; jne 0x77aa0; ret; 
0x000000000049106e: add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000493f33: add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000464fec: add rax, qword ptr [0]; ret; 
0x0000000000482a75: add rax, qword ptr [r12]; call rax; 
0x0000000000483249: add rax, qword ptr [r12]; test edx, edx; jne 0x83261; mov qword ptr [rbp - 0xb0], r10; call rax; 
0x0000000000483a20: add rax, qword ptr [r12]; test edx, edx; jne 0x83a2a; call rax; 
0x000000000048311a: add rax, qword ptr [r12]; test esi, esi; jne 0x83124; call rax; 
0x0000000000483a9f: add rax, qword ptr [r12]; test r11d, r11d; jne 0x83ab8; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x00000000004841e2: add rax, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x88], r9; call rax; 
0x000000000048fb00: add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000488b80: add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x0000000000464feb: add rax, qword ptr fs:[0]; ret; 
0x000000000042a6b8: add rax, rcx; ret; 
0x0000000000446105: add rax, rcx; sub rax, rdi; ret; 
0x000000000042aead: add rax, rcx; vzeroupper; ret; 
0x000000000044908d: add rax, rcx; xtest; je 0x49099; vzeroall; ret; 
0x000000000042a6b5: add rax, rdi; add rax, rcx; ret; 
0x000000000044c20b: add rax, rdi; cmp sil, byte ptr [rax]; jne 0x4c231; ret; 
0x000000000042a8e3: add rax, rdi; ret; 
0x000000000044f1fc: add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042abba: add rax, rdi; vzeroupper; ret; 
0x0000000000448089: add rax, rdi; xtest; je 0x48095; vzeroall; ret; 
0x0000000000478a2c: add rax, rdi; xtest; je 0x78a38; vzeroall; ret; 
0x0000000000488921: add rax, rdx; cmp rax, qword ptr [rip + 0x440c5]; jae 0x88939; mov rdx, qword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000044b150: add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042b648: add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x0000000000410d7a: add rax, rdx; ret; 
0x000000000043f425: add rax, rdx; sub rax, rdi; ret; 
0x000000000044effa: add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000043f27f: add rax, rdx; vzeroupper; ret; 
0x0000000000449a9f: add rax, rdx; xtest; je 0x49aab; vzeroall; ret; 
0x000000000048fb40: add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000044c9e3: add rcx, r10; add rcx, r8; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; ret; 
0x000000000044c9e6: add rcx, r8; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; ret; 
0x000000000042600f: add rcx, r8; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000043f234: add rdi, -0x80; add rax, rdi; vzeroupper; ret; 
0x000000000043eff4: add rdi, -0x80; cmp sil, byte ptr [rdi + rax]; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000042ac44: add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000043eea4: add rdi, 0x21; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000042ac54: add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000043eec4: add rdi, 0x41; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000042ac64: add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000043ee64: add rdi, 0x61; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x0000000000419b41: add rdx, 0x60; mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000489dc4: add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000048e421: add rdx, qword ptr [rax + 8]; add rsp, 8; movzx edi, bpl; pop rbx; pop rbp; jmp rdx; 
0x000000000045438f: add rdx, r8; mov qword ptr [rdx + 0x48], r9; mov qword ptr [rdx + 0x38], rax; mov qword ptr [rdx + 0x40], rcx; mov byte ptr [rdx + 0x50], 1; ret; 
0x0000000000487091: add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000493f18: add rdx, r9; test dil, dil; js 0x93f40; mov qword ptr [r8], rdx; ret; 
0x0000000000495fb8: add rdx, r9; test dil, dil; js 0x95fe0; mov qword ptr [r8], rdx; ret; 
0x000000000042b8c4: add rsi, 0x10; bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042b8e4: add rsi, 0x10; bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000479bd7: add rsi, 8; cmp rdi, rsi; jne 0x79bb8; mov eax, r8d; ret; 
0x000000000044b586: add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000044764f: add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000419bef: add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000419c29: add rsi, rdx; movups xmmword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x000000000044ca33: add rsi, rdx; tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000044604c: add rsp, 0x100; sub rax, rdx; ret; 
0x00000000004527ab: add rsp, 0x1018; ret; 
0x0000000000418e60: add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000418e38: add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000040ad0f: add rsp, 0x10; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000047248e: add rsp, 0x10; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000420b3b: add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x00000000004748a6: add rsp, 0x10; pop rbp; ret; 
0x0000000000418165: add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000412ea5: add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004541a6: add rsp, 0x10; pop rbx; ret; 
0x0000000000420c40: add rsp, 0x10; xor eax, eax; pop rbp; pop r12; pop r13; ret; 
0x0000000000454efe: add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x00000000004653d2: add rsp, 0x148; ret; 
0x000000000040adef: add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000494050: add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000041da25: add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000494104: add rsp, 0x18; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000040b9d8: add rsp, 0x18; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000413886: add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000450e8c: add rsp, 0x18; ret; 
0x000000000041fe2c: add rsp, 0x18; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000492dad: add rsp, 0x198; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000456c24: add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004749f0: add rsp, 0x20; mov eax, 0x16; pop rbx; pop r12; pop r13; ret; 
0x0000000000418901: add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004749dc: add rsp, 0x20; pop rbx; pop r12; pop r13; ret; 
0x0000000000452c0f: add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000044e475: add rsp, 0x20; pop rbx; ret; 
0x0000000000418db3: add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x000000000049334b: add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000493360: add rsp, 0x278; xor eax, eax; pop rbx; pop rbp; ret; 
0x00000000004745ca: add rsp, 0x28; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000048ae65: add rsp, 0x28; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004118a6: add rsp, 0x28; pop rbx; pop rbp; ret; 
0x00000000004502ed: add rsp, 0x28; ret; 
0x0000000000490c05: add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000484c54: add rsp, 0x30; ret; 
0x000000000048e128: add rsp, 0x38; mov rax, r12; pop rbp; pop r12; ret; 
0x0000000000417caa: add rsp, 0x38; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000414241: add rsp, 0x38; pop rbx; pop rbp; ret; 
0x0000000000466eae: add rsp, 0x38; ret; 
0x0000000000475c95: add rsp, 0x40; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000044fe71: add rsp, 0x48; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000450f44: add rsp, 0x58; ret; 
0x00000000004217ee: add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x000000000045042b: add rsp, 0x68; pop rbp; pop r12; ret; 
0x0000000000450dfd: add rsp, 0x68; ret; 
0x000000000044df4a: add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x00000000004907a2: add rsp, 0x78; pop rbp; pop r12; ret; 
0x0000000000477994: add rsp, 0x78; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000479c76: add rsp, 0x78; ret; 
0x000000000045298c: add rsp, 0x88; pop rbx; pop rbp; ret; 
0x00000000004904d7: add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000403f4e: add rsp, 0x98; ret; 
0x00000000004794f6: add rsp, 0xa0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000047291a: add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004799fe: add rsp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000461fd6: add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000040b74c: add rsp, 0xd8; ret; 
0x0000000000411a0c: add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000000472b68: add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000472b46: add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000413c0f: add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000466f60: add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000004510ae: add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000480750: add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x00000000004520ca: add rsp, 8; mov rdi, rbp; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x0000000000418252: add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000048e425: add rsp, 8; movzx edi, bpl; pop rbx; pop rbp; jmp rdx; 
0x0000000000452078: add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000415ac1: add rsp, 8; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000404776: add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401016: add rsp, 8; ret; 
0x000000000041b21b: add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000040ac80: add rsp, 8; xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000000488934: add word ptr [rdx + rax*2], 1; ret; 
0x0000000000454f14: and al, 0; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000473a36: and al, 0; add byte ptr [rax], al; call qword ptr [rax + 0x68]; 
0x0000000000473b6b: and al, 0; add byte ptr [rax], al; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041378f: and al, 0; add byte ptr [rax], al; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000475d26: and al, 0x10; add dword ptr [rax], eax; add byte ptr [rax], al; movaps xmmword ptr [rsp + 0x20], xmm0; call 0x882c0; call rbx; 
0x0000000000452429: and al, 0x10; add eax, dword ptr [rax]; add bl, ch; sub dword ptr [rax - 0x77], ecx; ret 0xabe; 
0x000000000049321b: and al, 0x10; add rsp, 0x28; ret; 
0x0000000000460229: and al, 0x10; call rax; 
0x00000000004104f4: and al, 0x10; jbe 0x109b8; mov rdx, r13; mov rsi, r10; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x00000000004506dc: and al, 0x10; mov eax, 0x4f; syscall; 
0x0000000000479cd6: and al, 0x10; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004505bf: and al, 0x10; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x000000000045051f: and al, 0x10; mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x00000000004666be: and al, 0x10; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x0000000000474a28: and al, 0x10; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x00000000004506d7: and al, 0x10; mov rdi, qword ptr [rsp + 0x10]; mov eax, 0x4f; syscall; 
0x0000000000454f1c: and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000454ebf: and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000418930: and al, 0x10; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004515e6: and al, 0x10; mov rdi, rbp; call rax; 
0x000000000044e28d: and al, 0x10; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000046557a: and al, 0x10; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000044df7f: and al, 0x10; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044df05: and al, 0x10; push 1; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004513ee: and al, 0x10; test r13, r13; jne 0x5146b; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045141e: and al, 0x10; test r13, r13; jne 0x514a0; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045224a: and al, 0x10; test r13, r13; jne 0x522b0; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045221e: and al, 0x10; test rdi, rdi; jne 0x52270; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000401c8c: and al, 0x14; mov rsi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000048170a: and al, 0x18; call 0x80f90; add rsp, 0xd8; ret; 
0x0000000000454f21: and al, 0x18; call rax; 
0x000000000044e295: and al, 0x18; call rbx; 
0x0000000000454ec4: and al, 0x18; call rcx; 
0x0000000000479cda: and al, 0x18; mov eax, 0x101; syscall; 
0x0000000000401c91: and al, 0x18; mov rax, qword ptr [rsp + 8]; call rax; 
0x00000000004505ba: and al, 0x18; mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x000000000045051a: and al, 0x18; mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x000000000041892b: and al, 0x18; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000045a8ef: and al, 0x18; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000457358: and al, 0x18; xor r8d, r8d; call rbx; 
0x000000000044eb73: and al, 0x18; xor r8d, r8d; mov rcx, r12; call rbx; 
0x000000000044ed02: and al, 0x18; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x0000000000479cce: and al, 0x1c; mov r8d, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004666b9: and al, 0x1c; mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x0000000000475d2f: and al, 0x20; call 0x882c0; call rbx; 
0x000000000044df10: and al, 0x20; call rbx; 
0x0000000000450dd7: and al, 0x20; cmp esi, 9; je 0x50e08; mov eax, 0x48; syscall; 
0x0000000000459b34: and al, 0x28; call rax; 
0x000000000045b701: and al, 0x28; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000046021a: and al, 0x28; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea71: and al, 0x28; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000479e8c: and al, 0x28; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x000000000044e14a: and al, 0x30; call rbx; 
0x0000000000450dd2: and al, 0x30; mov qword ptr [rsp + 0x20], rax; cmp esi, 9; je 0x50e08; mov eax, 0x48; syscall; 
0x0000000000484c4b: and al, 0x30; mov rsp, rbx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x0000000000477a2c: and al, 0x38; call rbx; 
0x000000000040f41b: and al, 0x38; mov rdx, r15; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000045da5f: and al, 0x38; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000484c47: and al, 0x40; fld xword ptr [rsp + 0x30]; mov rsp, rbx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x0000000000476cc4: and al, 0x41; pop rsp; pop r13; pop r14; ret; 
0x0000000000483aa2: and al, 0x45; test ebx, ebx; jne 0x83ab8; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x00000000004704b6: and al, 0x48; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000418188: and al, 0x48; add esp, 0x10; pop rbx; jmp rax; 
0x0000000000490c44: and al, 0x48; add esp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000484c53: and al, 0x48; add esp, 0x30; ret; 
0x00000000004909b8: and al, 0x48; add esp, 0x38; ret; 
0x00000000004521eb: and al, 0x48; mov edi, dword ptr [rbp]; call rbx; 
0x000000000048dd6b: and al, 0x48; mov edx, dword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000460224: and al, 0x48; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea7b: and al, 0x48; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045da69: and al, 0x48; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045b706: and al, 0x48; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000459b2a: and al, 0x48; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000485e18: and al, 0x48; sub rdx, qword ptr fs:[0x28]; jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485eea: and al, 0x48; sub rdx, qword ptr fs:[0x28]; jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fba: and al, 0x48; sub rdx, qword ptr fs:[0x28]; jne 0x85ff4; add rsp, 0x58; ret; 
0x0000000000493dc9: and al, 0x4c; mov edi, edi; mov rsi, qword ptr [r14]; call rax; 
0x000000000040a127: and al, 0x4c; mov edx, esi; mov rax, qword ptr [rsp]; call rax; 
0x000000000040a0a3: and al, 0x4c; mov edx, esi; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000040a24f: and al, 0x4c; mov esi, ebp; mov rdi, r12; call rax; 
0x0000000000493001: and al, 0x4d; mov eax, ebp; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000040a2b3: and al, 0x4d; mov ebp, edi; add r15, r14; call rax; 
0x000000000046fb64: and al, 0x50; and byte ptr [rax], al; add byte ptr [rax], al; jmp rdx; 
0x00000000004708c6: and al, 0x50; and byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000045b70b: and al, 0x50; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000459b2f: and al, 0x50; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046021f: and al, 0x50; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea76: and al, 0x50; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045da64: and al, 0x50; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a0ea: and al, 0x50; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000046fb5c: and al, 0x54; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsp + 0x50], 0x20; jmp rdx; 
0x0000000000470886: and al, 0x54; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000040eaee: and al, 0x58; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rsp + 0x40], 0x20; jmp rdx; 
0x000000000040e9e7: and al, 0x58; add dword ptr [rax], eax; add al, ch; call rdi; 
0x00000000004704ee: and al, 0x58; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000045a0ef: and al, 0x58; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x00000000004860d8: and al, 0x58; sub rdx, qword ptr fs:[0x28]; jne 0x86197; add rsp, 0x68; ret; 
0x0000000000488b7e: and al, 0x5b; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x0000000000470802: and al, 0x60; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000045a0e5: and al, 0x60; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000040f935: and al, 0x60; sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rcx + rdx*8]; jmp rdx; 
0x0000000000465c78: and al, 0x68; mov rsi, qword ptr [rsp + 8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x00000000004708fe: and al, 0x70; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000045bd04: and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044bb94: and al, 0x83; cli; add dword ptr [rdi + 0x26], esi; jb 0x4bb7f; mov byte ptr [rax], sil; ret; 
0x000000000048311d: and al, 0x85; div byte ptr [rbp + 2]; call rax; 
0x000000000048324c: and al, 0x85; sal byte ptr [rbp + 0x10], cl; mov qword ptr [rbp - 0xb0], r10; call rax; 
0x0000000000483a23: and al, 0x85; sal byte ptr [rbp + 2], cl; call rax; 
0x000000000045c0c7: and al, 0x88; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000493da6: and al, 0x89; and al, 8; call rax; 
0x0000000000483fc8: and al, 0x89; ret 0x8348; 
0x000000000041efa0: and al, 0x89; ret 0xb48b; 
0x000000000041857b: and al, 0x89; ret 0xc883; 
0x000000000048ca13: and al, 0x8b; adc byte ptr [r13 + 0x59840fc0], al; add eax, 0x1480000; ret; 
0x000000000045d0d3: and al, 0x98; add byte ptr [rax], al; add al, ch; ret; 
0x0000000000407997: and al, 0x98; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x0000000000470257: and al, 0xa0; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0x12; 
0x0000000000456d3f: and al, 0xb8; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0xf48; 
0x000000000048c3dd: and al, 0xc; add dword ptr [rdi], ecx; xchg eax, ebp; ror byte ptr [rcx + 0x3ff4705], 0; add rsp, 0x18; ret; 
0x0000000000474a23: and al, 0xc; mov rdi, qword ptr [rsp + 0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000000418183: and al, 0xc; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004710ec: and al, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x00000000004909af: and al, 0xe8; mov eax, dword ptr [rbx]; add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000417e08: and al, 0xe8; ret 0x2b; 
0x0000000000454ff4: and al, 0xe9; jbe 0x54fca; add al, byte ptr [rax]; nop word ptr [rax + rax]; ret; 
0x0000000000477a83: and al, 0xe9; mov edi, 0xe8fffffe; mov bh, 0xfd; jmp qword ptr [rsi - 0x70]; 
0x0000000000401f2d: and al, 0xf3; add dword ptr [rbp - 0x77], ecx; ret; 
0x0000000000401f28: and al, 0xf4; add esi, eax; and al, 0xf3; add dword ptr [rbp - 0x77], ecx; ret; 
0x0000000000465565: and al, 1; mov r13, rax; mov rdi, r12; call rbx; 
0x00000000004707ba: and al, 5; add byte ptr [rax - 0x75], cl; adc al, 0xd3; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x000000000047084d: and al, 5; add byte ptr [rax - 0x75], cl; adc al, 0xd3; mov rbx, rcx; jmp rdx; 
0x0000000000452777: and al, 8; adc byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, 0xcc; syscall; 
0x000000000040e81c: and al, 8; add byte ptr [rdi], cl; test byte ptr [rdi - 0x9ffffdf], ah; ret; 
0x0000000000450e22: and al, 8; add cl, byte ptr [rbx + 0x750c2444]; ret 0xd8f7; 
0x0000000000418935: and al, 8; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000450544: and al, 8; add rsp, 0x28; ret; 
0x000000000045053a: and al, 8; call 0x74770; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000401c96: and al, 8; call rax; 
0x00000000004666c6: and al, 8; mov eax, 0x13e; syscall; 
0x00000000004505c6: and al, 8; mov eax, 1; syscall; 
0x0000000000450e0b: and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000040a24a: and al, 8; mov rax, qword ptr [rsp]; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000453763: and al, 8; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x00000000004130d9: and al, 8; mov rdi, r15; call rax; 
0x00000000004156d2: and al, 8; mov rdi, rbp; call rax; 
0x0000000000465c7d: and al, 8; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000046f927: and al, 8; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp + 0x38]; 
0x0000000000450e64: and al, 8; xor eax, eax; cmp esi, 9; je 0x50e98; mov eax, 0x48; syscall; 
0x0000000000450526: and al, 8; xor eax, eax; syscall; 
0x0000000000419692: and al, byte ptr [rcx]; add byte ptr [rax], al; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rcx + 0x58]; 
0x000000000043ff1a: and al, byte ptr [rsp - 0xb7f68c]; ret 0xc148; 
0x00000000004222bf: and bh, dh; jmp qword ptr [rsi + 0xf]; 
0x00000000004190da: and byte ptr [r15], cl; adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000047932d: and byte ptr [r15], r11b; ret 0xc500; 
0x000000000044db4a: and byte ptr [r15], r15b; ret 0xc500; 
0x0000000000447be1: and byte ptr [r15], r9b; adc dword ptr [rdi + 0x30], eax; ret; 
0x0000000000413515: and byte ptr [r8 + 1], r9b; ret; 
0x00000000004647e7: and byte ptr [r8 - 0x77], r9b; std; test rax, rax; je 0x647f3; call rax; 
0x00000000004180a7: and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x00000000004749f3: and byte ptr [rax + 0x16], bh; pop rbx; pop r12; pop r13; ret; 
0x000000000041f91e: and byte ptr [rax + 0x39], cl; ret 0x4473; 
0x0000000000412b56: and byte ptr [rax + 0x39], cl; ret 0x894c; 
0x0000000000473b62: and byte ptr [rax + 0x3b], cl; push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000040f939: and byte ptr [rax + 0x63], cl; ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd1; jmp rdx; 
0x000000000040f62e: and byte ptr [rax + 0x63], cl; ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd6; jmp rdx; 
0x000000000040f670: and byte ptr [rax + 0x63], cl; ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd7; jmp rdx; 
0x000000000040eb2e: and byte ptr [rax + 0x63], cl; ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rcx - 0x75], cl; adc al, 0xd3; jmp rdx; 
0x0000000000413516: and byte ptr [rax + 1], cl; ret; 
0x000000000043f41d: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000044f049: and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000044d09e: and byte ptr [rax + 9], cl; sal bl, 1; bsf rax, rax; add rax, rdi; ret; 
0x0000000000422d22: and byte ptr [rax + rcx - 9], dh; ret 0; 
0x0000000000490da9: and byte ptr [rax + rdx - 0xd], dh; movups xmm0, xmmword ptr [rip + 0x239ec]; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x000000000044faa7: and byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x000000000041dddb: and byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000045781c: and byte ptr [rax - 0x77], cl; ret; 
0x00000000004647e8: and byte ptr [rax - 0x77], cl; std; test rax, rax; je 0x647f3; call rax; 
0x0000000000415252: and byte ptr [rax - 1], bh; pop rbx; ret; 
0x000000000046fb66: and byte ptr [rax], al; add byte ptr [rax], al; jmp rdx; 
0x0000000000454153: and byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x00000000004708c8: and byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000042320b: and byte ptr [rbp + 0x42], dh; and edx, 2; lea rax, [rip + 0x8eb8]; lea rdx, [rip + 0xe441]; cmovne rax, rdx; ret; 
0x000000000042302b: and byte ptr [rbp + 0x42], dh; and edx, 2; lea rax, [rip + 0x9078]; lea rdx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x0000000000422e1b: and byte ptr [rbp + 0x42], dh; and edx, 2; lea rax, [rip + 0xbc88]; lea rdx, [rip + 0x11321]; cmovne rax, rdx; ret; 
0x0000000000484d80: and byte ptr [rbp + rcx*4 + 0x43], cl; adc al, ch; div byte ptr [rdx]; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000044c3f8: and byte ptr [rbp - 0x22], dh; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c268: and byte ptr [rbp - 0x3a], dh; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000041ee73: and byte ptr [rbp - 0x77], cl; ret 0x75e9; 
0x0000000000450dd8: and byte ptr [rbx + 0x2a7409fe], al; mov eax, 0x48; syscall; 
0x00000000004749df: and byte ptr [rbx + 0x41], bl; pop rsp; pop r13; ret; 
0x000000000044ea04: and byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000452c12: and byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000464cc4: and byte ptr [rbx + 6], bh; add byte ptr [rcx], dh; shr al, 0x11; ret 0xfffe; 
0x00000000004651c4: and byte ptr [rbx + rcx*4 + 0x7f], cl; sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x000000000040ecec: and byte ptr [rbx - 0x50c2fbba], cl; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rip - 0x76ffffeb], eax; ret 0xc083; 
0x0000000000422dec: and byte ptr [rcx + 2], bl; add byte ptr [rax - 0x73], cl; add eax, 0x25989; cmove rax, rdx; ret; 
0x000000000044d16d: and byte ptr [rcx + rdi - 0x26], cl; jae 0x4d520; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000046ab7c: and byte ptr [rcx - 0x77], cl; ret 0xf748; 
0x0000000000422325: and byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x120; je 0x22338; ret; 
0x0000000000422395: and byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x120; je 0x223a8; ret; 
0x0000000000422ca5: and byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x120; je 0x22cb8; ret; 
0x00000000004232c5: and byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x120; je 0x232d8; ret; 
0x0000000000423345: and byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x120; je 0x23358; ret; 
0x00000000004764f5: and byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x120; je 0x76508; ret; 
0x00000000004777d5: and byte ptr [rcx], al; add byte ptr [rax], al; cmp ecx, 0x120; je 0x777e8; ret; 
0x000000000042232b: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x22338; ret; 
0x000000000042239b: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x223a8; ret; 
0x0000000000422cab: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x22cb8; ret; 
0x00000000004232cb: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x232d8; ret; 
0x000000000042334b: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x23358; ret; 
0x00000000004764fb: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x76508; ret; 
0x00000000004777db: and byte ptr [rcx], al; add byte ptr [rax], al; je 0x777e8; ret; 
0x000000000047bdcd: and byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc0; add dword ptr [rax - 0x77], ecx; xor cl, byte ptr [rax - 0x7d]; ret 0x4838; 
0x00000000004180a8: and byte ptr [rcx], dh; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000447b65: and byte ptr [rdi + 0x18], dh; movups xmmword ptr [rax], xmm0; movups xmmword ptr [rax + rdx - 0x10], xmm0; ret; 
0x0000000000446553: and byte ptr [rdi + 0x7a], dh; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044c2d0: and byte ptr [rdi], bh; ret 0x6200; 
0x000000000044bde3: and byte ptr [rdi], bh; ret 0xc500; 
0x000000000044be09: and byte ptr [rdi], bh; ret; 
0x000000000044f8a5: and byte ptr [rdi], bl; ret 0x6200; 
0x000000000047932e: and byte ptr [rdi], bl; ret 0xc500; 
0x000000000044f943: and byte ptr [rdi], bl; ret; 
0x00000000004190db: and byte ptr [rdi], cl; adc dword ptr [rcx + 0x30], eax; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x0000000000447be2: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], eax; ret; 
0x0000000000446735: and byte ptr [rdi], cl; adc dword ptr [rdi + 0x30], edi; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004466c2: and byte ptr [rdi], cl; adc dword ptr [rdx + 0x10], edi; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000044c89d: and byte ptr [rdi], cl; mov dh, 0x54; cmp ah, byte ptr [rax]; sub eax, edx; ret; 
0x0000000000425ef4: and byte ptr [rdi], cl; mov dh, 0x54; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x000000000044b14c: and byte ptr [rdi], cl; mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x00000000004028f0: and byte ptr [rdi], cl; test byte ptr [rdx], dh; add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe3a], al; ret; 
0x000000000044424d: and byte ptr [rdi], cl; test dword ptr [rax + rax + 0x40a80000], edi; jne 0x44320; lea rax, [rdi + 7]; ret; 
0x0000000000411bef: and byte ptr [rdi], cl; test dword ptr [rdx - 0x77000000], edi; ret 0xe281; 
0x0000000000487aef: and byte ptr [rdi], cl; test dword ptr [rdx], eax; add al, byte ptr [rax]; add byte ptr [rcx - 0x73], cl; or byte ptr [r8 + 0x39], r9b; ret; 
0x0000000000444130: and byte ptr [rdi], cl; test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x0000000000447ae5: and byte ptr [rdi], cl; xchg dword ptr [rbp + 0xf000000], ebx; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000048f2e9: and byte ptr [rdi], cl; xchg eax, ebp; ret 0xc931; 
0x0000000000436daa: and byte ptr [rdx + 0x14], dh; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x000000000044ba90: and byte ptr [rdx + 0x2d], dh; cmp rdx, 0x40; ja 0x4bb00; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044625c: and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x000000000044dd2b: and byte ptr [rdx - 0x5f], 0xc5; add bh, ch; jmp qword ptr [rsi + 0x66]; 
0x00000000004806ec: and byte ptr [rdx], cl; clc; dec dword ptr [rax - 0x77]; add eax, 0x4c1b9; add rsp, 8; ret; 
0x000000000044d6b2: and byte ptr [rsi + 0x1b], dh; test eax, eax; je 0x4d720; tzcnt eax, eax; ret; 
0x000000000043f810: and byte ptr [rsi + 0x1d], dh; test eax, eax; je 0x3f880; tzcnt eax, eax; vzeroupper; ret; 
0x000000000041af09: and byte ptr [rsi + 0xf], 0x1f; add byte ptr [rax], r8b; mov eax, 0xba; syscall; 
0x000000000044afff: and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000044b00d: and byte ptr [rsi], ah; ret; 
0x000000000044b00c: and byte ptr gs:[rsi], ah; ret; 
0x00000000004778b0: and ch, 0x10; lea rdx, [rip - 0x2beba]; lea rax, [rip - 0x2fac1]; cmovne rax, rdx; ret; 
0x0000000000478342: and ch, 0xf; je 0x78360; add rax, 2; ret; 
0x0000000000423250: and ch, 2; lea rdx, [rip + 0x231f6]; lea rax, [rip + 0x232df]; cmove rax, rdx; ret; 
0x0000000000423070: and ch, 2; lea rdx, [rip + 0x233c6]; lea rax, [rip + 0x2347f]; cmove rax, rdx; ret; 
0x0000000000422e60: and ch, 2; lea rdx, [rip + 0x235e6]; lea rax, [rip + 0x236cf]; cmove rax, rdx; ret; 
0x0000000000423290: and ch, 2; lea rdx, [rip + 0x23836]; lea rax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230b0: and ch, 2; lea rdx, [rip + 0x23a06]; lea rax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422ea0: and ch, 2; lea rdx, [rip + 0x23c26]; lea rax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x0000000000423238: and ch, 2; lea rdx, [rip + 0x2400e]; lea rax, [rip + 0x24077]; cmove rax, rdx; ret; 
0x0000000000423058: and ch, 2; lea rdx, [rip + 0x241de]; lea rax, [rip + 0x24227]; cmove rax, rdx; ret; 
0x0000000000422e48: and ch, 2; lea rdx, [rip + 0x243fe]; lea rax, [rip + 0x24467]; cmove rax, rdx; ret; 
0x00000000004231d6: and ch, 2; lea rdx, [rip + 0x25530]; lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000422ff6: and ch, 2; lea rdx, [rip + 0x25700]; lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000422de6: and ch, 2; lea rdx, [rip + 0x25920]; lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000423270: and ch, 2; lea rdx, [rip + 0x27f56]; lea rax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x0000000000423090: and ch, 2; lea rdx, [rip + 0x28126]; lea rax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e80: and ch, 2; lea rdx, [rip + 0x28346]; lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x000000000044e3ba: and ch, 4; jne 0x4e378; ret; 
0x00000000004777aa: and ch, 4; jne 0x77768; ret; 
0x0000000000477891: and ch, 4; lea rax, [rip - 0x2fdfb]; lea rdx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x0000000000423373: and ch, 4; lea rdx, [rip + 0x1bd03]; lea rax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x0000000000422353: and ch, 4; lea rdx, [rip + 0x1d303]; lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223c3: and ch, 4; lea rdx, [rip + 0x1d413]; lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x000000000047780a: and ch, 4; lea rdx, [rip + 0x64c]; lea rax, [rip + 0x295]; cmove rax, rdx; ret; 
0x00000000004232fa: and ch, 4; lea rdx, [rip + 0x7b4c]; lea rax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x0000000000422cda: and ch, 4; lea rdx, [rip + 0x7e9c]; lea rax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x0000000000476523: and ch, 4; lea rdx, [rip + 0xba3]; lea rax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x0000000000422d76: and ch, 8; jne 0x22d51; and esi, 0x400; lea rax, [rip + 0x8638]; jne 0x22d2d; ret; 
0x000000000042b3f5: and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000047832d: and cl, 0xf; je 0x78350; ret; 
0x000000000041ca42: and cl, byte ptr [rbp - 0x76b6fff6]; ret 0x8948; 
0x000000000046b8b8: and cl, ch; sal ch, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000423181: and dh, 2; lea rax, [rip + 0x14275]; lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x0000000000422f58: and dh, 2; lea rax, [rip + 0x24f1e]; lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x000000000042244e: and dh, 2; lea rax, [rip + 0x3cf8]; lea rdx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x0000000000422d3c: and dh, 2; lea rax, [rip + 0x827a]; lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x0000000000422108: and dh, 8; jne 0x220f3; lea rax, [rip + 0x1ccec]; test ch, 4; jne 0x220de; ret; 
0x000000000042217b: and dh, 8; jne 0x2216f; lea rax, [rip + 0x3b89]; test ch, 4; jne 0x2214a; ret; 
0x00000000004221fb: and dh, 8; jne 0x221ef; lea rax, [rip + 0x1d8a9]; test ch, 4; jne 0x221ca; ret; 
0x000000000042311b: and dh, 8; jne 0x2310f; lea rax, [rip + 0x20ba9]; test ch, 4; jne 0x230ea; ret; 
0x000000000044e3ae: and dh, 8; jne 0x4e391; lea rax, [rip + 0xca6]; and ch, 4; jne 0x4e378; ret; 
0x000000000047779e: and dh, 8; jne 0x77781; lea rax, [rip + 0xdf6]; and ch, 4; jne 0x77768; ret; 
0x000000000043eea7: and dword ptr [rax + 0x3a], eax; xor al, 7; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000044f252: and dword ptr [rax + 1], ecx; clc; shr rax, 2; vzeroupper; ret; 
0x000000000042ac47: and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x0000000000481c5d: and dword ptr [rax - 0x77], ecx; ret 0x2548; 
0x000000000040e822: and dword ptr [rax], eax; add dh, dh; ret; 
0x0000000000490e28: and dword ptr [rbx + rax + 0x5c60800], edi; sbb edi, dword ptr [rbx + rax + 0x5c60800]; adc eax, 0x80003bc; ret; 
0x00000000004191ec: and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000419243: and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000422e2b: and dword ptr [rbx], edx; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x00000000004026e5: and dword ptr [rcx + 9], eax; ret 0x58b; 
0x000000000042b09e: and dword ptr [rcx - 0x77], ecx; ret; 
0x000000000047b41d: and dword ptr [rcx - 8], 0x415d5bff; pop rsp; ret; 
0x00000000004100db: and dword ptr [rcx], eax; add byte ptr [rcx - 0x77], cl; ret 0x48e9; 
0x0000000000478608: and dword ptr [rcx], eax; clc; shr eax, 2; vzeroupper; ret; 
0x000000000043f6b8: and dword ptr [rcx], eax; clc; vzeroupper; ret; 
0x00000000004705e9: and dword ptr [rip + 0x1b94100], eax; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc al, 0xd3; mov rbx, rcx; jmp rdx; 
0x000000000041ad99: and dword ptr [rsi + 0xf], 0x1f; add byte ptr [rax], r8b; mov eax, 0xba; syscall; 
0x0000000000464fef: and eax, 0; ret; 
0x000000000048007d: and eax, 0x10; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x000000000047477d: and eax, 0x10; mov byte ptr [rax + 0x972], 0; ret; 
0x000000000041b6e8: and eax, 0x10; ret; 
0x000000000048246b: and eax, 0x18; add byte ptr [rcx + rax - 0x10], dh; inc dword ptr [rsi + 0x10]; pop rbx; ret; 
0x00000000004504e7: and eax, 0x18; test eax, eax; jne 0x50500; syscall; 
0x0000000000450587: and eax, 0x18; test eax, eax; jne 0x505a0; mov eax, 1; syscall; 
0x0000000000466687: and eax, 0x18; test eax, eax; jne 0x666a0; mov eax, 0x13e; syscall; 
0x0000000000479c46: and eax, 0x18; test eax, eax; jne 0x79cb0; mov eax, 0x101; syscall; 
0x000000000044e46e: and eax, 0x28; jne 0x4e494; add rsp, 0x20; pop rbx; ret; 
0x00000000004502e6: and eax, 0x28; jne 0x50301; add rsp, 0x28; ret; 
0x0000000000450df6: and eax, 0x28; jne 0x50e43; add rsp, 0x68; ret; 
0x0000000000450e85: and eax, 0x28; jne 0x50ed3; add rsp, 0x18; ret; 
0x0000000000450f3d: and eax, 0x28; jne 0x50f8b; add rsp, 0x58; ret; 
0x0000000000451179: and eax, 0x28; jne 0x51185; add rsp, 0x28; ret; 
0x00000000004527a4: and eax, 0x28; jne 0x527c5; add rsp, 0x1018; ret; 
0x0000000000452af0: and eax, 0x28; jne 0x52b3d; add rsp, 0x58; ret; 
0x00000000004653c8: and eax, 0x28; jne 0x65414; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000466ea7: and eax, 0x28; jne 0x66ef5; add rsp, 0x38; ret; 
0x000000000046c4b3: and eax, 0x28; jne 0x6c4c2; add rsp, 0xd8; ret; 
0x000000000046c56f: and eax, 0x28; jne 0x6c57e; add rsp, 0xd8; ret; 
0x000000000047489f: and eax, 0x28; jne 0x748ac; add rsp, 0x10; pop rbp; ret; 
0x0000000000474b4d: and eax, 0x28; jne 0x74b5a; add rsp, 0x10; pop rbp; ret; 
0x0000000000475e98: and eax, 0x28; jne 0x75f17; add rsp, 0x98; ret; 
0x0000000000479c6b: and eax, 0x28; jne 0x79d33; add rsp, 0x78; ret; 
0x0000000000479d6e: and eax, 0x28; jne 0x79d7d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000479ddb: and eax, 0x28; jne 0x79e2b; add rsp, 0x58; ret; 
0x0000000000479f17: and eax, 0x28; jne 0x79f44; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000485d07: and eax, 0x28; jne 0x85d14; add rsp, 0x20; pop rbx; ret; 
0x0000000000485e1e: and eax, 0x28; jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485ef0: and eax, 0x28; jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fc0: and eax, 0x28; jne 0x85ff4; add rsp, 0x58; ret; 
0x00000000004860de: and eax, 0x28; jne 0x86197; add rsp, 0x68; ret; 
0x00000000004861f4: and eax, 0x28; jne 0x86223; add rsp, 0x38; ret; 
0x0000000000487df5: and eax, 0x28; jne 0x87e75; leave; ret; 
0x000000000048dde1: and eax, 0x28; jne 0x8dded; add rsp, 0x28; ret; 
0x000000000048dec4: and eax, 0x28; jne 0x8ded0; add rsp, 0x38; ret; 
0x000000000048df34: and eax, 0x28; jne 0x8df40; add rsp, 0x38; ret; 
0x000000000048e01f: and eax, 0x28; jne 0x8e02b; add rsp, 0x38; ret; 
0x000000000048e07f: and eax, 0x28; jne 0x8e08b; add rsp, 0x38; ret; 
0x000000000040b745: and eax, 0x28; jne 0xb754; add rsp, 0xd8; ret; 
0x000000000040b803: and eax, 0x28; jne 0xb812; add rsp, 0xd8; ret; 
0x0000000000475731: and eax, 0x2f0; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x00000000004882cf: and eax, 0x2f8; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000041a9fe: and eax, 0x2f8; ret; 
0x000000000041b73e: and eax, 0x38; cmp eax, 8; je 0x1b747; ret; 
0x0000000000479db7: and eax, 0x410000; cmp eax, 0x410000; je 0x79df0; mov eax, 0x101; syscall; 
0x0000000000485be7: and eax, 0x4800046d; lea eax, [rdi - 1]; cmp rax, -3; jbe 0x85c00; ret; 
0x000000000048d37c: and eax, 0x48; ret; 
0x000000000045418f: and eax, 0x698; mov byte ptr fs:[0x971], 0; mov byte ptr fs:[0x972], 0; add rsp, 0x10; pop rbx; ret; 
0x0000000000483548: and eax, 0x8348de74; ret; 
0x0000000000482a6b: and eax, 0x8b4c1375; cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x000000000041aa27: and eax, 0x972; cmp eax, 1; je 0x1aa38; ret; 
0x000000000043f364: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x3f380; bsf rax, rdx; ret; 
0x000000000043f307: and eax, 0xffffffc0; sar rdx, cl; test rdx, rdx; je 0x3f390; bsf rax, rdx; ret; 
0x000000000041b7b8: and eax, 0xfffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa9ffa], rdx; ret; 
0x0000000000456b37: and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x75a3d], al; pop rbx; ret; 
0x0000000000456b68: and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x75a0c], al; ret; 
0x0000000000491068: and eax, 0xfffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000493f2d: and eax, 0xfffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000456aa7: and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x75acd], al; pop rbx; ret; 
0x0000000000456ad8: and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x75a9c], al; ret; 
0x0000000000421646: and eax, 1; cmovne rax, rdx; ret; 
0x00000000004747e9: and eax, 1; mov dword ptr [rip + 0x539fe], eax; ret; 
0x00000000004931bf: and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000486258: and eax, 2; sub eax, 1; ret; 
0x0000000000470651: and eax, dword ptr [rip + 0x1bd00]; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000047761b: and eax, eax; test eax, eax; je 0x775d4; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x0000000000477640: and eax, eax; test eax, eax; je 0x77650; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x000000000044ae91: and eax, ecx; je 0x4aea1; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044dc01: and eax, ecx; je 0x4dc11; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000476e22: and eax, ecx; je 0x76ff0; bsr rax, rax; add rax, rdi; ret; 
0x00000000004790be: and eax, ecx; je 0x790ce; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x00000000004793ee: and eax, ecx; je 0x793fe; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000047761a: and eax, r8d; test eax, eax; je 0x775d4; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x000000000047763f: and eax, r8d; test eax, eax; je 0x77650; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x00000000004191ed: and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000419244: and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401936: and ebx, 0xfff; lea rax, [rbx + 1]; pop rbx; ret; 
0x0000000000414d54: and ebx, dword ptr [rbx + 0x4c]; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000422323: and ecx, 0x120; cmp ecx, 0x120; je 0x22338; ret; 
0x0000000000422393: and ecx, 0x120; cmp ecx, 0x120; je 0x223a8; ret; 
0x0000000000422ca3: and ecx, 0x120; cmp ecx, 0x120; je 0x22cb8; ret; 
0x00000000004232c3: and ecx, 0x120; cmp ecx, 0x120; je 0x232d8; ret; 
0x0000000000423343: and ecx, 0x120; cmp ecx, 0x120; je 0x23358; ret; 
0x00000000004764f3: and ecx, 0x120; cmp ecx, 0x120; je 0x76508; ret; 
0x00000000004777d3: and ecx, 0x120; cmp ecx, 0x120; je 0x777e8; ret; 
0x000000000048ce89: and ecx, 0x39447fff; ret; 
0x0000000000452ad0: and ecx, 2; jne 0x52b00; xor r8d, r8d; mov eax, 0x19; syscall; 
0x00000000004220de: and ecx, 4; lea rax, [rip + 0x1c8d8]; lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x0000000000478de7: and ecx, 7; sarx eax, eax, ecx; test eax, eax; je 0x78d07; tzcnt eax, eax; ret; 
0x000000000041bc5d: and ecx, dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000453042: and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x0000000000453027: and ecx, dword ptr [rsi + 0xc]; lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x53040; ret; 
0x0000000000490da7: and edi, 0x20; je 0x90dbc; movss xmm0, dword ptr [rip + 0x239ec]; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x000000000044764c: and edi, 0xffffffc0; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004826a7: and edi, eax; and rsi, rax; cmp rdi, rsi; jne 0x826b8; pop rbx; ret; 
0x0000000000401962: and edx, 0x1f; jne 0x1947; xor eax, eax; pop rbx; ret; 
0x0000000000474734: and edx, 0x38; cmp edx, 8; je 0x7473d; ret; 
0x000000000041b976: and edx, 0xfffffff0; cmp rax, 7; mov eax, 0x10; cmova rax, rdx; mov qword ptr [rip + 0xb08ab], rax; ret; 
0x000000000042320e: and edx, 2; lea rax, [rip + 0x8eb8]; lea rdx, [rip + 0xe441]; cmovne rax, rdx; ret; 
0x000000000042302e: and edx, 2; lea rax, [rip + 0x9078]; lea rdx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x0000000000422e1e: and edx, 2; lea rax, [rip + 0xbc88]; lea rdx, [rip + 0x11321]; cmovne rax, rdx; ret; 
0x0000000000476fbe: and edx, eax; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000422d7b: and esi, 0x400; lea rax, [rip + 0x8638]; jne 0x22d2d; ret; 
0x0000000000474df5: and esi, 0x80; syscall; 
0x0000000000475627: and esi, 0x80; xor sil, 0x81; syscall; 
0x00000000004826aa: and esi, eax; cmp rdi, rsi; jne 0x826b8; pop rbx; ret; 
0x00000000004770b2: and esi, eax; je 0x76ff0; bsr rax, rsi; add rax, rdi; ret; 
0x0000000000476ebc: and esi, ecx; je 0x76ff0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004222be: and r15b, sil; jmp qword ptr [rsi + 0xf]; 
0x000000000043f363: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x3f380; bsf rax, rdx; ret; 
0x000000000043f306: and rax, 0xffffffffffffffc0; sar rdx, cl; test rdx, rdx; je 0x3f390; bsf rax, rdx; ret; 
0x000000000041b7b7: and rax, 0xfffffffffffffff0; sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa9ffa], rdx; ret; 
0x0000000000491067: and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000493f2c: and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000476e21: and rax, rcx; je 0x76ff0; bsr rax, rax; add rax, rdi; ret; 
0x000000000044764b: and rdi, 0xffffffffffffffc0; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004826a6: and rdi, rax; and rsi, rax; cmp rdi, rsi; jne 0x826b8; pop rbx; ret; 
0x000000000041b975: and rdx, 0xfffffffffffffff0; cmp rax, 7; mov eax, 0x10; cmova rax, rdx; mov qword ptr [rip + 0xb08ab], rax; ret; 
0x0000000000476fbd: and rdx, r8; cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x00000000004826a9: and rsi, rax; cmp rdi, rsi; jne 0x826b8; pop rbx; ret; 
0x00000000004770b1: and rsi, rax; je 0x76ff0; bsr rax, rsi; add rax, rdi; ret; 
0x0000000000476ebb: and rsi, rcx; je 0x76ff0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004129e2: bnd call qword ptr [rax + 0x70]; 
0x000000000044ac71: bnd jbe 0x4ac40; test eax, eax; je 0x4acc0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044d9d1: bnd jbe 0x4d9a0; test eax, eax; je 0x4da20; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000477dca: bnd jbe 0x77e40; add rax, rdi; ret; 
0x0000000000477dea: bnd jbe 0x77e40; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000477e0a: bnd jbe 0x77e40; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477e2a: bnd jbe 0x77e40; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000478e97: bnd jbe 0x78e60; test eax, eax; je 0x78f00; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000479197: bnd jbe 0x79160; test eax, eax; je 0x79200; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000477aa8: bnd je 0x77aaf; test edx, edx; jne 0x77aa0; ret; 
0x00000000004805aa: bnd ret 4; mov qword ptr [rip + 0x4c2fb], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042b903: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x10]; movzx eax, byte ptr [rdi + rax - 0x10]; sub eax, ecx; ret; 
0x000000000044b1ad: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000044b19a: bsf eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000044bc2c: bsf eax, eax; add rax, rcx; ret; 
0x000000000042aeaa: bsf eax, eax; add rax, rcx; vzeroupper; ret; 
0x000000000044908a: bsf eax, eax; add rax, rcx; xtest; je 0x49099; vzeroall; ret; 
0x000000000042a9ca: bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000044c208: bsf eax, eax; add rax, rdi; cmp sil, byte ptr [rax]; jne 0x4c231; ret; 
0x000000000042a8e0: bsf eax, eax; add rax, rdi; ret; 
0x000000000042abb7: bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000448086: bsf eax, eax; add rax, rdi; xtest; je 0x48095; vzeroall; ret; 
0x0000000000478a29: bsf eax, eax; add rax, rdi; xtest; je 0x78a38; vzeroall; ret; 
0x000000000044b14d: bsf eax, eax; add rax, rdx; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000044c6b2: bsf eax, eax; add rax, rdx; ret; 
0x000000000043f27c: bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000449a9c: bsf eax, eax; add rax, rdx; xtest; je 0x49aab; vzeroall; ret; 
0x000000000043f231: bsf eax, eax; add rdi, -0x80; add rax, rdi; vzeroupper; ret; 
0x000000000042ac41: bsf eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042ac51: bsf eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042ac61: bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000044ada8: bsf eax, eax; cmp edx, eax; jbe 0x4add1; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044db0e: bsf eax, eax; cmp edx, eax; jbe 0x4db31; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000478fe0: bsf eax, eax; cmp edx, eax; jbe 0x79001; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x00000000004792eb: bsf eax, eax; cmp edx, eax; jbe 0x79311; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000044d85d: bsf eax, eax; cmp esi, eax; jb 0x4d83b; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d82b: bsf eax, eax; cmp esi, eax; jb 0x4d83b; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d8a9: bsf eax, eax; cmp esi, eax; jb 0x4d8f4; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044d934: bsf eax, eax; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000043faa1: bsf eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000044c261: bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x4c231; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c3f1: bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x4c3d9; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c3c9: bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x40]; jne 0x4c3d9; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c221: bsf eax, eax; cmp sil, byte ptr [rdi + rax + 0x60]; jne 0x4c231; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000043ee43: bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000044c3e1: bsf eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x4c3d9; lea rax, [rdi + rax]; ret; 
0x000000000044c442: bsf eax, eax; cmp sil, byte ptr [rdx + rax]; jne 0x4c3d9; add rax, rdx; ret; 
0x000000000042ac31: bsf eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044f111: bsf eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x000000000044f101: bsf eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x000000000044f0f1: bsf eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x000000000044f0d1: bsf eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x000000000044f7e1: bsf eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x000000000044f7d1: bsf eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000044d711: bsf eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000044d701: bsf eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000044d6f1: bsf eax, eax; lea eax, [rcx + rax - 0x61]; ret; 
0x000000000044d6e1: bsf eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x000000000044f7f1: bsf eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000042a8f0: bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042a900: bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042a8d0: bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000044f950: bsf eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044ac81: bsf eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044ae21: bsf eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000042a82f: bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044ac91: bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044adf9: bsf eax, eax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000044aca1: bsf eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044acb1: bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044db81: bsf eax, eax; lea rax, [rdi + rax + 0xa0]; ret; 
0x000000000044db91: bsf eax, eax; lea rax, [rdi + rax + 0xc0]; ret; 
0x000000000044db64: bsf eax, eax; lea rax, [rdi + rax + 0xe0]; ret; 
0x000000000044bd27: bsf eax, eax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000044bd51: bsf eax, eax; lea rax, [rdi + rax - 0x60]; vzeroupper; ret; 
0x000000000044bd41: bsf eax, eax; lea rax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x0000000000478eb1: bsf eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000478ec1: bsf eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000478ed1: bsf eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000478ee1: bsf eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000479371: bsf eax, eax; lea rax, [rdi + rax*4 + 0xa0]; ret; 
0x0000000000479381: bsf eax, eax; lea rax, [rdi + rax*4 + 0xc0]; ret; 
0x0000000000479347: bsf eax, eax; lea rax, [rdi + rax*4 + 0xe0]; ret; 
0x0000000000478e37: bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000479041: bsf eax, eax; lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000043ec37: bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000043ea07: bsf eax, eax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042b8c8: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042b4c1: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044b040: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000042b4e1: bsf eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042b8e8: bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042b4a1: bsf eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x000000000044cfac: bsf eax, eax; ret; 
0x000000000044f09c: bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000047897b: bsf eax, eax; shr eax, 2; xtest; je 0x7898a; vzeroall; ret; 
0x000000000043f871: bsf eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x000000000043f861: bsf eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x000000000043f851: bsf eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x000000000043f841: bsf eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000000043f6b1: bsf eax, eax; sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x000000000043f6c1: bsf eax, eax; sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x000000000043f6d1: bsf eax, eax; sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x000000000043f6a1: bsf eax, eax; sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x000000000044cfb1: bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000044cfc1: bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000044cfd1: bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x000000000044cfe1: bsf eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000478cc1: bsf eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000478cd1: bsf eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000478ce1: bsf eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000478cb1: bsf eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x0000000000478ff1: bsf eax, eax; sub edx, -0x20; cmp edx, eax; jbe 0x79001; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000479301: bsf eax, eax; sub edx, -0x20; cmp edx, eax; jbe 0x79311; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000044adc1: bsf eax, eax; sub edx, -0x80; cmp edx, eax; jbe 0x4add1; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044db21: bsf eax, eax; sub edx, -0x80; cmp edx, eax; jbe 0x4db31; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042adc1: bsf eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042ad6d: bsf eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044f1f5: bsf eax, eax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042af89: bsf eax, eax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000043f219: bsf eax, eax; sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000044f281: bsf eax, eax; sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afb1: bsf eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x000000000043f241: bsf eax, eax; sub rdi, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000044f261: bsf eax, eax; sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afa1: bsf eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000043fa31: bsf eax, eax; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000043fa21: bsf eax, eax; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000044d8c1: bsf eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d8d1: bsf eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044f9e1: bsf eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044f9c1: bsf eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000042a6a9: bsf eax, eax; sub rdx, rax; jbe 0x2a950; add rax, rdi; add rax, rcx; ret; 
0x000000000042a910: bsf eax, eax; sub rdx, rax; jbe 0x2a950; add rax, rdi; ret; 
0x000000000042a920: bsf eax, eax; sub rdx, rax; jbe 0x2a950; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042a930: bsf eax, eax; sub rdx, rax; jbe 0x2a950; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042a940: bsf eax, eax; sub rdx, rax; jbe 0x2a950; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000043f68a: bsf eax, eax; vzeroupper; ret; 
0x0000000000478e61: bsf eax, eax; xor ecx, ecx; cmp edx, eax; lea rax, [rdi + rax*4]; cmovle rax, rcx; ret; 
0x000000000044ac41: bsf eax, eax; xor ecx, ecx; cmp edx, eax; lea rax, [rdi + rax]; cmovle rax, rcx; ret; 
0x000000000044a37b: bsf eax, eax; xtest; je 0x4a387; vzeroall; ret; 
0x000000000043f2ca: bsf eax, edx; ret; 
0x000000000044eee8: bsf eax, edx; shr rax, 2; ret; 
0x000000000044c8f4: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; ret; 
0x000000000042499a: bsf ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044b018: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042b51c: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c091: bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x0000000000424a60: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000425ec4: bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000425f29: bsf ecx, esi; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000044c896: bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x0000000000425eed: bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000044c8c6: bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; ret; 
0x0000000000425f0d: bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x0000000000424830: bsf edx, eax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000044c70b: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; ret; 
0x0000000000425d61: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000044c71c: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; ret; 
0x0000000000425d81: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000044c72d: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; ret; 
0x0000000000425da1: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000044c6fc: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000425d47: bsf edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000043f422: bsf edx, edx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044eff7: bsf edx, edx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000004247c1: bsf edx, edx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000044d0a3: bsf rax, rax; add rax, rdi; ret; 
0x000000000044c3c8: bsf rax, rax; cmp sil, byte ptr [rdi + rax + 0x40]; jne 0x4c3d9; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c648: bsf rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044adf8: bsf rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000044bd26: bsf rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000043ed50: bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000043eb30: bsf rax, rax; mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000042ad6c: bsf rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044f1f4: bsf rax, rax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042af88: bsf rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000043f218: bsf rax, rax; sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000043f312: bsf rax, rdx; ret; 
0x000000000044eee7: bsf rax, rdx; shr rax, 2; ret; 
0x0000000000424999: bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042c090: bsf rcx, rcx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x0000000000424a5f: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000425f93: bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000042482f: bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000043f421: bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044eff6: bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x00000000004247c0: bsf rdx, rdx; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000476e2b: bsr eax, eax; add rax, rdi; ret; 
0x00000000004775dd: bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x0000000000477211: bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004773e1: bsr eax, eax; lea rax, [rdi + rax - 0x20]; xtest; je 0x773f2; vzeroall; ret; 
0x00000000004770bb: bsr eax, esi; add rax, rdi; ret; 
0x0000000000476fc9: bsr esi, esi; lea rax, [rcx + rsi]; ret; 
0x0000000000476ec5: bsr esi, esi; lea rax, [rdi + rsi]; ret; 
0x0000000000476e2a: bsr rax, rax; add rax, rdi; ret; 
0x00000000004770ba: bsr rax, rsi; add rax, rdi; ret; 
0x0000000000476fc8: bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000476ec4: bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000042b8a1: bswap ecx; sub rax, rcx; cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x000000000042b8a0: bswap rcx; sub rax, rcx; cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x00000000004881e4: bts eax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x000000000044d6d1: bts eax, esi; tzcnt eax, eax; ret; 
0x000000000044f0b4: bts eax, esi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000043f831: bts eax, esi; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000488081: bts edx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x000000000043f5e3: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044eff3: bts edx, ebx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000043f544: bts edx, esi; sar rdx, cl; test rdx, rdx; je 0x3f560; bsf rax, rdx; ret; 
0x00000000004881e3: bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x000000000044d6d0: bts rax, rsi; tzcnt eax, eax; ret; 
0x000000000044f0b3: bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000043f830: bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000488080: bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x000000000043f5e2: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044eff2: bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000043f543: bts rdx, rsi; sar rdx, cl; test rdx, rdx; je 0x3f560; bsf rax, rdx; ret; 
0x000000000044c28c: bzhi ecx, ecx, eax; jne 0x4c231; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c24c: bzhi ecx, ecx, eax; jne 0x4c231; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000042b6c3: bzhi edx, eax, edx; jne 0x2b4a0; xor eax, eax; vzeroupper; ret; 
0x00000000004806eb: call 0x1110; mov qword ptr [rip + 0x4c1b9], rax; add rsp, 8; ret; 
0x0000000000401863: call 0x11ed0; mov eax, 0; leave; ret; 
0x0000000000401812: call 0x12570; nop; pop rbp; ret; 
0x0000000000414cdb: call 0x14870; endbr64; cmp qword ptr [rip + 0xb02e4], 0; je 0x14cef; ret; 
0x000000000041aa8e: call 0x14cc0; nop dword ptr [rax + rax]; ret; 
0x0000000000474ac1: call 0x14cc0; nop word ptr cs:[rax + rax]; neg eax; ret; 
0x0000000000416949: call 0x17d90; mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x0000000000416a24: call 0x17d90; mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004883b7: call 0x1aaa0; xor eax, eax; add rsp, 8; ret; 
0x000000000046c3bf: call 0x1ab10; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000046663f: call 0x1ab10; xor eax, eax; add rsp, 8; ret; 
0x00000000004883fd: call 0x1ab30; xor eax, eax; add rsp, 8; ret; 
0x0000000000409fd1: call 0x1ae00; test eax, eax; jne 0x9fe0; pop rbp; ret; 
0x000000000041ffd5: call 0x1ba80; mov dword ptr fs:[rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004019b4: call 0x1c09ccf; ret; 
0x000000000041ff8c: call 0x1c5b0; mov dword ptr fs:[rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004747e7: call 0x1e7caf7; mov dword ptr [rip + 0x539fe], eax; ret; 
0x00000000004844f0: call 0x1ff20; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000048e367: call 0x1ff20; nop dword ptr [rax]; mov qword ptr fs:[rbx], 0; pop rbx; ret; 
0x000000000048ac92: call 0x1ff20; test rbx, rbx; jne 0x8ac88; mov qword ptr [rip + 0x41d81], 0; pop rbx; ret; 
0x0000000000456af7: call 0x2afc0; test eax, eax; jne 0x56ab3; or byte ptr [rip + 0x75a79], 3; pop rbx; ret; 
0x0000000000456b87: call 0x2afc0; test eax, eax; jne 0x56b43; or byte ptr [rip + 0x759e9], 0xc; pop rbx; ret; 
0x00000000004016b0: call 0x2b10; hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x000000000044f420: call 0x30add27; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000415b4b: call 0x40e9dc98; imul ecx, dword ptr [rax + rax + 0x48], 0x39; ret; 
0x000000000041213f: call 0x415d62a1; pop rbp; pop r14; ret; 
0x0000000000412166: call 0x415d62c8; pop rbp; pop r14; ret; 
0x0000000000418a77: call 0x415dcbd9; pop rbp; pop r14; ret; 
0x00000000004519ea: call 0x41615b4c; pop rbp; ret; 
0x000000000047dbf1: call 0x41641d51; pop rbp; pop rbp; ret; 
0x000000000047dd4f: call 0x41641eaf; pop rbp; pop rbp; ret; 
0x0000000000455f9b: call 0x44c0; endbr64; lea rax, [rip + 0x702b5]; ret; 
0x0000000000450271: call 0x44c0; nop word ptr cs:[rax + rax]; endbr64; mov eax, 0x18; syscall; 
0x000000000040ac78: call 0x44c0; xor eax, eax; ret; 
0x00000000004881e6: call 0x4691ca1b; or byte ptr [rax + 2], bh; ret; 
0x000000000043ff24: call 0x48ecea39; mov eax, edi; ret; 
0x0000000000440014: call 0x48eceb29; mov eax, edx; ret; 
0x00000000004336a0: call 0x4ef34697; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004361d0: call 0x4ef371c7; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000041aee7: call 0x4fb50; mov edx, r12d; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000041ad77: call 0x4fb50; mov edx, r12d; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x000000000041ada9: call 0x4fb50; mov edx, r12d; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000041b7c1: call 0x508effca; add dword ptr [rax - 0x77], ecx; adc eax, 0xa9ffa; ret; 
0x0000000000403f40: call 0x50da0; cmp eax, -1; je 0x3ff0; add rsp, 0x98; ret; 
0x000000000041fa01: call 0x51070; cmp rax, -1; je 0x1fa18; add rsp, 8; ret; 
0x00000000004527d8: call 0x52370; test eax, eax; je 0x527f0; add rsp, 8; ret; 
0x00000000004527f9: call 0x52750; mov edx, 2; test eax, eax; cmove eax, edx; add rsp, 8; ret; 
0x000000000041bb5c: call 0x52c30; cmp eax, 1; je 0x1bb70; add rsp, 8; ret; 
0x0000000000479e2b: call 0x53280; endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000461e7b: call 0x53280; endbr64; mov rax, qword ptr [rip + 0x6a7bd]; ret; 
0x0000000000450f8b: call 0x53280; endbr64; xor eax, eax; syscall; 
0x0000000000458221: call 0x53280; nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x743c5]; ret; 
0x0000000000479a3a: call 0x53280; nop; endbr64; mov eax, 0x3f; syscall; 
0x0000000000488b0a: call 0x53280; nop; endbr64; mov eax, dword ptr [rip + 0x437a6]; ret; 
0x00000000004825a4: call 0x53f00; xor eax, eax; add rsp, 8; ret; 
0x0000000000403087: call 0x54c70; mov rsi, rbp; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x000000000049083b: call 0x54de0; call rax; 
0x00000000004905ff: call 0x54de0; nop dword ptr [rax]; call rax; 
0x000000000048d362: call 0x54de0; nop word ptr [rax + rax]; ret; 
0x0000000000457bc3: call 0x54fe0; mov rax, qword ptr [rbp - 0x68]; mov rdi, r12; call rax; 
0x0000000000411a0f: call 0x5b011a14; pop rbp; ret; 
0x0000000000411b8d: call 0x5b011b92; pop rbp; ret; 
0x000000000041aed2: call 0x5c430c32; pop r13; pop r14; ret; 
0x0000000000421ac7: call 0x5c437827; pop r13; ret; 
0x0000000000421bd6: call 0x5c437936; pop r13; ret; 
0x00000000004519d5: call 0x5c467735; pop r13; ret; 
0x0000000000472a77: call 0x5c4887d7; pop r13; ret; 
0x000000000048c21c: call 0x5c4a1f7c; pop r13; ret; 
0x000000000040c026: call 0x63494fa0; ret; 
0x000000000046cc76: call 0x634f5bf0; ret; 
0x0000000000464fa6: call 0x65064faa; mov qword ptr [rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000465007: call 0x6506500b; add rax, qword ptr [0]; ret; 
0x00000000004222f5: call 0x6c4d0; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000045053c: call 0x74770; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000478325: call 0x74da072c; adc eax, 0xe180d188; pcmpeqb mm3, qword ptr [rsi]; ret; 
0x0000000000465428: call 0x75e30; test eax, eax; jne 0x65440; add rsp, 8; ret; 
0x0000000000494f8f: call 0x76f188e0; ret; 
0x000000000044f0a0: call 0x77fdb5a7; ret; 
0x000000000044f0bc: call 0x77fdb5c3; ret; 
0x000000000044f0dc: call 0x77fdb5e3; ret; 
0x000000000044f0f9: call 0x77fdb600; ret; 
0x000000000044f109: call 0x77fdb610; ret; 
0x000000000044f119: call 0x77fdb620; ret; 
0x000000000044f201: call 0x77fdb708; ret; 
0x000000000044f258: call 0x77fdb75f; ret; 
0x000000000044f26d: call 0x77fdb774; ret; 
0x000000000044f28d: call 0x77fdb794; ret; 
0x000000000044f2b2: call 0x77fdb7b9; ret; 
0x000000000044f302: call 0x77fdb809; ret; 
0x000000000044f31e: call 0x77fdb825; ret; 
0x000000000044f33f: call 0x77fdb846; ret; 
0x000000000044f366: call 0x77fdb86d; ret; 
0x000000000044f3be: call 0x77fdb8c5; ret; 
0x00000000004785d2: call 0x78004ad9; ret; 
0x00000000004785eb: call 0x78004af2; ret; 
0x000000000047860c: call 0x78004b13; ret; 
0x000000000047862c: call 0x78004b33; ret; 
0x000000000047864c: call 0x78004b53; ret; 
0x0000000000478713: call 0x78004c1a; ret; 
0x000000000047872d: call 0x78004c34; ret; 
0x000000000047874d: call 0x78004c54; ret; 
0x000000000047877f: call 0x78004c86; ret; 
0x0000000000475f3d: call 0x79b70; mov dword ptr [rip + 0x50b80], eax; add rsp, 8; ret; 
0x000000000048e4a0: call 0x7de50; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x0000000000485d4c: call 0x7fa40; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x00000000004903c7: call 0x7fa40; mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000048170c: call 0x80f90; add rsp, 0xd8; ret; 
0x00000000004626c5: call 0x848afcb; pop rbx; ret; 
0x00000000004160c3: call 0x84c71d7; pop rbx; pop rbp; pop r12; ret; 
0x00000000004626ac: call 0x861a0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000487de8: call 0x870a0; mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x87e75; leave; ret; 
0x0000000000475d31: call 0x882c0; call rbx; 
0x000000000048df98: call 0x8b150; mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000048de47: call 0x8b150; mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000480867: call 0x8cc8bb4; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000496597: call 0x8cde8e4; pop rbx; pop rbp; ret; 
0x000000000048d8d2: call 0x8dab0; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x000000000048e1e7: call 0x903e0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048e0a3: call 0x90700; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004909b0: call 0x90d40; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000401765: call 0x95c60; mov byte ptr [rip + 0xc5b4f], 1; pop rbp; ret; 
0x000000000049320f: call 0x95ca0; test rax, rax; cmovne rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000447bd7: call 0xf0b8ceb; adc dword ptr [rdi + 0x10], eax; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x000000000045cb3e: call 0xffffffff8505cb45; ror byte ptr [rdi], cl; mov al, ah; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x0000000000477354: call 0xffffffff89077359; ret 0x8d48; 
0x0000000000468500: call 0xffffffff8a068503; sar dword ptr [rcx], cl; ret 0x4d74; 
0x000000000048edeb: call 0xffffffffaf1835f4; ret; 
0x0000000000492fd9: call 0xffffffffbeeab92a; or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000493004: call 0xffffffffbeeab955; or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x00000000004930c1: call 0xffffffffbeeaba12; sbb al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000046555e: call 0xffffffffc7b564ab; lea r12, [rcx + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x0000000000414d7c: call 0xffffffffceec610c; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000047897f: call 0xffffffffd6089886; je 0x7898a; vzeroall; ret; 
0x0000000000447edb: call 0xffffffffe1c948d5; sti; xchg eax, edx; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000041b7bd: call 0xffffffffe8c2ffd3; add al, 0x48; lea edx, [rax + 1]; mov qword ptr [rip + 0xa9ffa], rdx; ret; 
0x000000000045b819: call 0xffffffffe9f7416a; cmp esi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000042db23: call 0xfffffffff0616674; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430503: call 0xfffffffff0619054; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042d9f3: call 0xfffffffff0626344; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da31: call 0xfffffffff0626382; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042da69: call 0xfffffffff06263ba; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042daa7: call 0xfffffffff06263f8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042dadf: call 0xfffffffff0626430; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db07: call 0xfffffffff0626458; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db2f: call 0xfffffffff0626480; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004303d3: call 0xfffffffff0628d24; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000430411: call 0xfffffffff0628d62; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430449: call 0xfffffffff0628d9a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000430487: call 0xfffffffff0628dd8; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004304bf: call 0xfffffffff0628e10; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004304e7: call 0xfffffffff0628e38; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043050f: call 0xfffffffff0628e60; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000493566: call 0xfffffffff07ec0b7; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049370c: call 0xfffffffff07ec25d; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000493862: call 0xfffffffff07ec3b3; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000004938e6: call 0xfffffffff07ec437; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000493aba: call 0xfffffffff07ec60b; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000493b14: call 0xfffffffff07ec665; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000493be6: call 0xfffffffff07ec737; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000488b4b: call 0xffffffffff591853; test eax, eax; je 0x88b6e; lea rbx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000412d50: call qword ptr [rax + 0x18]; 
0x000000000040c40b: call qword ptr [rax + 0x38]; 
0x00000000004758cb: call qword ptr [rax + 0x48]; 
0x0000000000473a3b: call qword ptr [rax + 0x68]; 
0x00000000004129e3: call qword ptr [rax + 0x70]; 
0x0000000000493edb: call qword ptr [rax + 0x74]; 
0x0000000000416319: call qword ptr [rax + 0x78]; 
0x0000000000401611: call qword ptr [rax - 0x18]; 
0x0000000000479a3e: call qword ptr [rax - 0x5e1f00d]; mov eax, 0x3f; syscall; 
0x0000000000488b0e: call qword ptr [rax - 0x5e1f00d]; mov eax, dword ptr [rip + 0x437a6]; ret; 
0x000000000040d3c1: call qword ptr [rax]; 
0x0000000000418073: call qword ptr [rbp + 0x18]; 
0x00000000004186c4: call qword ptr [rbp + 0x20]; 
0x00000000004191e4: call qword ptr [rbp + 0x30]; 
0x000000000040b997: call qword ptr [rbp + 0x38]; 
0x0000000000415d8a: call qword ptr [rbp + 0x40]; 
0x00000000004807a3: call qword ptr [rbp + 0x53]; 
0x0000000000412663: call qword ptr [rbp + 0x58]; 
0x0000000000411e48: call qword ptr [rbp + 0x60]; 
0x0000000000412711: call qword ptr [rbp + 0x68]; 
0x0000000000415efc: call qword ptr [rbp + 0x70]; 
0x0000000000403178: call qword ptr [rbx + 0x10]; 
0x00000000004182da: call qword ptr [rbx + 0x18]; 
0x000000000040f423: call qword ptr [rbx + 0x38]; 
0x000000000045348d: call qword ptr [rbx + 0x48]; 
0x000000000040aad8: call qword ptr [rbx]; 
0x0000000000475df3: call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000040be99: call qword ptr [rcx + 0x38]; 
0x000000000041969d: call qword ptr [rcx + 0x58]; 
0x0000000000491673: call qword ptr [rcx]; 
0x0000000000415142: call qword ptr [rdi + 0x18]; 
0x000000000040edda: call qword ptr [rdi + 0x38]; 
0x00000000004193c1: call qword ptr [rdx + 0x18]; 
0x0000000000416224: call qword ptr [rsi + 0x18]; 
0x0000000000473ff2: call qword ptr [rsi + 0x20]; 
0x0000000000410c20: call qword ptr [rsi + 0x38]; 
0x0000000000416bdd: call qword ptr [rsi + 0x78]; 
0x0000000000401014: call rax; 
0x0000000000401014: call rax; add rsp, 8; ret; 
0x000000000044fa84: call rax; test eax, eax; jne 0x4fae0; xor eax, eax; add rsp, 8; ret; 
0x000000000041467f: call rbx; 
0x0000000000454ec6: call rcx; 
0x000000000040a9bb: call rdi; 
0x000000000041abef: call rdx; 
0x000000000045817a: call rsi; 
0x000000000041e48d: call rsp; 
0x000000000044e3c3: cdq; adc eax, dword ptr [rax]; add bh, dh; ret 0; 
0x00000000004154ab: cdq; add byte ptr [rax], al; add byte ptr [rbp + 0x31], al; dec dword ptr [rax + 0x39]; ret 0x860f; 
0x000000000049312b: cdq; add eax, dword ptr [rax]; cmp byte ptr [rdx + rsi], 8; jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x00000000004223e3: cdq; mov dl, 2; add bh, dh; ret 0; 
0x0000000000422123: cdq; movabs al, byte ptr [0x40000000c2f70002]; je 0x22101; ret; 
0x000000000048e7e6: cdq; nop word ptr [rax + rax]; mov rax, r8; ret; 
0x00000000004231e3: cdq; push rbp; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x000000000046dff0: clc; add cl, byte ptr [rax + 0x29]; ret 0xf48; 
0x00000000004133db: clc; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0xf748; 
0x000000000048f8c3: clc; add cl, ch; imul esi, ebp, -1; jmp qword ptr [rsi + 0xf]; 
0x00000000004018e3: clc; add dword ptr [rcx + 0xf], eax; xchg eax, esp; ret; 
0x0000000000479807: clc; add dword ptr [rdi + 0x1d], edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000466612: clc; add dword ptr [rdi + 0x22], edi; xor eax, eax; add rsp, 8; ret; 
0x0000000000488602: clc; add dword ptr [rdi + 0x32], edi; pop rbp; ret; 
0x0000000000417adf: clc; add dword ptr [rdi + 0x3d], edi; add rsp, 8; ret; 
0x000000000041fb09: clc; add dword ptr [rdi + 0xb], edi; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c5b1: clc; add dword ptr [rdi + 0xb], edi; ret; 
0x0000000000419f67: clc; add dword ptr [rdi + 5], edi; ret; 
0x000000000041bb62: clc; add dword ptr [rdx + rcx + 0x48], esi; add esp, 8; ret; 
0x000000000042a6b7: clc; add rax, rcx; ret; 
0x0000000000422454: clc; cmp al, 0; add byte ptr [rax - 0x73], cl; adc eax, 0x5551; cmovne rax, rdx; ret; 
0x000000000044c20d: clc; cmp sil, byte ptr [rax]; jne 0x4c231; ret; 
0x000000000047a154: clc; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 1], ecx; ret; 
0x00000000004806ee: clc; dec dword ptr [rax - 0x77]; add eax, 0x4c1b9; add rsp, 8; ret; 
0x000000000047a398: clc; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000047a0ab: clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000403f46: clc; dec dword ptr [rdi]; test byte ptr [rdx + 0x48000000], ah; add esp, 0x98; ret; 
0x000000000044ad87: clc; ja 0x4ad0f; sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x0000000000478fbf: clc; ja 0x78f47; sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x0000000000451044: clc; jb 0x51050; xor eax, eax; ret; 
0x0000000000472ae4: clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047e8d2: clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000475b15: clc; jmp qword ptr [rsi + 0xf]; 
0x0000000000475d8c: clc; jmp qword ptr [rsi - 0x70]; 
0x000000000041abe3: clc; jne 0x1abc0; mov rdx, qword ptr [rbp]; test rdx, rdx; je 0x1abc0; call rdx; 
0x000000000047b41f: clc; lcall [rbx + 0x5d]; pop r12; ret; 
0x00000000004764cc: clc; lcall [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000049356e: clc; leave; ret; 
0x000000000045337b: clc; mov es, word ptr [rdi]; add byte ptr [rax], al; je 0x533a0; lea rax, [rip + 0x78ee7]; ret; 
0x000000000042db47: clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e49b: clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e69b: clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e89b: clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db2b: clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e46f: clc; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e66f: clc; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e86f: clc; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042daff: clc; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e4b7: clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433437: clc; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042e6b7: clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004333a7: clc; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042e8b7: clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433317: clc; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042db63: clc; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000436de0: clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000493714: clc; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000466d54: clc; mov rdi, rdx; cmp rax, 9; ja 0x66d30; mov rax, r8; ret; 
0x000000000049106a: clc; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000493f2f: clc; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x00000000004465a4: clc; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000042b0b3: clc; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000474df2: clc; not esi; and esi, 0x80; syscall; 
0x0000000000466d5a: clc; or dword ptr [rdi - 0x2e], esi; mov rax, r8; ret; 
0x00000000004724ff: clc; or dword ptr [rdi], ecx; xchg ah, ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8908; 
0x000000000042b712: clc; or ecx, esi; sub eax, ecx; ret; 
0x0000000000419280: clc; push qword ptr [rbp - 0x41]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041fa08: clc; push qword ptr [rsp + rcx + 0x48]; add esp, 8; ret; 
0x0000000000410d4b: clc; ret; 
0x00000000004869ca: clc; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x00000000004785e9: clc; shr eax, 2; vzeroupper; ret; 
0x000000000044efff: clc; shr rax, 2; ret; 
0x000000000044f1fe: clc; shr rax, 2; vzeroupper; ret; 
0x0000000000485bf1: clc; std; jbe 0x85c00; ret; 
0x0000000000487df0: clc; sub rax, qword ptr fs:[0x28]; jne 0x87e75; leave; ret; 
0x000000000042abbc: clc; vzeroupper; ret; 
0x000000000044808b: clc; xtest; je 0x48095; vzeroall; ret; 
0x0000000000478a2e: clc; xtest; je 0x78a38; vzeroall; ret; 
0x0000000000488b0d: cld; call qword ptr [rax - 0x5e1f00d]; mov eax, dword ptr [rip + 0x437a6]; ret; 
0x00000000004458d1: cld; cmp eax, ecx; jne 0x45ae0; xor eax, eax; ret; 
0x0000000000453e8d: cld; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x00000000004533fd: cld; dec dword ptr [rax - 0x77]; ret; 
0x0000000000496661: cld; dec dword ptr [rax - 0x7d]; ret; 
0x0000000000453776: cld; dec dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000489d5b: cld; inc dword ptr [rbp + 0x480a74c0]; mov eax, 0xffffffb8; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x0000000000486f72: cld; jmp qword ptr [rsi + 0x2e]; 
0x0000000000485e51: cld; jmp qword ptr [rsi + 0x66]; 
0x000000000044e948: cld; jmp qword ptr [rsi + 0xf]; 
0x000000000048b27c: cld; jmp qword ptr [rsi - 0x70]; 
0x000000000042e2d2: cld; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e4d5: cld; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e6d5: cld; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e8d5: cld; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000436df2: cld; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000446599: cld; mov dword ptr [rdi], esi; ret; 
0x00000000004458ce: cld; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x45ae0; xor eax, eax; ret; 
0x0000000000446593: cld; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000042dd0a: cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042deea: cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0ca: cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2aa: cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dece: cld; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0ae: cld; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e28e: cld; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df06: cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004335c6: cld; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e0e6: cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000433546: cld; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e2c6: cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004334c6: cld; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042dd26: cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000433646: cld; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000456aa9: cld; or eax, 1; mov byte ptr [rip + 0x75acd], al; pop rbx; ret; 
0x0000000000456ada: cld; or eax, 2; mov byte ptr [rip + 0x75a9c], al; ret; 
0x000000000042dbb1: cld; ret; 
0x00000000004972c0: cld; sal esi, 1; jmp qword ptr [rsi + 0x2e]; 
0x000000000044b791: cld; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x0000000000447856: cld; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x0000000000436f61: cld; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d27: cld; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000437223: cld; vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000044620f: cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000447de5: cld; vzeroupper; ret; 
0x0000000000447f9b: cli; add al, 0x73; cmp al, byte ptr [rbx + 0x3c7701fa]; jb 0x47f84; mov byte ptr [rax], sil; ret; 
0x0000000000447c0b: cli; add al, 0x73; sbb al, byte ptr [rbx + 0x1c7701fa]; jb 0x47be7; mov byte ptr [rax], sil; ret; 
0x000000000045c548: cli; add al, 0x77; ret 0x3948; 
0x0000000000460876: cli; add al, 0xf; xchg esi, esp; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x3676; 
0x0000000000407a22: cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000447e95: cli; add byte ptr [rax], 0; add byte ptr [rdi + 0x64], dh; vmovdqu64 zmmword ptr [rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000413224: cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000446292: cli; add dh, byte ptr [rdx + 8]; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000447c10: cli; add dword ptr [rdi + 0x1c], esi; jb 0x47be7; mov byte ptr [rax], sil; ret; 
0x000000000044bb96: cli; add dword ptr [rdi + 0x26], esi; jb 0x4bb7f; mov byte ptr [rax], sil; ret; 
0x0000000000447db5: cli; add dword ptr [rdi + 0x37], esi; jb 0x47d73; mov byte ptr [rax], sil; vzeroupper; ret; 
0x0000000000447fa0: cli; add dword ptr [rdi + 0x3c], esi; jb 0x47f84; mov byte ptr [rax], sil; ret; 
0x0000000000475a3b: cli; add dword ptr [rdi + 0x49], edi; nop; add rsp, 0x18; ret; 
0x0000000000475b57: cli; add dword ptr [rdi + 0x55], edi; nop; add rsp, 0x18; ret; 
0x00000000004118a2: cli; add dword ptr [rdi + 0xa], edi; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000044629f: cli; add dword ptr [rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000436e10: cli; add dword ptr [rdx + 4], esi; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x0000000000474ac2: cli; add edx, edi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000447b64: cli; and byte ptr [rdi + 0x18], dh; movups xmmword ptr [rax], xmm0; movups xmmword ptr [rax + rdx - 0x10], xmm0; ret; 
0x0000000000446552: cli; and byte ptr [rdi + 0x7a], dh; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447ae4: cli; and byte ptr [rdi], cl; xchg dword ptr [rbp + 0xf000000], ebx; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000044625b: cli; and byte ptr [rdx + 0xa], dh; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000453633: cli; cmp byte ptr [rip + 0x73d45], 0; jne 0x53650; mov r8, qword ptr [rip + 0x73d44]; mov rax, r8; ret; 
0x000000000041fa33: cli; cmp byte ptr [rip + 0xac7e5], 0; jne 0x1fa40; ret; 
0x00000000004747d3: cli; cmp dword ptr [rdi], 1; je 0x747e0; ret; 
0x0000000000474773: cli; cmp edi, 1; je 0x74789; mov rax, qword ptr fs:[0x10]; mov byte ptr [rax + 0x972], 0; ret; 
0x00000000004185c3: cli; cmp qword ptr [rdi + 0x38], 0; je 0x185d0; ret; 
0x0000000000414ce3: cli; cmp qword ptr [rip + 0xb02e4], 0; je 0x14cef; ret; 
0x0000000000454295: cli; cmp r9, rsi; jge 0x54248; ret; 
0x000000000047d54f: cli; dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000047617c: cli; dec dword ptr [rax - 0x77]; ret; 
0x000000000045f169: cli; dec dword ptr [rbp - 0x77]; ret; 
0x0000000000460938: cli; dec dword ptr [rcx - 0x77]; dec dword ptr [rbp - 0x77]; ret 0xc1e9; 
0x000000000045b547: cli; inc dword ptr [rcx - 0x77]; ret 0x29e9; 
0x000000000045f1f0: cli; inc dword ptr [rcx - 0x77]; ret; 
0x0000000000447cdc: cli; ja 0x47d00; vmovdqu ymmword ptr [rax], ymm0; vmovdqu ymmword ptr [rax + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000447c7c: cli; ja 0x47d09; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044b255: cli; ja 0x4b300; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b1e9: cli; ja 0x4b30d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044ba95: cli; ja 0x4bb00; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044ba39: cli; ja 0x4bb09; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000446248: cli; jb 0x4625a; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000436dcb: cli; jg 0x36dd5; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000043fe0b: cli; jg 0x3fe25; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000044404b: cli; jg 0x44065; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044626a: cli; jg 0x46274; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000446bad: cli; jg 0x46bb7; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044734b: cli; jg 0x47355; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447dc3: cli; jg 0x47dc6; vmovdqu xmmword ptr [rax + rdx - 0x10], xmm0; vzeroupper; ret; 
0x0000000000447dc7: cli; jg 0x47e0e; adc al, dh; vzeroupper; ret; 
0x00000000004487fd: cli; jg 0x48807; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044b2b1: cli; jg 0x4b2bb; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000471855: cli; jg 0x71867; xchg eax, esp; ret 0xca08; 
0x0000000000457460: cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000047a177: cli; jmp qword ptr [rsi + 0x48]; 
0x0000000000457f70: cli; jmp qword ptr [rsi + 0x49]; 
0x0000000000458b01: cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000457510: cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004582cc: cli; jmp qword ptr [rsi - 0x70]; 
0x000000000041b7ca: cli; lahf; or al, byte ptr [rax]; ret; 
0x0000000000455fa3: cli; lea rax, [rip + 0x702b5]; ret; 
0x0000000000464822: cli; mov dh, 0xfb; jmp qword ptr [rsi + 0x2e]; 
0x000000000042e6d8: cli; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000450283: cli; mov eax, 0x18; syscall; 
0x0000000000450283: cli; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x50294; ret; 
0x0000000000451253: cli; mov eax, 0x1c; syscall; 
0x0000000000451253: cli; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x51264; ret; 
0x000000000048e3b3: cli; mov eax, 0x26; syscall; 
0x000000000048e3b3: cli; mov eax, 0x26; syscall; cmp rax, -0x1000; ja 0x8e3c8; ret; 
0x000000000044fb53: cli; mov eax, 0x27; syscall; 
0x000000000044fb53: cli; mov eax, 0x27; syscall; ret; 
0x0000000000479a43: cli; mov eax, 0x3f; syscall; 
0x0000000000479a43: cli; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x79a54; ret; 
0x0000000000452b53: cli; mov eax, 0x63; syscall; 
0x0000000000452b53: cli; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x52b64; ret; 
0x0000000000479a73: cli; mov eax, 0x66; syscall; 
0x0000000000479a73: cli; mov eax, 0x66; syscall; ret; 
0x0000000000479a93: cli; mov eax, 0x68; syscall; 
0x0000000000479a93: cli; mov eax, 0x68; syscall; ret; 
0x0000000000479a83: cli; mov eax, 0x6b; syscall; 
0x0000000000479a83: cli; mov eax, 0x6b; syscall; ret; 
0x0000000000479aa3: cli; mov eax, 0x6c; syscall; 
0x0000000000479aa3: cli; mov eax, 0x6c; syscall; ret; 
0x0000000000479843: cli; mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000479ab3: cli; mov eax, 0x8f; syscall; 
0x0000000000479ab3: cli; mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x79ac4; ret; 
0x0000000000479ae3: cli; mov eax, 0x90; syscall; 
0x0000000000479ae3: cli; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x79af4; ret; 
0x0000000000479b13: cli; mov eax, 0x91; syscall; 
0x0000000000479b13: cli; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x79b24; ret; 
0x0000000000479b43: cli; mov eax, 0x92; syscall; 
0x0000000000479b43: cli; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x79b54; ret; 
0x0000000000479b73: cli; mov eax, 0x93; syscall; 
0x0000000000479b73: cli; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x79b84; ret; 
0x0000000000451223: cli; mov eax, 0xa; syscall; 
0x0000000000451223: cli; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x51234; ret; 
0x00000000004511f3: cli; mov eax, 0xb; syscall; 
0x00000000004511f3: cli; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x51204; ret; 
0x0000000000451033: cli; mov eax, 0xc; syscall; 
0x0000000000418683: cli; mov eax, 0xffffffff; ret; 
0x0000000000450fc3: cli; mov eax, 1; syscall; 
0x0000000000450fc3: cli; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x50fd8; ret; 
0x0000000000450d73: cli; mov eax, 3; syscall; 
0x0000000000450d73: cli; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x50d88; ret; 
0x0000000000450623: cli; mov eax, 8; syscall; 
0x0000000000450623: cli; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x50638; ret; 
0x0000000000419b53: cli; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000475e13: cli; mov eax, dword ptr [rdi]; test al, 2; je 0x75e20; xor eax, eax; ret; 
0x0000000000495923: cli; mov eax, dword ptr [rdi]; test eax, eax; jne 0x95930; ret; 
0x0000000000495c73: cli; mov eax, dword ptr [rdi]; test eax, eax; jne 0x95c80; ret; 
0x0000000000488b13: cli; mov eax, dword ptr [rip + 0x437a6]; ret; 
0x0000000000456cb3: cli; mov eax, dword ptr [rip + 0x75926]; test eax, eax; je 0x56cc0; ret; 
0x0000000000452a33: cli; mov eax, dword ptr [rip + 0x79886]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x00000000004504e3: cli; mov eax, dword ptr fs:[0x18]; test eax, eax; jne 0x50500; syscall; 
0x000000000042e6d2: cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004931d3: cli; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000479e33: cli; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000450373: cli; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000451193: cli; mov r10d, ecx; test r9d, 0xfff; jne 0x511b0; mov eax, 9; syscall; 
0x0000000000464fe3: cli; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x0000000000465003: cli; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000465023: cli; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000464fc3: cli; mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000419193: cli; mov rax, -1; ret; 
0x0000000000485c23: cli; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000485c33: cli; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000419ed3: cli; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000493143: cli; mov rax, qword ptr [rdi + 0x90]; ret; 
0x00000000004931a3: cli; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000473a13: cli; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x73a28; ret; 
0x00000000004931e3: cli; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x0000000000493243: cli; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x0000000000493233: cli; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004931f3: cli; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000041b793: cli; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x1b7a0; ret; 
0x000000000041b963: cli; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x1b970; ret; 
0x000000000041b7d3: cli; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x1b7e0; ret; 
0x0000000000474ae3: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x51fd3], eax; ret; 
0x00000000004747c3: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x522ef], eax; ret; 
0x00000000004747b3: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x522fb], eax; ret; 
0x00000000004747a3: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x52307], eax; ret; 
0x0000000000474793: cli; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x52313], eax; ret; 
0x0000000000474af3: cli; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x51fd2], rax; ret; 
0x000000000041ba53: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d46], 1; mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041ba33: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d66], 1; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba13: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d86], 1; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041ba73: cli; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xb07b6], eax; ret; 
0x000000000041b7f3: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa9fe1], rax; ret; 
0x000000000041b783: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa9fe9], rax; ret; 
0x000000000041b773: cli; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xaa001], rax; ret; 
0x0000000000461e83: cli; mov rax, qword ptr [rip + 0x6a7bd]; ret; 
0x00000000004536a3: cli; mov rax, qword ptr [rip + 0x73cbd]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x73ca3]; mov qword ptr [rsi], rax; ret; 
0x0000000000458243: cli; mov rax, qword ptr [rip + 0x743bd]; ret; 
0x0000000000458233: cli; mov rax, qword ptr [rip + 0x743c5]; ret; 
0x000000000044fa73: cli; mov rax, qword ptr [rip + 0x7500d]; test rax, rax; je 0x4fa98; sub rsp, 8; call rax; 
0x0000000000451103: cli; mov rax, qword ptr [rip + 0x7506d]; test rax, rax; je 0x51111; ret; 
0x0000000000419eb3: cli; mov rax, qword ptr [rip + 0xab2a5]; ret; 
0x000000000041b6e3: cli; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000419ee3: cli; mov rax, rdi; ret; 
0x00000000004806c3: cli; mov rcx, qword ptr [rip + 0x4c1d5]; cmp rcx, rdi; je 0x806d8; ret; 
0x0000000000485be3: cli; mov rdi, qword ptr [rip + 0x46d25]; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x85c00; ret; 
0x0000000000466cd1: cli; mov rdi, rax; cmp rdx, rcx; jae 0x66cbc; mov rax, r8; ret; 
0x000000000040f41f: cli; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x0000000000415ef5: cli; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000471108: cli; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000459963: cli; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000042b0b9: cli; movzx edx, dl; sub eax, edx; ret; 
0x00000000004295e6: cli; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000446274: cli; or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004101fa: cli; out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x0000000000495f51: cli; push rax; jne 0x95f65; xor eax, eax; ret; 
0x0000000000447b26: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447cad: cli; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x00000000004581c2: cli; ret 0xfffa; 
0x00000000004016c3: cli; ret; 
0x000000000041a9c3: cli; setae al; ret; 
0x000000000046296c: cli; sub al, 0xf; xchg eax, esp; ret 0xd108; 
0x00000000004979b3: cli; sub rsp, 8; add rsp, 8; ret; 
0x0000000000417d73: cli; test byte ptr [rdi], 0x80; jne 0x17d80; ret; 
0x0000000000488693: cli; test byte ptr [rip + 0x43d33], 0x10; lea rdx, [rip + 0x11e]; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000422233: cli; test byte ptr [rip + 0xaa193], 0x10; lea rdx, [rip + 0x23e1e]; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x000000000043f369: cli; test rdx, rdx; je 0x3f380; bsf rax, rdx; ret; 
0x000000000043f30c: cli; test rdx, rdx; je 0x3f390; bsf rax, rdx; ret; 
0x000000000043f538: cli; test rdx, rdx; je 0x3f560; bsf rax, rdx; ret; 
0x000000000043f4c8: cli; test rdx, rdx; je 0x3f570; bsf rax, rdx; ret; 
0x000000000044ef48: cli; test rdx, rdx; je 0x4ef70; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044eedd: cli; test rdx, rdx; je 0x4ef80; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004784c9: cli; test rdx, rdx; je 0x784e0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000478470: cli; test rdx, rdx; je 0x784f0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000447b13: cli; test rdx, rdx; jne 0x47b1d; mov rax, rdi; ret; 
0x000000000043f433: cli; test rsi, rsi; jne 0x3f43d; xor rax, rax; ret; 
0x000000000044ee33: cli; test rsi, rsi; jne 0x4ee3d; xor rax, rax; ret; 
0x0000000000437231: cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000419113: cli; xor eax, eax; ret; 
0x0000000000450f93: cli; xor eax, eax; syscall; 
0x0000000000450f93: cli; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x50fa8; ret; 
0x0000000000416b33: cli; xor eax, eax; test rdx, rdx; jne 0x16b40; ret; 
0x000000000041ab13: cli; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041ab33: cli; xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000478341: cmc; and ch, 0xf; je 0x78360; add rax, 2; ret; 
0x000000000044c28f: cmc; leave; jne 0x4c231; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c24f: cmc; leave; jne 0x4c231; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000043354a: cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042df5e: cmc; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000433543: cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e0c7: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0e3: cmc; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000445613: cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000445617: cmc; sub eax, edx; ret; 
0x000000000041b983: cmova eax, edx; mov qword ptr [rip + 0xb08ab], rax; ret; 
0x000000000047984d: cmova edx, eax; mov eax, 0xd9; syscall; 
0x000000000047984d: cmova edx, eax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x79860; ret; 
0x000000000041b982: cmova rax, rdx; mov qword ptr [rip + 0xb08ab], rax; ret; 
0x000000000047984c: cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000000047984c: cmova rdx, rax; mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x79860; ret; 
0x000000000041a970: cmovb eax, edx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000044d93a: cmovb eax, esi; ret; 
0x000000000044f3ba: cmovb eax, esi; shr eax, 2; vzeroupper; ret; 
0x000000000043faa7: cmovb eax, esi; vzeroupper; ret; 
0x000000000041a96f: cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000041a9bc: cmovbe edx, eax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000041a9bb: cmovbe rdx, rax; xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x0000000000480a4f: cmove eax, eax; mov rax, r8; ret; 
0x0000000000452805: cmove eax, edx; add rsp, 8; ret; 
0x0000000000422365: cmove eax, edx; ret; 
0x0000000000493f15: cmove ecx, esi; add rdx, r9; test dil, dil; js 0x93f40; mov qword ptr [r8], rdx; ret; 
0x0000000000495fb5: cmove ecx, esi; add rdx, r9; test dil, dil; js 0x95fe0; mov qword ptr [r8], rdx; ret; 
0x000000000048e49d: cmove edx, eax; call 0x7de50; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048d3f5: cmove esi, eax; mov eax, 0x9e; syscall; 
0x0000000000480a4e: cmove r8, rax; mov rax, r8; ret; 
0x0000000000493f14: cmove r9, rsi; add rdx, r9; test dil, dil; js 0x93f40; mov qword ptr [r8], rdx; ret; 
0x0000000000495fb4: cmove r9, rsi; add rdx, r9; test dil, dil; js 0x95fe0; mov qword ptr [r8], rdx; ret; 
0x0000000000422364: cmove rax, rdx; ret; 
0x0000000000417fb3: cmovg eax, ecx; test rdx, rdx; jne 0x17fa8; ret; 
0x000000000047338b: cmovg eax, ecx; test rdx, rdx; jne 0x73380; ret; 
0x0000000000417fb2: cmovg rax, rcx; test rdx, rdx; jne 0x17fa8; ret; 
0x000000000047338a: cmovg rax, rcx; test rdx, rdx; jne 0x73380; ret; 
0x000000000044c13a: cmovl ecx, dword ptr [rcx + 0x48f9174c]; lea eax, [rdi + rdx]; ret; 
0x000000000044402a: cmovl ecx, dword ptr [rcx + 0x48f9174c]; lea eax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044ac4d: cmovle eax, ecx; ret; 
0x000000000042abed: cmovle eax, ecx; vzeroupper; ret; 
0x000000000044ac4c: cmovle rax, rcx; ret; 
0x000000000042abec: cmovle rax, rcx; vzeroupper; ret; 
0x0000000000493218: cmovne eax, dword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000414594: cmovne eax, ecx; ret; 
0x000000000043f06a: cmovne eax, ecx; vzeroupper; ret; 
0x000000000044940a: cmovne eax, ecx; xtest; je 0x49416; vzeroall; ret; 
0x000000000044ee1e: cmovne eax, edx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000473462: cmovne eax, edx; mov dword ptr [rbx + 0x74], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041858a: cmovne eax, edx; mov dword ptr [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000042164a: cmovne eax, edx; ret; 
0x000000000042b859: cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x0000000000476fc1: cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000474a8b: cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x0000000000476fc5: cmovne esi, edx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000493217: cmovne rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000414593: cmovne rax, rcx; ret; 
0x000000000043f069: cmovne rax, rcx; vzeroupper; ret; 
0x0000000000449409: cmovne rax, rcx; xtest; je 0x49416; vzeroall; ret; 
0x000000000044ee1d: cmovne rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000421649: cmovne rax, rdx; ret; 
0x0000000000476fc0: cmovne rcx, rdi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x0000000000476fc4: cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000046c5a5: cmovs eax, edi; or byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rdi + 0x1f88307], al; jg 0x6c5c0; ret; 
0x0000000000459970: cmovs eax, edx; ret; 
0x0000000000436dd9: cmovs ecx, dword ptr [rbx + 0x498b4836]; clc; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000041c6e6: cmovs ecx, dword ptr [rbx - 0x173ef7be]; add al, 0x39; ret; 
0x00000000004192b8: cmovs edi, dword ptr [rcx]; int1; ja 0x192b0; lea eax, [rdx + rdi]; ret; 
0x0000000000474348: cmovs edi, dword ptr [rcx]; int1; ja 0x74340; lea eax, [rdx + rdi]; ret; 
0x00000000004933dd: cmp ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000446daa: cmp ah, al; vzeroupper; ret; 
0x000000000044c8a1: cmp ah, byte ptr [rax]; sub eax, edx; ret; 
0x0000000000425ef8: cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x000000000044617a: cmp ah, byte ptr [rbx - 0x25]; cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000043c6da: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d23a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ca1a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043c1fa: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000043cd5a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043c53a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043bd1a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043cefa: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000043c05a: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043c190: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ce90: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c9b0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d1d0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c4d0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043bff0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ccf0: cmp ah, byte ptr [rbx - 0x3f]; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x00000000004888b6: cmp ah, byte ptr [rbx]; adc dh, byte ptr [rbx - 0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000422455: cmp al, 0; add byte ptr [rax - 0x73], cl; adc eax, 0x5551; cmovne rax, rdx; ret; 
0x0000000000401cb5: cmp al, 0; add byte ptr [rax], al; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000422160: cmp al, 0x12; add byte ptr [rax], al; lea rdx, [rip + 0x2935]; cmovne rax, rdx; ret; 
0x0000000000418187: cmp al, 0x24; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004513f7: cmp al, 0x24; call rbx; 
0x000000000040a126: cmp al, 0x24; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x00000000004799fd: cmp al, 0x48; add esp, 0xa8; pop rbp; pop r12; ret; 
0x000000000041270d: cmp al, 0x48; mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x0000000000403722: cmp al, 0xc; je 0x30c8; xor esi, esi; mov edi, 0x3003; mov eax, 0x9e; syscall; 
0x0000000000422ea7: cmp al, 2; add byte ptr [rax - 0x73], cl; add eax, 0x23c8f; cmove rax, rdx; ret; 
0x00000000004885fe: cmp al, 4; add byte ptr [rbx + 0x327f01f8], al; pop rbp; ret; 
0x0000000000493182: cmp al, 8; jne 0x1618; mov qword ptr [rcx], rdx; ret; 
0x0000000000447f9e: cmp al, byte ptr [rbx + 0x3c7701fa]; jb 0x47f84; mov byte ptr [rax], sil; ret; 
0x0000000000401930: cmp al, byte ptr [rbx + 0x7a7401e8]; and ebx, 0xfff; lea rax, [rbx + 1]; pop rbx; ret; 
0x00000000004538e4: cmp al, byte ptr [rdi]; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004230b7: cmp al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x23a4f; cmove rax, rdx; ret; 
0x0000000000403084: cmp al, byte ptr [rip + 0x1be4e800]; add eax, 0xee894800; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x000000000044597e: cmp al, byte ptr [rsi - 1]; jne 0x45af5; xor eax, eax; ret; 
0x00000000004826df: cmp al, ch; sti; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000445a32: cmp al, cl; jne 0x45af5; cmp eax, ecx; jne 0x45af5; xor eax, eax; ret; 
0x0000000000445aef: cmp al, cl; jne 0x45af5; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x000000000042a8d6: cmp al, dh; ret; 
0x000000000042a8d5: cmp al, r14b; ret; 
0x00000000004854c3: cmp bh, 9; jbe 0x854b0; cmp esi, eax; je 0x85420; sub eax, esi; ret; 
0x00000000004475ce: cmp bh, bh; ret; 
0x00000000004609d7: cmp bh, dl; jmp qword ptr [rsi + 0xf]; 
0x0000000000472b60: cmp bl, ch; movabs dword ptr [0xc483480000441f0f], eax; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x0000000000418648: cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000047a6f8: cmp byte ptr [r8 + 8], 0x2f; jne 0x7a6bf; leave; mov eax, 1; ret; 
0x0000000000412c85: cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000418e34: cmp byte ptr [r9 - 0x3b7cb7fd], cl; adc byte ptr [rax + 1], bh; pop rbx; ret; 
0x0000000000489db3: cmp byte ptr [rax + 0x39], cl; ret 0x1776; 
0x0000000000494ba6: cmp byte ptr [rax + 0x39], cl; ret 0x3c74; 
0x000000000047bd73: cmp byte ptr [rax + 0x39], cl; ret 0x4776; 
0x0000000000494bdb: cmp byte ptr [rax + 0x39], cl; ret 0xcb75; 
0x000000000040e8c3: cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000042a917: cmp byte ptr [rax + 1], cl; clc; ret; 
0x000000000047a6f9: cmp byte ptr [rax + 8], 0x2f; jne 0x7a6bf; leave; mov eax, 1; ret; 
0x000000000048dac3: cmp byte ptr [rax - 0x39], cl; ret; 
0x000000000045da60: cmp byte ptr [rax - 0x75], cl; je 0x5da89; push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000412c86: cmp byte ptr [rax - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000447c22: cmp byte ptr [rax - 0x77], cl; jl 0x47c37; clc; ret; 
0x0000000000447dd2: cmp byte ptr [rax - 0x77], cl; jl 0x47de7; clc; vzeroupper; ret; 
0x0000000000447fd2: cmp byte ptr [rax - 0x77], cl; jl 0x47fe7; clc; ret; 
0x000000000044bbb2: cmp byte ptr [rax - 0x77], cl; jl 0x4bbc7; clc; ret; 
0x0000000000454399: cmp byte ptr [rax - 0x77], cl; mov byte ptr [rdx + 0x50], 1; ret; 
0x0000000000454254: cmp byte ptr [rax - 0x77], cl; push rax; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000046b0a7: cmp byte ptr [rax - 0x7d], cl; ret; 
0x000000000044c89c: cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x0000000000425ef3: cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042a906: cmp byte ptr [rax], ah; ret; 
0x00000000004185c7: cmp byte ptr [rax], al; je 0x185d0; ret; 
0x0000000000490f51: cmp byte ptr [rax], al; je 0x90fa4; add rsp, 0x18; ret; 
0x00000000004460ae: cmp byte ptr [rax], al; ret 0xf66; 
0x000000000043ea14: cmp byte ptr [rax], dh; cmovne rax, rdx; ret; 
0x000000000042a8f6: cmp byte ptr [rax], dl; ret; 
0x000000000042a8f5: cmp byte ptr [rax], r10b; ret; 
0x000000000044c89b: cmp byte ptr [rax], r12b; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x0000000000425ef2: cmp byte ptr [rax], r12b; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000042a905: cmp byte ptr [rax], r12b; ret; 
0x000000000043ea13: cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000475cb7: cmp byte ptr [rbp + 0x31], al; sar byte ptr [rsi + 0x80], cl; mov rdi, rbp; mov eax, r8d; syscall; 
0x00000000004542ee: cmp byte ptr [rbp - 0x6af0be37], al; ret; 
0x000000000041b740: cmp byte ptr [rbx + 0x17408f8], al; ret; 
0x0000000000474736: cmp byte ptr [rbx + 0x17408fa], al; ret; 
0x0000000000417cad: cmp byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000418649: cmp byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000414244: cmp byte ptr [rbx + 0x5d], bl; ret; 
0x000000000048e12b: cmp byte ptr [rcx + rcx*4 - 0x20], cl; pop rbp; pop r12; ret; 
0x000000000040f41c: cmp byte ptr [rcx + rcx*4 - 6], cl; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x0000000000418e35: cmp byte ptr [rcx - 0x3b7cb7fd], cl; adc byte ptr [rax + 1], bh; pop rbx; ret; 
0x0000000000484b70: cmp byte ptr [rcx - 0x7d], cl; ret 0x4908; 
0x00000000004192b4: cmp byte ptr [rcx], 0xa; je 0x192c8; cmp rcx, rsi; ja 0x192b0; lea eax, [rdx + rdi]; ret; 
0x000000000042ad86: cmp byte ptr [rcx], 0xc2; jbe 0x2ada0; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044adc6: cmp byte ptr [rcx], 0xc2; jbe 0x4add1; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044db26: cmp byte ptr [rcx], 0xc2; jbe 0x4db31; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000478086: cmp byte ptr [rcx], 0xc2; jbe 0x780a0; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000040eda4: cmp byte ptr [rcx], ch; ret; 
0x0000000000422d04: cmp byte ptr [rdx + rax + 0x440f4800], ch; ret 0xfc3; 
0x000000000049312e: cmp byte ptr [rdx + rsi], 8; jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x0000000000423297: cmp byte ptr [rdx], al; add byte ptr [rax - 0x73], cl; add eax, 0x2389f; cmove rax, rdx; ret; 
0x0000000000453634: cmp byte ptr [rip + 0x73d45], 0; jne 0x53650; mov r8, qword ptr [rip + 0x73d44]; mov rax, r8; ret; 
0x000000000041fa34: cmp byte ptr [rip + 0xac7e5], 0; jne 0x1fa40; ret; 
0x0000000000422d84: cmp byte ptr [rsi - 0x5c8b0000], al; ret; 
0x000000000046559d: cmp byte ptr [rsi - 0x70], ah; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x0000000000423296: cmp byte ptr ss:[rdx], al; add byte ptr [rax - 0x73], cl; add eax, 0x2389f; cmove rax, rdx; ret; 
0x000000000042c52a: cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000043f207: cmp ch, al; mov ch, 0x74; fcmovnb st(0), st(5); std; xlatb; ret; 
0x000000000047a150: cmp ch, al; sub dh, byte ptr [rax - 8]; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 1], ecx; ret; 
0x000000000044617d: cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000445bf4: cmp cl, byte ptr [rax + rdx + 2]; jne 0x45c10; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45bf0; ret; 
0x0000000000445ca4: cmp cl, byte ptr [rax + rdx + 2]; jne 0x45cc0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45ca0; ret; 
0x00000000004460c3: cmp cl, byte ptr [rax - 0x7d]; rcl byte ptr [rax], 0x29; cmp edx, ecx; jle 0x460e4; movsxd rax, ecx; ret; 
0x00000000004928a2: cmp cl, byte ptr [rax - 0x7d]; ret 0x4801; 
0x0000000000488115: cmp cx, 0x7fff; jne 0x880fc; mov eax, 1; ret; 
0x00000000004939b8: cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000044673e: cmp dh, al; ret; 
0x000000000044c20f: cmp dh, byte ptr [rax]; jne 0x4c231; ret; 
0x000000000044c265: cmp dh, byte ptr [rdi + rax + 0x20]; jne 0x4c231; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c3f5: cmp dh, byte ptr [rdi + rax + 0x20]; jne 0x4c3d9; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c3cd: cmp dh, byte ptr [rdi + rax + 0x40]; jne 0x4c3d9; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c225: cmp dh, byte ptr [rdi + rax + 0x60]; jne 0x4c231; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000043ee47: cmp dh, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000043efe1: cmp dh, byte ptr [rdi + rax]; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000044c3e5: cmp dh, byte ptr [rdi + rax]; jne 0x4c3d9; lea rax, [rdi + rax]; ret; 
0x000000000044c446: cmp dh, byte ptr [rdx + rax]; jne 0x4c3d9; add rax, rdx; ret; 
0x000000000043f062: cmp dh, byte ptr [rdx + rax]; lea rax, [rdx + rax]; cmovne rax, rcx; vzeroupper; ret; 
0x00000000004854c2: cmp dil, 9; jbe 0x854b0; cmp esi, eax; je 0x85420; sub eax, esi; ret; 
0x000000000044625a: cmp dl, 0x20; jb 0x46269; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000446247: cmp dl, 0x40; jb 0x4625a; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000495f50: cmp dl, 0x50; jne 0x95f65; xor eax, eax; ret; 
0x00000000004932fc: cmp dl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4c01; 
0x0000000000436e0f: cmp dl, 1; jb 0x36e18; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000044629e: cmp dl, 1; jb 0x462a5; mov byte ptr [rdi], cl; ret; 
0x0000000000446291: cmp dl, 2; jb 0x4629e; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000446286: cmp dl, 4; jb 0x46291; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000446273: cmp dl, 8; jb 0x46282; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000473a1c: cmp dword ptr [rax + 0x30], 0; je 0x73a28; ret; 
0x0000000000453305: cmp dword ptr [rax + 8], 0; je 0x53310; ret; 
0x0000000000465aad: cmp dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000047a6bb: cmp dword ptr [rax], eax; je 0x7a6f8; leave; xor eax, eax; ret; 
0x0000000000474942: cmp dword ptr [rax], eax; jns 0x748cf; mov eax, 0x6e; ret; 
0x00000000004797de: cmp dword ptr [rbx + 0x31d2313b], ecx; imul al; outsb dx, byte ptr ss:[rsi]; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000482a68: cmp dword ptr [rbx + 8], 0x25; jne 0x82a81; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x0000000000433078: cmp dword ptr [rbx - 1], -1; dec dword ptr [rax - 0x7f]; ret 0x80; 
0x000000000041abe1: cmp dword ptr [rbx - 8], eax; jne 0x1abc0; mov rdx, qword ptr [rbp]; test rdx, rdx; je 0x1abc0; call rdx; 
0x0000000000490f4f: cmp dword ptr [rcx + 0x38], 0; je 0x90fa4; add rsp, 0x18; ret; 
0x0000000000474941: cmp dword ptr [rcx], 0; jns 0x748cf; mov eax, 0x6e; ret; 
0x0000000000474344: cmp dword ptr [rcx], 0xa; je 0x74358; cmp rcx, rsi; ja 0x74340; lea eax, [rdx + rdi]; ret; 
0x00000000004185c5: cmp dword ptr [rdi + 0x38], 0; je 0x185d0; ret; 
0x0000000000475696: cmp dword ptr [rdi + 8], eax; jne 0x755c3; sub dword ptr [rdi + 4], 1; je 0x755e8; xor eax, eax; ret; 
0x00000000004747d4: cmp dword ptr [rdi], 1; je 0x747e0; ret; 
0x0000000000464f90: cmp dword ptr [rdi], esi; je 0x64f98; ret; 
0x0000000000414591: cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x000000000047de3d: cmp dword ptr [rdx + 0xc], 0x554e47; jne 0x7de10; ret; 
0x000000000047de37: cmp dword ptr [rdx + 8], 5; jne 0x7de10; cmp dword ptr [rdx + 0xc], 0x554e47; jne 0x7de10; ret; 
0x0000000000490db1: cmp dword ptr [rdx], eax; add bl, dh; divps xmm0, xmmword ptr [rip + 0x239e8]; ret; 
0x00000000004192b5: cmp dword ptr [rdx], ecx; je 0x192c8; cmp rcx, rsi; ja 0x192b0; lea eax, [rdx + rdi]; ret; 
0x0000000000474345: cmp dword ptr [rdx], ecx; je 0x74358; cmp rcx, rsi; ja 0x74340; lea eax, [rdx + rdi]; ret; 
0x0000000000453379: cmp dword ptr [rip + 0x78ef8], 0; je 0x533a0; lea rax, [rip + 0x78ee7]; ret; 
0x0000000000414ce5: cmp dword ptr [rip + 0xb02e4], 0; je 0x14cef; ret; 
0x0000000000493d4e: cmp dword ptr [rsi + 8], ecx; ja 0x93d55; sbb eax, eax; ret; 
0x00000000004104f2: cmp dword ptr [rsp + 0x10], eax; jbe 0x109b8; mov rdx, r13; mov rsi, r10; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000048c3db: cmp dword ptr [rsp + 0xc], 1; setne al; mov dword ptr [rip + 0x3ff47], eax; add rsp, 0x18; ret; 
0x0000000000474925: cmp eax, -0x4b; jne 0x74910; neg eax; ret; 
0x000000000041fa07: cmp eax, -1; je 0x1fa18; add rsp, 8; ret; 
0x0000000000403f45: cmp eax, -1; je 0x3ff0; add rsp, 0x98; ret; 
0x0000000000453db6: cmp eax, -1; je 0x53dfa; ret; 
0x000000000041927f: cmp eax, -1; jne 0x19243; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000485bf0: cmp eax, -3; jbe 0x85c00; ret; 
0x00000000004756ac: cmp eax, 0x10; je 0x755a4; mov eax, 0x16; ret; 
0x000000000047566d: cmp eax, 0x21; je 0x756d0; mov eax, 0x16; ret; 
0x0000000000480e51: cmp eax, 0x2de02; mov eax, 0x59; mov rbp, rsp; mov rsi, rbp; syscall; 
0x00000000004587ff: cmp eax, 0x31000460; div byte ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x0000000000475664: cmp eax, 0x31; je 0x75800; cmp eax, 0x21; je 0x756d0; mov eax, 0x16; ret; 
0x000000000041b798: cmp eax, 0x408; jbe 0x1b7a0; ret; 
0x0000000000479dbc: cmp eax, 0x410000; je 0x79df0; mov eax, 0x101; syscall; 
0x0000000000485be6: cmp eax, 0x46d25; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x85c00; ret; 
0x0000000000455f96: cmp eax, 0x47f4d; call 0x44c0; endbr64; lea rax, [rip + 0x702b5]; ret; 
0x0000000000488697: cmp eax, 0x48100004; lea edx, [rip + 0x11e]; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000454aa4: cmp eax, 0x48fe2; mov eax, 0x15; syscall; 
0x0000000000456b3f: cmp eax, 0x5b00075a; ret; 
0x000000000046663a: cmp eax, 0x661c1; call 0x1ab10; xor eax, eax; add rsp, 8; ret; 
0x0000000000453635: cmp eax, 0x73d45; add byte ptr [rbp + 0x13], dh; mov r8, qword ptr [rip + 0x73d44]; mov rax, r8; ret; 
0x000000000040a84b: cmp eax, 0x75e4854d; adc al, 0xeb; sbb eax, 0x441f0f; add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000045337a: cmp eax, 0x78ef8; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x78ee7]; ret; 
0x0000000000453373: cmp eax, 0x78f18; cmp qword ptr [rip + 0x78ef8], 0; je 0x533a0; lea rax, [rip + 0x78ee7]; ret; 
0x000000000041aaee: cmp eax, 0x7fe3d; call 0x14cc0; nop dword ptr [rax + rax]; ret; 
0x000000000041aa89: cmp eax, 0x7fea2; call 0x14cc0; nop dword ptr [rax + rax]; ret; 
0x0000000000477124: cmp eax, 0x89000001; ret 0x8948; 
0x0000000000417ae2: cmp eax, 0x8c48348; ret; 
0x000000000040ac73: cmp eax, 0x8e305; call 0x44c0; xor eax, eax; ret; 
0x000000000041b968: cmp eax, 0xa0; jbe 0x1b970; ret; 
0x000000000041fa35: cmp eax, 0xac7e5; add byte ptr [rbp + 3], dh; ret; 
0x000000000045026d: cmp eax, 0xe80004cf; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000041b7d8: cmp eax, 0xffff; jbe 0x1b7e0; ret; 
0x000000000048d8cd: cmp eax, 0xffffc1fe; call 0x8dab0; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x000000000044fb25: cmp eax, 0xfffff000; ja 0x4fb48; hlt; mov eax, esi; syscall; 
0x000000000045037e: cmp eax, 0xfffff000; ja 0x50390; xor eax, eax; ret; 
0x00000000004504f3: cmp eax, 0xfffff000; ja 0x50550; ret; 
0x0000000000450598: cmp eax, 0xfffff000; ja 0x505f0; ret; 
0x000000000045062c: cmp eax, 0xfffff000; ja 0x50638; ret; 
0x0000000000450d7c: cmp eax, 0xfffff000; ja 0x50d88; ret; 
0x0000000000450f99: cmp eax, 0xfffff000; ja 0x50fa8; ret; 
0x0000000000450fcc: cmp eax, 0xfffff000; ja 0x50fd8; ret; 
0x0000000000451005: cmp eax, 0xfffff000; ja 0x51010; ret; 
0x00000000004511a8: cmp eax, 0xfffff000; ja 0x511d0; ret; 
0x0000000000466698: cmp eax, 0xfffff000; ja 0x666f0; ret; 
0x0000000000475daf: cmp eax, 0xfffff000; ja 0x75dc0; ret; 
0x0000000000479858: cmp eax, 0xfffff000; ja 0x79860; ret; 
0x0000000000479e3f: cmp eax, 0xfffff000; ja 0x79e50; ret; 
0x000000000048e3bc: cmp eax, 0xfffff000; ja 0x8e3c8; ret; 
0x000000000045028c: cmp eax, 0xfffff001; jae 0x50294; ret; 
0x00000000004511fc: cmp eax, 0xfffff001; jae 0x51204; ret; 
0x000000000045122c: cmp eax, 0xfffff001; jae 0x51234; ret; 
0x000000000045125c: cmp eax, 0xfffff001; jae 0x51264; ret; 
0x0000000000452b5c: cmp eax, 0xfffff001; jae 0x52b64; ret; 
0x0000000000479a4c: cmp eax, 0xfffff001; jae 0x79a54; ret; 
0x0000000000479abc: cmp eax, 0xfffff001; jae 0x79ac4; ret; 
0x0000000000479aec: cmp eax, 0xfffff001; jae 0x79af4; ret; 
0x0000000000479b1c: cmp eax, 0xfffff001; jae 0x79b24; ret; 
0x0000000000479b4c: cmp eax, 0xfffff001; jae 0x79b54; ret; 
0x0000000000479b7c: cmp eax, 0xfffff001; jae 0x79b84; ret; 
0x000000000041aa2c: cmp eax, 1; je 0x1aa38; ret; 
0x000000000041bb61: cmp eax, 1; je 0x1bb70; add rsp, 8; ret; 
0x0000000000417ade: cmp eax, 1; jg 0x17b20; add rsp, 8; ret; 
0x0000000000419f66: cmp eax, 1; jg 0x19f70; ret; 
0x000000000041fb08: cmp eax, 1; jg 0x1fb18; pop rbx; pop rbp; pop r12; ret; 
0x0000000000466611: cmp eax, 1; jg 0x66638; xor eax, eax; add rsp, 8; ret; 
0x000000000046c5b0: cmp eax, 1; jg 0x6c5c0; ret; 
0x0000000000479806: cmp eax, 1; jg 0x79828; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000488601: cmp eax, 1; jg 0x88638; pop rbp; ret; 
0x000000000041b97a: cmp eax, 7; mov eax, 0x10; cmova rax, rdx; mov qword ptr [rip + 0xb08ab], rax; ret; 
0x000000000041b741: cmp eax, 8; je 0x1b747; ret; 
0x0000000000466d59: cmp eax, 9; ja 0x66d30; mov rax, r8; ret; 
0x000000000046a05c: cmp eax, dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000453df4: cmp eax, dword ptr [rcx + rsi + 0x10]; jae 0x53dad; xor eax, eax; ret; 
0x0000000000488925: cmp eax, dword ptr [rip + 0x440c5]; jae 0x88939; mov rdx, qword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000044dd94: cmp eax, ebp; sti; xchg eax, ebx; ret; 
0x0000000000456cd6: cmp eax, ebx; je 0x56ce8; mov dword ptr [rip + 0x6ddb0], eax; pop rbx; ret; 
0x0000000000417fb0: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x17fa8; ret; 
0x0000000000473388: cmp eax, ecx; cmovg rax, rcx; test rdx, rdx; jne 0x73380; ret; 
0x00000000004188f9: cmp eax, ecx; jbe 0x18910; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004193b1: cmp eax, ecx; jbe 0x194e0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rdx + 0x18]; 
0x00000000004458d2: cmp eax, ecx; jne 0x45ae0; xor eax, eax; ret; 
0x0000000000445a3a: cmp eax, ecx; jne 0x45af5; xor eax, eax; ret; 
0x0000000000445af3: cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000000451043: cmp eax, edi; jb 0x51050; xor eax, eax; ret; 
0x000000000041a96d: cmp eax, edx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000419fcf: cmp eax, edx; jae 0x19ff8; movzx eax, byte ptr [rax]; ret; 
0x0000000000411c42: cmp eax, edx; jbe 0x11d90; xor esi, esi; mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x0000000000411e41: cmp eax, edx; jbe 0x11e90; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000412524: cmp eax, edx; jbe 0x12559; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x000000000041270a: cmp eax, edx; jbe 0x1274a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000418067: cmp eax, edx; jbe 0x180c8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041815d: cmp eax, edx; jbe 0x18170; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004182ca: cmp eax, edx; jbe 0x18350; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x00000000004184a2: cmp eax, edx; jbe 0x18538; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x0000000000418607: cmp eax, edx; jbe 0x18670; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004186bd: cmp eax, edx; jbe 0x186e8; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418752: cmp eax, edx; jbe 0x187c0; movzx esi, byte ptr [r14]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x0000000000418a38: cmp eax, edx; jbe 0x18c30; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418aaa: cmp eax, edx; jbe 0x18c70; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004191dd: cmp eax, edx; jbe 0x19210; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000419270: cmp eax, edx; jbe 0x19290; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004730c4: cmp eax, edx; jbe 0x730f9; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x00000000004736fd: cmp eax, edx; jbe 0x73740; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000474272: cmp eax, edx; jbe 0x742a0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000474310: cmp eax, edx; jbe 0x74328; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041fbb3: cmp eax, esi; jne 0x1fb80; mov dword ptr [rip + 0xac663], 0; ret; 
0x000000000041a811: cmp ebp, dword ptr [rax - 2]; dec dword ptr [rax - 0x77]; ret; 
0x0000000000412d40: cmp ebp, eax; jbe 0x12d97; mov rax, qword ptr [rsp]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000046ecc1: cmp ebx, 0x15e9ffff; in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000041fa92: cmp ebx, ebp; jne 0x1fa74; pop rbx; pop rbp; pop r12; ret; 
0x000000000044d303: cmp ebx, ecx; jbe 0x4d520; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044d348: cmp ebx, edi; jbe 0x4d520; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; ret; 
0x0000000000450b94: cmp ebx, edi; jmp qword ptr [rsi + 0xf]; 
0x000000000040aacd: cmp ebx, esp; jae 0xaae3; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000422329: cmp ecx, 0x120; je 0x22338; ret; 
0x0000000000422399: cmp ecx, 0x120; je 0x223a8; ret; 
0x0000000000422ca9: cmp ecx, 0x120; je 0x22cb8; ret; 
0x00000000004232c9: cmp ecx, 0x120; je 0x232d8; ret; 
0x0000000000423349: cmp ecx, 0x120; je 0x23358; ret; 
0x00000000004764f9: cmp ecx, 0x120; je 0x76508; ret; 
0x00000000004777d9: cmp ecx, 0x120; je 0x777e8; ret; 
0x0000000000475940: cmp ecx, 0x7fffffff; jne 0x7575c; sub dword ptr [r8 + 4], 1; je 0x758fe; mov eax, 0x83; ret; 
0x0000000000488116: cmp ecx, 0xe0757fff; mov eax, 1; ret; 
0x000000000048d5d6: cmp ecx, dword ptr [rax + 0x28]; jae 0x8d5c0; mov eax, 1; ret; 
0x0000000000482a70: cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x0000000000457498: cmp ecx, dword ptr [rax - 0x7d]; ret; 
0x000000000041b92f: cmp ecx, eax; je 0x1b93a; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004543e7: cmp ecx, eax; jge 0x54378; ret; 
0x0000000000486254: cmp ecx, eax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000454220: cmp ecx, ecx; ja 0x542a0; cmp r9, rdx; jbe 0x5424d; ret; 
0x000000000045435a: cmp ecx, ecx; jbe 0x5437d; ret; 
0x000000000047a6be: cmp ecx, ecx; xor eax, eax; ret; 
0x00000000004806cc: cmp ecx, edi; je 0x806d8; ret; 
0x0000000000454225: cmp ecx, edx; jbe 0x5424d; ret; 
0x00000000004808ce: cmp ecx, edx; jne 0x808a8; mov eax, dword ptr [rcx]; ret; 
0x00000000004192ba: cmp ecx, esi; ja 0x192b0; lea eax, [rdx + rdi]; ret; 
0x000000000047434a: cmp ecx, esi; ja 0x74340; lea eax, [rdx + rdi]; ret; 
0x000000000043fa8e: cmp ecx, esi; jb 0x3f884; mov rax, r8; vzeroupper; ret; 
0x000000000044f3a1: cmp ecx, esi; jb 0x4f124; mov rax, r8; vzeroupper; ret; 
0x000000000048ac2b: cmp ecx, esi; jb 0x8ac06; ret; 
0x0000000000454297: cmp ecx, esi; jge 0x54248; ret; 
0x000000000041fcd7: cmp ecx, esp; jne 0x1feb8; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000474774: cmp edi, 1; je 0x74789; mov rax, qword ptr fs:[0x10]; mov byte ptr [rax + 0x972], 0; ret; 
0x000000000046f91c: cmp edi, eax; jbe 0x71088; mov rsi, qword ptr [rsp + 8]; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp + 0x38]; 
0x0000000000469fe1: cmp edi, ecx; ja 0x69fc8; mov eax, r8d; ret; 
0x00000000004755b7: cmp edi, ecx; jne 0x755c3; test eax, eax; jne 0x758f0; mov eax, 1; ret; 
0x0000000000460937: cmp edi, edx; dec dword ptr [rcx - 0x77]; dec dword ptr [rbp - 0x77]; ret 0xc1e9; 
0x00000000004464db: cmp edi, edx; jb 0x464e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000479bdc: cmp edi, esi; jne 0x79bb8; mov eax, r8d; ret; 
0x00000000004826ad: cmp edi, esi; jne 0x826b8; pop rbx; ret; 
0x000000000046ffea: cmp edx, -1; jmp qword ptr [rsi - 0x70]; 
0x0000000000446551: cmp edx, 0x20; ja 0x465d0; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447b63: cmp edx, 0x20; ja 0x47b80; movups xmmword ptr [rax], xmm0; movups xmmword ptr [rax + rdx - 0x10], xmm0; ret; 
0x0000000000447ae3: cmp edx, 0x20; ja 0x47b89; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000447cdb: cmp edx, 0x40; ja 0x47d00; vmovdqu ymmword ptr [rax], ymm0; vmovdqu ymmword ptr [rax + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000447c7b: cmp edx, 0x40; ja 0x47d09; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044b254: cmp edx, 0x40; ja 0x4b300; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b1e8: cmp edx, 0x40; ja 0x4b30d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044ba94: cmp edx, 0x40; ja 0x4bb00; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044ba38: cmp edx, 0x40; ja 0x4bb09; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x00000000004472d4: cmp edx, 0x80; ja 0x473c0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000447e94: cmp edx, 0x80; ja 0x47f00; vmovdqu64 zmmword ptr [rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000447e38: cmp edx, 0x80; ja 0x47f09; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x000000000043fd16: cmp edx, 1; ja 0x3fdb0; je 0x3fda0; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000447c0f: cmp edx, 1; ja 0x47c30; jb 0x47be7; mov byte ptr [rax], sil; ret; 
0x0000000000447db4: cmp edx, 1; ja 0x47df0; jb 0x47d73; mov byte ptr [rax], sil; vzeroupper; ret; 
0x0000000000447f9f: cmp edx, 1; ja 0x47fe0; jb 0x47f84; mov byte ptr [rax], sil; ret; 
0x000000000044bb95: cmp edx, 1; ja 0x4bbc0; jb 0x4bb7f; mov byte ptr [rax], sil; ret; 
0x000000000044c056: cmp edx, 1; ja 0x4c0f0; je 0x4c0e0; mov byte ptr [rdi], 0; lea rax, [rdi]; ret; 
0x000000000044ce26: cmp edx, 1; ja 0x4cec0; je 0x4ceb0; mov byte ptr [rdi], 0; ret; 
0x00000000004118a1: cmp edx, 1; jg 0x118b0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000475a3a: cmp edx, 1; jg 0x75a88; nop; add rsp, 0x18; ret; 
0x0000000000475b56: cmp edx, 1; jg 0x75bb0; nop; add rsp, 0x18; ret; 
0x0000000000489c54: cmp edx, 1; jg 0x89d08; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000474737: cmp edx, 8; je 0x7473d; ret; 
0x0000000000473b64: cmp edx, dword ptr [rax + 0x18]; jbe 0x73b88; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000048df41: cmp edx, dword ptr [rbx - 4]; jmp qword ptr [rsi + 0x2e]; 
0x000000000044674d: cmp edx, dword ptr [rip + 0x80bc5]; jae 0x46760; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000047984a: cmp edx, eax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x000000000042ad3f: cmp edx, eax; jbe 0x2ada0; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042ad87: cmp edx, eax; jbe 0x2ada0; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044adc7: cmp edx, eax; jbe 0x4add1; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044adab: cmp edx, eax; jbe 0x4add1; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044db27: cmp edx, eax; jbe 0x4db31; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044db11: cmp edx, eax; jbe 0x4db31; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000478032: cmp edx, eax; jbe 0x780a0; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000478087: cmp edx, eax; jbe 0x780a0; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000478ff7: cmp edx, eax; jbe 0x79001; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000478fe3: cmp edx, eax; jbe 0x79001; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000479307: cmp edx, eax; jbe 0x79311; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x00000000004792ee: cmp edx, eax; jbe 0x79311; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000488822: cmp edx, eax; jg 0x88834; pcmpistri xmm1, xmm1, 0x3a; cmp edx, ecx; jle 0x888d0; ret; 
0x0000000000478e66: cmp edx, eax; lea rax, [rdi + rax*4]; cmovle rax, rcx; ret; 
0x000000000044ac46: cmp edx, eax; lea rax, [rdi + rax]; cmovle rax, rcx; ret; 
0x000000000042abe6: cmp edx, eax; lea rax, [rdi + rax]; cmovle rax, rcx; vzeroupper; ret; 
0x000000000044d16f: cmp edx, ebx; jae 0x4d520; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000048a354: cmp edx, ebx; jne 0x8a2e0; ret; 
0x0000000000466cd6: cmp edx, ecx; jae 0x66cbc; mov rax, r8; ret; 
0x00000000004460ca: cmp edx, ecx; jle 0x460e4; movsxd rax, ecx; ret; 
0x000000000048882c: cmp edx, ecx; jle 0x888d0; ret; 
0x000000000041a9c2: cmp edx, edi; setae al; ret; 
0x0000000000477aa7: cmp edx, esi; je 0x77aaf; test edx, edx; jne 0x77aa0; ret; 
0x000000000045b81e: cmp esi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000049295a: cmp esi, -1; jmp qword ptr [rsi - 0x70]; 
0x000000000044d6b0: cmp esi, 0x20; jbe 0x4d6d0; test eax, eax; je 0x4d720; tzcnt eax, eax; ret; 
0x000000000045e962: cmp esi, 0x860f07ff; xchg eax, esp; add byte ptr [rax], al; add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x000000000046267c: cmp esi, 3; je 0x62688; pop rbx; ret; 
0x000000000044f790: cmp esi, 8; jbe 0x4f7b0; test eax, eax; je 0x4f800; tzcnt eax, eax; ret; 
0x0000000000450dd9: cmp esi, 9; je 0x50e08; mov eax, 0x48; syscall; 
0x0000000000450e68: cmp esi, 9; je 0x50e98; mov eax, 0x48; syscall; 
0x00000000004797e0: cmp esi, dword ptr [rcx]; sal byte ptr [rcx], cl; imul al; outsb dx, byte ptr ss:[rsi]; std; jmp qword ptr [rsi + 0xf]; 
0x000000000044d938: cmp esi, eax; cmovb eax, esi; ret; 
0x000000000044f3b8: cmp esi, eax; cmovb eax, esi; shr eax, 2; vzeroupper; ret; 
0x000000000043faa5: cmp esi, eax; cmovb eax, esi; vzeroupper; ret; 
0x000000000044d928: cmp esi, eax; ja 0x4d727; mov eax, esi; ret; 
0x000000000044fa4b: cmp esi, eax; ja 0x4f807; mov eax, esi; ret; 
0x000000000044d860: cmp esi, eax; jb 0x4d83b; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d82e: cmp esi, eax; jb 0x4d83b; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d8e7: cmp esi, eax; jb 0x4d8f4; sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044d8ac: cmp esi, eax; jb 0x4d8f4; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044f91c: cmp esi, eax; jb 0x4f92d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044f95d: cmp esi, eax; jb 0x4f92d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000044fa07: cmp esi, eax; jb 0x4fa18; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x000000000044f9ac: cmp esi, eax; jb 0x4fa18; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004854c8: cmp esi, eax; je 0x85420; sub eax, esi; ret; 
0x0000000000454351: cmp esi, ecx; ja 0x543f0; cmp r9, rcx; jbe 0x5437d; ret; 
0x0000000000416308: cmp esp, edx; jbe 0x16415; mov rdx, r14; mov rsi, r13; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000047a6ba: cmp qword ptr [r8], rax; je 0x7a6f8; leave; xor eax, eax; ret; 
0x0000000000490f4e: cmp qword ptr [r9 + 0x38], 0; je 0x90fa4; add rsp, 0x18; ret; 
0x0000000000473a1b: cmp qword ptr [rax + 0x30], 0; je 0x73a28; ret; 
0x0000000000453304: cmp qword ptr [rax + 8], 0; je 0x53310; ret; 
0x000000000041abe0: cmp qword ptr [rbx - 8], rax; jne 0x1abc0; mov rdx, qword ptr [rbp]; test rdx, rdx; je 0x1abc0; call rdx; 
0x0000000000474940: cmp qword ptr [rcx], 0; jns 0x748cf; mov eax, 0x6e; ret; 
0x00000000004185c4: cmp qword ptr [rdi + 0x38], 0; je 0x185d0; ret; 
0x0000000000464f8f: cmp qword ptr [rdi], rsi; je 0x64f98; ret; 
0x0000000000414590: cmp qword ptr [rdx + 0x48], r8; cmovne eax, ecx; ret; 
0x0000000000453378: cmp qword ptr [rip + 0x78ef8], 0; je 0x533a0; lea rax, [rip + 0x78ee7]; ret; 
0x0000000000414ce4: cmp qword ptr [rip + 0xb02e4], 0; je 0x14cef; ret; 
0x0000000000493d4d: cmp qword ptr [rsi + 8], rcx; ja 0x93d55; sbb eax, eax; ret; 
0x00000000004104f1: cmp qword ptr [rsp + 0x10], rax; jbe 0x109b8; mov rdx, r13; mov rsi, r10; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x0000000000464f8e: cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x000000000048a353: cmp r10, r11; jne 0x8a2e0; ret; 
0x000000000044d302: cmp r11, rcx; jbe 0x4d520; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044d347: cmp r11, rdi; jbe 0x4d520; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; ret; 
0x0000000000472b5f: cmp r11b, r13b; movabs dword ptr [0xc483480000441f0f], eax; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x0000000000416307: cmp r12, rdx; jbe 0x16415; mov rdx, r14; mov rsi, r13; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x0000000000446da9: cmp r12b, al; vzeroupper; ret; 
0x0000000000412d3f: cmp r13, rax; jbe 0x12d97; mov rax, qword ptr [rsp]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000044673d: cmp r14b, al; ret; 
0x00000000004475cd: cmp r15b, dil; ret; 
0x0000000000453df3: cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x53dad; xor eax, eax; ret; 
0x0000000000456cd5: cmp r8d, ebx; je 0x56ce8; mov dword ptr [rip + 0x6ddb0], eax; pop rbx; ret; 
0x000000000041b92e: cmp r9, rax; je 0x1b93a; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004543e6: cmp r9, rax; jge 0x54378; ret; 
0x0000000000454359: cmp r9, rcx; jbe 0x5437d; ret; 
0x0000000000454224: cmp r9, rdx; jbe 0x5424d; ret; 
0x0000000000454296: cmp r9, rsi; jge 0x54248; ret; 
0x000000000044fb24: cmp rax, -0x1000; ja 0x4fb48; hlt; mov eax, esi; syscall; 
0x00000000004504f2: cmp rax, -0x1000; ja 0x50550; ret; 
0x0000000000450597: cmp rax, -0x1000; ja 0x505f0; ret; 
0x000000000045062b: cmp rax, -0x1000; ja 0x50638; ret; 
0x0000000000450d7b: cmp rax, -0x1000; ja 0x50d88; ret; 
0x0000000000450f98: cmp rax, -0x1000; ja 0x50fa8; ret; 
0x0000000000450fcb: cmp rax, -0x1000; ja 0x50fd8; ret; 
0x0000000000451004: cmp rax, -0x1000; ja 0x51010; ret; 
0x00000000004511a7: cmp rax, -0x1000; ja 0x511d0; ret; 
0x0000000000466697: cmp rax, -0x1000; ja 0x666f0; ret; 
0x0000000000475dae: cmp rax, -0x1000; ja 0x75dc0; ret; 
0x0000000000479857: cmp rax, -0x1000; ja 0x79860; ret; 
0x0000000000479e3e: cmp rax, -0x1000; ja 0x79e50; ret; 
0x000000000048e3bb: cmp rax, -0x1000; ja 0x8e3c8; ret; 
0x000000000045028b: cmp rax, -0xfff; jae 0x50294; ret; 
0x00000000004511fb: cmp rax, -0xfff; jae 0x51204; ret; 
0x000000000045122b: cmp rax, -0xfff; jae 0x51234; ret; 
0x000000000045125b: cmp rax, -0xfff; jae 0x51264; ret; 
0x0000000000452b5b: cmp rax, -0xfff; jae 0x52b64; ret; 
0x0000000000479a4b: cmp rax, -0xfff; jae 0x79a54; ret; 
0x0000000000479abb: cmp rax, -0xfff; jae 0x79ac4; ret; 
0x0000000000479aeb: cmp rax, -0xfff; jae 0x79af4; ret; 
0x0000000000479b1b: cmp rax, -0xfff; jae 0x79b24; ret; 
0x0000000000479b4b: cmp rax, -0xfff; jae 0x79b54; ret; 
0x0000000000479b7b: cmp rax, -0xfff; jae 0x79b84; ret; 
0x000000000041fa06: cmp rax, -1; je 0x1fa18; add rsp, 8; ret; 
0x0000000000453db5: cmp rax, -1; je 0x53dfa; ret; 
0x0000000000485bef: cmp rax, -3; jbe 0x85c00; ret; 
0x000000000041b797: cmp rax, 0x408; jbe 0x1b7a0; ret; 
0x000000000041b967: cmp rax, 0xa0; jbe 0x1b970; ret; 
0x000000000041b7d7: cmp rax, 0xffff; jbe 0x1b7e0; ret; 
0x000000000041b979: cmp rax, 7; mov eax, 0x10; cmova rax, rdx; mov qword ptr [rip + 0xb08ab], rax; ret; 
0x0000000000466d58: cmp rax, 9; ja 0x66d30; mov rax, r8; ret; 
0x0000000000488924: cmp rax, qword ptr [rip + 0x440c5]; jae 0x88939; mov rdx, qword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000417faf: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x17fa8; ret; 
0x0000000000473387: cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x73380; ret; 
0x00000000004188f8: cmp rax, rcx; jbe 0x18910; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004193b0: cmp rax, rcx; jbe 0x194e0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rdx + 0x18]; 
0x0000000000451042: cmp rax, rdi; jb 0x51050; xor eax, eax; ret; 
0x000000000041a96c: cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000419fce: cmp rax, rdx; jae 0x19ff8; movzx eax, byte ptr [rax]; ret; 
0x0000000000411c41: cmp rax, rdx; jbe 0x11d90; xor esi, esi; mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x0000000000411e40: cmp rax, rdx; jbe 0x11e90; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000412523: cmp rax, rdx; jbe 0x12559; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x0000000000412709: cmp rax, rdx; jbe 0x1274a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000418066: cmp rax, rdx; jbe 0x180c8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041815c: cmp rax, rdx; jbe 0x18170; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004182c9: cmp rax, rdx; jbe 0x18350; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x00000000004184a1: cmp rax, rdx; jbe 0x18538; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x0000000000418606: cmp rax, rdx; jbe 0x18670; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004186bc: cmp rax, rdx; jbe 0x186e8; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418751: cmp rax, rdx; jbe 0x187c0; movzx esi, byte ptr [r14]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x0000000000418a37: cmp rax, rdx; jbe 0x18c30; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418aa9: cmp rax, rdx; jbe 0x18c70; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004191dc: cmp rax, rdx; jbe 0x19210; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041926f: cmp rax, rdx; jbe 0x19290; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004730c3: cmp rax, rdx; jbe 0x730f9; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x00000000004736fc: cmp rax, rdx; jbe 0x73740; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000474271: cmp rax, rdx; jbe 0x742a0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000047430f: cmp rax, rdx; jbe 0x74328; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041fbb2: cmp rax, rsi; jne 0x1fb80; mov dword ptr [rip + 0xac663], 0; ret; 
0x000000000040aacc: cmp rbx, r12; jae 0xaae3; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000041fa91: cmp rbx, rbp; jne 0x1fa74; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d5d5: cmp rcx, qword ptr [rax + 0x28]; jae 0x8d5c0; mov eax, 1; ret; 
0x000000000041fcd6: cmp rcx, r12; jne 0x1feb8; add rsp, 0x18; pop rbp; pop r12; ret; 
0x000000000045421f: cmp rcx, r9; ja 0x542a0; cmp r9, rdx; jbe 0x5424d; ret; 
0x0000000000486253: cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x00000000004806cb: cmp rcx, rdi; je 0x806d8; ret; 
0x00000000004808cd: cmp rcx, rdx; jne 0x808a8; mov eax, dword ptr [rcx]; ret; 
0x00000000004192b9: cmp rcx, rsi; ja 0x192b0; lea eax, [rdx + rdi]; ret; 
0x0000000000474349: cmp rcx, rsi; ja 0x74340; lea eax, [rdx + rdi]; ret; 
0x000000000043fa8d: cmp rcx, rsi; jb 0x3f884; mov rax, r8; vzeroupper; ret; 
0x000000000044f3a0: cmp rcx, rsi; jb 0x4f124; mov rax, r8; vzeroupper; ret; 
0x000000000048ac2a: cmp rcx, rsi; jb 0x8ac06; ret; 
0x000000000046f91b: cmp rdi, rax; jbe 0x71088; mov rsi, qword ptr [rsp + 8]; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp + 0x38]; 
0x00000000004464da: cmp rdi, rdx; jb 0x464e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000479bdb: cmp rdi, rsi; jne 0x79bb8; mov eax, r8d; ret; 
0x00000000004826ac: cmp rdi, rsi; jne 0x826b8; pop rbx; ret; 
0x0000000000446550: cmp rdx, 0x20; ja 0x465d0; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447b62: cmp rdx, 0x20; ja 0x47b80; movups xmmword ptr [rax], xmm0; movups xmmword ptr [rax + rdx - 0x10], xmm0; ret; 
0x0000000000447ae2: cmp rdx, 0x20; ja 0x47b89; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000447cda: cmp rdx, 0x40; ja 0x47d00; vmovdqu ymmword ptr [rax], ymm0; vmovdqu ymmword ptr [rax + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000447c7a: cmp rdx, 0x40; ja 0x47d09; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044b253: cmp rdx, 0x40; ja 0x4b300; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b1e7: cmp rdx, 0x40; ja 0x4b30d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044ba93: cmp rdx, 0x40; ja 0x4bb00; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044ba37: cmp rdx, 0x40; ja 0x4bb09; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x00000000004472d3: cmp rdx, 0x80; ja 0x473c0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000447e93: cmp rdx, 0x80; ja 0x47f00; vmovdqu64 zmmword ptr [rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000447e37: cmp rdx, 0x80; ja 0x47f09; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000473b63: cmp rdx, qword ptr [rax + 0x18]; jbe 0x73b88; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000044674c: cmp rdx, qword ptr [rip + 0x80bc5]; jae 0x46760; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044d16e: cmp rdx, r11; jae 0x4d520; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000479849: cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000466cd5: cmp rdx, rcx; jae 0x66cbc; mov rax, r8; ret; 
0x000000000041a9c1: cmp rdx, rdi; setae al; ret; 
0x000000000044d6af: cmp rsi, 0x20; jbe 0x4d6d0; test eax, eax; je 0x4d720; tzcnt eax, eax; ret; 
0x000000000044f78f: cmp rsi, 8; jbe 0x4f7b0; test eax, eax; je 0x4f800; tzcnt eax, eax; ret; 
0x0000000000454350: cmp rsi, r9; ja 0x543f0; cmp r9, rcx; jbe 0x5437d; ret; 
0x000000000044d937: cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000044f3b7: cmp rsi, rax; cmovb eax, esi; shr eax, 2; vzeroupper; ret; 
0x000000000043faa4: cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000044d927: cmp rsi, rax; ja 0x4d727; mov eax, esi; ret; 
0x000000000044fa4a: cmp rsi, rax; ja 0x4f807; mov eax, esi; ret; 
0x000000000044c20e: cmp sil, byte ptr [rax]; jne 0x4c231; ret; 
0x000000000044c264: cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x4c231; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c3f4: cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x4c3d9; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c3cc: cmp sil, byte ptr [rdi + rax + 0x40]; jne 0x4c3d9; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c224: cmp sil, byte ptr [rdi + rax + 0x60]; jne 0x4c231; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000043ee46: cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000043efe0: cmp sil, byte ptr [rdi + rax]; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000044c3e4: cmp sil, byte ptr [rdi + rax]; jne 0x4c3d9; lea rax, [rdi + rax]; ret; 
0x000000000044c445: cmp sil, byte ptr [rdx + rax]; jne 0x4c3d9; add rax, rdx; ret; 
0x000000000043f061: cmp sil, byte ptr [rdx + rax]; lea rax, [rdx + rax]; cmovne rax, rcx; vzeroupper; ret; 
0x00000000004910cb: cmpsb byte ptr [rsi], byte ptr [rdi]; mov rdx, qword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x000000000044e3b6: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, 0; add byte ptr [rax - 0x468afb1b], al; ret; 
0x000000000043c816: cmpsb byte ptr [rsi], byte ptr [rdi]; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000423022: cmpsb byte ptr [rsi], byte ptr [rdi]; xchg eax, ebx; or al, byte ptr [rax]; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x000000000043eecd: cmpsd dword ptr [rsi], dword ptr [rdi]; add rax, rdi; vzeroupper; ret; 
0x000000000040e821: cmpsd dword ptr [rsi], dword ptr [rdi]; and dword ptr [rax], eax; add dh, dh; ret; 
0x0000000000479e2a: cmpsd dword ptr [rsi], dword ptr [rdi]; call 0x53280; endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000488b0c: cmpsd dword ptr [rsi], dword ptr [rdi]; cld; call qword ptr [rax - 0x5e1f00d]; mov eax, dword ptr [rip + 0x437a6]; ret; 
0x0000000000475727: cmpxchg dword ptr [r8], edx; jne 0x7570e; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x0000000000475728: cmpxchg dword ptr [rax], edx; jne 0x7570e; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x0000000000488378: cmpxchg dword ptr [rdi], edx; jne 0x883b3; xor eax, eax; ret; 
0x0000000000419f0f: cmpxchg dword ptr [rip + 0xae29a], edx; jne 0x19f30; mov qword ptr [rip + 0xae299], rbx; add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x0000000000401e1f: cpuid; lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xca552], rax; pop rbx; ret; 
0x000000000045d0d4: cwde; add byte ptr [rax], al; add al, ch; ret; 
0x0000000000407998: cwde; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x00000000004904da: cwde; add byte ptr [rax], al; add byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x0000000000492db0: cwde; add dword ptr [rax], eax; add byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004966e2: cwde; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000457bcb: cwde; mov rdi, r12; call rax; 
0x0000000000479a3c: cwde; std; call qword ptr [rax - 0x5e1f00d]; mov eax, 0x3f; syscall; 
0x0000000000441431: dec byte ptr [r8 + 0x29]; ret 0x280f; 
0x0000000000441432: dec byte ptr [rax + 0x29]; ret 0x280f; 
0x000000000044b588: dec byte ptr [rax + 0x29]; stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000447651: dec byte ptr [rax + 0x29]; stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000437386: dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000447ea4: dec byte ptr [rax + 0x7f]; adc dil, r15b; ret; 
0x0000000000447e9e: dec byte ptr [rax + 0x7f]; add byte ptr [rdx - 0x1f], ah; dec byte ptr [rax + 0x7f]; adc dil, r15b; ret; 
0x00000000004475ca: dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x00000000004475bc: dec byte ptr [rax + 0x7f]; ja 0x475c3; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000447441: dec byte ptr [rax + 0x7f]; je 0x4745d; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x00000000004475c3: dec byte ptr [rax + 0x7f]; jg 0x475cb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000447449: dec byte ptr [rax + 0x7f]; jl 0x47465; cld; ret; 
0x0000000000447519: dec byte ptr [rax + 0x7f]; jp 0x4751f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000044f791: dec byte ptr [rax]; jbe 0x4f7b0; test eax, eax; je 0x4f800; tzcnt eax, eax; ret; 
0x0000000000447fc2: dec byte ptr [rax]; jg 0x47fc6; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000447fc8: dec byte ptr [rax]; jg 0x48010; adc bh, bh; ret; 
0x000000000044bba2: dec byte ptr [rax]; jg 0x4bba6; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000044bba8: dec byte ptr [rax]; jg 0x4bbf0; adc bh, bh; ret; 
0x0000000000486574: dec byte ptr [rbp + rcx*4 + 4]; ret; 
0x0000000000451642: dec byte ptr [rbp - 0x75]; pop rdx; or byte ptr [rcx - 0xa], al; ret; 
0x000000000046fe05: dec byte ptr [rcx + rcx*4 - 0x19]; call qword ptr [rbx + 0x38]; 
0x000000000040d5af: dec byte ptr [rcx + rcx*4 - 9]; mov byte ptr [rbp - 0x8ec], r9b; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x0000000000401ef9: dec byte ptr [rcx - 0x77]; ret 0x14d; 
0x000000000045200b: dec byte ptr [rcx - 0x77]; ret; 
0x0000000000450dda: dec byte ptr [rcx]; je 0x50e08; mov eax, 0x48; syscall; 
0x0000000000450e69: dec byte ptr [rcx]; je 0x50e98; mov eax, 0x48; syscall; 
0x0000000000485bed: dec dword ptr [r8 - 0x7d]; clc; std; jbe 0x85c00; ret; 
0x0000000000472682: dec dword ptr [r9 - 0x74b6cfbd]; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000041dc58: dec dword ptr [r9 - 0x7b]; ret; 
0x0000000000441572: dec dword ptr [rax + 0x29]; ret 0x280f; 
0x00000000004815f5: dec dword ptr [rax + 0x29]; ret 0x394c; 
0x000000000040792f: dec dword ptr [rax + 0x29]; ret; 
0x000000000041e17f: dec dword ptr [rax + 0x29]; ror byte ptr [rcx + 0x21], 1; retf 0x149; ret 0x894d; 
0x0000000000476eb7: dec dword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x76ff0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x00000000004154b1: dec dword ptr [rax + 0x39]; ret 0x860f; 
0x000000000040988f: dec dword ptr [rax + 0x39]; ret; 
0x0000000000491238: dec dword ptr [rax + 0x63]; ret; 
0x00000000004770b9: dec dword ptr [rax + 0xf]; mov ebp, 0xf80148c6; ret; 
0x000000000047bcee: dec dword ptr [rax + 1]; ret 0x3948; 
0x0000000000469b74: dec dword ptr [rax + 1]; ret; 
0x0000000000465088: dec dword ptr [rax + 5]; add byte ptr [rdx], al; add byte ptr [rax], al; mov qword ptr fs:[rdx], rax; ret; 
0x000000000049732c: dec dword ptr [rax - 0x39]; add eax, 0x354c0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000496eda: dec dword ptr [rax - 0x39]; add eax, 0x3576a; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000496fee: dec dword ptr [rax - 0x39]; ret 0x23e0; 
0x000000000049708f: dec dword ptr [rax - 0x39]; ret 0x2de0; 
0x0000000000497014: dec dword ptr [rax - 0x39]; ret 0x2e60; 
0x000000000049703d: dec dword ptr [rax - 0x39]; ret 0x3020; 
0x0000000000497066: dec dword ptr [rax - 0x39]; ret 0x30a0; 
0x00000000004970b8: dec dword ptr [rax - 0x39]; ret 0x35e0; 
0x00000000004970e1: dec dword ptr [rax - 0x39]; ret 0x3640; 
0x000000000049710a: dec dword ptr [rax - 0x39]; ret 0x36c0; 
0x0000000000497133: dec dword ptr [rax - 0x39]; ret 0x3780; 
0x000000000049715c: dec dword ptr [rax - 0x39]; ret 0x3800; 
0x0000000000497185: dec dword ptr [rax - 0x39]; ret 0x3860; 
0x0000000000496fc5: dec dword ptr [rax - 0x39]; ret 0x3920; 
0x0000000000479cff: dec dword ptr [rax - 0x39]; ret 0xffb8; 
0x0000000000485593: dec dword ptr [rax - 0x39]; ret 0xffff; 
0x000000000040315a: dec dword ptr [rax - 0x39]; ret; 
0x00000000004797a8: dec dword ptr [rax - 0x39]; sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x00000000004190fa: dec dword ptr [rax - 0x39]; sub byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x0000000000492ab0: dec dword ptr [rax - 0x47]; mov eax, 0xf; syscall; 
0x000000000047789a: dec dword ptr [rax - 0x73]; adc eax, 0xfffd039e; cmove rax, rdx; ret; 
0x000000000044c171: dec dword ptr [rax - 0x73]; add al, 0x17; ret; 
0x0000000000422c81: dec dword ptr [rax - 0x73]; add eax, 0x22e87; cmove rax, rdx; ret; 
0x0000000000410d40: dec dword ptr [rax - 0x73]; add eax, 0xb11b8; mov rax, qword ptr [rax + rdi*8]; ret; 
0x00000000004778b9: dec dword ptr [rax - 0x73]; add eax, 0xfffd053f; cmovne rax, rdx; ret; 
0x000000000047dbed: dec dword ptr [rax - 0x73]; call 0x41641d51; pop rbp; pop rbp; ret; 
0x00000000004114e3: dec dword ptr [rax - 0x73]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000047a155: dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 1], ecx; ret; 
0x000000000042c626: dec dword ptr [rax - 0x73]; push rdx; sar byte ptr [rsi], 0x41; jmp rcx; 
0x0000000000483a1b: dec dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; test edx, edx; jne 0x83a2a; call rax; 
0x0000000000483115: dec dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; test esi, esi; jne 0x83124; call rax; 
0x0000000000487dec: dec dword ptr [rax - 0x75]; clc; sub rax, qword ptr fs:[0x28]; jne 0x87e75; leave; ret; 
0x0000000000412c82: dec dword ptr [rax - 0x75]; cmp byte ptr [r8 - 0x75], cl; push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000457bc7: dec dword ptr [rax - 0x75]; cwde; mov rdi, r12; call rax; 
0x000000000046e4e5: dec dword ptr [rax - 0x75]; mov ebp, 0xfffff748; mov rdx, r13; mov rsi, r15; call qword ptr [rax + 0x38]; 
0x000000000041817c: dec dword ptr [rax - 0x75]; sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000485d50: dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x00000000004806ef: dec dword ptr [rax - 0x77]; add eax, 0x4c1b9; add rsp, 8; ret; 
0x00000000004903cb: dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x00000000004182d6: dec dword ptr [rax - 0x77]; out dx, eax; call qword ptr [rbx + 0x18]; 
0x000000000041c8c5: dec dword ptr [rax - 0x77]; ret 0x3948; 
0x00000000004815e2: dec dword ptr [rax - 0x77]; ret 0x81e9; 
0x000000000048125e: dec dword ptr [rax - 0x77]; ret 0x8341; 
0x0000000000480600: dec dword ptr [rax - 0x77]; ret 0x8348; 
0x00000000004523f6: dec dword ptr [rax - 0x77]; ret 0x8548; 
0x000000000047a399: dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000482cb5: dec dword ptr [rax - 0x77]; ret 0x894c; 
0x00000000004575aa: dec dword ptr [rax - 0x77]; ret 0x8d48; 
0x00000000004526ea: dec dword ptr [rax - 0x77]; ret 0xabe; 
0x0000000000481601: dec dword ptr [rax - 0x77]; ret 0xb8eb; 
0x0000000000405672: dec dword ptr [rax - 0x77]; ret 0xc031; 
0x00000000004975bc: dec dword ptr [rax - 0x77]; ret 0xc148; 
0x0000000000493b87: dec dword ptr [rax - 0x77]; ret 0xe0e8; 
0x00000000004170bd: dec dword ptr [rax - 0x77]; ret; 
0x000000000048de4b: dec dword ptr [rax - 0x77]; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000420b5e: dec dword ptr [rax - 0x7b]; ret 0x840f; 
0x000000000048340d: dec dword ptr [rax - 0x7b]; ror byte ptr [rax + 0xf], 0x44; ret; 
0x000000000046323c: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; rol byte ptr [rip - 0x76b80000], cl; ret 0x294c; 
0x000000000041e90b: dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; xchg eax, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x000000000041e88b: dec dword ptr [rax - 0x7b]; sal byte ptr [rsp + rdi + 0x48], 0x89; ret 0x8d4c; 
0x000000000048f8be: dec dword ptr [rax - 0x7d]; adc al, 0xf8; add cl, ch; imul esi, ebp, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000485bee: dec dword ptr [rax - 0x7d]; clc; std; jbe 0x85c00; ret; 
0x000000000042bbc8: dec dword ptr [rax - 0x7d]; ret 0x4880; 
0x0000000000407e8a: dec dword ptr [rax - 0x7d]; ret 0x4901; 
0x00000000004932ff: dec dword ptr [rax - 0x7d]; ret 0x4c01; 
0x0000000000470942: dec dword ptr [rax - 0x7d]; ret 0x6604; 
0x000000000040fa64: dec dword ptr [rax - 0x7d]; ret 0xf01; 
0x0000000000410658: dec dword ptr [rax - 0x7d]; ret 0xf03; 
0x00000000004717e6: dec dword ptr [rax - 0x7d]; ret 0xf0c; 
0x000000000040646a: dec dword ptr [rax - 0x7d]; ret; 
0x000000000041130a: dec dword ptr [rax - 0x7d]; rol byte ptr [rdx], 0xeb; ret 0x5b8; 
0x0000000000407b12: dec dword ptr [rax - 0x7d]; vpsubsb xmm12, xmm15, xmmword ptr [rsi + rdx*4 - 1]; dec dword ptr [rax + 0x29]; ret; 
0x000000000043307c: dec dword ptr [rax - 0x7f]; ret 0x80; 
0x0000000000480a2a: dec dword ptr [rbp + 0xf]; scasd eax, dword ptr [rdi]; ret 0x8348; 
0x00000000004873fc: dec dword ptr [rbp + rcx*4 + 0x1c]; ret; 
0x000000000046fb15: dec dword ptr [rbp + rcx*4 + 5]; ret; 
0x000000000046093c: dec dword ptr [rbp - 0x77]; ret 0xc1e9; 
0x000000000045f16a: dec dword ptr [rbp - 0x77]; ret; 
0x00000000004034f6: dec dword ptr [rbx + 0xc8eeb15]; add bh, dh; ret 0; 
0x000000000048a1f6: dec dword ptr [rbx + rcx*4 + 0x25]; ret 0x3bf; 
0x0000000000483dfb: dec dword ptr [rbx + rcx*4 - 0x73]; push 0x41ffffff; call rcx; 
0x0000000000419218: dec dword ptr [rbx - 0x14f3db8c]; ret 0xf390; 
0x00000000004719c0: dec dword ptr [rbx - 0x7cb7fbb1]; ret; 
0x000000000040dd8c: dec dword ptr [rbx - 0x8977b]; inc dword ptr [rbp + 0x27880fc0]; out 0xff, eax; inc dword ptr [rcx]; ret; 
0x000000000040de6e: dec dword ptr [rbx - 0x8977b]; inc dword ptr [rbp + 0x45880fc0]; out 0xff, al; inc dword ptr [rcx]; ret; 
0x000000000047cacc: dec dword ptr [rbx - 0xdf7b]; jmp qword ptr [rsi + 0xf]; 
0x000000000045ed49: dec dword ptr [rcx + 0x3948fc51]; ret; 
0x0000000000469c63: dec dword ptr [rcx + rcx*4 + 0x44]; ret 0xe9f8; 
0x0000000000458d8f: dec dword ptr [rcx + rcx*4 + 0x55]; mov byte ptr [rax - 0x7d], cl; ret; 
0x000000000042dcee: dec dword ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000468c0c: dec dword ptr [rcx + rcx*4 + 4]; ret 0x85c7; 
0x000000000040d2e0: dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r11; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040d033: dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040e0a8: dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000046e4ec: dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r15; call qword ptr [rax + 0x38]; 
0x0000000000481069: dec dword ptr [rcx + rcx*4 - 0x1e]; mov eax, 0x14; syscall; 
0x000000000040c401: dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x0000000000453777: dec dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000000040d5a9: dec dword ptr [rcx + rcx*4 - 0x2e]; mov rsi, r15; mov rdi, r14; mov byte ptr [rbp - 0x8ec], r9b; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x000000000046e379: dec dword ptr [rcx + rcx*4 - 0x2e]; mov rsi, rbx; mov rdi, qword ptr [rbp - 0x8b8]; mov byte ptr [rbp - 0x910], r8b; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x0000000000412d4c: dec dword ptr [rcx + rcx*4 - 0x39]; call qword ptr [rax + 0x18]; 
0x00000000004689ce: dec dword ptr [rcx + rcx*4 - 0x3e]; mov rsi, r14; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x000000000043fa95: dec dword ptr [rcx + rcx*4 - 0x40]; vzeroupper; ret; 
0x000000000044abb5: dec dword ptr [rcx + rcx*4 - 0x40]; xtest; je 0x4abc2; vzeroall; ret; 
0x000000000044f728: dec dword ptr [rcx + rcx*4 - 0x40]; xtest; je 0x4f735; vzeroall; ret; 
0x000000000047bde6: dec dword ptr [rcx - 0x11743]; jmp qword ptr [rsi - 0x7d]; 
0x0000000000493fff: dec dword ptr [rcx - 0x39]; ret 0xffff; 
0x000000000049114c: dec dword ptr [rcx - 0x39]; ret; 
0x0000000000472683: dec dword ptr [rcx - 0x74b6cfbd]; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000040d2b2: dec dword ptr [rcx - 0x75]; mov ds, eax; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000047ca10: dec dword ptr [rcx - 0x75]; push rbp; sub byte ptr [rax - 0x75], cl; sub byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x000000000040d005: dec dword ptr [rcx - 0x75]; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000484252: dec dword ptr [rcx - 0x75]; xchg eax, ebx; pop rax; add al, 0; add cl, ch; ret 0xffef; 
0x000000000048bbfa: dec dword ptr [rcx - 0x75]; xchg eax, esi; rol byte ptr [rdx], 0; add byte ptr [rcx + 0x248b4ce8], cl; ret 0xf41; 
0x0000000000460939: dec dword ptr [rcx - 0x77]; dec dword ptr [rbp - 0x77]; ret 0xc1e9; 
0x0000000000476833: dec dword ptr [rcx - 0x77]; ret 0x3948; 
0x000000000047cd83: dec dword ptr [rcx - 0x77]; ret 0x8348; 
0x00000000004584cb: dec dword ptr [rcx - 0x77]; ret 0x8548; 
0x000000000046eb12: dec dword ptr [rcx - 0x77]; ret 0xf1e9; 
0x000000000046dd08: dec dword ptr [rcx - 0x77]; ret 0xf44; 
0x000000000040d6d0: dec dword ptr [rcx - 0x77]; ret; 
0x000000000041dc59: dec dword ptr [rcx - 0x7b]; ret; 
0x000000000047c883: dec dword ptr [rcx - 0x7d]; stc; or al, 0xf; xchg byte ptr [rbx + rax], bh; add byte ptr [rax + 1], cl; ret 0xba41; 
0x000000000042b710: dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x00000000004854c4: dec dword ptr [rcx]; jbe 0x854b0; cmp esi, eax; je 0x85420; sub eax, esi; ret; 
0x0000000000418ee8: dec dword ptr [rdi]; adc dword ptr [rdi + 0xa0], eax; ret; 
0x0000000000488058: dec dword ptr [rdi]; add byte ptr [rax + 0x21], cl; ret 0xc148; 
0x000000000045119a: dec dword ptr [rdi]; add byte ptr [rax], al; jne 0x511b0; mov eax, 9; syscall; 
0x0000000000401938: dec dword ptr [rdi]; add byte ptr [rax], al; lea rax, [rbx + 1]; pop rbx; ret; 
0x000000000040d4d7: dec dword ptr [rdi]; mov al, bl; add eax, 0xc7480000; ret; 
0x000000000040fa48: dec dword ptr [rdi]; mov dh, 0x4a; add cl, byte ptr [rax - 0x7d]; ret 0x8302; 
0x0000000000468da6: dec dword ptr [rdi]; mov dh, 0x50; or al, 0x89; sal dh, 1; ret 0xf40; 
0x0000000000467785: dec dword ptr [rdi]; mov dh, 0x50; or al, 0xf6; ret 0x7540; 
0x00000000004891a1: dec dword ptr [rdi]; mov dh, 0x75; ret; 
0x000000000040de32: dec dword ptr [rdi]; or dword ptr [rdx - 4], 0x69e9ffff; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x00000000004951dc: dec dword ptr [rdi]; test byte ptr [rax - 0x76fffffe], dl; ret 0xe283; 
0x0000000000403f47: dec dword ptr [rdi]; test byte ptr [rdx + 0x48000000], ah; add esp, 0x98; ret; 
0x000000000045cb5b: dec dword ptr [rdi]; test byte ptr [rip - 0x8fffffb], dl; ret 0; 
0x000000000045cb4f: dec dword ptr [rdi]; test byte ptr [rip - 0x8fffffc], dh; ret 0; 
0x00000000004514b4: dec dword ptr [rdi]; test dword ptr [rbp + 0x49000000], edx; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000452294: dec dword ptr [rdi]; test dword ptr [rbp + 0x49000000], esi; mov edi, dword ptr [rbp]; call rbx; 
0x000000000045147f: dec dword ptr [rdi]; test dword ptr [rdx + 0x49000000], ecx; mov edi, dword ptr [rbp]; call rbx; 
0x000000000045144c: dec dword ptr [rdi]; test dword ptr [rip + 0x49000001], ebx; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000445980: dec dword ptr [rdi]; test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000040d938: dec dword ptr [rdi]; xchg eax, edx; ret 0x3948; 
0x000000000048d359: dec dword ptr [rdx - 0x75]; add al, 0xd0; mov rsi, qword ptr [rax + 8]; call 0x54de0; nop word ptr [rax + rax]; ret; 
0x000000000040d484: dec dword ptr [rdx]; add byte ptr [rax], al; add cl, ch; ret 0xfffc; 
0x0000000000441571: dec qword ptr [r8 + 0x29]; ret 0x280f; 
0x0000000000476eb6: dec qword ptr [rax + 0x31]; ror dword ptr [rax + 0x21], 0xce; je 0x76ff0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000407e89: dec qword ptr [rax - 0x7d]; ret 0x4901; 
0x00000000004880f9: div byte ptr [rbp + 0x2c]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000452123: div byte ptr [rbp + 0xa]; pop rbp; pop r12; pop r13; ret; 
0x0000000000465119: div byte ptr [rbp + 0xc]; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000048311f: div byte ptr [rbp + 2]; call rax; 
0x000000000043f436: div byte ptr [rbp + 4]; xor rax, rax; ret; 
0x0000000000452075: div byte ptr [rbp + 8]; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000488112: div byte ptr [rbp - 0x13]; cmp cx, 0x7fff; jne 0x880fc; mov eax, 1; ret; 
0x0000000000477807: div byte ptr [rbp - 0x29]; and ch, 4; lea rdx, [rip + 0x64c]; lea rax, [rip + 0x295]; cmove rax, rdx; ret; 
0x00000000004232f7: div byte ptr [rbp - 0x29]; and ch, 4; lea rdx, [rip + 0x7b4c]; lea rax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x0000000000422cd7: div byte ptr [rbp - 0x29]; and ch, 4; lea rdx, [rip + 0x7e9c]; lea rax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x00000000004809c9: div byte ptr [rbx + rax + 0x48]; mov dword ptr [rsi], ecx; mov rax, r8; ret; 
0x0000000000488302: div byte ptr [rbx + rdx + 0x4c]; mov eax, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, r8; jmp rax; 
0x0000000000423256: div byte ptr [rcx]; add al, byte ptr [rax]; lea rax, [rip + 0x232df]; cmove rax, rdx; ret; 
0x0000000000458804: div byte ptr [rcx]; jmp qword ptr [rsi + 0xf]; 
0x0000000000484d86: div byte ptr [rdx]; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000462679: div byte ptr [rsp + rcx - 0x7d]; inc byte ptr [rbx]; je 0x62688; pop rbx; ret; 
0x00000000004826ae: div dword ptr [rbp + 7]; pop rbx; ret; 
0x0000000000479bdd: div dword ptr [rbp - 0x28]; mov eax, r8d; ret; 
0x0000000000469ff5: div ecx; add r8d, eax; mov eax, r8d; ret; 
0x0000000000490db5: divps xmm0, xmmword ptr [rip + 0x239e8]; ret; 
0x0000000000490db4: divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x0000000000453630: endbr64; cmp byte ptr [rip + 0x73d45], 0; jne 0x53650; mov r8, qword ptr [rip + 0x73d44]; mov rax, r8; ret; 
0x000000000041fa30: endbr64; cmp byte ptr [rip + 0xac7e5], 0; jne 0x1fa40; ret; 
0x00000000004747d0: endbr64; cmp dword ptr [rdi], 1; je 0x747e0; ret; 
0x0000000000474770: endbr64; cmp edi, 1; je 0x74789; mov rax, qword ptr fs:[0x10]; mov byte ptr [rax + 0x972], 0; ret; 
0x00000000004185c0: endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x185d0; ret; 
0x0000000000414ce0: endbr64; cmp qword ptr [rip + 0xb02e4], 0; je 0x14cef; ret; 
0x0000000000455fa0: endbr64; lea rax, [rip + 0x702b5]; ret; 
0x0000000000450280: endbr64; mov eax, 0x18; syscall; 
0x0000000000450280: endbr64; mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x50294; ret; 
0x0000000000451250: endbr64; mov eax, 0x1c; syscall; 
0x0000000000451250: endbr64; mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x51264; ret; 
0x000000000048e3b0: endbr64; mov eax, 0x26; syscall; 
0x000000000048e3b0: endbr64; mov eax, 0x26; syscall; cmp rax, -0x1000; ja 0x8e3c8; ret; 
0x000000000044fb50: endbr64; mov eax, 0x27; syscall; 
0x000000000044fb50: endbr64; mov eax, 0x27; syscall; ret; 
0x0000000000479a40: endbr64; mov eax, 0x3f; syscall; 
0x0000000000479a40: endbr64; mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x79a54; ret; 
0x0000000000452b50: endbr64; mov eax, 0x63; syscall; 
0x0000000000452b50: endbr64; mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x52b64; ret; 
0x0000000000479a70: endbr64; mov eax, 0x66; syscall; 
0x0000000000479a70: endbr64; mov eax, 0x66; syscall; ret; 
0x0000000000479a90: endbr64; mov eax, 0x68; syscall; 
0x0000000000479a90: endbr64; mov eax, 0x68; syscall; ret; 
0x0000000000479a80: endbr64; mov eax, 0x6b; syscall; 
0x0000000000479a80: endbr64; mov eax, 0x6b; syscall; ret; 
0x0000000000479aa0: endbr64; mov eax, 0x6c; syscall; 
0x0000000000479aa0: endbr64; mov eax, 0x6c; syscall; ret; 
0x0000000000479840: endbr64; mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000479ab0: endbr64; mov eax, 0x8f; syscall; 
0x0000000000479ab0: endbr64; mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x79ac4; ret; 
0x0000000000479ae0: endbr64; mov eax, 0x90; syscall; 
0x0000000000479ae0: endbr64; mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x79af4; ret; 
0x0000000000479b10: endbr64; mov eax, 0x91; syscall; 
0x0000000000479b10: endbr64; mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x79b24; ret; 
0x0000000000479b40: endbr64; mov eax, 0x92; syscall; 
0x0000000000479b40: endbr64; mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x79b54; ret; 
0x0000000000479b70: endbr64; mov eax, 0x93; syscall; 
0x0000000000479b70: endbr64; mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x79b84; ret; 
0x0000000000451220: endbr64; mov eax, 0xa; syscall; 
0x0000000000451220: endbr64; mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x51234; ret; 
0x00000000004511f0: endbr64; mov eax, 0xb; syscall; 
0x00000000004511f0: endbr64; mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x51204; ret; 
0x0000000000451030: endbr64; mov eax, 0xc; syscall; 
0x0000000000418680: endbr64; mov eax, 0xffffffff; ret; 
0x0000000000450fc0: endbr64; mov eax, 1; syscall; 
0x0000000000450fc0: endbr64; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x50fd8; ret; 
0x0000000000450d70: endbr64; mov eax, 3; syscall; 
0x0000000000450d70: endbr64; mov eax, 3; syscall; cmp rax, -0x1000; ja 0x50d88; ret; 
0x0000000000450620: endbr64; mov eax, 8; syscall; 
0x0000000000450620: endbr64; mov eax, 8; syscall; cmp rax, -0x1000; ja 0x50638; ret; 
0x0000000000419b50: endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000475e10: endbr64; mov eax, dword ptr [rdi]; test al, 2; je 0x75e20; xor eax, eax; ret; 
0x0000000000495920: endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x95930; ret; 
0x0000000000495c70: endbr64; mov eax, dword ptr [rdi]; test eax, eax; jne 0x95c80; ret; 
0x0000000000488b10: endbr64; mov eax, dword ptr [rip + 0x437a6]; ret; 
0x0000000000456cb0: endbr64; mov eax, dword ptr [rip + 0x75926]; test eax, eax; je 0x56cc0; ret; 
0x0000000000452a30: endbr64; mov eax, dword ptr [rip + 0x79886]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x00000000004504e0: endbr64; mov eax, dword ptr fs:[0x18]; test eax, eax; jne 0x50500; syscall; 
0x00000000004931d0: endbr64; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000479e30: endbr64; mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000450370: endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000451190: endbr64; mov r10d, ecx; test r9d, 0xfff; jne 0x511b0; mov eax, 9; syscall; 
0x0000000000464fe0: endbr64; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x0000000000465000: endbr64; mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000465020: endbr64; mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000464fc0: endbr64; mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000419190: endbr64; mov rax, -1; ret; 
0x0000000000485c20: endbr64; mov rax, qword ptr [rax + 8]; ret; 
0x0000000000485c30: endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x0000000000419ed0: endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000493140: endbr64; mov rax, qword ptr [rdi + 0x90]; ret; 
0x00000000004931a0: endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000473a10: endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x73a28; ret; 
0x00000000004931e0: endbr64; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x0000000000493240: endbr64; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x0000000000493230: endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004931f0: endbr64; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000041b790: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x1b7a0; ret; 
0x000000000041b960: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x1b970; ret; 
0x000000000041b7d0: endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x1b7e0; ret; 
0x0000000000474ae0: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x51fd3], eax; ret; 
0x00000000004747c0: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x522ef], eax; ret; 
0x00000000004747b0: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x522fb], eax; ret; 
0x00000000004747a0: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x52307], eax; ret; 
0x0000000000474790: endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x52313], eax; ret; 
0x0000000000474af0: endbr64; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x51fd2], rax; ret; 
0x000000000041ba50: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d46], 1; mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041ba30: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d66], 1; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba10: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d86], 1; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041ba70: endbr64; mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xb07b6], eax; ret; 
0x000000000041b7f0: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa9fe1], rax; ret; 
0x000000000041b780: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa9fe9], rax; ret; 
0x000000000041b770: endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xaa001], rax; ret; 
0x0000000000461e80: endbr64; mov rax, qword ptr [rip + 0x6a7bd]; ret; 
0x00000000004536a0: endbr64; mov rax, qword ptr [rip + 0x73cbd]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x73ca3]; mov qword ptr [rsi], rax; ret; 
0x0000000000458240: endbr64; mov rax, qword ptr [rip + 0x743bd]; ret; 
0x0000000000458230: endbr64; mov rax, qword ptr [rip + 0x743c5]; ret; 
0x000000000044fa70: endbr64; mov rax, qword ptr [rip + 0x7500d]; test rax, rax; je 0x4fa98; sub rsp, 8; call rax; 
0x0000000000451100: endbr64; mov rax, qword ptr [rip + 0x7506d]; test rax, rax; je 0x51111; ret; 
0x0000000000419eb0: endbr64; mov rax, qword ptr [rip + 0xab2a5]; ret; 
0x000000000041b6e0: endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000419ee0: endbr64; mov rax, rdi; ret; 
0x00000000004806c0: endbr64; mov rcx, qword ptr [rip + 0x4c1d5]; cmp rcx, rdi; je 0x806d8; ret; 
0x0000000000485be0: endbr64; mov rdi, qword ptr [rip + 0x46d25]; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x85c00; ret; 
0x0000000000459960: endbr64; movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x00000000004016c0: endbr64; ret; 
0x00000000004979b0: endbr64; sub rsp, 8; add rsp, 8; ret; 
0x0000000000417d70: endbr64; test byte ptr [rdi], 0x80; jne 0x17d80; ret; 
0x0000000000488690: endbr64; test byte ptr [rip + 0x43d33], 0x10; lea rdx, [rip + 0x11e]; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000422230: endbr64; test byte ptr [rip + 0xaa193], 0x10; lea rdx, [rip + 0x23e1e]; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x0000000000447b10: endbr64; test rdx, rdx; jne 0x47b1d; mov rax, rdi; ret; 
0x000000000043f430: endbr64; test rsi, rsi; jne 0x3f43d; xor rax, rax; ret; 
0x000000000044ee30: endbr64; test rsi, rsi; jne 0x4ee3d; xor rax, rax; ret; 
0x0000000000419110: endbr64; xor eax, eax; ret; 
0x0000000000450f90: endbr64; xor eax, eax; syscall; 
0x0000000000450f90: endbr64; xor eax, eax; syscall; cmp rax, -0x1000; ja 0x50fa8; ret; 
0x0000000000416b30: endbr64; xor eax, eax; test rdx, rdx; jne 0x16b40; ret; 
0x000000000041ab10: endbr64; xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041ab30: endbr64; xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x0000000000414eb1: fadd dword ptr [rax]; add byte ptr [rax], al; lea rcx, [rip + 0xb1e04]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x000000000041205f: fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000040b74f: fadd dword ptr [rax]; add byte ptr [rax], al; ret; 
0x0000000000479bdf: fadd dword ptr [rcx + rcx*4 - 0x40]; ret; 
0x0000000000454124: fadd dword ptr [rdx]; add byte ptr [rax], al; syscall; 
0x000000000040d4da: fadd dword ptr [rip - 0x38b80000]; ret; 
0x0000000000422f57: fadd qword ptr [rax - 0x72b7fd1a]; add eax, 0x24f1e; lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x00000000004221e1: fadd qword ptr [rcx]; add byte ptr [rax - 0x73], cl; adc eax, 0x1de35; cmovne rax, rdx; ret; 
0x0000000000444140: fadd qword ptr [rcx]; add byte ptr [rax], al; test dl, 0x40; jne 0x44100; lea rax, [rdi + 7]; ret; 
0x000000000042325d: fbstp tbyte ptr [rdx]; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000414d74: fcmovb st(0), st(6); add eax, 0x89490000; call 0xffffffffceec610c; nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000043efcb: fcmovnb st(0), st(5); std; xlatb; ret; 
0x000000000041a19e: fcomp dword ptr [rbp + 0x41]; pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000416c28: fcomp dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x0000000000416a2b: fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000490da5: fcomp dword ptr [rbx + 0x7420e783]; adc bl, dh; movups xmm0, xmmword ptr [rip + 0x239ec]; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x00000000004019b1: fcomp dword ptr [rbx - 0x3f]; call 0x1c09ccf; ret; 
0x0000000000421e9b: fcos; dec dword ptr [rax - 0x77]; ret; 
0x00000000004926c4: fdiv dword ptr [rip - 0x76b80000]; ret; 
0x0000000000456cd7: fdiv dword ptr [rsi + rcx - 0x77]; add eax, 0x6ddb0; pop rbx; ret; 
0x000000000041a912: fdiv st(7), st(0); jmp qword ptr [rsi + 0xf]; 
0x0000000000421db5: fdivp st(7); dec dword ptr [rax - 0x77]; ret; 
0x000000000045602e: fdivr dword ptr [rsi]; jmp rax; 
0x0000000000445af8: fdivr st(7); ret; 
0x000000000044f117: ffreep st(1); call 0x77fdb620; ret; 
0x000000000041219b: fiadd dword ptr [rax]; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004540c8: fiadd dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004442a2: fiadd dword ptr [rax]; add byte ptr [rax], al; test ah, 0x40; jne 0x44390; lea rax, [rdi + 0xf]; ret; 
0x000000000045edd3: fiadd dword ptr [rbx - 0x9bef81e]; ret; 
0x0000000000423372: fiadd word ptr [rax - 0x72b7fb1b]; adc eax, 0x1bd03; lea rax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x0000000000422352: fiadd word ptr [rax - 0x72b7fb1b]; adc eax, 0x1d303; lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223c2: fiadd word ptr [rax - 0x72b7fb1b]; adc eax, 0x1d413; lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x0000000000476522: fiadd word ptr [rax - 0x72b7fb1b]; adc eax, 0xba3; lea rax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x000000000042305e: fiadd word ptr [rcx + 2]; add byte ptr [rax - 0x73], cl; add eax, 0x24227; cmove rax, rdx; ret; 
0x0000000000480e53: fiadd word ptr [rdx]; add byte ptr [rax + 0x59], bh; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000479832: ficom dword ptr [rdx]; cli; jmp qword ptr [rsi + 0x2e]; 
0x000000000041fa95: ficomp word ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000044faa5: fidiv dword ptr [rax + 0x48]; mov edx, 0xffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000048a355: fidiv dword ptr [rbp - 0x78]; ret; 
0x000000000044d54f: fidiv dword ptr [rbx - 0x32]; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042a51f: fidiv dword ptr [rbx - 0x32]; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000041494f: fidivr word ptr [rdi + 2]; mov eax, r9d; syscall; 
0x000000000041209b: fild dword ptr [r8]; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000041209c: fild dword ptr [rax]; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000041b5de: fild word ptr [rax - 0x80]; test byte ptr [rcx + 0xcab8], 0; syscall; 
0x000000000048ca0d: fild word ptr [rbx + rdi + 0x73]; or byte ptr [rsp - 0x75], dh; adc byte ptr [r13 + 0x59840fc0], al; add eax, 0x1480000; ret; 
0x000000000045e2fb: fild word ptr [rbx - 0x7fbf0f19]; jmp rax; 
0x00000000004609d2: fild word ptr [rbx]; add al, ch; out 0x3a, al; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000416b9c: fild word ptr [rcx - 1]; xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x00000000004204f0: fimul dword ptr [rax + 0x21]; ret 0x8d48; 
0x000000000043f5e5: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000044eff5: fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000045c542: fimul dword ptr [rax + 1]; ret 0x8348; 
0x0000000000429406: fimul dword ptr [rax + rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041c264: fimul dword ptr [rax - 0x77]; ror dword ptr [rax + 0x21], cl; ret; 
0x000000000046f92b: fimul dword ptr [rcx + rcx*4 - 0x19]; call qword ptr [rbp + 0x38]; 
0x0000000000477772: fimul dword ptr [rcx]; add byte ptr [rax], al; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x000000000044d18c: fimul dword ptr [rdi]; or dword ptr [rbp + 0xf000003], 0xffffffb6; add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000044d170: fimul dword ptr [rdi]; sub dword ptr [rcx + 0xf000003], -0x4a; add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000042dd71: fimul word ptr [r9 + r9*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000463132: fimul word ptr [rax - 0x73]; add eax, 0x61ae6; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x63145; call rax; 
0x000000000044e3b2: fimul word ptr [rax - 0x73]; add eax, 0xca6; and ch, 4; jne 0x4e378; ret; 
0x00000000004777a2: fimul word ptr [rax - 0x73]; add eax, 0xdf6; and ch, 4; jne 0x77768; ret; 
0x000000000046e37f: fimul word ptr [rax - 0x75]; mov ebp, 0xfffff748; mov byte ptr [rbp - 0x910], r8b; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x000000000040a2ac: fimul word ptr [rax - 0x77]; out dx, eax; mov rax, qword ptr [rsp]; mov r13, r15; add r15, r14; call rax; 
0x000000000048354a: fimul word ptr [rax - 0x7d]; ret; 
0x000000000042dd72: fimul word ptr [rcx + rcx*4 + 0x57]; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000040d2e6: fimul word ptr [rcx + rcx*4 - 9]; call qword ptr [rcx + 0x38]; 
0x000000000045bc7e: fimul word ptr [rcx - 0x77]; ret; 
0x0000000000454159: fistp qword ptr [rax + 0x14e]; syscall; 
0x0000000000422cfd: fistp qword ptr [rsi + 2]; add byte ptr [rax - 0x73], cl; add eax, 0x2ac38; cmove rax, rdx; ret; 
0x00000000004885fd: fistp qword ptr [rsp + rax]; add byte ptr [rbx + 0x327f01f8], al; pop rbp; ret; 
0x000000000040271d: fistp word ptr [rsp + rcx + 0x6e0f6600]; ret; 
0x000000000041ca2f: fisttp dword ptr [rax + 0x21]; ret; 
0x0000000000486ff5: fisttp dword ptr [rax - 0x77]; ret; 
0x00000000004537f6: fisttp dword ptr [rbp - 0x75]; pop rbp; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret; 
0x000000000048700f: fisttp dword ptr [rcx - 0x77]; ret 0x8b4a; 
0x0000000000451790: fisttp dword ptr [rdi]; lahf; ret; 
0x000000000040cfff: fisttp dword ptr [rdi]; mov byte ptr [rsp + rsi*8 - 0x74b60001], bh; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000457b09: fisttp dword ptr [rdi]; test al, ch; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000491408: fisttp dword ptr [rdi]; test bl, bl; add edi, esi; inc dword ptr [rbx + 0x634801eb]; ret; 
0x000000000042df51: fisttp qword ptr [r9 + r9*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000470bef: fisttp qword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000457b06: fisttp qword ptr [rax - 0x7b]; fisttp dword ptr [rdi]; test al, ch; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000446042: fisttp qword ptr [rax - 1]; ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000042df52: fisttp qword ptr [rcx + rcx*4 + 0x57]; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dba1: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dc9d: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbe9: fisttp word ptr [r9 + r9*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004129df: fisttp word ptr [rax + 0x29]; bnd call qword ptr [rax + 0x70]; 
0x000000000042adc7: fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x000000000040807a: fisttp word ptr [rax - 0x7d]; ret; 
0x000000000048708f: fisttp word ptr [rax]; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000042dba2: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dc9e: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbea: fisttp word ptr [rcx + rcx*4 + 0x57]; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043db5d: fisttp word ptr [rip - 0x7cb80000]; ret 0x4910; 
0x00000000004830f5: fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x00000000004440e3: fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000444121: fisubr word ptr [rax - 0x297af0f0]; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000479851: fld dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000479851: fld dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x79860; ret; 
0x000000000047de36: fld dword ptr [rbx + 0x7505087a]; rol dword ptr [rcx + 0x4e470c7a], cl; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000041fcdb: fld dword ptr [rcx]; add byte ptr [rax], al; add rsp, 0x18; pop rbp; pop r12; ret; 
0x000000000048d8d3: fld dword ptr [rcx]; add byte ptr [rax], al; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x000000000047c128: fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x0000000000496f31: fld qword ptr [rax]; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x96f3e; call rax; 
0x00000000004770f6: fld st(5); std; xlatb; retf 0xfdc5; xlatb; ret; 
0x0000000000457459: fld xword ptr [rbp + 4]; add al, ch; pop rsi; sar dl, 1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000484c49: fld xword ptr [rsp + 0x30]; mov rsp, rbx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x0000000000477cc9: fldenv [rsi + 0xf]; jbe 0x77d1d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042a819: fldenv [rsi + 0xf]; je 0x2a86d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042ab07: fldenv [rsi + 0xf]; je 0x2ab5b; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042a711: fldenv [rsi + 0xf]; xlatb; ret; 
0x000000000048d731: fldpi; adc r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000487ed1: fldpi; sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000488014: fmul dword ptr [rax + 0x11]; rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000414a7e: fmul dword ptr [rax - 0x77]; ret; 
0x000000000041c0c7: fmul dword ptr [rax - 0x7b]; ror byte ptr [rax - 0x39], cl; ret 0; 
0x000000000047c124: fmul dword ptr [rbp + rcx*4 + 4]; fld qword ptr [rax]; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ret; 
0x000000000042e141: fmul qword ptr [r9 + r9*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000484c4f: fmul qword ptr [rax - 0x75]; sbb al, 0x24; add rsp, 0x30; ret; 
0x000000000046352f: fmul qword ptr [rax - 0x77]; ret; 
0x0000000000407eae: fmul qword ptr [rax - 0x7d]; ret 0x8801; 
0x000000000042e142: fmul qword ptr [rcx + rcx*4 + 0x57]; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000423589: fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000004377bf: fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x00000000004220e4: fmul st(0); add dword ptr [rax], eax; lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x0000000000466a39: fninit; add eax, 0x48b4c00; ret 0x8d48; 
0x00000000004770f4: fnsave dword ptr [rcx + rbx*8 - 0x3b]; std; xlatb; retf 0xfdc5; xlatb; ret; 
0x000000000042b5f7: fnsave dword ptr [rdx + 0x60]; vpmovmskb eax, ymm4; inc eax; jne 0x2b644; vzeroupper; ret; 
0x000000000041da1f: fnstsw dword ptr [rbp + 0xa]; add byte ptr [rbp + 0x4b], dh; add rsp, 0x18; pop rbp; pop r12; ret; 
0x000000000048daa3: fst dword ptr [rdi - 4]; jmp qword ptr [rsi + 0xf]; 
0x000000000044617c: fstp xword ptr [rdx]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000045029c: fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000044fab0: fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000450558: fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x000000000041ed32: fsub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x00000000004402a4: fsub dword ptr [rsi + 0xf]; xlatb; ret; 
0x000000000043eb8c: fsub qword ptr [rsi + 0xf]; xlatb; ret; 
0x00000000004235cf: fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000041ad97: fsub st(3), st(0); and dword ptr [rsi + 0xf], 0x1f; add byte ptr [rax], r8b; mov eax, 0xba; syscall; 
0x0000000000450eb9: fsubr st(3); ror byte ptr [rdi], 0x1f; add byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x0000000000416a23: fucomip st(0); adc eax, dword ptr [eax]; add byte ptr [rax - 0x77], cl; fcomp dword ptr [rbx + 0x5d]; pop r12; ret; 
0x000000000047a173: fucomip st(0); pop rdx; cli; jmp qword ptr [rsi + 0x48]; 
0x000000000041af07: fucomp st(3); and byte ptr [rsi + 0xf], 0x1f; add byte ptr [rax], r8b; mov eax, 0xba; syscall; 
0x0000000000488d92: hlt; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ror dword ptr [rax], 0x83; ret 0x8001; 
0x0000000000401f29: hlt; add esi, eax; and al, 0xf3; add dword ptr [rbp - 0x77], ecx; ret; 
0x00000000004334ca: hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e14e: hlt; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044fb2c: hlt; mov eax, esi; syscall; 
0x00000000004334c3: hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e2a7: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2c3: hlt; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004888bb: hlt; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000445603: hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000004016b5: hlt; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000445607: hlt; sub eax, edx; ret; 
0x00000000004883f8: hlt; sub rsp, 8; call 0x1ab30; xor eax, eax; add rsp, 8; ret; 
0x000000000046d37e: idiv bh; dec dword ptr [rax - 0x77]; ret; 
0x000000000040d6ce: idiv bh; dec dword ptr [rcx - 0x77]; ret; 
0x000000000046e867: idiv bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000455ecb: idiv bh; jmp qword ptr [rsi - 0x70]; 
0x0000000000493188: idiv bh; mov qword ptr [rcx], rdx; ret; 
0x0000000000493136: idiv bh; mov rax, qword ptr [rax]; ret; 
0x000000000041ad83: idiv byte ptr [rax + 0xea]; syscall; 
0x00000000004910c9: idiv byte ptr [rcx - 0x5a]; mov rdx, qword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x000000000040372b: idiv byte ptr [rdi + 0x3003]; mov eax, 0x9e; syscall; 
0x000000000041aea5: idiv byte ptr [rdi + 2]; mov eax, 0xe; syscall; 
0x000000000045996a: idiv byte ptr [rdx - 1]; cmovs eax, edx; ret; 
0x00000000004903c9: idiv dh; dec dword ptr [rax - 0x77]; add ebx, dword ptr [rax + 0x5a]; pop rbx; ret; 
0x0000000000493181: idiv dword ptr [rax + rcx]; jne 0x1618; mov qword ptr [rcx], rdx; ret; 
0x000000000040d3bf: idiv edi; call qword ptr [rax]; 
0x000000000040cda6: idiv edi; dec dword ptr [rax - 0x39]; ret; 
0x000000000046e4e3: idiv edi; dec dword ptr [rax - 0x75]; mov ebp, 0xfffff748; mov rdx, r13; mov rsi, r15; call qword ptr [rax + 0x38]; 
0x0000000000471a34: idiv edi; dec dword ptr [rax - 0x7d]; ret; 
0x000000000040d2de: idiv edi; dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r11; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040d031: idiv edi; dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040e0a6: idiv edi; dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000046e4ea: idiv edi; dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r15; call qword ptr [rax + 0x38]; 
0x000000000040c3ff: idiv edi; dec dword ptr [rcx + rcx*4 - 0x1e]; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046eb10: idiv edi; dec dword ptr [rcx - 0x77]; ret 0xf1e9; 
0x000000000046dd06: idiv edi; dec dword ptr [rcx - 0x77]; ret 0xf44; 
0x000000000040d712: idiv edi; dec dword ptr [rcx - 0x77]; ret; 
0x000000000040de30: idiv edi; dec dword ptr [rdi]; or dword ptr [rdx - 4], 0x69e9ffff; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x000000000040d936: idiv edi; dec dword ptr [rdi]; xchg eax, edx; ret 0x3948; 
0x000000000040d482: idiv edi; dec dword ptr [rdx]; add byte ptr [rax], al; add cl, ch; ret 0xfffc; 
0x000000000040d9f8: idiv edi; inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbp + 0x57890fc0], al; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000040dd90: idiv edi; inc dword ptr [rbp + 0x27880fc0]; out 0xff, eax; inc dword ptr [rcx]; ret; 
0x000000000040e376: idiv edi; inc dword ptr [rbp + 0x31]; ror byte ptr [rcx - 0x77], cl; ret; 
0x000000000040de72: idiv edi; inc dword ptr [rbp + 0x45880fc0]; out 0xff, al; inc dword ptr [rcx]; ret; 
0x000000000049368d: idiv edi; inc dword ptr [rbx - 0x7af0f808]; ret 0xfffe; 
0x000000000040de29: idiv edi; inc dword ptr [rcx + rcx*4 - 0x5b]; push 0xffffff7; or dword ptr [rdx - 4], 0x69e9ffff; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x000000000046eb08: idiv edi; inc dword ptr [rdi + rcx - 0x4a]; lea edi, [rax]; idiv edi; dec dword ptr [rcx - 0x77]; ret 0xf1e9; 
0x000000000040e383: idiv edi; inc edi; test dword ptr [rax], edx; idiv edi; call qword ptr [rax]; 
0x000000000046de8c: idiv edi; jmp qword ptr [rax]; 
0x000000000040d8a3: idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000040d567: idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000455e0b: idiv edi; jmp qword ptr [rsi - 0x70]; 
0x000000000040e47a: idiv edi; jmp qword ptr [rsi - 0x77]; 
0x00000000004031ee: idiv esi; jmp qword ptr [rsi + 0xf]; 
0x000000000040d030: idiv rdi; dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r12; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000046e4e9: idiv rdi; dec dword ptr [rcx + rcx*4 - 0x16]; mov rsi, r15; call qword ptr [rax + 0x38]; 
0x000000000040d711: idiv rdi; dec dword ptr [rcx - 0x77]; ret; 
0x000000000040e375: idiv rdi; inc dword ptr [rbp + 0x31]; ror byte ptr [rcx - 0x77], cl; ret; 
0x00000000004797e4: imul al; outsb dx, byte ptr ss:[rsi]; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000444161: imul eax, dword ptr [rcx], 0; add dh, dh; ret 0x7502; 
0x00000000004370ce: imul eax, dword ptr [rip + 0x487c5162], 0x62067111; push rcx; jl 0x37123; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000401991: imul eax, ecx; imul eax, edx; ret; 
0x0000000000488676: imul eax, ecx; lea rax, [rax + rdx + 0x4000]; ret; 
0x0000000000465560: imul eax, edi; lea r12, [rcx + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x000000000040198a: imul eax, edx; lea edx, [rbx + 1]; pop rbx; imul eax, ecx; imul eax, edx; ret; 
0x0000000000401994: imul eax, edx; ret; 
0x000000000048eb9e: imul eax; insb byte ptr [rdi], dx; out 0xfe, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000047e858: imul eax; ret 0xfa16; 
0x000000000040e557: imul eax; ret; 
0x000000000048ed75: imul eax; xchg eax, ebp; in al, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x000000000044f24c: imul ecx, dword ptr [rax + 0x29], -0x29; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x0000000000412f7b: imul ecx, dword ptr [rax + rax + 0x48], -0x39; ret; 
0x00000000004152ab: imul ecx, dword ptr [rax + rax + 0x48], 0x39; ret; 
0x000000000047430c: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x14], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000041926c: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x1c], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004186b9: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x27], 1; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000047426e: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x2a], 1; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004191d9: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x2f], 1; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000412520: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x31], 1; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x0000000000412706: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x3c], 1; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004736f9: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x3f], 1; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000411e3d: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x4b], 1; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000418063: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x5d], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000418603: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x65], 1; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000041874e: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0x6a], 1; movzx esi, byte ptr [r14]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x0000000000418159: imul ecx, dword ptr [rax + rax + 0x48], 0x39; sal byte ptr [rsi + 0xf], 1; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000040c3df: imul ecx, dword ptr [rax + rax + 0x49], -0x39; shr byte ptr [rax + 0x48004c72], 0x89; ret 0x2949; 
0x0000000000415b46: imul ecx, dword ptr [rax + rax + 0x4c], -0x77; call 0x40e9dc98; imul ecx, dword ptr [rax + rax + 0x48], 0x39; ret; 
0x000000000041b3a0: imul ecx, dword ptr [rax + rdi*4], 1; add byte ptr [rax], al; add dh, dh; ret 0x7502; 
0x0000000000421f96: imul ecx, dword ptr [rax], 0x5b; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000048cb2b: imul ecx, dword ptr [rax], 0xf; test byte ptr [rbp - 0x75000000], cl; adc byte ptr [r13 - 0x2d7bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000436f67: imul edi, ebp, 0x487c5162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d2d: imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x00000000004235d1: imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x0000000000404a23: imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000048f8c6: imul esi, ebp, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000470c4e: imul esi, esp, -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000419a59: imul esp, dword ptr [rax + 0x5b], 0x5d; pop r12; ret; 
0x000000000047a6b8: imul esp, dword ptr [rdx + 0x49], 0x39740039; leave; xor eax, eax; ret; 
0x0000000000488675: imul rax, rcx; lea rax, [rax + rdx + 0x4000]; ret; 
0x000000000046555f: imul rax, rdi; lea r12, [rcx + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x000000000044fa99: in al, 0; add byte ptr [rax], al; syscall; 
0x0000000000403088: in al, 0x1b; add eax, 0xee894800; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x00000000004844e1: in al, 0x48; add esp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000048b102: in al, 0x48; add esp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000042e146: in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000048d1d6: in al, 0x5b; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x0000000000404605: in al, 0x5b; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000043ff1c: in al, 0x74; or dword ptr [rax - 1], ecx; ret 0xc148; 
0x000000000040a84e: in al, 0x75; adc al, 0xeb; sbb eax, 0x441f0f; add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000004521e9: in al, 0x75; and al, 0x48; mov edi, dword ptr [rbp]; call rbx; 
0x00000000004513c0: in al, 0x75; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000048105c: in al, 0x8b; mov ebp, 0xfffffbb0; lea rsi, [rbp - 0x430]; mov rdx, r12; mov eax, 0x14; syscall; 
0x00000000004334aa: in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000048ed78: in al, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x000000000046ecc7: in al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000471b5b: in al, 0xff; jmp qword ptr [rsi - 0x70]; 
0x000000000044c040: in al, dx; add byte ptr [rax], al; add byte ptr [rbx - 0x7cf0fb06], al; ret; 
0x000000000048dac2: in al, dx; cmp byte ptr [rax - 0x39], cl; ret; 
0x0000000000490db0: in al, dx; cmp dword ptr [rdx], eax; add bl, dh; divps xmm0, xmmword ptr [rip + 0x239e8]; ret; 
0x00000000004338a0: in al, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000042e14a: in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000048ac9b: in al, dx; mov qword ptr [rip + 0x41d81], 0; pop rbx; ret; 
0x00000000004338aa: in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004532cb: in al, dx; nop dword ptr [rax]; endbr64; ret; 
0x000000000046c99e: in al, dx; or al, ch; sbb edi, dword ptr [rbx - 7]; jmp qword ptr [rsi + 0x66]; 
0x00000000004297f4: in al, dx; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000047e8d0: in al, dx; pop rbx; clc; jmp qword ptr [rsi + 0x66]; 
0x000000000048d8e8: in al, dx; sbb byte ptr [rax - 0x39], cl; ret 0xfff8; 
0x000000000041ff35: in al, dx; sbb byte ptr [rax - 0x39], cl; ret; 
0x0000000000493e39: in al, dx; sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret; 
0x0000000000487795: in eax, 0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004778b1: in eax, 0x10; lea rdx, [rip - 0x2beba]; lea rax, [rip - 0x2fac1]; cmovne rax, rdx; ret; 
0x0000000000480e5d: in eax, 0x48; mov esi, ebp; syscall; 
0x000000000042df56: in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000041db78: in eax, 0x5b; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000489dbc: in eax, 0x74; jne 0x89db0; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000048d5da: in eax, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000041fa36: in eax, 0xc7; or al, byte ptr [rax]; add byte ptr [rbp + 3], dh; ret; 
0x000000000043352a: in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000472fc2: in eax, 0xf8; jmp qword ptr [rsi + 0x2e]; 
0x0000000000478343: in eax, 0xf; je 0x78360; add rax, 2; ret; 
0x000000000046c5c2: in eax, 0xfa; jmp qword ptr [rsi + 0x2e]; 
0x0000000000403158: in eax, 0xff; dec dword ptr [rax - 0x39]; ret; 
0x000000000040df84: in eax, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000423251: in eax, 2; lea rdx, [rip + 0x231f6]; lea rax, [rip + 0x232df]; cmove rax, rdx; ret; 
0x0000000000423071: in eax, 2; lea rdx, [rip + 0x233c6]; lea rax, [rip + 0x2347f]; cmove rax, rdx; ret; 
0x0000000000422e61: in eax, 2; lea rdx, [rip + 0x235e6]; lea rax, [rip + 0x236cf]; cmove rax, rdx; ret; 
0x0000000000423291: in eax, 2; lea rdx, [rip + 0x23836]; lea rax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230b1: in eax, 2; lea rdx, [rip + 0x23a06]; lea rax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422ea1: in eax, 2; lea rdx, [rip + 0x23c26]; lea rax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x0000000000423239: in eax, 2; lea rdx, [rip + 0x2400e]; lea rax, [rip + 0x24077]; cmove rax, rdx; ret; 
0x0000000000423059: in eax, 2; lea rdx, [rip + 0x241de]; lea rax, [rip + 0x24227]; cmove rax, rdx; ret; 
0x0000000000422e49: in eax, 2; lea rdx, [rip + 0x243fe]; lea rax, [rip + 0x24467]; cmove rax, rdx; ret; 
0x00000000004231d7: in eax, 2; lea rdx, [rip + 0x25530]; lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000422ff7: in eax, 2; lea rdx, [rip + 0x25700]; lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000422de7: in eax, 2; lea rdx, [rip + 0x25920]; lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000423271: in eax, 2; lea rdx, [rip + 0x27f56]; lea rax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x0000000000423091: in eax, 2; lea rdx, [rip + 0x28126]; lea rax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e81: in eax, 2; lea rdx, [rip + 0x28346]; lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x000000000044e3bb: in eax, 4; jne 0x4e378; ret; 
0x00000000004777ab: in eax, 4; jne 0x77768; ret; 
0x0000000000477892: in eax, 4; lea rax, [rip - 0x2fdfb]; lea rdx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x0000000000423374: in eax, 4; lea rdx, [rip + 0x1bd03]; lea rax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x0000000000422354: in eax, 4; lea rdx, [rip + 0x1d303]; lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223c4: in eax, 4; lea rdx, [rip + 0x1d413]; lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x000000000047780b: in eax, 4; lea rdx, [rip + 0x64c]; lea rax, [rip + 0x295]; cmove rax, rdx; ret; 
0x00000000004232fb: in eax, 4; lea rdx, [rip + 0x7b4c]; lea rax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x0000000000422cdb: in eax, 4; lea rdx, [rip + 0x7e9c]; lea rax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x0000000000476524: in eax, 4; lea rdx, [rip + 0xba3]; lea rax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x0000000000422d77: in eax, 8; jne 0x22d51; and esi, 0x400; lea rax, [rip + 0x8638]; jne 0x22d2d; ret; 
0x000000000048a7f1: in eax, dx; add dword ptr [rax], eax; add byte ptr [rcx - 0x75], cl; sbb byte ptr [rax + 0x39], r9b; ret; 
0x0000000000488114: in eax, dx; cmp cx, 0x7fff; jne 0x880fc; mov eax, 1; ret; 
0x0000000000486252: in eax, dx; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000042b3f2: in eax, dx; je 0x2b44c; and ch, al; std; xlatb; ret 0xc0ff; 
0x00000000004482f2: in eax, dx; je 0x4834c; and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000044e8e4: in eax, dx; jne 0x4e93e; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004513f2: in eax, dx; jne 0x5146b; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000451422: in eax, dx; jne 0x514a0; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045224e: in eax, dx; jne 0x522b0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000496595: in eax, dx; jne 0x96580; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000433920: in eax, dx; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000445e22: in eax, dx; lea rax, [rcx - 1]; ret; 
0x000000000042df5a: in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000470627: in eax, dx; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000043392a: in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000417fba: in eax, dx; ret; 
0x0000000000422286: in eax, dx; std; lcall [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000445f72: in eax, dx; sub rax, 1; ret; 
0x000000000042b98e: inc ax; jne 0x2b903; ret; 
0x000000000042bcec: inc ax; jne 0x2c060; ret; 
0x0000000000451788: inc byte ptr [rbp - 0x60f0bf37]; vpand ymm1, ymm15, ymmword ptr [rdi]; lahf; ret; 
0x0000000000422e4e: inc byte ptr [rbx + 2]; add byte ptr [rax - 0x73], cl; add eax, 0x24467; cmove rax, rdx; ret; 
0x000000000046267d: inc byte ptr [rbx]; je 0x62688; pop rbx; ret; 
0x0000000000469aae: inc dword ptr [rax - 0x13b43]; jmp qword ptr [rdi + 0x75]; 
0x0000000000469748: inc dword ptr [rax - 0x13b43]; jmp qword ptr [rdi - 0x75]; 
0x00000000004759a2: inc dword ptr [rax - 0x80]; test byte ptr [rdi + 0x31d23145], 0xd2; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000040d9fa: inc dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rbp + 0x57890fc0], al; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000469467: inc dword ptr [rax]; add byte ptr [rax], al; add cl, ch; ret; 
0x000000000048d99f: inc dword ptr [rax]; add byte ptr [rax], al; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004979ac: inc dword ptr [rax]; add byte ptr [rax], al; endbr64; sub rsp, 8; add rsp, 8; ret; 
0x000000000046a430: inc dword ptr [rax]; add byte ptr [rcx + 0x21], cl; ret; 
0x000000000041b7da: inc dword ptr [rax]; add byte ptr [rsi + 1], dh; ret; 
0x0000000000422f9b: inc dword ptr [rbp + 0x158d48c0]; jnp 0x22f2d; add al, byte ptr [rax]; lea rax, [rip + 0x28ad4]; cmove rax, rdx; ret; 
0x000000000040dd92: inc dword ptr [rbp + 0x27880fc0]; out 0xff, eax; inc dword ptr [rcx]; ret; 
0x00000000004809c3: inc dword ptr [rbp + 0x31]; ror byte ptr [rax - 0x7b], 0xf6; je 0x809cf; mov qword ptr [rsi], rcx; mov rax, r8; ret; 
0x0000000000474995: inc dword ptr [rbp + 0x31]; ror byte ptr [rcx - 0x77], 0xca; mov edx, r13d; mov eax, 0xca; syscall; 
0x000000000040e378: inc dword ptr [rbp + 0x31]; ror byte ptr [rcx - 0x77], cl; ret; 
0x000000000045e773: inc dword ptr [rbp + 0x31]; ror byte ptr [rcx - 0x7d], cl; ret 0x4b01; 
0x000000000047596e: inc dword ptr [rbp + 0x31]; sar byte ptr [rdx + 1], cl; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000040de74: inc dword ptr [rbp + 0x45880fc0]; out 0xff, al; inc dword ptr [rcx]; ret; 
0x0000000000489d5c: inc dword ptr [rbp + 0x480a74c0]; mov eax, 0xffffffb8; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x00000000004527dc: inc dword ptr [rbp + 0x480f74c0]; add esp, 8; ret; 
0x0000000000488b4f: inc dword ptr [rbp + 0x481a74c0]; lea ebx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000456b8b: inc dword ptr [rbp - 0x7f4c8a40]; or eax, 0x759e9; or al, 0x5b; ret; 
0x000000000049140e: inc dword ptr [rbx + 0x634801eb]; ret; 
0x0000000000483544: inc dword ptr [rbx + 0x7425087b]; fimul word ptr [rax - 0x7d]; ret; 
0x000000000040bb2d: inc dword ptr [rbx + 0xf4807e8]; mov esi, 0x8b4864c0; adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rbx + rcx*4 + 0x74]; ret 0x4c40; 
0x00000000004758bf: inc dword ptr [rbx - 0x1f7ce940]; test dword ptr [rdi], 0xfffd7384; call qword ptr [rax + 0x48]; 
0x0000000000491458: inc dword ptr [rbx - 0x72b7fe15]; push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x000000000049368f: inc dword ptr [rbx - 0x7af0f808]; ret 0xfffe; 
0x0000000000469384: inc dword ptr [rbx - 0x9b43]; jmp qword ptr [rsi + 0xf]; 
0x0000000000488227: inc dword ptr [rcx + rbp - 0x38]; punpcklqdq xmm0, xmm1; movups xmmword ptr [rsi], xmm0; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x0000000000488277: inc dword ptr [rcx + rbp - 0x40]; punpcklqdq xmm0, xmm2; movups xmmword ptr [rsi], xmm0; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x0000000000416dac: inc dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000000040de2b: inc dword ptr [rcx + rcx*4 - 0x5b]; push 0xffffff7; or dword ptr [rdx - 4], 0x69e9ffff; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x000000000045b548: inc dword ptr [rcx - 0x77]; ret 0x29e9; 
0x000000000048c628: inc dword ptr [rcx - 0x77]; ret 0xe883; 
0x000000000045f1f1: inc dword ptr [rcx - 0x77]; ret; 
0x000000000047594b: inc dword ptr [rcx - 0x7d]; push -0x548bfefc; mov eax, 0x83; ret; 
0x00000000004477fa: inc dword ptr [rcx - 0xff3e]; jmp qword ptr [rdx - 0x1f]; 
0x000000000040d438: inc dword ptr [rcx]; add byte ptr [rax], al; add bh, al; test dword ptr [rax], edx; idiv edi; call qword ptr [rax]; 
0x0000000000481194: inc dword ptr [rcx]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000474775: inc dword ptr [rcx]; je 0x74789; mov rax, qword ptr fs:[0x10]; mov byte ptr [rax + 0x972], 0; ret; 
0x0000000000407a29: inc dword ptr [rcx]; ret 0xd089; 
0x000000000040cf48: inc dword ptr [rcx]; ret; 
0x000000000046eb0a: inc dword ptr [rdi + rcx - 0x4a]; lea edi, [rax]; idiv edi; dec dword ptr [rcx - 0x77]; ret 0xf1e9; 
0x0000000000401b38: inc dword ptr [rdi + rcx - 0x4a]; ret 0x58e9; 
0x0000000000478cc7: inc dword ptr [rdx]; lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000478cd7: inc dword ptr [rdx]; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000478ce7: inc dword ptr [rdx]; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000478cb7: inc dword ptr [rdx]; lea eax, [rdi + rax + 8]; ret; 
0x000000000044f925: inc dword ptr [rdx]; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044fa10: inc dword ptr [rdx]; lea rax, [rdi + rax + 0x18]; ret; 
0x000000000044f9b5: inc dword ptr [rdx]; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044f966: inc dword ptr [rdx]; lea rax, [rdi + rax + 8]; ret; 
0x000000000043e33d: inc dword ptr [rip - 0x7cb80000]; ret 0x4910; 
0x0000000000482474: inc dword ptr [rsi + 0x10]; pop rbx; ret; 
0x000000000044f2ab: inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043f9bb: inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000044604a: inc eax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000042b6c1: inc eax; bzhi edx, eax, edx; jne 0x2b4a0; xor eax, eax; vzeroupper; ret; 
0x0000000000446047: inc eax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446044: inc eax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000042b5ff: inc eax; jne 0x2b644; vzeroupper; ret; 
0x000000000042b634: inc eax; jne 0x2b680; vzeroupper; ret; 
0x000000000042b98f: inc eax; jne 0x2b903; ret; 
0x000000000042bced: inc eax; jne 0x2c060; ret; 
0x0000000000450fba: inc ebx; nop dword ptr [rax]; endbr64; mov eax, 1; syscall; 
0x000000000044f0da: inc ecx; call 0x77fdb5e3; ret; 
0x0000000000475647: inc ecx; call qword ptr [rbx]; 
0x000000000042b5d1: inc ecx; jne 0x2b500; vzeroupper; ret; 
0x000000000042b48b: inc ecx; jne 0x2b503; vzeroupper; ret; 
0x000000000044c8f1: inc ecx; tzcnt ecx, ecx; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; ret; 
0x00000000004785e6: inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6a6: inc edi; add eax, edi; vzeroupper; ret; 
0x000000000042ac35: inc edi; add rax, rdi; vzeroupper; ret; 
0x000000000043ee85: inc edi; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000040e385: inc edi; test dword ptr [rax], edx; idiv edi; call qword ptr [rax]; 
0x0000000000468e13: inc edi; test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000446de2: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000044b52b: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004475fd: inc esi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000446049: inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446046: inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446043: inc rax; inc rax; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000042ac34: inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000043ee84: inc rdi; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x0000000000446de1: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000044b52a: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004475fc: inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000485c14: insb byte ptr [rdi], dx; add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000429f74: insb byte ptr [rdi], dx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004513ed: insb byte ptr [rdi], dx; and al, 0x10; test r13, r13; jne 0x5146b; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045141d: insb byte ptr [rdi], dx; and al, 0x10; test r13, r13; jne 0x514a0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000452249: insb byte ptr [rdi], dx; and al, 0x10; test r13, r13; jne 0x522b0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000484c4a: insb byte ptr [rdi], dx; and al, 0x30; mov rsp, rbx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000047a6b7: insb byte ptr [rdi], dx; imul esp, dword ptr [rdx + 0x49], 0x39740039; leave; xor eax, eax; ret; 
0x000000000048eba0: insb byte ptr [rdi], dx; out 0xfe, al; dec dword ptr [rax - 0x77]; ret; 
0x0000000000412ca2: insb byte ptr [rdi], dx; ret 0x110f; 
0x000000000048e243: insb byte ptr [rdi], dx; ret 0x290f; 
0x000000000047feeb: insb byte ptr [rdi], dx; ret 0x3948; 
0x000000000041c380: insb byte ptr [rdi], dx; ret 0x3b48; 
0x000000000041eb07: insb byte ptr [rdi], dx; ret 0x8348; 
0x000000000041a774: insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000040a5c6: insb byte ptr [rdi], dx; ret; 
0x0000000000454070: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; add eax, 0x78287; ret; 
0x000000000045411f: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x11; sbb eax, 2; add byte ptr [rax], al; syscall; 
0x000000000041d0ab: insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x29; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x00000000004183cd: insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; adc byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x00000000004598e9: insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418644: insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x0000000000418204: insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; or byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x0000000000473a78: insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; xor byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x000000000047e870: insb byte ptr [rdi], dx; std; jmp qword ptr [rsi - 0x7f]; 
0x0000000000485be8: insd dword ptr [rdi], dx; add al, 0; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x85c00; ret; 
0x000000000044affe: insd dword ptr [rdi], dx; and byte ptr [rsi], ah; ret 0xfbc5; 
0x0000000000493565: insd dword ptr [rdi], dx; call 0xfffffffff07ec0b7; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000493861: insd dword ptr [rdi], dx; call 0xfffffffff07ec3b3; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000493b13: insd dword ptr [rdi], dx; call 0xfffffffff07ec665; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000047a397: insd dword ptr [rdi], dx; clc; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x000000000042fda7: insd dword ptr [rdi], dx; ret; 
0x00000000004733cd: insd dword ptr [rdi], dx; retf 0x170f; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm1; ret; 
0x0000000000417fe6: insd dword ptr [rdi], dx; retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000473408: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000418021: insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000047a953: int 0; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret; 
0x0000000000475caf: int 0x39; ret 0x3c75; 
0x0000000000473b39: int 0x66; nop dword ptr [rax + rax]; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x000000000047b496: int 0x66; nop dword ptr [rax + rax]; ret; 
0x000000000048bde7: int 0x80; 
0x00000000004651d0: int 0x90; jmp rdx; 
0x0000000000404450: int 4; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041562b: int1; add al, byte ptr [rax]; add byte ptr [rax + 0x40c6c749], dl; imul ecx, dword ptr [rax + rax + 0x48], -0x39; ret; 
0x0000000000469ff6: int1; add r8d, eax; mov eax, r8d; ret; 
0x0000000000424998: int1; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000437385: int1; dec byte ptr [rax + 0x6f]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000044b529: int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004475fb: int1; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004192bb: int1; ja 0x192b0; lea eax, [rdx + rdi]; ret; 
0x000000000047434b: int1; ja 0x74340; lea eax, [rdx + rdi]; ret; 
0x000000000043fa8f: int1; jb 0x3f884; mov rax, r8; vzeroupper; ret; 
0x000000000044f3a2: int1; jb 0x4f124; mov rax, r8; vzeroupper; ret; 
0x000000000048ac2c: int1; jb 0x8ac06; ret; 
0x0000000000454298: int1; jge 0x54248; ret; 
0x0000000000436d65: int1; jl 0x36db0; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446211: int1; jl 0x4625c; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446218: int1; jl 0x46263; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044621f: int1; jl 0x4626a; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446232: int1; jl 0x4627d; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446239: int1; jl 0x46284; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446240: int1; jl 0x4628b; adc dword ptr [rsi - 1], edx; ret; 
0x000000000044624d: int1; jl 0x46298; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446253: int1; jl 0x4629e; adc dword ptr [rsi - 1], edx; ret; 
0x000000000044631a: int1; jl 0x46365; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446321: int1; jl 0x4636c; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446328: int1; jl 0x46373; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446372: int1; jl 0x463bd; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446379: int1; jl 0x463c4; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446380: int1; jl 0x463cb; adc dword ptr [rsi + 3], edx; ret; 
0x000000000044640f: int1; jl 0x4645a; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446416: int1; jl 0x46461; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000044641d: int1; jl 0x46468; adc dword ptr [rsi + 7], edx; ret; 
0x0000000000444053: int1; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x00000000004934c9: int1; mov esi, 1; mov edi, 1; call rax; 
0x000000000043331b: int1; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042e71f: int1; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004930be: int1; mov r8, r13; mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x0000000000492fd6: int1; mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000433313: int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042e897: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e8b3: int1; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000457354: int1; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000044eb6f: int1; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rcx, r12; call rbx; 
0x0000000000414678: int1; mov rsi, r13; mov rdi, r15; call rbx; 
0x00000000004455d3: int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000477aae: int1; ret; 
0x0000000000453dee: int1; shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x53dad; xor eax, eax; ret; 
0x000000000042b714: int1; sub eax, ecx; ret; 
0x00000000004455d7: int1; sub eax, edx; ret; 
0x000000000042b855: int1; sub rax, rcx; cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x000000000042b7f1: int1; sub rax, rcx; je 0x2b7fc; sbb eax, eax; or eax, 1; ret; 
0x00000000004486f1: int1; sub rax, rcx; je 0x486fc; sbb eax, eax; or eax, 1; ret; 
0x000000000048d5d0: int1; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x8d5c0; mov eax, 1; ret; 
0x0000000000444049: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000043fe09: int1; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000043fe13: int1; vzeroupper; ret; 
0x0000000000474a8d: int1; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000043d76d: iretd; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000047782d: iretd; adc eax, 0x8d480000; add eax, 0x18c8; cmove rax, rdx; ret; 
0x0000000000422e6d: iretd; add al, byte ptr ss:[rax]; cmove rax, rdx; ret; 
0x0000000000422361: iretd; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x00000000004510d7: iretd; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000476fc3: iretd; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000042b48a: iretd; inc ecx; jne 0x2b503; vzeroupper; ret; 
0x0000000000469fe2: iretd; ja 0x69fc8; mov eax, r8d; ret; 
0x00000000004755b8: iretd; jne 0x755c3; test eax, eax; jne 0x758f0; mov eax, 1; ret; 
0x000000000041bb5d: iretd; jo 0x1bb63; add byte ptr [rbx + 0xa7401f8], al; add rsp, 8; ret; 
0x000000000042b5cd: iretd; mov rdi, rdx; inc ecx; jne 0x2b500; vzeroupper; ret; 
0x0000000000424a62: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000425ec6: iretd; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000042fe45: iretd; ret 6; 
0x00000000004806e7: iretd; sub rdx, rcx; call 0x1110; mov qword ptr [rip + 0x4c1b9], rax; add rsp, 8; ret; 
0x0000000000410d3c: ja 0x10d4c; movsxd rdi, edi; lea rax, [rip + 0xb11b8]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x00000000004192bc: ja 0x192b0; lea eax, [rdx + rdi]; ret; 
0x0000000000423245: ja 0x23287; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000437237: ja 0x37232; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043fd19: ja 0x3fdb0; je 0x3fda0; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000443367: ja 0x4336b; ret; 
0x0000000000443383: ja 0x43389; mov dword ptr [rdi], ecx; ret; 
0x00000000004433c4: ja 0x433ce; mov qword ptr [rdi], rcx; ret; 
0x0000000000443449: ja 0x4345b; ret; 
0x000000000044349f: ja 0x434b5; ret; 
0x0000000000443521: ja 0x4353b; ret; 
0x0000000000443997: ja 0x4399b; lea rax, [rdi + 2]; ret; 
0x00000000004439b3: ja 0x439b9; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000443a04: ja 0x43a0e; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000443ae9: ja 0x43afb; lea rax, [rdi + 0x10]; ret; 
0x0000000000443b5f: ja 0x43b75; lea rax, [rdi + 0x14]; ret; 
0x0000000000443be1: ja 0x43bfb; lea rax, [rdi + 0x18]; ret; 
0x0000000000443f39: ja 0x43fd0; je 0x43fc0; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x0000000000446554: ja 0x465d0; movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446734: ja 0x46756; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000446b55: ja 0x46c00; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000446ae9: ja 0x46c0d; vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000446d9f: ja 0x46de1; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x00000000004472da: ja 0x473c0; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000044726e: ja 0x473cd; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x00000000004475bf: ja 0x475c3; vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000447b66: ja 0x47b80; movups xmmword ptr [rax], xmm0; movups xmmword ptr [rax + rdx - 0x10], xmm0; ret; 
0x0000000000447ae6: ja 0x47b89; movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000447c12: ja 0x47c30; jb 0x47be7; mov byte ptr [rax], sil; ret; 
0x0000000000447cde: ja 0x47d00; vmovdqu ymmword ptr [rax], ymm0; vmovdqu ymmword ptr [rax + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000447c7e: ja 0x47d09; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000447db7: ja 0x47df0; jb 0x47d73; mov byte ptr [rax], sil; vzeroupper; ret; 
0x0000000000447e9a: ja 0x47f00; vmovdqu64 zmmword ptr [rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000447e3e: ja 0x47f09; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000447fa2: ja 0x47fe0; jb 0x47f84; mov byte ptr [rax], sil; ret; 
0x000000000044ad88: ja 0x4ad0f; sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x000000000044b257: ja 0x4b300; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b1eb: ja 0x4b30d; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b4f5: ja 0x4b4f9; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000044ba97: ja 0x4bb00; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044ba3b: ja 0x4bb09; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000044bb98: ja 0x4bbc0; jb 0x4bb7f; mov byte ptr [rax], sil; ret; 
0x000000000044c059: ja 0x4c0f0; je 0x4c0e0; mov byte ptr [rdi], 0; lea rax, [rdi]; ret; 
0x000000000044ce29: ja 0x4cec0; je 0x4ceb0; mov byte ptr [rdi], 0; ret; 
0x000000000044d92a: ja 0x4d727; mov eax, esi; ret; 
0x000000000044fa4d: ja 0x4f807; mov eax, esi; ret; 
0x000000000044fb2a: ja 0x4fb48; hlt; mov eax, esi; syscall; 
0x0000000000450383: ja 0x50390; xor eax, eax; ret; 
0x00000000004504f8: ja 0x50550; ret; 
0x000000000045059d: ja 0x505f0; ret; 
0x0000000000450631: ja 0x50638; ret; 
0x0000000000450d81: ja 0x50d88; ret; 
0x0000000000450f9e: ja 0x50fa8; ret; 
0x0000000000450fd1: ja 0x50fd8; ret; 
0x000000000045100a: ja 0x51010; ret; 
0x00000000004511ad: ja 0x511d0; ret; 
0x0000000000454222: ja 0x542a0; cmp r9, rdx; jbe 0x5424d; ret; 
0x0000000000454353: ja 0x543f0; cmp r9, rcx; jbe 0x5437d; ret; 
0x000000000045b545: ja 0x5b4d6; cli; inc dword ptr [rcx - 0x77]; ret 0x29e9; 
0x000000000046669d: ja 0x666f0; ret; 
0x0000000000466d5c: ja 0x66d30; mov rax, r8; ret; 
0x0000000000469fe3: ja 0x69fc8; mov eax, r8d; ret; 
0x000000000047434c: ja 0x74340; lea eax, [rdx + rdi]; ret; 
0x0000000000475db4: ja 0x75dc0; ret; 
0x0000000000478fc0: ja 0x78f47; sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x000000000047985d: ja 0x79860; ret; 
0x0000000000479e44: ja 0x79e50; ret; 
0x0000000000407ebc: ja 0x7e94; mov byte ptr [rsi], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000048496f: ja 0x84971; add byte ptr [rcx - 0x77], cl; ret; 
0x000000000048ccc4: ja 0x8ccbd; jmp qword ptr [rsi + 0xf]; 
0x000000000048e09e: ja 0x8e0a8; mov rdi, qword ptr [rdi]; call 0x90700; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000048e1e2: ja 0x8e1ec; mov rdi, qword ptr [rdi]; call 0x903e0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048e3c1: ja 0x8e3c8; ret; 
0x0000000000493d51: ja 0x93d55; sbb eax, eax; ret; 
0x00000000004129d7: jae 0x129e9; mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x0000000000419fd1: jae 0x19ff8; movzx eax, byte ptr [rax]; ret; 
0x000000000042a154: jae 0x2a4f0; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000000446753: jae 0x46760; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000447c0d: jae 0x47c29; cmp edx, 1; ja 0x47c30; jb 0x47be7; mov byte ptr [rax], sil; ret; 
0x0000000000447f9d: jae 0x47fd9; cmp edx, 1; ja 0x47fe0; jb 0x47f84; mov byte ptr [rax], sil; ret; 
0x000000000044bb93: jae 0x4bbb9; cmp edx, 1; ja 0x4bbc0; jb 0x4bb7f; mov byte ptr [rax], sil; ret; 
0x000000000044d155: jae 0x4d520; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000450291: jae 0x50294; ret; 
0x0000000000451201: jae 0x51204; ret; 
0x0000000000451231: jae 0x51234; ret; 
0x0000000000451261: jae 0x51264; ret; 
0x0000000000452b61: jae 0x52b64; ret; 
0x0000000000453df8: jae 0x53dad; xor eax, eax; ret; 
0x000000000046511d: jae 0x6515f; xor eax, eax; pop rbx; ret; 
0x0000000000465140: jae 0x65182; pop rbx; ret; 
0x0000000000466cd8: jae 0x66cbc; mov rax, r8; ret; 
0x0000000000477779: jae 0x77787; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x0000000000477dcc: jae 0x77e16; add eax, edi; ret; 
0x0000000000479a51: jae 0x79a54; ret; 
0x0000000000479ac1: jae 0x79ac4; ret; 
0x0000000000479af1: jae 0x79af4; ret; 
0x0000000000479b21: jae 0x79b24; ret; 
0x0000000000479b51: jae 0x79b54; ret; 
0x0000000000479b81: jae 0x79b84; ret; 
0x0000000000486a32: jae 0x86a7d; shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x00000000004888ba: jae 0x888b0; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000048892b: jae 0x88939; mov rdx, qword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000048ac01: jae 0x8ac14; mov rax, rsi; mov rcx, qword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000048d5d9: jae 0x8d5c0; mov eax, 1; ret; 
0x000000000040aacf: jae 0xaae3; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004154fc: jb 0x1554a; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x000000000041aa28: jb 0x1aa33; add byte ptr [rax], al; cmp eax, 1; je 0x1aa38; ret; 
0x000000000041aa84: jb 0x1aa4b; push rax; lea rdi, [rip + 0x7fea2]; call 0x14cc0; nop dword ptr [rax + rax]; ret; 
0x000000000042aea2: jb 0x2ae9b; rol byte ptr [rbp - 0xca48b40], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x000000000042b720: jb 0x2b780; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042b8b3: jb 0x2b8b0; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000436dab: jb 0x36dc1; vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000436dd8: jb 0x36de9; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000436dec: jb 0x36dfa; mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000436dfd: jb 0x36e0f; mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000436e12: jb 0x36e18; mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000043fa90: jb 0x3f884; mov rax, r8; vzeroupper; ret; 
0x000000000043f980: jb 0x3f9c4; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000043fa05: jb 0x3f9c4; sub rdi, rdx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000043f9b6: jb 0x3f9c4; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000043fa59: jb 0x3fa68; sub rdi, rdx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044624a: jb 0x4625a; vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044625d: jb 0x46269; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000446276: jb 0x46282; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000446289: jb 0x46291; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000446294: jb 0x4629e; mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x00000000004462a1: jb 0x462a5; mov byte ptr [rdi], cl; ret; 
0x00000000004464dd: jb 0x464e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000044674a: jb 0x466d0; cmp rdx, qword ptr [rip + 0x80bc5]; jae 0x46760; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004466c1: jb 0x466e3; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000446d1b: jb 0x46d5d; vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000447515: jb 0x47519; vmovdqu64 zmmword ptr [rdx + 0x40], zmm23; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000447bd6: jb 0x47bc0; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000447c14: jb 0x47be7; mov byte ptr [rax], sil; ret; 
0x0000000000447db9: jb 0x47d73; mov byte ptr [rax], sil; vzeroupper; ret; 
0x0000000000447e91: jb 0x47ec0; cmp rdx, 0x80; ja 0x47f00; vmovdqu64 zmmword ptr [rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000447f66: jb 0x47f40; vmovdqu64 zmmword ptr [rcx + 0x100], zmm16; vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000447fa4: jb 0x47f84; mov byte ptr [rax], sil; ret; 
0x0000000000448620: jb 0x48680; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000044abb0: jb 0x4a9a4; mov rax, r8; xtest; je 0x4abc2; vzeroall; ret; 
0x000000000044b44f: jb 0x4b453; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000044ba91: jb 0x4bac0; cmp rdx, 0x40; ja 0x4bb00; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044bb62: jb 0x4bb40; vmovdqu64 ymmword ptr [rcx], ymm16; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000044bb9a: jb 0x4bb7f; mov byte ptr [rax], sil; ret; 
0x000000000044d862: jb 0x4d83b; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d830: jb 0x4d83b; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d8e9: jb 0x4d8f4; sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044d8ae: jb 0x4d8f4; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044f3a3: jb 0x4f124; mov rax, r8; vzeroupper; ret; 
0x000000000044f723: jb 0x4f4a4; mov rax, r8; xtest; je 0x4f735; vzeroall; ret; 
0x000000000044f91e: jb 0x4f92d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044f95f: jb 0x4f92d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000044fa09: jb 0x4fa18; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x000000000044f9ae: jb 0x4fa18; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000451045: jb 0x51050; xor eax, eax; ret; 
0x000000000047a6b5: jb 0x7a6e6; insb byte ptr [rdi], dx; imul esp, dword ptr [rdx + 0x49], 0x39740039; leave; xor eax, eax; ret; 
0x000000000047d204: jb 0x7d1fe; jmp qword ptr [rsi + 0xf]; 
0x00000000004808c8: jb 0x808d8; mov rcx, rax; cmp rcx, rdx; jne 0x808a8; mov eax, dword ptr [rcx]; ret; 
0x000000000048474a: jb 0x84751; stc; jmp qword ptr [rsi - 0x70]; 
0x0000000000484d87: jb 0x84d89; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000488c1e: jb 0x88c00; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048ac2d: jb 0x8ac06; ret; 
0x000000000040aac9: jb 0xab17; add byte ptr [rcx + rdi - 0x1d], cl; jae 0xaae3; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000040c3e6: jb 0xc434; add byte ptr [rax - 0x77], cl; ret 0x2949; 
0x000000000040d018: jb 0xd066; add byte ptr [rax - 0x77], cl; ret 0x2949; 
0x00000000004104f6: jbe 0x109b8; mov rdx, r13; mov rsi, r10; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x0000000000411c44: jbe 0x11d90; xor esi, esi; mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x0000000000411e43: jbe 0x11e90; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000412526: jbe 0x12559; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x000000000041270c: jbe 0x1274a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000412d42: jbe 0x12d97; mov rax, qword ptr [rsp]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x0000000000415eed: jbe 0x15fc8; mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000041630a: jbe 0x16415; mov rdx, r14; mov rsi, r13; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x0000000000418069: jbe 0x180c8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041815f: jbe 0x18170; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004182cc: jbe 0x18350; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x00000000004184a4: jbe 0x18538; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x0000000000418609: jbe 0x18670; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004186bf: jbe 0x186e8; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418754: jbe 0x187c0; movzx esi, byte ptr [r14]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x00000000004188fb: jbe 0x18910; mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000418a3a: jbe 0x18c30; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418aac: jbe 0x18c70; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000418dad: jbe 0x18dc0; mov rax, qword ptr [rbx + 0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x00000000004191df: jbe 0x19210; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000419272: jbe 0x19290; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004193b3: jbe 0x194e0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rdx + 0x18]; 
0x0000000000419690: jbe 0x197b8; xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rcx + 0x58]; 
0x000000000041b79d: jbe 0x1b7a0; ret; 
0x000000000041b7dd: jbe 0x1b7e0; ret; 
0x000000000041b96d: jbe 0x1b970; ret; 
0x0000000000427987: jbe 0x27994; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004290f7: jbe 0x29104; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a0d7: jbe 0x2a0e4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a495: jbe 0x2a4f0; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000042a321: jbe 0x2a4f0; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000042a6af: jbe 0x2a950; add rax, rdi; add rax, rcx; ret; 
0x000000000042a916: jbe 0x2a950; add rax, rdi; ret; 
0x000000000042a926: jbe 0x2a950; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042a936: jbe 0x2a950; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042a946: jbe 0x2a950; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042ad41: jbe 0x2ada0; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042ad89: jbe 0x2ada0; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000043f811: jbe 0x3f830; test eax, eax; je 0x3f880; tzcnt eax, eax; vzeroupper; ret; 
0x000000000040421e: jbe 0x4230; syscall; 
0x000000000044ac72: jbe 0x4ac40; test eax, eax; je 0x4acc0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044adc9: jbe 0x4add1; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044adad: jbe 0x4add1; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d305: jbe 0x4d520; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044d34a: jbe 0x4d520; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; ret; 
0x000000000044d6b3: jbe 0x4d6d0; test eax, eax; je 0x4d720; tzcnt eax, eax; ret; 
0x000000000044d9d2: jbe 0x4d9a0; test eax, eax; je 0x4da20; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044db29: jbe 0x4db31; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044db13: jbe 0x4db31; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044e946: jbe 0x4e9ab; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000044f793: jbe 0x4f7b0; test eax, eax; je 0x4f800; tzcnt eax, eax; ret; 
0x00000000004513f4: jbe 0x5143f; mov edi, dword ptr [rsp]; call rbx; 
0x0000000000453ded: jbe 0x53de0; shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x53dad; xor eax, eax; ret; 
0x0000000000454227: jbe 0x5424d; ret; 
0x000000000045435c: jbe 0x5437d; ret; 
0x0000000000454ff6: jbe 0x54fca; add al, byte ptr [rax]; nop word ptr [rax + rax]; ret; 
0x000000000046fdfa: jbe 0x70d30; mov rdx, r14; mov rsi, r15; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x000000000046f91e: jbe 0x71088; mov rsi, qword ptr [rsp + 8]; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp + 0x38]; 
0x0000000000471100: jbe 0x71a53; mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004730c6: jbe 0x730f9; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x00000000004736ff: jbe 0x73740; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000473b67: jbe 0x73b88; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000474274: jbe 0x742a0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000474312: jbe 0x74328; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000477ccc: jbe 0x77d1d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000477d6e: jbe 0x77dbf; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x0000000000477b34: jbe 0x77e40; add rax, rdi; add rax, rcx; ret; 
0x0000000000477dcb: jbe 0x77e40; add rax, rdi; ret; 
0x0000000000477deb: jbe 0x77e40; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000477e0b: jbe 0x77e40; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477e2b: jbe 0x77e40; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000478034: jbe 0x780a0; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000478089: jbe 0x780a0; inc rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000478e2c: jbe 0x78e60; test eax, eax; je 0x78f00; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000478ff9: jbe 0x79001; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000478fe5: jbe 0x79001; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000047912c: jbe 0x79160; test eax, eax; je 0x79200; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000479309: jbe 0x79311; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x00000000004792f0: jbe 0x79311; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x00000000004854c6: jbe 0x854b0; cmp esi, eax; je 0x85420; sub eax, esi; ret; 
0x0000000000485bf3: jbe 0x85c00; ret; 
0x000000000048ab9d: jbe 0x8abe7; mov edx, dword ptr [rax + 0x10]; test rdx, rdx; jne 0x8ab90; ret; 
0x0000000000401012: je 0x1016; call rax; 
0x0000000000401012: je 0x1016; call rax; add rsp, 8; ret; 
0x00000000004105f8: je 0x1061e; sub byte ptr [rdi], cl; mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x8901; 
0x0000000000410d6c: je 0x10d73; test ax, ax; je 0x10d80; lea rdx, [rip + 0x89066]; add rax, rdx; ret; 
0x0000000000410d71: je 0x10d80; lea rdx, [rip + 0x89066]; add rax, rdx; ret; 
0x00000000004114de: je 0x10ede; lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000413c29: je 0x13bde; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000414cec: je 0x14cef; ret; 
0x00000000004016db: je 0x16f0; mov eax, 0; test rax, rax; je 0x16f0; mov edi, 0x4c6ae0; jmp rax; 
0x00000000004016e5: je 0x16f0; mov edi, 0x4c6ae0; jmp rax; 
0x000000000040171d: je 0x1730; mov eax, 0; test rax, rax; je 0x1730; mov edi, 0x4c6ae0; jmp rax; 
0x0000000000401727: je 0x1730; mov edi, 0x4c6ae0; jmp rax; 
0x000000000040175e: je 0x176a; mov edi, 0x4b4b70; call 0x95c60; mov byte ptr [rip + 0xc5b4f], 1; pop rbp; ret; 
0x0000000000418182: je 0x181a8; or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004185c9: je 0x185d0; ret; 
0x0000000000419026: je 0x19037; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x00000000004191ea: je 0x191ef; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041921a: je 0x19240; or al, 0xeb; ret 0xf390; 
0x00000000004192b7: je 0x192c8; cmp rcx, rsi; ja 0x192b0; lea eax, [rdx + rdi]; ret; 
0x0000000000401934: je 0x19b0; and ebx, 0xfff; lea rax, [rbx + 1]; pop rbx; ret; 
0x0000000000419b33: je 0x19b45; mov rdx, rax; mov rax, qword ptr [rax]; test rax, rax; jne 0x19b30; ret; 
0x0000000000419fc8: je 0x19fe0; mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x19ff8; movzx eax, byte ptr [rax]; ret; 
0x0000000000401a94: je 0x1a9a; movzx r8d, cl; mov rax, r8; pop rbx; ret; 
0x000000000041aa2f: je 0x1aa38; ret; 
0x000000000041abed: je 0x1abc0; call rdx; 
0x000000000041b744: je 0x1b747; ret; 
0x000000000041b931: je 0x1b93a; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041bb64: je 0x1bb70; add rsp, 8; ret; 
0x000000000041c38d: je 0x1c3a0; mov qword ptr [rdx + 0x28], rcx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000401c90: je 0x1cb6; sbb byte ptr [rax - 0x75], cl; and al, 8; call rax; 
0x000000000041e26c: je 0x1e292; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rbx + rcx*4 + 0x44], 0x24; sbb byte ptr [rax - 0x77], cl; ret 0x850f; 
0x000000000041e616: je 0x1e63c; or byte ptr [rcx + rcx*4 + 0x62], cl; or byte ptr [rcx - 0x7d], al; ret 0x4901; 
0x000000000041fa0a: je 0x1fa18; add rsp, 8; ret; 
0x00000000004220dc: je 0x220f8; and ecx, 4; lea rax, [rip + 0x1c8d8]; lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x000000000042212d: je 0x22101; ret; 
0x000000000042232f: je 0x22338; ret; 
0x000000000042237d: je 0x22347; ret; 
0x000000000042239f: je 0x223a8; ret; 
0x00000000004223ed: je 0x223b7; ret; 
0x000000000042244c: je 0x22463; and dh, 2; lea rax, [rip + 0x3cf8]; lea rdx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x0000000000422a57: je 0x22a65; adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x0000000000422caf: je 0x22cb8; ret; 
0x0000000000422cf6: je 0x22ccf; test esi, esi; lea rdx, [rip + 0x27edf]; lea rax, [rip + 0x2ac38]; cmove rax, rdx; ret; 
0x0000000000422de4: je 0x22e00; and ch, 2; lea rdx, [rip + 0x25920]; lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000422ff4: je 0x23010; and ch, 2; lea rdx, [rip + 0x25700]; lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x000000000042317f: je 0x23196; and dh, 2; lea rax, [rip + 0x14275]; lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x00000000004231d4: je 0x231f0; and ch, 2; lea rdx, [rip + 0x25530]; lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x00000000004232cf: je 0x232d8; ret; 
0x0000000000423316: je 0x232ef; test esi, esi; lea rdx, [rip + 0x288bf]; lea rax, [rip + 0x2a918]; cmove rax, rdx; ret; 
0x000000000042334f: je 0x23358; ret; 
0x000000000042339d: je 0x23367; ret; 
0x000000000042482d: je 0x24840; bsf rdx, rax; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000424a59: je 0x248f5; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042a0ba: je 0x2a0bd; xchg eax, edx; sub eax, edx; ret; 
0x000000000042a81c: je 0x2a86d; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042a8be: je 0x2a90f; adc byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x000000000042a9c8: je 0x2a9e0; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000042ab0a: je 0x2ab5b; xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x000000000042abb0: je 0x2ac70; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000042ae2a: je 0x2ae37; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000042ae75: je 0x2af00; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000042aea7: je 0x2af04; tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x000000000042b3f3: je 0x2b44c; and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000042b70e: je 0x2b726; dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x000000000042b75f: je 0x2b732; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2b4a0; ret; 
0x000000000042b7b9: je 0x2b7d2; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2b4a0; ret; 
0x000000000042b7f5: je 0x2b7fc; sbb eax, eax; or eax, 1; ret; 
0x000000000042b878: je 0x2b890; dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x000000000042b988: je 0x2b952; pmovmskb eax, xmm1; inc ax; jne 0x2b903; ret; 
0x000000000042b9c7: je 0x2b991; pmovmskb eax, xmm1; inc ax; jne 0x2b903; ret; 
0x000000000042baee: je 0x2bab8; pmovmskb eax, xmm1; inc ax; jne 0x2b903; ret; 
0x000000000042bc14: je 0x2bbde; pmovmskb eax, xmm1; inc ax; jne 0x2b903; ret; 
0x000000000042be37: je 0x2be01; pmovmskb eax, xmm1; inc ax; jne 0x2b903; ret; 
0x000000000042bf64: je 0x2bf2e; pmovmskb eax, xmm1; inc ax; jne 0x2b903; ret; 
0x0000000000403724: je 0x30c8; xor esi, esi; mov edi, 0x3003; mov eax, 0x9e; syscall; 
0x000000000043ec35: je 0x3ec40; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000043f0bc: je 0x3f120; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000043f275: je 0x3f124; tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000043f2c0: je 0x3f2a2; pmovmskb edx, xmm4; test edx, edx; je 0x3f2ce; bsf eax, edx; ret; 
0x000000000043f2c8: je 0x3f2ce; bsf eax, edx; ret; 
0x000000000043f36d: je 0x3f380; bsf rax, rdx; ret; 
0x000000000043f310: je 0x3f390; bsf rax, rdx; ret; 
0x000000000043f534: je 0x3f543; sar rdx, cl; test rdx, rdx; je 0x3f560; bsf rax, rdx; ret; 
0x000000000043f4c4: je 0x3f543; sar rdx, cl; test rdx, rdx; je 0x3f570; bsf rax, rdx; ret; 
0x000000000043f53c: je 0x3f560; bsf rax, rdx; ret; 
0x000000000043f4cc: je 0x3f570; bsf rax, rdx; ret; 
0x000000000043f687: je 0x3f6e0; tzcnt eax, eax; vzeroupper; ret; 
0x000000000043f7c4: je 0x3f6e4; tzcnt eax, eax; vzeroupper; ret; 
0x000000000043f815: je 0x3f880; tzcnt eax, eax; vzeroupper; ret; 
0x000000000043fd1f: je 0x3fda0; mov byte ptr [rdi], 0; vzeroupper; ret; 
0x0000000000403f48: je 0x3ff0; add rsp, 0x98; ret; 
0x0000000000443f3f: je 0x43fc0; mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x0000000000446100: je 0x460d8; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x00000000004464d4: je 0x464e1; lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x464e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000446581: je 0x4658d; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000446627: je 0x46640; ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000446b86: je 0x46b92; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000044732c: je 0x47338; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000447444: je 0x4745d; std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000044808f: je 0x48095; vzeroall; ret; 
0x00000000004482f3: je 0x4834c; and ch, al; std; xlatb; ret 0xc0ff; 
0x00000000004483b1: je 0x483b7; vzeroall; ret; 
0x000000000044860e: je 0x48626; dec dword ptr [rcx]; clc; or ecx, esi; sub eax, ecx; ret; 
0x000000000044865f: je 0x48632; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x483a0; ret; 
0x00000000004486b9: je 0x486d2; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x483a0; ret; 
0x00000000004486f5: je 0x486fc; sbb eax, eax; or eax, 1; ret; 
0x00000000004487ae: je 0x487b4; vzeroall; ret; 
0x00000000004487d6: je 0x487e2; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000448fb6: je 0x48fbc; vzeroall; ret; 
0x0000000000449093: je 0x49099; vzeroall; ret; 
0x0000000000449410: je 0x49416; vzeroall; ret; 
0x000000000044946b: je 0x49471; vzeroall; ret; 
0x0000000000449aa5: je 0x49aab; vzeroall; ret; 
0x0000000000449d2e: je 0x49d34; vzeroall; ret; 
0x000000000044a0eb: je 0x4a0f1; vzeroall; ret; 
0x000000000044a374: je 0x4a2a4; tzcnt eax, eax; xtest; je 0x4a387; vzeroall; ret; 
0x000000000044a381: je 0x4a387; vzeroall; ret; 
0x000000000044a3f7: je 0x4a3fd; vzeroall; ret; 
0x000000000044abbc: je 0x4abc2; vzeroall; ret; 
0x000000000044ac10: je 0x4acc0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044ae93: je 0x4aea1; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044b297: je 0x4b2a3; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000044b384: je 0x4b39d; std; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000044bc05: je 0x4bc80; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044bc29: je 0x4bc84; tzcnt eax, eax; add rax, rcx; ret; 
0x000000000044c05f: je 0x4c0e0; mov byte ptr [rdi], 0; lea rax, [rdi]; ret; 
0x000000000044c266: je 0x4c26f; and byte ptr [rbp - 0x3a], dh; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c43b: je 0x4c2a4; tzcnt eax, eax; cmp sil, byte ptr [rdx + rax]; jne 0x4c3d9; add rax, rdx; ret; 
0x000000000044c3ce: je 0x4c3d7; jne 0x4c3d9; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c3f6: je 0x4c3ff; and byte ptr [rbp - 0x22], dh; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c4a1: je 0x4c520; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044c6ab: je 0x4c524; tzcnt eax, eax; add rax, rdx; ret; 
0x000000000044c6f9: je 0x4c740; tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000044c86f: je 0x4c880; tzcnt ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044c893: je 0x4c8b0; tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x000000000044c8c3: je 0x4c8e0; tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; ret; 
0x000000000044c969: je 0x4c980; tzcnt rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044ce2f: je 0x4ceb0; mov byte ptr [rdi], 0; ret; 
0x000000000044ce20: je 0x4ced0; cmp edx, 1; ja 0x4cec0; je 0x4ceb0; mov byte ptr [rdi], 0; ret; 
0x000000000044cfa9: je 0x4d000; tzcnt eax, eax; ret; 
0x000000000044d0e9: je 0x4d007; tzcnt eax, eax; ret; 
0x000000000044d6b7: je 0x4d720; tzcnt eax, eax; ret; 
0x000000000044d970: je 0x4da20; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044dc03: je 0x4dc11; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044dc65: je 0x4dce0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044dc89: je 0x4dce4; tzcnt eax, eax; add rax, rcx; ret; 
0x000000000044de14: je 0x4ddf8; ret; 
0x000000000044e3cd: je 0x4e3a7; ret; 
0x000000000044ed01: je 0x4ed27; sbb byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x77], 0xef; call rbx; 
0x000000000044ef4c: je 0x4ef70; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044eee1: je 0x4ef80; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044f095: je 0x4f120; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000044f72f: je 0x4f735; vzeroall; ret; 
0x000000000044f797: je 0x4f800; tzcnt eax, eax; ret; 
0x000000000044fa7e: je 0x4fa98; sub rsp, 8; call rax; 
0x000000000044faa6: je 0x4fac8; mov rdx, -0x48; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x000000000045051e: je 0x50544; adc byte ptr [rcx - 0x77], al; ror byte ptr [rbx + 0x3108247c], 0xc0; syscall; 
0x0000000000450881: je 0x508a7; sub byte ptr [rdi], cl; xchg eax, esp; ret 0x3948; 
0x00000000004506ce: je 0x50d44; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rsp + 0x10]; mov eax, 0x4f; syscall; 
0x0000000000450ddc: je 0x50e08; mov eax, 0x48; syscall; 
0x0000000000450e6b: je 0x50e98; mov eax, 0x48; syscall; 
0x0000000000450f18: je 0x50f50; mov edx, r8d; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000045110e: je 0x51111; ret; 
0x00000000004527df: je 0x527f0; add rsp, 8; ret; 
0x0000000000453309: je 0x53310; ret; 
0x0000000000453380: je 0x533a0; lea rax, [rip + 0x78ee7]; ret; 
0x0000000000453db9: je 0x53dfa; ret; 
0x0000000000454cbd: je 0x54cd0; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x0000000000454cb8: je 0x54cd0; test rdx, rdx; je 0x54cd0; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x0000000000456cbc: je 0x56cc0; ret; 
0x0000000000456cd8: je 0x56ce8; mov dword ptr [rip + 0x6ddb0], eax; pop rbx; ret; 
0x0000000000457bc1: je 0x57bde; call 0x54fe0; mov rax, qword ptr [rbp - 0x68]; mov rdi, r12; call rax; 
0x0000000000459b29: je 0x59b4f; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a0e9: je 0x5a10f; push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045a8f3: je 0x5a919; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045aec5: je 0x5aeeb; push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045b705: je 0x5b72b; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045da63: je 0x5da89; push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045ea75: je 0x5ea9b; push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000046021e: je 0x60244; push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004626aa: je 0x62681; call 0x861a0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000046267a: je 0x62688; cmp esi, 3; je 0x62688; pop rbx; ret; 
0x000000000046267f: je 0x62688; pop rbx; ret; 
0x0000000000463141: je 0x63145; call rax; 
0x000000000046356a: je 0x6356e; call rdx; 
0x00000000004647ef: je 0x647f3; call rax; 
0x0000000000464f92: je 0x64f98; ret; 
0x00000000004666bd: je 0x666e3; adc byte ptr [rcx - 0x77], al; ror byte ptr [rax - 0x75], 0x7c; and al, 8; mov eax, 0x13e; syscall; 
0x0000000000469fdc: je 0x69ff0; movsx ecx, byte ptr [rsi]; cmp edi, ecx; ja 0x69fc8; mov eax, r8d; ret; 
0x000000000046d897: je 0x6d893; jmp qword ptr [rsi + 0xf]; 
0x000000000046f926: je 0x6f94c; or byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x19]; call qword ptr [rbp + 0x38]; 
0x0000000000473467: je 0x734b1; add esp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000473a20: je 0x73a28; ret; 
0x0000000000473a33: je 0x73a7d; mov eax, dword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000473a80: je 0x73add; pop rbp; pop r12; ret; 
0x0000000000473b10: je 0x73b5a; add esp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000047427f: je 0x74284; and dword ptr [rbx], 0xffffffef; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004742da: je 0x742df; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000474347: je 0x74358; cmp rcx, rsi; ja 0x74340; lea eax, [rdx + rdi]; ret; 
0x000000000047473a: je 0x7473d; ret; 
0x0000000000474777: je 0x74789; mov rax, qword ptr fs:[0x10]; mov byte ptr [rax + 0x972], 0; ret; 
0x00000000004747d7: je 0x747e0; ret; 
0x0000000000474923: je 0x7492a; cmp eax, -0x4b; jne 0x74910; neg eax; ret; 
0x0000000000474a22: je 0x74a48; or al, 0x48; mov edi, dword ptr [rsp + 0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x00000000004756af: je 0x755a4; mov eax, 0x16; ret; 
0x00000000004756a3: je 0x755e8; xor eax, eax; ret; 
0x0000000000475670: je 0x756d0; mov eax, 0x16; ret; 
0x0000000000475667: je 0x75800; cmp eax, 0x21; je 0x756d0; mov eax, 0x16; ret; 
0x0000000000475951: je 0x758fe; mov eax, 0x83; ret; 
0x0000000000475cb6: je 0x75cf0; xor r10d, r10d; mov esi, 0x80; mov rdi, rbp; mov eax, r8d; syscall; 
0x0000000000475de9: je 0x75e00; push rbx; mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000475e18: je 0x75e20; xor eax, eax; ret; 
0x00000000004764ff: je 0x76508; ret; 
0x000000000047654d: je 0x76517; ret; 
0x0000000000476e24: je 0x76ff0; bsr rax, rax; add rax, rdi; ret; 
0x00000000004770b4: je 0x76ff0; bsr rax, rsi; add rax, rdi; ret; 
0x0000000000476ebe: je 0x76ff0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000047724f: je 0x77204; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000477274: je 0x77290; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004773ec: je 0x773f2; vzeroall; ret; 
0x000000000047761f: je 0x775d4; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x0000000000477644: je 0x77650; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x00000000004775d6: je 0x77650; mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x00000000004777bd: je 0x77797; ret; 
0x00000000004777df: je 0x777e8; ret; 
0x0000000000477826: je 0x777ff; test esi, esi; lea rdx, [rip + 0x15cf]; lea rax, [rip + 0x18c8]; cmove rax, rdx; ret; 
0x0000000000477aa9: je 0x77aaf; test edx, edx; jne 0x77aa0; ret; 
0x0000000000477f06: je 0x77f60; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000047812a: je 0x78137; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000478329: je 0x78340; mov cl, dl; and cl, 0xf; je 0x78350; ret; 
0x0000000000478330: je 0x78350; ret; 
0x0000000000478345: je 0x78360; add rax, 2; ret; 
0x0000000000478428: je 0x78432; bsf eax, edx; shr rax, 2; ret; 
0x00000000004784cd: je 0x784e0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000478474: je 0x784f0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000478774: je 0x78664; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000478984: je 0x7898a; vzeroall; ret; 
0x0000000000478a32: je 0x78a38; vzeroall; ret; 
0x0000000000478ca9: je 0x78d00; tzcnt eax, eax; ret; 
0x0000000000478df1: je 0x78d07; tzcnt eax, eax; ret; 
0x0000000000478e30: je 0x78f00; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004790c0: je 0x790ce; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000479130: je 0x79200; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004793f0: je 0x793fe; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000479cd5: je 0x79cfb; adc byte ptr [rbx - 0x47e7db84], cl; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x0000000000479dc1: je 0x79df0; mov eax, 0x101; syscall; 
0x000000000047a6bd: je 0x7a6f8; leave; xor eax, eax; ret; 
0x000000000047d6e2: je 0x7d6c1; add byte ptr [rax - 0x7d], cl; ret; 
0x00000000004806b3: je 0x806a4; xor eax, eax; ret; 
0x00000000004806ce: je 0x806d8; ret; 
0x00000000004809ca: je 0x809cf; mov qword ptr [rsi], rcx; mov rax, r8; ret; 
0x0000000000482471: je 0x82474; lock inc dword ptr [rsi + 0x10]; pop rbx; ret; 
0x00000000004854ca: je 0x85420; sub eax, esi; ret; 
0x0000000000486251: je 0x86240; cmp rcx, rax; sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x0000000000488303: je 0x88318; mov r8, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, r8; jmp rax; 
0x0000000000488b52: je 0x88b6e; lea rbx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000489d5a: je 0x89d58; inc dword ptr [rbp + 0x480a74c0]; mov eax, 0xffffffb8; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x0000000000489d5f: je 0x89d6b; mov rax, -0x48; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x0000000000489dbd: je 0x89e23; jne 0x89db0; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000048aa0e: je 0x8aa34; or al, ch; retf 0xf951; jmp qword ptr [rsi + 0x49]; 
0x000000000048ab9c: je 0x8ac14; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x8ab90; ret; 
0x000000000048ccbf: je 0x8ccc3; add al, ch; stc; ja 0x8ccbd; jmp qword ptr [rsi + 0xf]; 
0x000000000048dc7a: je 0x8dca0; or al, ch; out dx, al; ret 0xfffe; 
0x0000000000408df0: je 0x8dfb; mov dword ptr [rax], 0; mov dword ptr [rax + 4], ebx; pop rbx; ret; 
0x000000000048e365: je 0x8e380; call 0x1ff20; nop dword ptr [rax]; mov qword ptr fs:[rbx], 0; pop rbx; ret; 
0x0000000000490a77: je 0x90ac8; xor eax, eax; test edi, edi; jne 0x909ac; add rsp, 0x38; ret; 
0x0000000000490daa: je 0x90dbc; movss xmm0, dword ptr [rip + 0x239ec]; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x0000000000490f53: je 0x90fa4; add rsp, 0x18; ret; 
0x0000000000493c0e: je 0x93c20; mov edi, 1; jmp rax; 
0x0000000000496f3a: je 0x96f3e; call rax; 
0x000000000049721b: je 0x97224; call rax; 
0x0000000000497212: je 0x97229; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x97224; call rax; 
0x000000000040ecea: je 0xed10; and byte ptr [rbx - 0x50c2fbba], cl; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rip - 0x76ffffeb], eax; ret 0xc083; 
0x000000000040f41a: je 0xf440; cmp byte ptr [rcx + rcx*4 - 6], cl; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x00000000004118a4: jg 0x118b0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000411e77: jg 0x11ea0; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000417ae1: jg 0x17b20; add rsp, 8; ret; 
0x0000000000419f69: jg 0x19f70; ret; 
0x0000000000401a5b: jg 0x1a96; ret 0x3a77; 
0x000000000041b200: jg 0x1b24e; mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041b5db: jg 0x1b625; mov edi, ebx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041fb0b: jg 0x1fb18; pop rbx; pop rbp; pop r12; ret; 
0x000000000042307d: jg 0x230b3; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000423277: jg 0x2327b; add byte ptr [rax - 0x73], cl; add eax, 0x27fbf; cmove rax, rdx; ret; 
0x000000000042afa7: jg 0x2aff1; add eax, edi; vzeroupper; ret; 
0x000000000042e309: jg 0x2e35a; ret; 
0x000000000042e38f: jg 0x2e3d8; ret; 
0x000000000042e509: jg 0x2e55a; ret 0x894c; 
0x000000000042e58f: jg 0x2e5d8; ret 0x894c; 
0x0000000000430ce9: jg 0x30d3a; ret; 
0x0000000000430d6f: jg 0x30db8; ret; 
0x0000000000430ee9: jg 0x30f3a; ret 0x894c; 
0x0000000000430f6f: jg 0x30fb8; ret 0x894c; 
0x00000000004332f8: jg 0x33341; loope 0x332ef; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000043336f: jg 0x333b8; ret 0xff2; 
0x00000000004333ff: jg 0x33448; ret; 
0x00000000004334a8: jg 0x334f1; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000433528: jg 0x33571; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004335a8: jg 0x335f1; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000433628: jg 0x33671; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004338a8: jg 0x338f1; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433928: jg 0x33971; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004339b8: jg 0x33a01; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433a38: jg 0x33a81; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433aac: jg 0x33ab5; ret; 
0x0000000000433b06: jg 0x33b17; ret; 
0x0000000000433b01: jg 0x33b4a; psllq mm1, qword ptr [rdi]; jg 0x33b17; ret; 
0x0000000000433b76: jg 0x33b87; ret; 
0x0000000000433be6: jg 0x33bf7; ret; 
0x0000000000433bd3: jg 0x33c1c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433be1: jg 0x33c2a; or eax, 0xf7f0ff3; ret; 
0x0000000000433c56: jg 0x33c67; ret; 
0x0000000000433c51: jg 0x33c9a; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000433cc6: jg 0x33cd7; ret; 
0x0000000000433cc1: jg 0x33d0a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000433d36: jg 0x33d47; ret; 
0x0000000000433d31: jg 0x33d7a; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000433da6: jg 0x33db7; ret; 
0x0000000000433da1: jg 0x33dea; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000433e16: jg 0x33e27; ret; 
0x0000000000433e11: jg 0x33e5a; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x0000000000433e86: jg 0x33e97; ret; 
0x0000000000433ef6: jg 0x33f07; ret; 
0x0000000000433f66: jg 0x33f77; ret; 
0x0000000000433f53: jg 0x33f9c; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433f61: jg 0x33faa; add eax, 0xf7f0ff3; ret; 
0x0000000000433fd6: jg 0x33fe7; ret; 
0x0000000000433fd1: jg 0x3401a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000434046: jg 0x34057; ret; 
0x0000000000434041: jg 0x3408a; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x00000000004340b6: jg 0x340c7; ret; 
0x00000000004340b1: jg 0x340fa; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000434126: jg 0x34137; ret; 
0x0000000000434121: jg 0x3416a; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000435e28: jg 0x35e71; loope 0x35e1f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435e9f: jg 0x35ee8; ret 0xff2; 
0x0000000000435f2f: jg 0x35f78; ret; 
0x0000000000435fd8: jg 0x36021; in al, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000436058: jg 0x360a1; in eax, 0xf3; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004360d8: jg 0x36121; out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000436158: jg 0x361a1; out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x00000000004363d8: jg 0x36421; in al, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000436458: jg 0x364a1; in eax, dx; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004364e8: jg 0x36531; out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000436568: jg 0x365b1; out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004365dc: jg 0x365e5; ret; 
0x0000000000436636: jg 0x36647; ret; 
0x0000000000436631: jg 0x3667a; psllq mm1, qword ptr [rdi]; jg 0x36647; ret; 
0x00000000004366a6: jg 0x366b7; ret; 
0x0000000000436716: jg 0x36727; ret; 
0x0000000000436703: jg 0x3674c; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436711: jg 0x3675a; or eax, 0xf7f0ff3; ret; 
0x0000000000436786: jg 0x36797; ret; 
0x0000000000436781: jg 0x367ca; or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x00000000004367f6: jg 0x36807; ret; 
0x00000000004367f1: jg 0x3683a; or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000436866: jg 0x36877; ret; 
0x0000000000436861: jg 0x368aa; or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x00000000004368d6: jg 0x368e7; ret; 
0x00000000004368d1: jg 0x3691a; or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000436946: jg 0x36957; ret; 
0x0000000000436941: jg 0x3698a; or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x00000000004369b6: jg 0x369c7; ret; 
0x0000000000436a26: jg 0x36a37; ret; 
0x0000000000436a96: jg 0x36aa7; ret; 
0x0000000000436a83: jg 0x36acc; adc eax, 0x46f00ff2; add eax, 0xef00ff2; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000436a91: jg 0x36ada; add eax, 0xf7f0ff3; ret; 
0x0000000000436b06: jg 0x36b17; ret; 
0x0000000000436b01: jg 0x36b4a; add al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x0000000000436b76: jg 0x36b87; ret; 
0x0000000000436b71: jg 0x36bba; add esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000436be6: jg 0x36bf7; ret; 
0x0000000000436be1: jg 0x36c2a; add dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000436c56: jg 0x36c67; ret; 
0x0000000000436c51: jg 0x36c9a; add ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x0000000000436d94: jg 0x36d9d; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000436db8: jg 0x36dc1; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000436dcc: jg 0x36dd5; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x000000000043723e: jg 0x37238; ret; 
0x000000000043f797: jg 0x3f7e1; add eax, edi; vzeroupper; ret; 
0x000000000043f997: jg 0x3f9e1; add eax, edi; vzeroupper; ret; 
0x000000000043fe0c: jg 0x3fe25; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000043fe2c: jg 0x3fe45; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x0000000000443436: jg 0x4343f; ret; 
0x0000000000443446: jg 0x4344f; mov byte ptr [rdi + 0x10], dh; ret; 
0x000000000044345a: jg 0x43463; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000443479: jg 0x43482; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000443489: jg 0x43492; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000443499: jg 0x434a2; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x00000000004434ba: jg 0x434c3; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004434da: jg 0x434e3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004434fa: jg 0x43503; mov qword ptr [rdi + 0x10], rcx; ret; 
0x000000000044351a: jg 0x43523; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044353e: jg 0x43547; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000044355d: jg 0x43566; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x000000000044357d: jg 0x43586; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044359b: jg 0x435a4; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004435bb: jg 0x435c4; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004435db: jg 0x435e4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x00000000004435fb: jg 0x43604; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000443ad6: jg 0x43adf; lea rax, [rdi + 0xf]; ret; 
0x0000000000443ae6: jg 0x43aef; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000443afa: jg 0x43b03; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000443b19: jg 0x43b22; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000443b39: jg 0x43b42; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000443b59: jg 0x43b62; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000443b7a: jg 0x43b83; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x0000000000443b9a: jg 0x43ba3; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000443bba: jg 0x43bc3; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000443bda: jg 0x43be3; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000443bfe: jg 0x43c07; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000443c1d: jg 0x43c26; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000443c3d: jg 0x43c46; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000443c5b: jg 0x43c64; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000443c7b: jg 0x43c84; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x0000000000443c9b: jg 0x43ca4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000443c5f: jg 0x43cb8; or eax, 0x1c478d48; ret; 
0x0000000000443cbb: jg 0x43cc4; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x000000000044404c: jg 0x44065; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044406c: jg 0x44085; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044626b: jg 0x46274; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000446261: jg 0x4627a; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000446738: jg 0x4676a; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000446af7: jg 0x46b00; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000446b63: jg 0x46b6c; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x0000000000446bae: jg 0x46bb7; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446bdf: jg 0x46be8; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000446d24: jg 0x46d28; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000446d28: jg 0x46d2b; vzeroupper; ret; 
0x0000000000446de9: jg 0x46deb; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000446da8: jg 0x46dee; cmp ah, al; vzeroupper; ret; 
0x0000000000446da4: jg 0x46e06; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x0000000000446e4f: jg 0x46e51; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000447280: jg 0x47289; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x00000000004472ec: jg 0x472f5; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000044734c: jg 0x47355; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447367: jg 0x47370; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000447397: jg 0x473a0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000447522: jg 0x47526; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000447528: jg 0x4752b; ret; 
0x00000000004475c6: jg 0x475cb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x0000000000447605: jg 0x47607; ret; 
0x00000000004475cc: jg 0x47612; cmp bh, bh; ret; 
0x00000000004475be: jg 0x47637; add ah, byte ptr [rdx - 0x1f]; dec byte ptr [rax + 0x7f]; jg 0x475cb; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x00000000004475c5: jg 0x47646; add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x000000000044765b: jg 0x4765d; ret; 
0x0000000000447c8c: jg 0x47c95; vzeroupper; ret; 
0x0000000000447ce2: jg 0x47ce4; vmovdqu ymmword ptr [rax + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000447ce6: jg 0x47d2c; adc al, ah; vzeroupper; ret; 
0x0000000000447d62: jg 0x47d6b; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000447dc4: jg 0x47dc6; vmovdqu xmmword ptr [rax + rdx - 0x10], xmm0; vzeroupper; ret; 
0x0000000000447dc8: jg 0x47e0e; adc al, dh; vzeroupper; ret; 
0x0000000000447e50: jg 0x47e59; ret; 
0x0000000000447ea0: jg 0x47ea2; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000447ee7: jg 0x47ee9; ret; 
0x0000000000447ea6: jg 0x47eec; adc bh, bh; ret; 
0x0000000000447ee5: jg 0x47f30; jg 0x47ee9; ret; 
0x0000000000447fb4: jg 0x47fb6; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000447fc4: jg 0x47fc6; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000447fba: jg 0x48000; adc bh, bh; ret; 
0x0000000000447fca: jg 0x48010; adc bh, bh; ret; 
0x00000000004487a3: jg 0x487ac; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; je 0x487b4; vzeroall; ret; 
0x00000000004487fe: jg 0x48807; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044b1fd: jg 0x4b206; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b269: jg 0x4b272; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b2b2: jg 0x4b2bb; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044b2e5: jg 0x4b2ee; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000044b45c: jg 0x4b460; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000044b462: jg 0x4b465; ret; 
0x000000000044b4e7: jg 0x4b4f0; vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000044b4fc: jg 0x4b501; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000044b533: jg 0x4b535; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000044b502: jg 0x4b548; cmp bh, bh; ret; 
0x000000000044b592: jg 0x4b594; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000044ba4d: jg 0x4ba56; ret; 
0x000000000044ba9d: jg 0x4ba9f; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044bae4: jg 0x4bae6; ret; 
0x000000000044baa3: jg 0x4bae9; adc bh, bh; ret; 
0x000000000044bae2: jg 0x4bb0d; jg 0x4bae6; ret; 
0x000000000044bb68: jg 0x4bb6b; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000044bba4: jg 0x4bba6; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000044bbaa: jg 0x4bbf0; adc bh, bh; ret; 
0x000000000044bf4b: jg 0x4bfcc; jmp qword ptr [rdx - 0x1f]; 
0x000000000044cd1b: jg 0x4cd9c; jmp qword ptr [rdx - 0x1f]; 
0x000000000044f267: jg 0x4f2b1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000045424b: jg 0x54260; mov qword ptr [rax + 0x48], r9; mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x00000000004651c7: jg 0x651f1; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000466614: jg 0x66638; xor eax, eax; add rsp, 8; ret; 
0x000000000046a05b: jg 0x6a098; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000046a14b: jg 0x6a188; mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c381: jg 0x6c3b8; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000046c5b3: jg 0x6c5c0; ret; 
0x0000000000471856: jg 0x71867; xchg eax, esp; ret 0xca08; 
0x0000000000475a3d: jg 0x75a88; nop; add rsp, 0x18; ret; 
0x0000000000475b59: jg 0x75bb0; nop; add rsp, 0x18; ret; 
0x0000000000475df1: jg 0x75dfb; call qword ptr [rbx]; 
0x0000000000475df1: jg 0x75dfb; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000478727: jg 0x78771; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000479809: jg 0x79828; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000479848: jg 0x79892; cmp edx, eax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x00000000004880f4: jg 0x8816b; sbb dword ptr [rax - 0x7b], ecx; div byte ptr [rbp + 0x2c]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000488604: jg 0x88638; pop rbp; ret; 
0x0000000000488824: jg 0x88834; pcmpistri xmm1, xmm1, 0x3a; cmp edx, ecx; jle 0x888d0; ret; 
0x0000000000489c57: jg 0x89d08; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000040aded: jg 0xae20; add rsp, 0x18; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000416b14: jge 0x16b16; sbb eax, 0xeaebe474; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000041da20: jge 0x1da2c; add byte ptr [rbp + 0x4b], dh; add rsp, 0x18; pop rbp; pop r12; ret; 
0x000000000043f4c5: jge 0x3f50f; sar edx, cl; test rdx, rdx; je 0x3f570; bsf rax, rdx; ret; 
0x000000000044c4a2: jge 0x4c497; bsf eax, eax; add rax, rdi; ret; 
0x00000000004513c5: jge 0x513c7; call rbx; 
0x0000000000451455: jge 0x51457; call rbx; 
0x0000000000451448: jge 0x5145a; test rdi, rdi; jne 0x51570; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000451488: jge 0x5148a; call rbx; 
0x000000000045147b: jge 0x5148d; test rdi, rdi; jne 0x51510; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514bd: jge 0x514bf; call rbx; 
0x00000000004514b0: jge 0x514c2; test rdi, rdi; jne 0x51550; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514e5: jge 0x514e7; call rbx; 
0x00000000004514dc: jge 0x514ee; test rdi, rdi; jne 0x51530; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004521ee: jge 0x521f0; call rbx; 
0x000000000045229d: jge 0x5229f; call rbx; 
0x0000000000452290: jge 0x522a2; test rdi, rdi; jne 0x52350; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522c9: jge 0x522cb; call rbx; 
0x00000000004522c0: jge 0x522d2; test rdi, rdi; jne 0x52330; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522f5: jge 0x522f7; call rbx; 
0x00000000004522ec: jge 0x522fe; test rdi, rdi; jne 0x52310; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000454299: jge 0x54248; ret; 
0x00000000004543e9: jge 0x54378; ret; 
0x0000000000477a21: jge 0x77a23; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x0000000000486918: jge 0x86963; shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000049356d: jge 0x93567; leave; ret; 
0x0000000000493713: jge 0x9370d; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000493869: jge 0x93863; leave; ret; 
0x00000000004938ed: jge 0x938e7; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000493ac1: jge 0x93abb; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000493b1b: jge 0x93b15; leave; ret; 
0x0000000000493bed: jge 0x93be7; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000041131b: jl 0x11341; or byte ptr [rbx - 0x7bf00002], al; ret; 
0x0000000000401c8b: jl 0x1cb1; adc al, 0x48; mov esi, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x000000000041db3e: jl 0x1db4a; add byte ptr [rcx], bh; ret 0xa7e; 
0x000000000041db58: jl 0x1db64; add byte ptr [rax + 1], cl; ret; 
0x000000000041db62: jl 0x1db6e; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000401f27: jl 0x1f4d; hlt; add esi, eax; and al, 0xf3; add dword ptr [rbp - 0x77], ecx; ret; 
0x0000000000436d23: jl 0x36d6d; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436d2a: jl 0x36d74; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436d31: jl 0x36d7b; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436d38: jl 0x36d82; adc dword ptr [rcx - 1], edi; ret; 
0x0000000000436d60: jl 0x36daa; adc dword ptr [rdi], eax; vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436d66: jl 0x36db0; adc dword ptr [rdi + 1], ecx; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436d6d: jl 0x36db7; adc dword ptr [rcx - 2], edx; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436d74: jl 0x36dbe; adc dword ptr [rcx - 1], ebx; ret; 
0x0000000000436f5d: jl 0x36fa7; adc dword ptr [rcx - 4], esp; vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436f64: jl 0x36fae; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436f6b: jl 0x36fb5; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436f72: jl 0x36fbc; adc dword ptr [rcx - 1], edi; ret; 
0x00000000004370cb: jl 0x37115; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004370d2: jl 0x3711c; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004370d9: jl 0x37123; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000437226: jl 0x37270; adc dword ptr [rdi - 5], esp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043722d: jl 0x37277; adc dword ptr [rdi - 6], ebp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000437234: jl 0x3727e; adc dword ptr [rdi - 7], esi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043723b: jl 0x37285; adc dword ptr [rdi - 8], edi; ret; 
0x000000000044620b: jl 0x46255; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446212: jl 0x4625c; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446219: jl 0x46263; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446220: jl 0x4626a; adc dword ptr [rsi - 1], edx; ret; 
0x000000000044622d: jl 0x46277; adc dword ptr [rdi], edx; vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446233: jl 0x4627d; adc dword ptr [rdi + 1], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044623a: jl 0x46284; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446241: jl 0x4628b; adc dword ptr [rsi - 1], edx; ret; 
0x000000000044624e: jl 0x46298; adc dword ptr [rdi], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446254: jl 0x4629e; adc dword ptr [rsi - 1], edx; ret; 
0x0000000000446314: jl 0x4635e; adc dword ptr [rsi - 4], edx; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044631b: jl 0x46365; adc dword ptr [rsi - 3], edx; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446322: jl 0x4636c; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446329: jl 0x46373; adc dword ptr [rsi - 1], edx; ret; 
0x000000000044636d: jl 0x463b7; adc dword ptr [rsi], edx; vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446373: jl 0x463bd; adc dword ptr [rsi + 1], edx; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000044637a: jl 0x463c4; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446381: jl 0x463cb; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000446410: jl 0x4645a; adc dword ptr [rsi + 5], edx; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446417: jl 0x46461; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000044641e: jl 0x46468; adc dword ptr [rsi + 7], edx; ret; 
0x000000000044744c: jl 0x47465; cld; ret; 
0x0000000000447c25: jl 0x47c37; clc; ret; 
0x0000000000447c2c: jl 0x47c3e; cld; ret; 
0x0000000000447dd5: jl 0x47de7; clc; vzeroupper; ret; 
0x0000000000447de3: jl 0x47df5; cld; vzeroupper; ret; 
0x0000000000447fd5: jl 0x47fe7; clc; ret; 
0x0000000000447fdc: jl 0x47fee; cld; ret; 
0x000000000044b38c: jl 0x4b3a5; cld; ret; 
0x000000000044bbb5: jl 0x4bbc7; clc; ret; 
0x000000000044bbbc: jl 0x4bbce; cld; ret; 
0x000000000044df04: jl 0x4df2a; adc byte ptr [rdx + 1], ch; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044df7e: jl 0x4dfa4; adc byte ptr [rdx + 1], ch; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004505c5: jl 0x505eb; or byte ptr [rax + 1], bh; syscall; 
0x00000000004506d6: jl 0x506fc; adc byte ptr [rax - 0x75], cl; jl 0x50701; adc byte ptr [rax + 0x4f], bh; syscall; 
0x00000000004506db: jl 0x50701; adc byte ptr [rax + 0x4f], bh; syscall; 
0x000000000045221d: jl 0x52243; adc byte ptr [rax - 0x7b], cl; push qword ptr [rbp + 0x4b]; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000454223: jl 0x5426e; cmp ecx, edx; jbe 0x5424d; ret; 
0x0000000000454eb8: jl 0x54eba; add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000045512f: jl 0x55155; ret; 
0x0000000000455142: jl 0x55168; ret 0x7400; 
0x0000000000459b2e: jl 0x59b54; push rax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000459c3e: jl 0x59c64; sbb byte ptr [rax - 0x7d], cl; ret; 
0x000000000045a0ee: jl 0x5a114; pop rax; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045a8f8: jl 0x5a91e; push rax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045aeca: jl 0x5aef0; pop rax; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045b70a: jl 0x5b730; push rax; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045c88b: jl 0x5c887; jmp qword ptr [rsi - 0x70]; 
0x000000000045da68: jl 0x5da8e; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045ea7a: jl 0x5eaa0; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000460223: jl 0x60249; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x00000000004666c5: jl 0x666eb; or byte ptr [rax + 0x13e], bh; syscall; 
0x00000000004747e3: jl 0x747ea; add cl, al; call 0x1e7caf7; mov dword ptr [rip + 0x539fe], eax; ret; 
0x0000000000476a32: jl 0x76a68; adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x0000000000479cd9: jl 0x79cff; sbb byte ptr [rax + 0x101], bh; syscall; 
0x000000000047c854: jl 0x7c84e; jmp qword ptr [rsi + 0xf]; 
0x000000000048c3dc: jl 0x8c402; or al, 1; setne al; mov dword ptr [rip + 0x3ff47], eax; add rsp, 0x18; ret; 
0x00000000004182ce: jle 0x182d0; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000041875c: jle 0x1875f; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x0000000000422ce1: jle 0x22ce3; add byte ptr [rax - 0x73], cl; add eax, 0x7945; cmove rax, rdx; ret; 
0x0000000000422cfe: jle 0x22d02; add byte ptr [rax - 0x73], cl; add eax, 0x2ac38; cmove rax, rdx; ret; 
0x000000000042b75b: jle 0x2b773; vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2b4a0; ret; 
0x000000000043f311: jle 0x3f35b; bsf eax, edx; ret; 
0x00000000004460cc: jle 0x460e4; movsxd rax, ecx; ret; 
0x0000000000446284: jle 0x46247; cmp dl, 4; jb 0x46291; mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x0000000000446da7: jle 0x46e28; cmp r12b, al; vzeroupper; ret; 
0x000000000044865b: jle 0x48673; vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x483a0; ret; 
0x00000000004626c2: jle 0x626cc; sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x0000000000467019: jle 0x66f1a; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000472fc1: jle 0x72fa8; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000475c3e: jle 0x75c28; clc; jmp qword ptr [rsi + 0x2e]; 
0x00000000004883f7: jle 0x883ed; sub rsp, 8; call 0x1ab30; xor eax, eax; add rsp, 8; ret; 
0x000000000048882e: jle 0x888d0; ret; 
0x000000000042b58b: jmp qword ptr [rax + 0x73]; 
0x000000000046de8e: jmp qword ptr [rax]; 
0x000000000048b46d: jmp qword ptr [rcx - 1]; 
0x0000000000481bce: jmp qword ptr [rdi + 0x6d]; 
0x0000000000469ab4: jmp qword ptr [rdi + 0x75]; 
0x0000000000455b65: jmp qword ptr [rdi + 7]; 
0x000000000046974e: jmp qword ptr [rdi - 0x75]; 
0x0000000000410a7d: jmp qword ptr [rdi]; 
0x00000000004370a6: jmp qword ptr [rdx + 0x51]; 
0x0000000000437207: jmp qword ptr [rdx + 0x71]; 
0x000000000044727b: jmp qword ptr [rdx - 0x1f]; 
0x00000000004371bf: jmp qword ptr [rdx - 0x2f]; 
0x000000000044affb: jmp qword ptr [rdx - 0x4e]; 
0x000000000044b187: jmp qword ptr [rdx - 0xd]; 
0x0000000000436d05: jmp qword ptr [rdx - 0xf]; 
0x0000000000468467: jmp qword ptr [rsi + 0x25]; 
0x0000000000403ef3: jmp qword ptr [rsi + 0x2e]; 
0x000000000046b9e8: jmp qword ptr [rsi + 0x3d]; 
0x0000000000446144: jmp qword ptr [rsi + 0x41]; 
0x00000000004107ea: jmp qword ptr [rsi + 0x44]; 
0x00000000004319bf: jmp qword ptr [rsi + 0x45]; 
0x00000000004111b0: jmp qword ptr [rsi + 0x48]; 
0x0000000000457f71: jmp qword ptr [rsi + 0x49]; 
0x0000000000401be0: jmp qword ptr [rsi + 0x66]; 
0x000000000042527f: jmp qword ptr [rsi + 0xf]; 
0x000000000040256d: jmp qword ptr [rsi - 0x70]; 
0x000000000040e47c: jmp qword ptr [rsi - 0x77]; 
0x000000000048331b: jmp qword ptr [rsi - 0x7b]; 
0x000000000040331c: jmp qword ptr [rsi - 0x7d]; 
0x0000000000410db1: jmp qword ptr [rsi - 0x7f]; 
0x0000000000467e22: jmp qword ptr [rsi]; 
0x00000000004016ec: jmp rax; 
0x0000000000484b6b: jmp rbx; 
0x000000000040c6c7: jmp rcx; 
0x0000000000403e4b: jmp rdx; 
0x000000000042d855: jmp rsi; 
0x000000000041ce2d: jmp rsp; 
0x0000000000411a0a: jne 0x11a54; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000000411b88: jne 0x11bd4; add rsp, 0xe8; pop rbx; pop rbp; ret; 
0x0000000000412ea3: jne 0x12ec6; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004130cd: jne 0x130d6; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x0000000000413880: jne 0x1391a; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000041423b: jne 0x14332; add rsp, 0x38; pop rbx; pop rbp; ret; 
0x000000000041458c: jne 0x145a0; mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x00000000004156c6: jne 0x156cf; mov rdx, qword ptr [rbp + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, rbp; call rax; 
0x000000000047b41b: jne 0x15a2; pop rbx; pop rbp; pop r12; ret; 
0x0000000000493132: jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x0000000000493184: jne 0x1618; mov qword ptr [rcx], rdx; ret; 
0x0000000000416b39: jne 0x16b40; ret; 
0x0000000000417d77: jne 0x17d80; ret; 
0x0000000000417fb9: jne 0x17fa8; ret; 
0x0000000000418fc6: jne 0x18fb8; ret; 
0x000000000041916a: jne 0x19180; pop rbp; ret; 
0x0000000000419282: jne 0x19243; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000401965: jne 0x1947; xor eax, eax; pop rbx; ret; 
0x0000000000419b3e: jne 0x19b30; ret; 
0x0000000000419b77: jne 0x19b88; sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000419f16: jne 0x19f30; mov qword ptr [rip + 0xae299], rbx; add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x000000000041a80a: jne 0x1a83d; test byte ptr [rcx + rcx*4 - 0x11], 0xe8; cmp ebp, dword ptr [rax - 2]; dec dword ptr [rax - 0x77]; ret; 
0x000000000041abe4: jne 0x1abc0; mov rdx, qword ptr [rbp]; test rdx, rdx; je 0x1abc0; call rdx; 
0x000000000041b73c: jne 0x1b746; and eax, 0x38; cmp eax, 8; je 0x1b747; ret; 
0x000000000041d1e0: jne 0x1d1e9; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x000000000041da23: jne 0x1da70; add rsp, 0x18; pop rbp; pop r12; ret; 
0x000000000041db77: jne 0x1db5e; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x000000000041fa3b: jne 0x1fa40; ret; 
0x000000000041fa94: jne 0x1fa74; pop rbx; pop rbp; pop r12; ret; 
0x000000000041fbb5: jne 0x1fb80; mov dword ptr [rip + 0xac663], 0; ret; 
0x000000000041fcd9: jne 0x1feb8; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000420b35: jne 0x20cff; add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x0000000000420e2e: jne 0x2100a; add rsp, 0x10; pop rbp; pop r12; pop r13; ret; 
0x000000000042163b: jne 0x21652; mov rax, qword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000004217ec: jne 0x217f8; add rsp, 0x60; mov rax, r12; pop r12; ret; 
0x0000000000422117: jne 0x220de; ret; 
0x000000000042210b: jne 0x220f3; lea rax, [rip + 0x1ccec]; test ch, 4; jne 0x220de; ret; 
0x000000000042218a: jne 0x2214a; ret; 
0x000000000042217e: jne 0x2216f; lea rax, [rip + 0x3b89]; test ch, 4; jne 0x2214a; ret; 
0x000000000042220a: jne 0x221ca; ret; 
0x00000000004221fe: jne 0x221ef; lea rax, [rip + 0x1d8a9]; test ch, 4; jne 0x221ca; ret; 
0x0000000000422351: jne 0x22331; and ch, 4; lea rdx, [rip + 0x1d303]; lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223c1: jne 0x223a1; and ch, 4; lea rdx, [rip + 0x1d413]; lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x0000000000422cd8: jne 0x22cb1; and ch, 4; lea rdx, [rip + 0x7e9c]; lea rax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x0000000000422d88: jne 0x22d2d; ret; 
0x0000000000422d3a: jne 0x22d51; and dh, 2; lea rax, [rip + 0x827a]; lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x0000000000422d79: jne 0x22d51; and esi, 0x400; lea rax, [rip + 0x8638]; jne 0x22d2d; ret; 
0x0000000000422e1c: jne 0x22e60; and edx, 2; lea rax, [rip + 0xbc88]; lea rdx, [rip + 0x11321]; cmovne rax, rdx; ret; 
0x0000000000402363: jne 0x22e6; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000422f00: jne 0x22f20; test eax, eax; lea rdx, [rip + 0x24d55]; lea rax, [rip + 0x24dae]; cmove rax, rdx; ret; 
0x0000000000422f56: jne 0x22f34; and dh, 2; lea rax, [rip + 0x24f1e]; lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x000000000042302c: jne 0x23070; and edx, 2; lea rax, [rip + 0x9078]; lea rdx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x000000000042312a: jne 0x230ea; ret; 
0x000000000042311e: jne 0x2310f; lea rax, [rip + 0x20ba9]; test ch, 4; jne 0x230ea; ret; 
0x0000000000423187: jne 0x231cb; add dword ptr [rax], eax; lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x000000000042320c: jne 0x23250; and edx, 2; lea rax, [rip + 0x8eb8]; lea rdx, [rip + 0xe441]; cmovne rax, rdx; ret; 
0x00000000004232f8: jne 0x232d1; and ch, 4; lea rdx, [rip + 0x7b4c]; lea rax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x0000000000423371: jne 0x23351; and ch, 4; lea rdx, [rip + 0x1bd03]; lea rax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x0000000000424a8c: jne 0x24a70; xor eax, eax; sub eax, ecx; ret; 
0x000000000042604d: jne 0x26030; sub eax, ecx; vzeroupper; ret; 
0x000000000042a4e2: jne 0x2a4c0; sub eax, ecx; vzeroupper; ret; 
0x000000000042a825: jne 0x2a900; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042a8c7: jne 0x2a920; xor eax, eax; ret; 
0x000000000042a897: jne 0x2a940; xor eax, eax; ret; 
0x000000000042ab13: jne 0x2ab60; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b76a: jne 0x2b4a0; ret; 
0x000000000042b6c8: jne 0x2b4a0; xor eax, eax; vzeroupper; ret; 
0x000000000042b5d3: jne 0x2b500; vzeroupper; ret; 
0x000000000042b48d: jne 0x2b503; vzeroupper; ret; 
0x000000000042b601: jne 0x2b644; vzeroupper; ret; 
0x000000000042b636: jne 0x2b680; vzeroupper; ret; 
0x000000000042b991: jne 0x2b903; ret; 
0x000000000042bcef: jne 0x2c060; ret; 
0x000000000043ee4a: jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000043efe4: jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000043f437: jne 0x3f43d; xor rax, rax; ret; 
0x0000000000444210: jne 0x44100; lea rax, [rdi + 0xb]; ret; 
0x00000000004441ca: jne 0x44100; lea rax, [rdi + 0xf]; ret; 
0x0000000000444175: jne 0x44100; lea rax, [rdi + 3]; ret; 
0x0000000000444147: jne 0x44100; lea rax, [rdi + 7]; ret; 
0x00000000004440f6: jne 0x44104; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x000000000044416c: jne 0x442e0; test dl, 4; jne 0x44100; lea rax, [rdi + 3]; ret; 
0x000000000044424e: jne 0x44310; test al, 0x40; jne 0x44320; lea rax, [rdi + 7]; ret; 
0x0000000000444256: jne 0x44320; lea rax, [rdi + 7]; ret; 
0x000000000044413e: jne 0x44320; test dl, 0x40; jne 0x44100; lea rax, [rdi + 7]; ret; 
0x0000000000444207: jne 0x44350; test dh, 4; jne 0x44100; lea rax, [rdi + 0xb]; ret; 
0x00000000004442a0: jne 0x44380; test ah, 0x40; jne 0x44390; lea rax, [rdi + 0xf]; ret; 
0x00000000004442a9: jne 0x44390; lea rax, [rdi + 0xf]; ret; 
0x00000000004441c1: jne 0x44390; test dh, 0x40; jne 0x44100; lea rax, [rdi + 0xf]; ret; 
0x00000000004455a5: jne 0x45620; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x00000000004458d4: jne 0x45ae0; xor eax, eax; ret; 
0x0000000000445a34: jne 0x45af5; cmp eax, ecx; jne 0x45af5; xor eax, eax; ret; 
0x0000000000445af1: jne 0x45af5; cmp eax, ecx; sbb eax, eax; sbb eax, -1; ret; 
0x0000000000445ad0: jne 0x45af5; movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x45af5; xor eax, eax; ret; 
0x0000000000445981: jne 0x45af5; xor eax, eax; ret; 
0x0000000000445c01: jne 0x45bf0; ret; 
0x0000000000445bf8: jne 0x45c10; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45bf0; ret; 
0x0000000000445cb1: jne 0x45ca0; ret; 
0x0000000000445ca8: jne 0x45cc0; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45ca0; ret; 
0x0000000000445e21: jne 0x45e10; lea rax, [rcx - 1]; ret; 
0x0000000000445e18: jne 0x45e30; movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x45e10; lea rax, [rcx - 1]; ret; 
0x0000000000445f71: jne 0x45f60; sub rax, 1; ret; 
0x0000000000445f68: jne 0x45f80; movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45f60; sub rax, 1; ret; 
0x0000000000447b17: jne 0x47b1d; mov rax, rdi; ret; 
0x000000000044866a: jne 0x483a0; ret; 
0x000000000044aeeb: jne 0x4aef0; ret; 
0x000000000044b118: jne 0x4afe4; ret; 
0x000000000044afe1: jne 0x4afea; ret; 
0x000000000044b016: jne 0x4b040; bsf ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000044b146: jne 0x4b14d; ret; 
0x000000000044b197: jne 0x4b1ac; ret; 
0x000000000044c269: jne 0x4c231; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c291: jne 0x4c231; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c229: jne 0x4c231; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044c251: jne 0x4c231; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044c211: jne 0x4c231; ret; 
0x000000000044c449: jne 0x4c3d9; add rax, rdx; ret; 
0x000000000044c3f9: jne 0x4c3d9; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c3d1: jne 0x4c3d9; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c3e8: jne 0x4c3d9; lea rax, [rdi + rax]; ret; 
0x000000000044ca1d: jne 0x4ca00; sub eax, ecx; ret; 
0x000000000044d512: jne 0x4d4f0; sub eax, ecx; ret; 
0x000000000044df44: jne 0x4e01f; add rsp, 0x70; pop rbx; pop rbp; pop r12; ret; 
0x000000000044e3bd: jne 0x4e378; ret; 
0x000000000044e3b1: jne 0x4e391; lea rax, [rip + 0xca6]; and ch, 4; jne 0x4e378; ret; 
0x000000000044e473: jne 0x4e494; add rsp, 0x20; pop rbx; ret; 
0x000000000044e8e5: jne 0x4e93e; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044ee37: jne 0x4ee3d; xor rax, rax; ret; 
0x000000000044fa88: jne 0x4fae0; xor eax, eax; add rsp, 8; ret; 
0x00000000004502eb: jne 0x50301; add rsp, 0x28; ret; 
0x00000000004503f7: jne 0x50460; mov edx, r12d; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000450425: jne 0x504d3; add rsp, 0x68; pop rbp; pop r12; ret; 
0x00000000004504ee: jne 0x50500; syscall; 
0x00000000004504ee: jne 0x50500; syscall; cmp rax, -0x1000; ja 0x50550; ret; 
0x000000000045058e: jne 0x505a0; mov eax, 1; syscall; 
0x000000000045058e: jne 0x505a0; mov eax, 1; syscall; cmp rax, -0x1000; ja 0x505f0; ret; 
0x0000000000450dfb: jne 0x50e43; add rsp, 0x68; ret; 
0x0000000000450e8a: jne 0x50ed3; add rsp, 0x18; ret; 
0x0000000000450f42: jne 0x50f8b; add rsp, 0x58; ret; 
0x000000000045117e: jne 0x51185; add rsp, 0x28; ret; 
0x000000000045119e: jne 0x511b0; mov eax, 9; syscall; 
0x000000000045119e: jne 0x511b0; mov eax, 9; syscall; cmp rax, -0x1000; ja 0x511d0; ret; 
0x00000000004513b8: jne 0x513e0; mov r12, qword ptr [rbp + 0x10]; test r12, r12; jne 0x5140c; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004513c1: jne 0x5140c; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004513e9: jne 0x51438; mov r13, qword ptr [r12 + 0x10]; test r13, r13; jne 0x5146b; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004513f3: jne 0x5146b; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000451423: jne 0x514a0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000451480: jne 0x51510; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514e1: jne 0x51530; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514d8: jne 0x51540; mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x51530; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514b5: jne 0x51550; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045144d: jne 0x51570; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000452076: jne 0x52080; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000452124: jne 0x52130; pop rbp; pop r12; pop r13; ret; 
0x00000000004521ea: jne 0x52210; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004521e1: jne 0x52238; mov r12, qword ptr [rbp + 0x10]; test r12, r12; jne 0x52210; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000452223: jne 0x52270; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000452219: jne 0x52280; mov rdi, qword ptr [r12 + 0x10]; test rdi, rdi; jne 0x52270; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045224f: jne 0x522b0; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004522f1: jne 0x52310; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522e8: jne 0x52320; mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x52310; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522c5: jne 0x52330; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000452295: jne 0x52350; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004527a9: jne 0x527c5; add rsp, 0x1018; ret; 
0x000000000045298a: jne 0x52996; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000452a1a: jne 0x52a26; add rsp, 0x88; pop rbx; pop rbp; ret; 
0x0000000000452ad3: jne 0x52b00; xor r8d, r8d; mov eax, 0x19; syscall; 
0x0000000000452af5: jne 0x52b3d; add rsp, 0x58; ret; 
0x0000000000452c0d: jne 0x52c24; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000452c96: jne 0x52cf7; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000453033: jne 0x53040; ret; 
0x000000000045363b: jne 0x53650; mov r8, qword ptr [rip + 0x73d44]; mov rax, r8; ret; 
0x0000000000453dab: jne 0x53dc0; shl rax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x53dfa; ret; 
0x0000000000454eb6: jne 0x54f38; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000454efc: jne 0x54f4f; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000000454fba: jne 0x54fc5; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x0000000000456afe: jne 0x56ab3; or byte ptr [rip + 0x75a79], 3; pop rbx; ret; 
0x0000000000456b8e: jne 0x56b43; or byte ptr [rip + 0x759e9], 0xc; pop rbx; ret; 
0x0000000000456c22: jne 0x56bce; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000461fd0: jne 0x62097; add rsp, 0xb8; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000004620fa: jne 0x6212d; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000046511a: jne 0x65128; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x00000000004653cd: jne 0x65414; mov eax, r9d; add rsp, 0x148; ret; 
0x000000000046542f: jne 0x65440; add rsp, 8; ret; 
0x000000000046668e: jne 0x666a0; mov eax, 0x13e; syscall; 
0x000000000046668e: jne 0x666a0; mov eax, 0x13e; syscall; cmp rax, -0x1000; ja 0x666f0; ret; 
0x0000000000466eac: jne 0x66ef5; add rsp, 0x38; ret; 
0x000000000046c4b8: jne 0x6c4c2; add rsp, 0xd8; ret; 
0x000000000046c574: jne 0x6c57e; add rsp, 0xd8; ret; 
0x000000000046c5a4: jne 0x6c5b5; mov qword ptr [rdi + 8], 0; xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x6c5c0; ret; 
0x0000000000472914: jne 0x729ba; add rsp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000473391: jne 0x73380; ret; 
0x0000000000473a32: jne 0x73aa8; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000473cb3: jne 0x73bfe; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000473e33: jne 0x73d7e; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x00000000004743fc: jne 0x74410; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000474732: jne 0x7473c; and edx, 0x38; cmp edx, 8; je 0x7473d; ret; 
0x00000000004748a4: jne 0x748ac; add rsp, 0x10; pop rbp; ret; 
0x0000000000474928: jne 0x74910; neg eax; ret; 
0x0000000000474b52: jne 0x74b5a; add rsp, 0x10; pop rbp; ret; 
0x0000000000475699: jne 0x755c3; sub dword ptr [rdi + 4], 1; je 0x755e8; xor eax, eax; ret; 
0x00000000004755b9: jne 0x755c3; test eax, eax; jne 0x758f0; mov eax, 1; ret; 
0x000000000047572b: jne 0x7570e; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x0000000000475946: jne 0x7575c; sub dword ptr [r8 + 4], 1; je 0x758fe; mov eax, 0x83; ret; 
0x00000000004755bd: jne 0x758f0; mov eax, 1; ret; 
0x0000000000475e66: jne 0x75eb0; mov r8, rsi; mov r10d, 8; mov rsi, r8; mov eax, 0xe; syscall; 
0x0000000000475e9d: jne 0x75f17; add rsp, 0x98; ret; 
0x0000000000476521: jne 0x76501; and ch, 4; lea rdx, [rip + 0xba3]; lea rax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x00000000004777ad: jne 0x77768; ret; 
0x00000000004777a1: jne 0x77781; lea rax, [rip + 0xdf6]; and ch, 4; jne 0x77768; ret; 
0x0000000000477808: jne 0x777e1; and ch, 4; lea rdx, [rip + 0x64c]; lea rax, [rip + 0x295]; cmove rax, rdx; ret; 
0x000000000047788f: jne 0x778a6; and ch, 4; lea rax, [rip - 0x2fdfb]; lea rdx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x0000000000477aad: jne 0x77aa0; ret; 
0x0000000000477cd5: jne 0x77db0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000477d77: jne 0x77de0; xor eax, eax; ret; 
0x0000000000477d47: jne 0x77e20; xor eax, eax; ret; 
0x00000000004799fc: jne 0x79a3a; add rsp, 0xa8; pop rbp; pop r12; ret; 
0x0000000000479bde: jne 0x79bb8; mov eax, r8d; ret; 
0x0000000000479c4d: jne 0x79cb0; mov eax, 0x101; syscall; 
0x0000000000479c70: jne 0x79d33; add rsp, 0x78; ret; 
0x0000000000479d73: jne 0x79d7d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000479de0: jne 0x79e2b; add rsp, 0x58; ret; 
0x0000000000479f1c: jne 0x79f44; mov eax, r9d; add rsp, 0x38; ret; 
0x000000000047a6fd: jne 0x7a6bf; leave; mov eax, 1; ret; 
0x000000000047de3b: jne 0x7de10; cmp dword ptr [rdx + 0xc], 0x554e47; jne 0x7de10; ret; 
0x000000000047de35: jne 0x7de10; cmp dword ptr [rdx + 8], 5; jne 0x7de10; cmp dword ptr [rdx + 0xc], 0x554e47; jne 0x7de10; ret; 
0x000000000047de44: jne 0x7de10; ret; 
0x0000000000407efd: jne 0x7f06; pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000480866: jne 0x80850; add rsp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x00000000004808d0: jne 0x808a8; mov eax, dword ptr [rcx]; ret; 
0x000000000048258a: jne 0x825a0; or byte ptr [rdi + 0x31d], 0x40; xor eax, eax; ret; 
0x0000000000482648: jne 0x82658; or byte ptr [rdi + 0x31d], 0x40; ret; 
0x00000000004826af: jne 0x826b8; pop rbx; ret; 
0x0000000000482a6c: jne 0x82a81; mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x0000000000483120: jne 0x83124; call rax; 
0x000000000048324f: jne 0x83261; mov qword ptr [rbp - 0xb0], r10; call rax; 
0x0000000000483a26: jne 0x83a2a; call rax; 
0x0000000000483aa6: jne 0x83ab8; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x0000000000484718: jne 0x84750; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000004847c8: jne 0x84808; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000485454: jne 0x85424; movsx eax, cl; neg eax; ret; 
0x0000000000485d0c: jne 0x85d14; add rsp, 0x20; pop rbx; ret; 
0x0000000000485e23: jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485ef5: jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fc5: jne 0x85ff4; add rsp, 0x58; ret; 
0x00000000004860e3: jne 0x86197; add rsp, 0x68; ret; 
0x00000000004861f9: jne 0x86223; add rsp, 0x38; ret; 
0x0000000000487dfa: jne 0x87e75; leave; ret; 
0x000000000048806a: jne 0x88080; test rdx, rdx; jne 0x88090; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000048806f: jne 0x88090; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000048811a: jne 0x880fc; mov eax, 1; ret; 
0x0000000000488113: jne 0x88102; cmp cx, 0x7fff; jne 0x880fc; mov eax, 1; ret; 
0x00000000004880f5: jne 0x88110; test rsi, rsi; jne 0x88128; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004880fa: jne 0x88128; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004881c6: jne 0x881f8; test rdx, rdx; jne 0x88240; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x00000000004881cb: jne 0x88240; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x000000000048837b: jne 0x883b3; xor eax, eax; ret; 
0x00000000004883e8: jne 0x883f0; xend; xor eax, eax; ret; 
0x0000000000489abb: jne 0x89abe; ret; 
0x0000000000489dbf: jne 0x89db0; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000489e7e: jne 0x89e0b; xor r10d, r10d; mov qword ptr [rip + 0x3b03e], r9; mov rax, r10; add rsp, 0x28; ret; 
0x000000000048a0dd: jne 0x8a0f7; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000048a356: jne 0x8a2e0; ret; 
0x000000000048aba5: jne 0x8ab90; ret; 
0x000000000048ac9a: jne 0x8ac88; mov qword ptr [rip + 0x41d81], 0; pop rbx; ret; 
0x000000000048b116: jne 0x8b123; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000048bff3: jne 0x8bff8; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000048d99d: jne 0x8daa2; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000048dd6a: jne 0x8dd90; mov rdx, qword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x000000000048dde6: jne 0x8dded; add rsp, 0x28; ret; 
0x000000000048dec9: jne 0x8ded0; add rsp, 0x38; ret; 
0x000000000048df39: jne 0x8df40; add rsp, 0x38; ret; 
0x000000000048e024: jne 0x8e02b; add rsp, 0x38; ret; 
0x000000000048e084: jne 0x8e08b; add rsp, 0x38; ret; 
0x000000000048e126: jne 0x8e133; add rsp, 0x38; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000048e1b9: jne 0x8e1c6; add rsp, 0x38; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000048e284: jne 0x8e291; add rsp, 0x38; mov rax, r12; pop rbp; pop r12; ret; 
0x000000000048e320: jne 0x8e32d; add rsp, 0x38; mov rax, r12; pop rbp; pop r12; ret; 
0x00000000004904d1: jne 0x906ef; add rsp, 0x98; pop rbp; pop r12; ret; 
0x000000000049079c: jne 0x9092e; add rsp, 0x78; pop rbp; pop r12; ret; 
0x0000000000490a7d: jne 0x909ac; add rsp, 0x38; ret; 
0x0000000000490c03: jne 0x90c38; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000490f4c: jne 0x90f55; cmp qword ptr [r9 + 0x38], 0; je 0x90fa4; add rsp, 0x18; ret; 
0x0000000000493125: jne 0x9313b; lea rdx, [rip + 0x39912]; cmp byte ptr [rdx + rsi], 8; jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x000000000049317c: jne 0x93190; mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x1618; mov qword ptr [rcx], rdx; ret; 
0x0000000000493569: jne 0x9355b; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049370f: jne 0x93701; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000493865: jne 0x93857; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000004938e9: jne 0x938db; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000493abd: jne 0x93aaf; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000493b17: jne 0x93b09; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000493be9: jne 0x93bdb; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000495928: jne 0x95930; ret; 
0x0000000000495c78: jne 0x95c80; ret; 
0x0000000000495f53: jne 0x95f65; xor eax, eax; ret; 
0x0000000000496596: jne 0x96580; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004965e9: jne 0x965c0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049672d: jne 0x96710; pop rbx; ret; 
0x000000000049729e: jne 0x97280; pop rbx; pop rbp; pop r12; ret; 
0x0000000000409f9d: jne 0x9f78; ret; 
0x0000000000409fd8: jne 0x9fe0; pop rbp; ret; 
0x000000000040a122: jne 0xa124; mov rdi, qword ptr [r12]; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x000000000040b74a: jne 0xb754; add rsp, 0xd8; ret; 
0x000000000040b808: jne 0xb812; add rsp, 0xd8; ret; 
0x000000000041b70f: jno 0x1b71a; add byte ptr [rax], al; mov dword ptr [rsi], eax; mov byte ptr [rdx + 0x971], dil; xor eax, eax; ret; 
0x000000000041b718: jno 0x1b723; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000436d34: jno 0x36d34; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436f6e: jno 0x36f6e; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x00000000004370d5: jno 0x370dd; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000437225: jno 0x372a3; adc qword ptr [rdi - 5], rsp; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043722c: jno 0x372aa; adc qword ptr [rdi - 6], rbp; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000437233: jno 0x372b1; adc qword ptr [rdi - 7], rsi; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043723a: jno 0x372b8; adc qword ptr [rdi - 8], rdi; ret; 
0x000000000044d1ab: jno 0x4d1b0; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x00000000004533fb: jno 0x533cb; cld; dec dword ptr [rax - 0x77]; ret; 
0x0000000000468fb5: jno 0x68fbb; add byte ptr [rcx - 0x7d], al; out dx, eax; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000488b0b: jno 0x88ab4; cld; call qword ptr [rax - 0x5e1f00d]; mov eax, dword ptr [rip + 0x437a6]; ret; 
0x000000000041dc74: jnp 0x1dc80; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000422fa1: jnp 0x22f2d; add al, byte ptr [rax]; lea rax, [rip + 0x28ad4]; cmove rax, rdx; ret; 
0x0000000000423301: jnp 0x23303; add byte ptr [rax - 0x73], cl; add eax, 0x7655; cmove rax, rdx; ret; 
0x000000000044bc1f: jnp 0x4bbb4; rol ah, 0xc2; jp 0x4bc1d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000044dc7f: jnp 0x4dc14; rol ah, 0xc2; jp 0x4dc7d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000000451424: jnp 0x5146f; mov edi, dword ptr [rsp]; call rbx; 
0x0000000000470c39: jnp 0x55909d53; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000464cc5: jnp 0x64ccd; add byte ptr [rcx], dh; shr al, 0x11; ret 0xfffe; 
0x000000000046c9a2: jnp 0x6c99d; jmp qword ptr [rsi + 0x66]; 
0x0000000000482a69: jnp 0x82a73; and eax, 0x8b4c1375; cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x0000000000483546: jnp 0x83550; and eax, 0x8348de74; ret; 
0x0000000000422e46: jns 0x22e33; and ch, 2; lea rdx, [rip + 0x243fe]; lea rax, [rip + 0x24467]; cmove rax, rdx; ret; 
0x0000000000423056: jns 0x23043; and ch, 2; lea rdx, [rip + 0x241de]; lea rax, [rip + 0x24227]; cmove rax, rdx; ret; 
0x0000000000423236: jns 0x23223; and ch, 2; lea rdx, [rip + 0x2400e]; lea rax, [rip + 0x24077]; cmove rax, rdx; ret; 
0x0000000000436d3b: jns 0x36d3c; ret; 
0x0000000000436f75: jns 0x36f76; ret; 
0x00000000004370dc: jns 0x370e5; ret; 
0x000000000043d617: jns 0x3d67c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d668: jns 0x3d6cd; rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d767: jns 0x3d7cc; rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d906: jns 0x3d96b; rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043db57: jns 0x3dbbc; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043dcf8: jns 0x3dd5d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ddf7: jns 0x3de5c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043de48: jns 0x3dead; rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043df47: jns 0x3dfac; rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e337: jns 0x3e39c; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043e628: jns 0x3e68d; rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e727: jns 0x3e78c; rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044bc06: jns 0x4bbfb; bsf eax, eax; add rax, rdi; ret; 
0x000000000044dc66: jns 0x4dc5b; bsf eax, eax; add rax, rdi; ret; 
0x000000000044ff43: jns 0x4ff8a; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000474944: jns 0x748cf; mov eax, 0x6e; ret; 
0x000000000047cb6f: jns 0x7cb69; jmp qword ptr [rsi + 0xf]; 
0x0000000000487dfb: jns 0x87dc6; ret; 
0x000000000048d363: jns 0x8d3df; cld; jmp qword ptr [rsi + 0xf]; 
0x0000000000490f50: jns 0x90f8a; add byte ptr [rdi + rcx*2 + 0x48], dh; add esp, 0x18; ret; 
0x00000000004910ca: jns 0x91072; mov rdx, qword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000419bf4: jo 0x19bfe; xor eax, eax; ret; 
0x0000000000419c32: jo 0x19c3c; xor eax, eax; ret; 
0x000000000041bb5e: jo 0x1bb63; add byte ptr [rbx + 0xa7401f8], al; add rsp, 8; ret; 
0x000000000041fbae: jo 0x1fbb8; add byte ptr [rax], al; cmp rax, rsi; jne 0x1fb80; mov dword ptr [rip + 0xac663], 0; ret; 
0x000000000044df4d: jo 0x4dfaa; pop rbp; pop r12; ret; 
0x00000000004506d0: jo 0x506d8; add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rsp + 0x10]; mov eax, 0x4f; syscall; 
0x0000000000453303: jo 0x5334d; cmp dword ptr [rax + 8], 0; je 0x53310; ret; 
0x0000000000454253: jo 0x5428d; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000045d590: jo 0x5d57a; or al, byte ptr [rdx]; add byte ptr [rcx - 0x77], al; ret 0x5a58; 
0x0000000000465c73: jo 0x65c7b; mov qword ptr [rsp + 0x68], r8; mov rsi, qword ptr [rsp + 8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000468210: jo 0x681fb; out dx, eax; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004708ff: jo 0x70902; add byte ptr [rax], al; add byte ptr [rax - 0x75], cl; adc al, 0xd3; mov rbx, rcx; jmp rdx; 
0x000000000047a0aa: jo 0x7a0a4; dec dword ptr [rax - 0x77]; ret; 
0x000000000047a153: jo 0x7a14d; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 1], ecx; ret; 
0x0000000000488470: jo 0x884b0; add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000048ac24: jo 0x8ac2e; lea rdx, [rax + 8]; cmp rcx, rsi; jb 0x8ac06; ret; 
0x000000000048d360: jo 0x8d36a; call 0x54de0; nop word ptr [rax + rax]; ret; 
0x000000000048dd84: jo 0x8dd82; jmp qword ptr [rsi + 0xf]; 
0x0000000000422d42: jp 0x22cc6; add byte ptr [rax], al; lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x0000000000446555: jp 0x46566; adc byte ptr [rsi + rdx - 0x10], cl; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004466c5: jp 0x466d7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000446d20: jp 0x46d42; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x000000000044751c: jp 0x4751f; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x000000000044b456: jp 0x4b459; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000044bc24: jp 0x4bc1d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000044dc84: jp 0x4dc7d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000000478475: jp 0x784bf; bsf eax, edx; shr rax, 2; ret; 
0x000000000047de38: jp 0x7de42; add eax, 0x7a81d375; or al, 0x47; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000047de3e: jp 0x7de4c; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000048d364: jp 0x8d362; jmp qword ptr [rsi + 0xf]; 
0x0000000000414ddd: js 0x14e07; mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000423034: js 0x22fc6; add byte ptr [rax], al; lea rdx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x000000000044c24e: js 0x4c245; leave; jne 0x4c231; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044c28e: js 0x4c285; leave; jne 0x4c231; lea rax, [rdi + rax + 0x40]; ret; 
0x00000000004510d6: js 0x510a7; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000465571: js 0x65e26; mov rdi, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x00000000004744c3: js 0x744d5; movups xmmword ptr [rax], xmm0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000475e9e: js 0x75ee8; add esp, 0x98; ret; 
0x0000000000477997: js 0x779f4; pop rbp; pop r12; pop r13; ret; 
0x0000000000480084: js 0x800a2; mov eax, 0xca; syscall; 
0x0000000000488468: js 0x88472; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x43e70], 0; ret; 
0x000000000048c027: js 0x8c045; mov eax, 0xca; syscall; 
0x000000000048c253: js 0x8c271; mov eax, 0xca; syscall; 
0x000000000048d6a7: js 0x8d6ac; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004906c8: js 0x906e6; mov eax, 0xca; syscall; 
0x00000000004907a5: js 0x90804; pop r12; ret; 
0x0000000000490907: js 0x90925; mov eax, 0xca; syscall; 
0x000000000049334e: js 0x93352; add byte ptr [rax], al; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000493363: js 0x93367; add byte ptr [rax], al; xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000493f1e: js 0x93f40; mov qword ptr [r8], rdx; ret; 
0x0000000000495fbe: js 0x95fe0; mov qword ptr [r8], rdx; ret; 
0x000000000049666b: js 0x966e4; ret 0x8b49; 
0x000000000040cc64: js 0xcc65; jmp qword ptr [rsi + 0xf]; 
0x000000000040d657: js 0xd620; test dword ptr [rax], edx; idiv edi; call qword ptr [rax]; 
0x000000000041f63d: lahf; add byte ptr [rax], al; add byte ptr [rax + 9], cl; ret; 
0x000000000048c03b: lahf; nop dword ptr [rax]; call rax; 
0x000000000041b78c: lahf; or al, byte ptr [rax]; ret; 
0x000000000043e09d: lahf; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000401a51: lahf; ret 0x3145; 
0x000000000041a54a: lahf; ret 0x3949; 
0x000000000041a5e2: lahf; ret 0x63e9; 
0x000000000040204a: lahf; ret 0xc031; 
0x000000000041f45d: lahf; ret; 
0x000000000041e505: lahf; rol byte ptr [rdi], 1; add al, ch; sar bh, cl; jmp qword ptr [rsi - 0x70]; 
0x000000000044f0f7: lahf; shr eax, 2; vzeroupper; ret; 
0x000000000045178d: lahf; vpand ymm1, ymm15, ymmword ptr [rdi]; lahf; ret; 
0x000000000043e72d: lar eax, word ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004664b2: lcall [rbp + 0x41]; pop rsp; pop r13; ret; 
0x000000000041daba: lcall [rbx + 0x4c]; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000413f30: lcall [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000047b420: lcall [rbx + 0x5d]; pop r12; ret; 
0x0000000000472b70: lcall [rbx + 0x5d]; ret; 
0x0000000000422288: lcall [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000433a9c: lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000433d26: lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433cb6: lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433c46: lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433bd6: lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433b66: lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433af6: lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000434116: lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004340a6: lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000434036: lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433fc6: lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433f56: lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433ee6: lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e76: lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e06: lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433d96: lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433286: lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000433a2c: lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004339ac: lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043391c: lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043389c: lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043381c: lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043379c: lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043371c: lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043369c: lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043361c: lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043359c: lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043351c: lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043349c: lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043340c: lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043337c: lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004332ec: lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043327c: lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000433aa6: lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000433a31: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004339b1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433921: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004338a1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433821: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004337a1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433721: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004336a1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433621: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004335a1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433521: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004334a1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433411: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433381: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004332f1: lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433d2b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433cbb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433c4b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433bdb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433b6b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433afb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043411b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004340ab: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043403b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433fcb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433f5b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433eeb: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e7b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e0b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433d9b: lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004171db: lea eax, [r8]; add byte ptr [rax - 0x39], cl; ret; 
0x000000000044f114: lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x000000000044f104: lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x000000000044f0f4: lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x000000000044f0d4: lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x000000000042a8f4: lea eax, [rax + rdi + 0x10]; ret; 
0x000000000042a904: lea eax, [rax + rdi + 0x20]; ret; 
0x000000000042a8d4: lea eax, [rax + rdi - 0x10]; ret; 
0x000000000048867a: lea eax, [rax + rdx + 0x4000]; ret; 
0x00000000004171dc: lea eax, [rax]; add byte ptr [rax - 0x39], cl; ret; 
0x000000000045342d: lea eax, [rbx + 0x10]; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000401e21: lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xca552], rax; pop rbx; ret; 
0x000000000040193d: lea eax, [rbx + 1]; pop rbx; ret; 
0x000000000044d18f: lea eax, [rbx]; add byte ptr [rax], al; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000044f7e4: lea eax, [rcx + rax - 0x11]; ret; 
0x000000000044f7d4: lea eax, [rcx + rax - 0x19]; ret; 
0x000000000044d714: lea eax, [rcx + rax - 0x21]; ret; 
0x000000000044d704: lea eax, [rcx + rax - 0x41]; ret; 
0x000000000044d6f4: lea eax, [rcx + rax - 0x61]; ret; 
0x000000000044d6e4: lea eax, [rcx + rax - 0x81]; ret; 
0x000000000044f7f4: lea eax, [rcx + rax - 9]; ret; 
0x0000000000476fcd: lea eax, [rcx + rsi]; ret; 
0x0000000000445e24: lea eax, [rcx - 1]; ret; 
0x0000000000443aec: lea eax, [rdi + 0x10]; ret; 
0x0000000000443b01: lea eax, [rdi + 0x11]; ret; 
0x0000000000443b1f: lea eax, [rdi + 0x12]; ret; 
0x0000000000443b3f: lea eax, [rdi + 0x13]; ret; 
0x0000000000443b62: lea eax, [rdi + 0x14]; ret; 
0x0000000000443b81: lea eax, [rdi + 0x15]; ret; 
0x0000000000443ba1: lea eax, [rdi + 0x16]; ret; 
0x0000000000443bc1: lea eax, [rdi + 0x17]; ret; 
0x0000000000443be4: lea eax, [rdi + 0x18]; ret; 
0x0000000000443c09: lea eax, [rdi + 0x19]; ret; 
0x0000000000443c27: lea eax, [rdi + 0x1a]; ret; 
0x0000000000443c47: lea eax, [rdi + 0x1b]; ret; 
0x0000000000443c63: lea eax, [rdi + 0x1c]; ret; 
0x0000000000443c83: lea eax, [rdi + 0x1d]; ret; 
0x0000000000443ca3: lea eax, [rdi + 0x1e]; ret; 
0x0000000000443cc3: lea eax, [rdi + 0x1f]; ret; 
0x0000000000443a3d: lea eax, [rdi + 0xa]; ret; 
0x0000000000443a5d: lea eax, [rdi + 0xb]; ret; 
0x0000000000443a7f: lea eax, [rdi + 0xc]; ret; 
0x0000000000443a9f: lea eax, [rdi + 0xd]; ret; 
0x0000000000443abf: lea eax, [rdi + 0xe]; ret; 
0x0000000000443ad9: lea eax, [rdi + 0xf]; ret; 
0x0000000000443987: lea eax, [rdi + 1]; ret; 
0x0000000000443fc7: lea eax, [rdi + 1]; vzeroupper; ret; 
0x000000000044399a: lea eax, [rdi + 2]; ret; 
0x0000000000443fdb: lea eax, [rdi + 2]; vzeroupper; ret; 
0x00000000004439a5: lea eax, [rdi + 3]; ret; 
0x0000000000443ff5: lea eax, [rdi + 3]; vzeroupper; ret; 
0x00000000004439b8: lea eax, [rdi + 4]; ret; 
0x00000000004439cd: lea eax, [rdi + 5]; ret; 
0x00000000004439eb: lea eax, [rdi + 6]; ret; 
0x00000000004439f7: lea eax, [rdi + 7]; ret; 
0x0000000000443a0a: lea eax, [rdi + 8]; ret; 
0x0000000000443a1f: lea eax, [rdi + 9]; ret; 
0x000000000042a929: lea eax, [rdi + rax + 0x10]; ret; 
0x000000000044fa13: lea eax, [rdi + rax + 0x18]; ret; 
0x000000000042a939: lea eax, [rdi + rax + 0x20]; ret; 
0x000000000044ae25: lea eax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000042a833: lea eax, [rdi + rax + 0x30]; ret; 
0x000000000044ac95: lea eax, [rdi + rax + 0x40]; ret; 
0x000000000044adfd: lea eax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000044aca5: lea eax, [rdi + rax + 0x60]; ret; 
0x000000000044acb5: lea eax, [rdi + rax + 0x80]; ret; 
0x000000000044db85: lea eax, [rdi + rax + 0xa0]; ret; 
0x000000000044db95: lea eax, [rdi + rax + 0xc0]; ret; 
0x000000000044db68: lea eax, [rdi + rax + 0xe0]; ret; 
0x000000000044f969: lea eax, [rdi + rax + 8]; ret; 
0x00000000004775e1: lea eax, [rdi + rax - 0x20]; ret; 
0x0000000000477215: lea eax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004773e5: lea eax, [rdi + rax - 0x20]; xtest; je 0x773f2; vzeroall; ret; 
0x000000000044bd2b: lea eax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000044bd55: lea eax, [rdi + rax - 0x60]; vzeroupper; ret; 
0x000000000044bd45: lea eax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x0000000000478eb5: lea eax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000478ec5: lea eax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000478ed5: lea eax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000478ee5: lea eax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000479375: lea eax, [rdi + rax*4 + 0xa0]; ret; 
0x0000000000479385: lea eax, [rdi + rax*4 + 0xc0]; ret; 
0x000000000047934b: lea eax, [rdi + rax*4 + 0xe0]; ret; 
0x0000000000478e69: lea eax, [rdi + rax*4]; cmovle rax, rcx; ret; 
0x0000000000478e3b: lea eax, [rdi + rax*4]; ret; 
0x0000000000479045: lea eax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000044ac49: lea eax, [rdi + rax]; cmovle rax, rcx; ret; 
0x000000000042abe9: lea eax, [rdi + rax]; cmovle rax, rcx; vzeroupper; ret; 
0x000000000043ea10: lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000043ec3b: lea eax, [rdi + rax]; ret; 
0x000000000044c11d: lea eax, [rdi + rdx]; ret; 
0x000000000044400d: lea eax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000476ec9: lea eax, [rdi + rsi]; ret; 
0x0000000000485bec: lea eax, [rdi - 1]; cmp rax, -3; jbe 0x85c00; ret; 
0x0000000000469ff0: lea eax, [rdi - 1]; xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x0000000000443973: lea eax, [rdi]; ret; 
0x0000000000443f45: lea eax, [rdi]; vzeroupper; ret; 
0x0000000000449d29: lea eax, [rdi]; xtest; je 0x49d34; vzeroall; ret; 
0x0000000000442f4d: lea eax, [rdx + 0xa]; ret; 
0x0000000000442f6d: lea eax, [rdx + 0xb]; ret; 
0x0000000000442f8f: lea eax, [rdx + 0xc]; ret; 
0x0000000000442faf: lea eax, [rdx + 0xd]; ret; 
0x0000000000442fcf: lea eax, [rdx + 0xe]; ret; 
0x0000000000442e5f: lea eax, [rdx + 0xf]; ret; 
0x0000000000442e87: lea eax, [rdx + 1]; ret; 
0x0000000000442e9d: lea eax, [rdx + 2]; ret; 
0x0000000000442eb5: lea eax, [rdx + 3]; ret; 
0x0000000000442ecb: lea eax, [rdx + 4]; ret; 
0x0000000000442edd: lea eax, [rdx + 5]; ret; 
0x0000000000442efb: lea eax, [rdx + 6]; ret; 
0x0000000000493f29: lea eax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000442e07: lea eax, [rdx + 7]; ret; 
0x0000000000442f0d: lea eax, [rdx + 8]; ret; 
0x0000000000442f2d: lea eax, [rdx + 9]; ret; 
0x0000000000453300: lea eax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x53310; ret; 
0x000000000043f066: lea eax, [rdx + rax]; cmovne rax, rcx; vzeroupper; ret; 
0x0000000000449406: lea eax, [rdx + rax]; cmovne rax, rcx; xtest; je 0x49416; vzeroall; ret; 
0x00000000004192be: lea eax, [rdx + rdi]; ret; 
0x0000000000442e75: lea eax, [rdx]; ret; 
0x000000000042215e: lea eax, [rip + 0x123c]; lea rdx, [rip + 0x2935]; cmovne rax, rdx; ret; 
0x000000000044e3c1: lea eax, [rip + 0x1399]; test edx, 0x40000000; je 0x4e3a7; ret; 
0x0000000000423185: lea eax, [rip + 0x14275]; lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x00000000004777b1: lea eax, [rip + 0x14c9]; test edx, 0x40000000; je 0x77797; ret; 
0x0000000000477832: lea eax, [rip + 0x18c8]; cmove rax, rdx; ret; 
0x000000000042337e: lea eax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x000000000042333b: lea eax, [rip + 0x1b8af]; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x23358; ret; 
0x00000000004220e2: lea eax, [rip + 0x1c8d8]; lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x000000000042210e: lea eax, [rip + 0x1ccec]; test ch, 4; jne 0x220de; ret; 
0x00000000004230fe: lea eax, [rip + 0x1ce2c]; lea rdx, [rip + 0x1e6c5]; cmovne rax, rdx; ret; 
0x000000000042235e: lea eax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223ce: lea eax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x000000000042238b: lea eax, [rip + 0x1d09f]; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x223a8; ret; 
0x0000000000422201: lea eax, [rip + 0x1d8a9]; test ch, 4; jne 0x221ca; ret; 
0x00000000004221de: lea eax, [rip + 0x1dc5c]; lea rdx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x0000000000423121: lea eax, [rip + 0x20ba9]; test ch, 4; jne 0x230ea; ret; 
0x0000000000422c83: lea eax, [rip + 0x22e87]; cmove rax, rdx; ret; 
0x000000000042325b: lea eax, [rip + 0x232df]; cmove rax, rdx; ret; 
0x000000000042307b: lea eax, [rip + 0x2347f]; cmove rax, rdx; ret; 
0x0000000000422e6b: lea eax, [rip + 0x236cf]; cmove rax, rdx; ret; 
0x000000000042329b: lea eax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230bb: lea eax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422eab: lea eax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x0000000000422243: lea eax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x0000000000423243: lea eax, [rip + 0x24077]; cmove rax, rdx; ret; 
0x0000000000423063: lea eax, [rip + 0x24227]; cmove rax, rdx; ret; 
0x0000000000422e53: lea eax, [rip + 0x24467]; cmove rax, rdx; ret; 
0x0000000000422f2a: lea eax, [rip + 0x24b90]; cmovne rax, rdx; ret; 
0x0000000000422f0c: lea eax, [rip + 0x24dae]; cmove rax, rdx; ret; 
0x0000000000422f5c: lea eax, [rip + 0x24f1e]; lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x00000000004231e1: lea eax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000423001: lea eax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000422df1: lea eax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000422f7a: lea eax, [rip + 0x25f80]; cmove rax, rdx; ret; 
0x000000000042327b: lea eax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x000000000042309b: lea eax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e8b: lea eax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x0000000000422fa6: lea eax, [rip + 0x28ad4]; cmove rax, rdx; ret; 
0x0000000000423391: lea eax, [rip + 0x290c9]; test edx, 0x40000000; je 0x23367; ret; 
0x0000000000477815: lea eax, [rip + 0x295]; cmove rax, rdx; ret; 
0x0000000000422121: lea eax, [rip + 0x2a099]; test edx, 0x40000000; je 0x22101; ret; 
0x0000000000423322: lea eax, [rip + 0x2a918]; cmove rax, rdx; ret; 
0x0000000000422371: lea eax, [rip + 0x2ac09]; test edx, 0x40000000; je 0x22347; ret; 
0x0000000000422d02: lea eax, [rip + 0x2ac38]; cmove rax, rdx; ret; 
0x00000000004223e1: lea eax, [rip + 0x2b299]; test edx, 0x40000000; je 0x223b7; ret; 
0x0000000000422181: lea eax, [rip + 0x3b89]; test ch, 4; jne 0x2214a; ret; 
0x0000000000422452: lea eax, [rip + 0x3cf8]; lea rdx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x0000000000463559: lea eax, [rip + 0x616c1]; mov qword ptr [r14 - 0x80], rdx; mov rdx, qword ptr [rax + rbp*8]; test rdx, rdx; je 0x6356e; call rdx; 
0x0000000000463134: lea eax, [rip + 0x61ae6]; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x63145; call rax; 
0x00000000004886a3: lea eax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000455fa5: lea eax, [rip + 0x702b5]; ret; 
0x0000000000423305: lea eax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x00000000004232bb: lea eax, [rip + 0x769f]; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x232d8; ret; 
0x00000000004533bb: lea eax, [rip + 0x78eaf]; ret; 
0x0000000000453383: lea eax, [rip + 0x78ee7]; ret; 
0x0000000000422ce5: lea eax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x0000000000422c9b: lea eax, [rip + 0x798f]; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x22cb8; ret; 
0x0000000000422d40: lea eax, [rip + 0x827a]; lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x0000000000422d82: lea eax, [rip + 0x8638]; jne 0x22d2d; ret; 
0x000000000047652e: lea eax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x0000000000423212: lea eax, [rip + 0x8eb8]; lea rdx, [rip + 0xe441]; cmovne rax, rdx; ret; 
0x0000000000423032: lea eax, [rip + 0x9078]; lea rdx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x0000000000477770: lea eax, [rip + 0x9da]; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x000000000044e380: lea eax, [rip + 0xa6a]; lea rdx, [rip + 0xaa3]; cmovne rax, rdx; ret; 
0x000000000041da1d: lea eax, [rip + 0xa7ddd]; jne 0x1da70; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000410d42: lea eax, [rip + 0xb11b8]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000422e22: lea eax, [rip + 0xbc88]; lea rdx, [rip + 0x11321]; cmovne rax, rdx; ret; 
0x000000000044e3b4: lea eax, [rip + 0xca6]; and ch, 4; jne 0x4e378; ret; 
0x00000000004777a4: lea eax, [rip + 0xdf6]; and ch, 4; jne 0x77768; ret; 
0x0000000000476541: lea eax, [rip + 0xf29]; test edx, 0x40000000; je 0x76517; ret; 
0x00000000004778bb: lea eax, [rip - 0x2fac1]; cmovne rax, rdx; ret; 
0x0000000000477895: lea eax, [rip - 0x2fdfb]; lea rdx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x0000000000450dd0: lea eax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; cmp esi, 9; je 0x50e08; mov eax, 0x48; syscall; 
0x0000000000488b55: lea ebx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004681e6: lea ebx, [rdi + rdi*8 - 1]; jmp qword ptr [rsi + 0xf]; 
0x000000000047064e: lea ebx, [rip + 0x5238c]; mov ebp, 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x00000000004707b7: lea ebx, [rip + 0x52423]; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x000000000047084a: lea ebx, [rip + 0x52490]; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000477a26: lea ecx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x000000000044df86: lea ecx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000474a87: lea ecx, [rax - 0x7b]; ror byte ptr [rdi], cl; int1; xor edx, edx; mov eax, 0xca; syscall; 
0x00000000004114e5: lea ecx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000429280: lea ecx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000041ca43: lea ecx, [rdx]; add byte ptr [rcx - 0x77], cl; ret 0x8948; 
0x000000000043e959: lea ecx, [rip + 0x61781]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d544: lea ecx, [rip + 0x62b96]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043d2d9: lea ecx, [rip + 0x62e01]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043ba04: lea ecx, [rip + 0x646d6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000453315: lea ecx, [rip + 0x72ea5]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000414eb6: lea ecx, [rip + 0xb1e04]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000453046: lea ecx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000045302b: lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x53040; ret; 
0x000000000044df0e: lea ecx, [rsp + 0x20]; call rbx; 
0x000000000044e148: lea ecx, [rsp + 0x30]; call rbx; 
0x0000000000477a2a: lea ecx, [rsp + 0x38]; call rbx; 
0x0000000000480083: lea edi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x000000000046eb0e: lea edi, [rax]; idiv edi; dec dword ptr [rcx - 0x77]; ret 0xf1e9; 
0x00000000004540c1: lea edi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000454cc0: lea edi, [rcx + rax + 0x48]; jmp rdx; 
0x00000000004464e3: lea edi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000480e50: lea edi, [rip + 0x2de02]; mov eax, 0x59; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000455f95: lea edi, [rip + 0x47f4d]; call 0x44c0; endbr64; lea rax, [rip + 0x702b5]; ret; 
0x0000000000454aa3: lea edi, [rip + 0x48fe2]; mov eax, 0x15; syscall; 
0x0000000000466639: lea edi, [rip + 0x661c1]; call 0x1ab10; xor eax, eax; add rsp, 8; ret; 
0x000000000041aaed: lea edi, [rip + 0x7fe3d]; call 0x14cc0; nop dword ptr [rax + rax]; ret; 
0x000000000041aa88: lea edi, [rip + 0x7fea2]; call 0x14cc0; nop dword ptr [rax + rax]; ret; 
0x000000000040ac72: lea edi, [rip + 0x8e305]; call 0x44c0; xor eax, eax; ret; 
0x000000000048d8cc: lea edi, [rip - 0x3e02]; call 0x8dab0; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x000000000041875b: lea edi, [rsi + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000041b7c4: lea edx, [rax + 1]; mov qword ptr [rip + 0xa9ffa], rdx; ret; 
0x000000000048ac27: lea edx, [rax + 8]; cmp rcx, rsi; jb 0x8ac06; ret; 
0x00000000004744be: lea edx, [rax + rdx*4]; mov qword ptr [rax + 0x10], rdi; movups xmmword ptr [rax], xmm0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000474484: lea edx, [rax + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000488b4d: lea edx, [rax - 1]; test eax, eax; je 0x88b6e; lea rbx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004114e9: lea edx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000040198d: lea edx, [rbx + 1]; pop rbx; imul eax, ecx; imul eax, edx; ret; 
0x0000000000453539: lea edx, [rcx + 1]; mov qword ptr [rip + 0x73e45], rdx; mov qword ptr [rdi + 0x460], rdx; add rsp, 8; ret; 
0x0000000000453311: lea edx, [rdi + rdi*4]; lea rcx, [rip + 0x72ea5]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000422e29: lea edx, [rip + 0x11321]; cmovne rax, rdx; ret; 
0x000000000048869c: lea edx, [rip + 0x11e]; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x000000000047782b: lea edx, [rip + 0x15cf]; lea rax, [rip + 0x18c8]; cmove rax, rdx; ret; 
0x000000000042318c: lea edx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x0000000000423377: lea edx, [rip + 0x1bd03]; lea rax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x0000000000422357: lea edx, [rip + 0x1d303]; lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223c7: lea edx, [rip + 0x1d413]; lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x00000000004221e5: lea edx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x0000000000423105: lea edx, [rip + 0x1e6c5]; cmovne rax, rdx; ret; 
0x0000000000422d47: lea edx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x00000000004220e9: lea edx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x0000000000423254: lea edx, [rip + 0x231f6]; lea rax, [rip + 0x232df]; cmove rax, rdx; ret; 
0x0000000000423074: lea edx, [rip + 0x233c6]; lea rax, [rip + 0x2347f]; cmove rax, rdx; ret; 
0x0000000000422e64: lea edx, [rip + 0x235e6]; lea rax, [rip + 0x236cf]; cmove rax, rdx; ret; 
0x0000000000423294: lea edx, [rip + 0x23836]; lea rax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230b4: lea edx, [rip + 0x23a06]; lea rax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422ea4: lea edx, [rip + 0x23c26]; lea rax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x000000000042223c: lea edx, [rip + 0x23e1e]; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x000000000042323c: lea edx, [rip + 0x2400e]; lea rax, [rip + 0x24077]; cmove rax, rdx; ret; 
0x000000000042305c: lea edx, [rip + 0x241de]; lea rax, [rip + 0x24227]; cmove rax, rdx; ret; 
0x0000000000422e4c: lea edx, [rip + 0x243fe]; lea rax, [rip + 0x24467]; cmove rax, rdx; ret; 
0x0000000000422f23: lea edx, [rip + 0x24c17]; lea rax, [rip + 0x24b90]; cmovne rax, rdx; ret; 
0x0000000000422f05: lea edx, [rip + 0x24d55]; lea rax, [rip + 0x24dae]; cmove rax, rdx; ret; 
0x0000000000422f63: lea edx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x00000000004231da: lea edx, [rip + 0x25530]; lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000422ffa: lea edx, [rip + 0x25700]; lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000422dea: lea edx, [rip + 0x25920]; lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000422f73: lea edx, [rip + 0x25f27]; lea rax, [rip + 0x25f80]; cmove rax, rdx; ret; 
0x0000000000422cfb: lea edx, [rip + 0x27edf]; lea rax, [rip + 0x2ac38]; cmove rax, rdx; ret; 
0x0000000000423274: lea edx, [rip + 0x27f56]; lea rax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x0000000000423094: lea edx, [rip + 0x28126]; lea rax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e84: lea edx, [rip + 0x28346]; lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x000000000042331b: lea edx, [rip + 0x288bf]; lea rax, [rip + 0x2a918]; cmove rax, rdx; ret; 
0x0000000000422f9f: lea edx, [rip + 0x28a7b]; lea rax, [rip + 0x28ad4]; cmove rax, rdx; ret; 
0x0000000000422165: lea edx, [rip + 0x2935]; cmovne rax, rdx; ret; 
0x0000000000493128: lea edx, [rip + 0x39912]; cmp byte ptr [rdx + rsi], 8; jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x0000000000403081: lea edx, [rip + 0x53a89]; call 0x54c70; mov rsi, rbp; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x0000000000422459: lea edx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x000000000043e9a7: lea edx, [rip + 0x61733]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043e98d: lea edx, [rip + 0x6174d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043d327: lea edx, [rip + 0x62db3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043d30d: lea edx, [rip + 0x62dcd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b777: lea edx, [rip + 0x64963]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b75d: lea edx, [rip + 0x6497d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047780e: lea edx, [rip + 0x64c]; lea rax, [rip + 0x295]; cmove rax, rdx; ret; 
0x00000000004395fd: lea edx, [rip + 0x66add]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004533a5: lea edx, [rip + 0x72e15]; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x78ebe], rax; lea rax, [rip + 0x78eaf]; ret; 
0x00000000004532f5: lea edx, [rip + 0x72ec5]; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x53310; ret; 
0x00000000004232fe: lea edx, [rip + 0x7b4c]; lea rax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x0000000000422cde: lea edx, [rip + 0x7e9c]; lea rax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x0000000000410d74: lea edx, [rip + 0x89066]; add rax, rdx; ret; 
0x000000000044e387: lea edx, [rip + 0xaa3]; cmovne rax, rdx; ret; 
0x0000000000476527: lea edx, [rip + 0xba3]; lea rax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x0000000000477777: lea edx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x0000000000423219: lea edx, [rip + 0xe441]; cmovne rax, rdx; ret; 
0x0000000000423039: lea edx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x00000000004778b4: lea edx, [rip - 0x2beba]; lea rax, [rip - 0x2fac1]; cmovne rax, rdx; ret; 
0x000000000047789c: lea edx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x0000000000422c7c: lea edx, [rip - 0x362]; lea rax, [rip + 0x22e87]; cmove rax, rdx; ret; 
0x00000000004464d7: lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x464e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000450e09: lea edx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000046559b: lea esi, [rax + rdi]; nop; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x0000000000481064: lea esi, [rbp - 0x430]; mov rdx, r12; mov eax, 0x14; syscall; 
0x000000000040420d: lea esi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041ae5d: lea esi, [rip + 0x7fb1d]; syscall; 
0x000000000041acea: lea esi, [rip + 0x7fc90]; mov eax, 0xe; syscall; 
0x000000000040ac6b: lea esi, [rip + 0x8e2ff]; lea rdi, [rip + 0x8e305]; call 0x44c0; xor eax, eax; ret; 
0x00000000004464e8: lea esi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000042b7b3: lea esi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2b4a0; ret; 
0x00000000004486b3: lea esi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x483a0; ret; 
0x0000000000493dc0: lea esi, [rsp + rcx*8]; mov rdx, qword ptr [rbx]; mov rax, qword ptr [rsp]; mov rdi, r15; mov rsi, qword ptr [r14]; call rax; 
0x000000000047dbef: lea esp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x0000000000465564: lea esp, [rcx + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x0000000000465563: lea r12, [rcx + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x0000000000493dbf: lea r14, [r12 + r9*8]; mov rdx, qword ptr [rbx]; mov rax, qword ptr [rsp]; mov rdi, r15; mov rsi, qword ptr [r14]; call rax; 
0x000000000046559a: lea r14, [rax + r15]; nop; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000041875a: lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x0000000000418759: lea r15, ss:[r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000044df0d: lea r9, [rsp + 0x20]; call rbx; 
0x000000000044e147: lea r9, [rsp + 0x30]; call rbx; 
0x0000000000477a29: lea r9, [rsp + 0x38]; call rbx; 
0x000000000042a8f3: lea rax, [rax + rdi + 0x10]; ret; 
0x000000000042a903: lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042a8d3: lea rax, [rax + rdi - 0x10]; ret; 
0x0000000000488679: lea rax, [rax + rdx + 0x4000]; ret; 
0x000000000045342c: lea rax, [rbx + 0x10]; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040193c: lea rax, [rbx + 1]; pop rbx; ret; 
0x0000000000476fcc: lea rax, [rcx + rsi]; ret; 
0x0000000000445e23: lea rax, [rcx - 1]; ret; 
0x0000000000443aeb: lea rax, [rdi + 0x10]; ret; 
0x0000000000443b00: lea rax, [rdi + 0x11]; ret; 
0x0000000000443b1e: lea rax, [rdi + 0x12]; ret; 
0x0000000000443b3e: lea rax, [rdi + 0x13]; ret; 
0x0000000000443b61: lea rax, [rdi + 0x14]; ret; 
0x0000000000443b80: lea rax, [rdi + 0x15]; ret; 
0x0000000000443ba0: lea rax, [rdi + 0x16]; ret; 
0x0000000000443bc0: lea rax, [rdi + 0x17]; ret; 
0x0000000000443be3: lea rax, [rdi + 0x18]; ret; 
0x0000000000443c08: lea rax, [rdi + 0x19]; ret; 
0x0000000000443c26: lea rax, [rdi + 0x1a]; ret; 
0x0000000000443c46: lea rax, [rdi + 0x1b]; ret; 
0x0000000000443c62: lea rax, [rdi + 0x1c]; ret; 
0x0000000000443c82: lea rax, [rdi + 0x1d]; ret; 
0x0000000000443ca2: lea rax, [rdi + 0x1e]; ret; 
0x0000000000443cc2: lea rax, [rdi + 0x1f]; ret; 
0x0000000000443a3c: lea rax, [rdi + 0xa]; ret; 
0x0000000000443a5c: lea rax, [rdi + 0xb]; ret; 
0x0000000000443a7e: lea rax, [rdi + 0xc]; ret; 
0x0000000000443a9e: lea rax, [rdi + 0xd]; ret; 
0x0000000000443abe: lea rax, [rdi + 0xe]; ret; 
0x0000000000443ad8: lea rax, [rdi + 0xf]; ret; 
0x0000000000443986: lea rax, [rdi + 1]; ret; 
0x0000000000443fc6: lea rax, [rdi + 1]; vzeroupper; ret; 
0x0000000000443999: lea rax, [rdi + 2]; ret; 
0x0000000000443fda: lea rax, [rdi + 2]; vzeroupper; ret; 
0x00000000004439a4: lea rax, [rdi + 3]; ret; 
0x0000000000443ff4: lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000004439b7: lea rax, [rdi + 4]; ret; 
0x00000000004439cc: lea rax, [rdi + 5]; ret; 
0x00000000004439ea: lea rax, [rdi + 6]; ret; 
0x00000000004439f6: lea rax, [rdi + 7]; ret; 
0x0000000000443a09: lea rax, [rdi + 8]; ret; 
0x0000000000443a1e: lea rax, [rdi + 9]; ret; 
0x000000000042a928: lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044fa12: lea rax, [rdi + rax + 0x18]; ret; 
0x000000000042a938: lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044ae24: lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000042a832: lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044ac94: lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044adfc: lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000044aca4: lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044acb4: lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044db84: lea rax, [rdi + rax + 0xa0]; ret; 
0x000000000044db94: lea rax, [rdi + rax + 0xc0]; ret; 
0x000000000044db67: lea rax, [rdi + rax + 0xe0]; ret; 
0x000000000044f968: lea rax, [rdi + rax + 8]; ret; 
0x00000000004775e0: lea rax, [rdi + rax - 0x20]; ret; 
0x0000000000477214: lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x00000000004773e4: lea rax, [rdi + rax - 0x20]; xtest; je 0x773f2; vzeroall; ret; 
0x000000000044bd2a: lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000044bd54: lea rax, [rdi + rax - 0x60]; vzeroupper; ret; 
0x000000000044bd44: lea rax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x0000000000478eb4: lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000478ec4: lea rax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000478ed4: lea rax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000478ee4: lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000479374: lea rax, [rdi + rax*4 + 0xa0]; ret; 
0x0000000000479384: lea rax, [rdi + rax*4 + 0xc0]; ret; 
0x000000000047934a: lea rax, [rdi + rax*4 + 0xe0]; ret; 
0x0000000000478e68: lea rax, [rdi + rax*4]; cmovle rax, rcx; ret; 
0x0000000000478e3a: lea rax, [rdi + rax*4]; ret; 
0x0000000000479044: lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000044ac48: lea rax, [rdi + rax]; cmovle rax, rcx; ret; 
0x000000000042abe8: lea rax, [rdi + rax]; cmovle rax, rcx; vzeroupper; ret; 
0x000000000043ea0f: lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000043ec3a: lea rax, [rdi + rax]; ret; 
0x000000000044c11c: lea rax, [rdi + rdx]; ret; 
0x000000000044400c: lea rax, [rdi + rdx]; vzeroupper; ret; 
0x0000000000476ec8: lea rax, [rdi + rsi]; ret; 
0x0000000000485beb: lea rax, [rdi - 1]; cmp rax, -3; jbe 0x85c00; ret; 
0x0000000000443972: lea rax, [rdi]; ret; 
0x0000000000443f44: lea rax, [rdi]; vzeroupper; ret; 
0x0000000000449d28: lea rax, [rdi]; xtest; je 0x49d34; vzeroall; ret; 
0x0000000000442f4c: lea rax, [rdx + 0xa]; ret; 
0x0000000000442f6c: lea rax, [rdx + 0xb]; ret; 
0x0000000000442f8e: lea rax, [rdx + 0xc]; ret; 
0x0000000000442fae: lea rax, [rdx + 0xd]; ret; 
0x0000000000442fce: lea rax, [rdx + 0xe]; ret; 
0x0000000000442e5e: lea rax, [rdx + 0xf]; ret; 
0x0000000000442e86: lea rax, [rdx + 1]; ret; 
0x0000000000442e9c: lea rax, [rdx + 2]; ret; 
0x0000000000442eb4: lea rax, [rdx + 3]; ret; 
0x0000000000442eca: lea rax, [rdx + 4]; ret; 
0x0000000000442edc: lea rax, [rdx + 5]; ret; 
0x0000000000442efa: lea rax, [rdx + 6]; ret; 
0x0000000000493f28: lea rax, [rdx + 7]; and rax, 0xfffffffffffffff8; mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x0000000000442e06: lea rax, [rdx + 7]; ret; 
0x0000000000442f0c: lea rax, [rdx + 8]; ret; 
0x0000000000442f2c: lea rax, [rdx + 9]; ret; 
0x00000000004532ff: lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x53310; ret; 
0x000000000043f065: lea rax, [rdx + rax]; cmovne rax, rcx; vzeroupper; ret; 
0x0000000000449405: lea rax, [rdx + rax]; cmovne rax, rcx; xtest; je 0x49416; vzeroall; ret; 
0x0000000000442e74: lea rax, [rdx]; ret; 
0x000000000042215d: lea rax, [rip + 0x123c]; lea rdx, [rip + 0x2935]; cmovne rax, rdx; ret; 
0x000000000044e3c0: lea rax, [rip + 0x1399]; test edx, 0x40000000; je 0x4e3a7; ret; 
0x0000000000423184: lea rax, [rip + 0x14275]; lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x00000000004777b0: lea rax, [rip + 0x14c9]; test edx, 0x40000000; je 0x77797; ret; 
0x0000000000477831: lea rax, [rip + 0x18c8]; cmove rax, rdx; ret; 
0x000000000042337d: lea rax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x000000000042333a: lea rax, [rip + 0x1b8af]; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x23358; ret; 
0x00000000004220e1: lea rax, [rip + 0x1c8d8]; lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x000000000042210d: lea rax, [rip + 0x1ccec]; test ch, 4; jne 0x220de; ret; 
0x00000000004230fd: lea rax, [rip + 0x1ce2c]; lea rdx, [rip + 0x1e6c5]; cmovne rax, rdx; ret; 
0x000000000042235d: lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223cd: lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x000000000042238a: lea rax, [rip + 0x1d09f]; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x223a8; ret; 
0x0000000000422200: lea rax, [rip + 0x1d8a9]; test ch, 4; jne 0x221ca; ret; 
0x00000000004221dd: lea rax, [rip + 0x1dc5c]; lea rdx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x0000000000423120: lea rax, [rip + 0x20ba9]; test ch, 4; jne 0x230ea; ret; 
0x0000000000422c82: lea rax, [rip + 0x22e87]; cmove rax, rdx; ret; 
0x000000000042325a: lea rax, [rip + 0x232df]; cmove rax, rdx; ret; 
0x000000000042307a: lea rax, [rip + 0x2347f]; cmove rax, rdx; ret; 
0x0000000000422e6a: lea rax, [rip + 0x236cf]; cmove rax, rdx; ret; 
0x000000000042329a: lea rax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230ba: lea rax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422eaa: lea rax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x0000000000422242: lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x0000000000423242: lea rax, [rip + 0x24077]; cmove rax, rdx; ret; 
0x0000000000423062: lea rax, [rip + 0x24227]; cmove rax, rdx; ret; 
0x0000000000422e52: lea rax, [rip + 0x24467]; cmove rax, rdx; ret; 
0x0000000000422f29: lea rax, [rip + 0x24b90]; cmovne rax, rdx; ret; 
0x0000000000422f0b: lea rax, [rip + 0x24dae]; cmove rax, rdx; ret; 
0x0000000000422f5b: lea rax, [rip + 0x24f1e]; lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x00000000004231e0: lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000423000: lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000422df0: lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000422f79: lea rax, [rip + 0x25f80]; cmove rax, rdx; ret; 
0x000000000042327a: lea rax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x000000000042309a: lea rax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e8a: lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x0000000000422fa5: lea rax, [rip + 0x28ad4]; cmove rax, rdx; ret; 
0x0000000000423390: lea rax, [rip + 0x290c9]; test edx, 0x40000000; je 0x23367; ret; 
0x0000000000477814: lea rax, [rip + 0x295]; cmove rax, rdx; ret; 
0x0000000000422120: lea rax, [rip + 0x2a099]; test edx, 0x40000000; je 0x22101; ret; 
0x0000000000423321: lea rax, [rip + 0x2a918]; cmove rax, rdx; ret; 
0x0000000000422370: lea rax, [rip + 0x2ac09]; test edx, 0x40000000; je 0x22347; ret; 
0x0000000000422d01: lea rax, [rip + 0x2ac38]; cmove rax, rdx; ret; 
0x00000000004223e0: lea rax, [rip + 0x2b299]; test edx, 0x40000000; je 0x223b7; ret; 
0x0000000000422180: lea rax, [rip + 0x3b89]; test ch, 4; jne 0x2214a; ret; 
0x0000000000422451: lea rax, [rip + 0x3cf8]; lea rdx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x0000000000463558: lea rax, [rip + 0x616c1]; mov qword ptr [r14 - 0x80], rdx; mov rdx, qword ptr [rax + rbp*8]; test rdx, rdx; je 0x6356e; call rdx; 
0x0000000000463133: lea rax, [rip + 0x61ae6]; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x63145; call rax; 
0x00000000004886a2: lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000455fa4: lea rax, [rip + 0x702b5]; ret; 
0x0000000000423304: lea rax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x00000000004232ba: lea rax, [rip + 0x769f]; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x232d8; ret; 
0x00000000004533ba: lea rax, [rip + 0x78eaf]; ret; 
0x0000000000453382: lea rax, [rip + 0x78ee7]; ret; 
0x0000000000422ce4: lea rax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x0000000000422c9a: lea rax, [rip + 0x798f]; mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x22cb8; ret; 
0x0000000000422d3f: lea rax, [rip + 0x827a]; lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x0000000000422d81: lea rax, [rip + 0x8638]; jne 0x22d2d; ret; 
0x000000000047652d: lea rax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x0000000000423211: lea rax, [rip + 0x8eb8]; lea rdx, [rip + 0xe441]; cmovne rax, rdx; ret; 
0x0000000000423031: lea rax, [rip + 0x9078]; lea rdx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x000000000047776f: lea rax, [rip + 0x9da]; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x000000000044e37f: lea rax, [rip + 0xa6a]; lea rdx, [rip + 0xaa3]; cmovne rax, rdx; ret; 
0x000000000041da1c: lea rax, [rip + 0xa7ddd]; jne 0x1da70; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000410d41: lea rax, [rip + 0xb11b8]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000422e21: lea rax, [rip + 0xbc88]; lea rdx, [rip + 0x11321]; cmovne rax, rdx; ret; 
0x000000000044e3b3: lea rax, [rip + 0xca6]; and ch, 4; jne 0x4e378; ret; 
0x00000000004777a3: lea rax, [rip + 0xdf6]; and ch, 4; jne 0x77768; ret; 
0x0000000000476540: lea rax, [rip + 0xf29]; test edx, 0x40000000; je 0x76517; ret; 
0x00000000004778ba: lea rax, [rip - 0x2fac1]; cmovne rax, rdx; ret; 
0x0000000000477894: lea rax, [rip - 0x2fdfb]; lea rdx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x0000000000450dcf: lea rax, [rsp + 0x30]; mov qword ptr [rsp + 0x20], rax; cmp esi, 9; je 0x50e08; mov eax, 0x48; syscall; 
0x0000000000488b54: lea rbx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000047064d: lea rbx, [rip + 0x5238c]; mov ebp, 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x00000000004707b6: lea rbx, [rip + 0x52423]; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x0000000000470849: lea rbx, [rip + 0x52490]; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000477a25: lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x000000000044df85: lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004114e4: lea rcx, [rbx + 0x40]; lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x000000000042927f: lea rcx, [rdx + rcx - 0x10]; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000043e958: lea rcx, [rip + 0x61781]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d543: lea rcx, [rip + 0x62b96]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043d2d8: lea rcx, [rip + 0x62e01]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043ba03: lea rcx, [rip + 0x646d6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000453314: lea rcx, [rip + 0x72ea5]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000414eb5: lea rcx, [rip + 0xb1e04]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000453045: lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000045302a: lea rcx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x53040; ret; 
0x0000000000480082: lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x00000000004540c0: lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000454cbf: lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x00000000004464e2: lea rdi, [rdi + rcx - 1]; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000480e4f: lea rdi, [rip + 0x2de02]; mov eax, 0x59; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000455f94: lea rdi, [rip + 0x47f4d]; call 0x44c0; endbr64; lea rax, [rip + 0x702b5]; ret; 
0x0000000000454aa2: lea rdi, [rip + 0x48fe2]; mov eax, 0x15; syscall; 
0x0000000000466638: lea rdi, [rip + 0x661c1]; call 0x1ab10; xor eax, eax; add rsp, 8; ret; 
0x000000000041aaec: lea rdi, [rip + 0x7fe3d]; call 0x14cc0; nop dword ptr [rax + rax]; ret; 
0x000000000041aa87: lea rdi, [rip + 0x7fea2]; call 0x14cc0; nop dword ptr [rax + rax]; ret; 
0x000000000040ac71: lea rdi, [rip + 0x8e305]; call 0x44c0; xor eax, eax; ret; 
0x000000000048d8cb: lea rdi, [rip - 0x3e02]; call 0x8dab0; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x00000000004744bd: lea rdx, [r8 + rdx*4]; mov qword ptr [rax + 0x10], rdi; movups xmmword ptr [rax], xmm0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000474483: lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000453538: lea rdx, [r9 + 1]; mov qword ptr [rip + 0x73e45], rdx; mov qword ptr [rdi + 0x460], rdx; add rsp, 8; ret; 
0x000000000041b7c3: lea rdx, [rax + 1]; mov qword ptr [rip + 0xa9ffa], rdx; ret; 
0x000000000048ac26: lea rdx, [rax + 8]; cmp rcx, rsi; jb 0x8ac06; ret; 
0x00000000004114e8: lea rdx, [rbx + 0x34]; mov esi, 1; mov rdi, rbx; call rax; 
0x0000000000453310: lea rdx, [rdi + rdi*4]; lea rcx, [rip + 0x72ea5]; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000422e28: lea rdx, [rip + 0x11321]; cmovne rax, rdx; ret; 
0x000000000048869b: lea rdx, [rip + 0x11e]; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x000000000047782a: lea rdx, [rip + 0x15cf]; lea rax, [rip + 0x18c8]; cmove rax, rdx; ret; 
0x000000000042318b: lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x0000000000423376: lea rdx, [rip + 0x1bd03]; lea rax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x0000000000422356: lea rdx, [rip + 0x1d303]; lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223c6: lea rdx, [rip + 0x1d413]; lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x00000000004221e4: lea rdx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x0000000000423104: lea rdx, [rip + 0x1e6c5]; cmovne rax, rdx; ret; 
0x0000000000422d46: lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x00000000004220e8: lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x0000000000423253: lea rdx, [rip + 0x231f6]; lea rax, [rip + 0x232df]; cmove rax, rdx; ret; 
0x0000000000423073: lea rdx, [rip + 0x233c6]; lea rax, [rip + 0x2347f]; cmove rax, rdx; ret; 
0x0000000000422e63: lea rdx, [rip + 0x235e6]; lea rax, [rip + 0x236cf]; cmove rax, rdx; ret; 
0x0000000000423293: lea rdx, [rip + 0x23836]; lea rax, [rip + 0x2389f]; cmove rax, rdx; ret; 
0x00000000004230b3: lea rdx, [rip + 0x23a06]; lea rax, [rip + 0x23a4f]; cmove rax, rdx; ret; 
0x0000000000422ea3: lea rdx, [rip + 0x23c26]; lea rax, [rip + 0x23c8f]; cmove rax, rdx; ret; 
0x000000000042223b: lea rdx, [rip + 0x23e1e]; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x000000000042323b: lea rdx, [rip + 0x2400e]; lea rax, [rip + 0x24077]; cmove rax, rdx; ret; 
0x000000000042305b: lea rdx, [rip + 0x241de]; lea rax, [rip + 0x24227]; cmove rax, rdx; ret; 
0x0000000000422e4b: lea rdx, [rip + 0x243fe]; lea rax, [rip + 0x24467]; cmove rax, rdx; ret; 
0x0000000000422f22: lea rdx, [rip + 0x24c17]; lea rax, [rip + 0x24b90]; cmovne rax, rdx; ret; 
0x0000000000422f04: lea rdx, [rip + 0x24d55]; lea rax, [rip + 0x24dae]; cmove rax, rdx; ret; 
0x0000000000422f62: lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x00000000004231d9: lea rdx, [rip + 0x25530]; lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000422ff9: lea rdx, [rip + 0x25700]; lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000422de9: lea rdx, [rip + 0x25920]; lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000422f72: lea rdx, [rip + 0x25f27]; lea rax, [rip + 0x25f80]; cmove rax, rdx; ret; 
0x0000000000422cfa: lea rdx, [rip + 0x27edf]; lea rax, [rip + 0x2ac38]; cmove rax, rdx; ret; 
0x0000000000423273: lea rdx, [rip + 0x27f56]; lea rax, [rip + 0x27fbf]; cmove rax, rdx; ret; 
0x0000000000423093: lea rdx, [rip + 0x28126]; lea rax, [rip + 0x2816f]; cmove rax, rdx; ret; 
0x0000000000422e83: lea rdx, [rip + 0x28346]; lea rax, [rip + 0x283af]; cmove rax, rdx; ret; 
0x000000000042331a: lea rdx, [rip + 0x288bf]; lea rax, [rip + 0x2a918]; cmove rax, rdx; ret; 
0x0000000000422f9e: lea rdx, [rip + 0x28a7b]; lea rax, [rip + 0x28ad4]; cmove rax, rdx; ret; 
0x0000000000422164: lea rdx, [rip + 0x2935]; cmovne rax, rdx; ret; 
0x0000000000493127: lea rdx, [rip + 0x39912]; cmp byte ptr [rdx + rsi], 8; jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x0000000000403080: lea rdx, [rip + 0x53a89]; call 0x54c70; mov rsi, rbp; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x0000000000422458: lea rdx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x000000000043e9a6: lea rdx, [rip + 0x61733]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043e98c: lea rdx, [rip + 0x6174d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043d326: lea rdx, [rip + 0x62db3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043d30c: lea rdx, [rip + 0x62dcd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b776: lea rdx, [rip + 0x64963]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b75c: lea rdx, [rip + 0x6497d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000047780d: lea rdx, [rip + 0x64c]; lea rax, [rip + 0x295]; cmove rax, rdx; ret; 
0x00000000004395fc: lea rdx, [rip + 0x66add]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004533a4: lea rdx, [rip + 0x72e15]; shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x78ebe], rax; lea rax, [rip + 0x78eaf]; ret; 
0x00000000004532f4: lea rdx, [rip + 0x72ec5]; shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x53310; ret; 
0x00000000004232fd: lea rdx, [rip + 0x7b4c]; lea rax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x0000000000422cdd: lea rdx, [rip + 0x7e9c]; lea rax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x0000000000410d73: lea rdx, [rip + 0x89066]; add rax, rdx; ret; 
0x000000000044e386: lea rdx, [rip + 0xaa3]; cmovne rax, rdx; ret; 
0x0000000000476526: lea rdx, [rip + 0xba3]; lea rax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x0000000000477776: lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x0000000000423218: lea rdx, [rip + 0xe441]; cmovne rax, rdx; ret; 
0x0000000000423038: lea rdx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x00000000004778b3: lea rdx, [rip - 0x2beba]; lea rax, [rip - 0x2fac1]; cmovne rax, rdx; ret; 
0x000000000047789b: lea rdx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x0000000000422c7b: lea rdx, [rip - 0x362]; lea rax, [rip + 0x22e87]; cmove rax, rdx; ret; 
0x00000000004464d6: lea rdx, [rsi + rcx]; cmp rdi, rdx; jb 0x464e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000450e08: lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000481063: lea rsi, [rbp - 0x430]; mov rdx, r12; mov eax, 0x14; syscall; 
0x000000000040420c: lea rsi, [rcx + rbx]; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000041ae5c: lea rsi, [rip + 0x7fb1d]; syscall; 
0x000000000041ace9: lea rsi, [rip + 0x7fc90]; mov eax, 0xe; syscall; 
0x000000000040ac6a: lea rsi, [rip + 0x8e2ff]; lea rdi, [rip + 0x8e305]; call 0x44c0; xor eax, eax; ret; 
0x00000000004464e7: lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000042b7b2: lea rsi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2b4a0; ret; 
0x00000000004486b2: lea rsi, [rsi + rdx - 0x10]; vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x483a0; ret; 
0x000000000047dbee: lea rsp, [rbp - 0x18]; pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004777b3: leave; adc al, 0; add bh, dh; ret 0; 
0x000000000044fbb3: leave; adc eax, 0x8948fffb; ret; 
0x0000000000446104: leave; add rax, rcx; sub rax, rdi; ret; 
0x000000000044c28b: leave; bzhi ecx, ecx, eax; jne 0x4c231; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c24b: leave; bzhi ecx, ecx, eax; jne 0x4c231; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000478e65: leave; cmp edx, eax; lea rax, [rdi + rax*4]; cmovle rax, rcx; ret; 
0x000000000044ac45: leave; cmp edx, eax; lea rax, [rdi + rax]; cmovle rax, rcx; ret; 
0x000000000042abe5: leave; cmp edx, eax; lea rax, [rdi + rax]; cmovle rax, rcx; vzeroupper; ret; 
0x000000000043f060: leave; cmp sil, byte ptr [rdx + rax]; lea rax, [rdx + rax]; cmovne rax, rcx; vzeroupper; ret; 
0x0000000000401e1e: leave; cpuid; lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xca552], rax; pop rbx; ret; 
0x0000000000454221: leave; ja 0x542a0; cmp r9, rdx; jbe 0x5424d; ret; 
0x000000000045435b: leave; jbe 0x5437d; ret; 
0x000000000041458b: leave; jne 0x145a0; mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x0000000000445c00: leave; jne 0x45bf0; ret; 
0x0000000000445cb0: leave; jne 0x45ca0; ret; 
0x0000000000445f70: leave; jne 0x45f60; sub rax, 1; ret; 
0x000000000044b117: leave; jne 0x4afe4; ret; 
0x000000000044afe0: leave; jne 0x4afea; ret; 
0x000000000044c290: leave; jne 0x4c231; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c250: leave; jne 0x4c231; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000041fbb6: leave; mov dword ptr [rip + 0xac663], 0; ret; 
0x000000000047a6ff: leave; mov eax, 1; ret; 
0x000000000044c8f6: leave; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; ret; 
0x000000000042499c: leave; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000044b01a: leave; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042b51e: leave; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c093: leave; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x0000000000423393: leave; nop; add al, byte ptr [rax]; test edx, 0x40000000; je 0x23367; ret; 
0x0000000000453bf3: leave; or bl, bh; jmp qword ptr [rsi + 0xf]; 
0x000000000042b85d: leave; or eax, ecx; ret; 
0x000000000040186d: leave; ret; 
0x000000000041b0c5: leave; setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000042b8a2: leave; sub rax, rcx; cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x000000000044b115: leave; test ecx, ecx; jne 0x4afe4; ret; 
0x000000000044afde: leave; test ecx, ecx; jne 0x4afea; ret; 
0x000000000044badf: leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000447ee2: leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000047a6bf: leave; xor eax, eax; ret; 
0x00000000004573cc: leave; xor edx, edx; push rax; call rbx; 
0x000000000041f6bc: lock add dword ptr [rbx - 0x72b7fe20], eax; push rsp; ret 0xe8f0; 
0x0000000000453e86: lock add eax, dword ptr [rax]; add al, ch; push rcx; mov ebp, 0x8948fffc; ret 0x8548; 
0x0000000000455722: lock add eax, dword ptr [rax]; add dh, dh; ret 0x7402; 
0x0000000000475726: lock cmpxchg dword ptr [r8], edx; jne 0x7570e; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x0000000000488377: lock cmpxchg dword ptr [rdi], edx; jne 0x883b3; xor eax, eax; ret; 
0x0000000000419f0e: lock cmpxchg dword ptr [rip + 0xae29a], edx; jne 0x19f30; mov qword ptr [rip + 0xae299], rbx; add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x0000000000482473: lock inc dword ptr [rsi + 0x10]; pop rbx; ret; 
0x0000000000422d05: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000422374: lodsb al, byte ptr [rsi]; add al, byte ptr [rax]; test edx, 0x40000000; je 0x22347; ret; 
0x0000000000445580: lodsb al, byte ptr [rsi]; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x0000000000429434: lodsb al, byte ptr [rsi]; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000040203f: lodsd eax, dword ptr [rsi]; add byte ptr [rax], al; add byte ptr [rbx - 0x7a07dba4], cl; test byte ptr [rdi], 0x9f; ret 0xc031; 
0x000000000045429a: lodsd eax, dword ptr [rsi]; ret; 
0x000000000041b7fb: loope 0x1b79c; or al, byte ptr [rax]; ret; 
0x00000000004220df: loope 0x220e5; lea rax, [rip + 0x1c8d8]; lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x000000000042e717: loope 0x2e765; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e75f: loope 0x2e7ad; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e79d: loope 0x2e7eb; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e7d5: loope 0x2e823; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e813: loope 0x2e861; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e84b: loope 0x2e899; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e873: loope 0x2e8c1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004310f7: loope 0x31145; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043113f: loope 0x3118d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043117d: loope 0x311cb; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004311b5: loope 0x31203; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004311f3: loope 0x31241; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043122b: loope 0x31279; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431253: loope 0x312a1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004332fa: loope 0x332ef; movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000435e2a: loope 0x35e1f; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000043f41c: loope 0x3f43e; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000043f638: loope 0x3f65a; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000443336: loope 0x4339e; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x0000000000443966: loope 0x439ce; nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000444073: loope 0x440bd; lea eax, [rdi + rdx]; vzeroupper; ret; 
0x00000000004442ab: loope 0x442ad; add byte ptr [rax], al; lea rax, [rdi + 0xf]; ret; 
0x000000000044727d: loope 0x4727d; jg 0x47289; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x00000000004472e9: loope 0x472e9; jg 0x472f5; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000447356: loope 0x47356; sub byte ptr [rdi + 6], ch; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000447364: loope 0x47364; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x0000000000447394: loope 0x47394; jg 0x473a0; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000447525: loope 0x47525; jg 0x4752b; ret; 
0x00000000004475c2: loope 0x475c2; jg 0x47646; add esp, dword ptr [rdx + 0x61]; dec byte ptr [rax + 0x7f]; cmp r15b, dil; ret; 
0x0000000000447e4d: loope 0x47e4d; jg 0x47e59; ret; 
0x0000000000447e9d: loope 0x47e9d; jg 0x47ea2; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000447ea3: loope 0x47ea3; jg 0x47eec; adc bh, bh; ret; 
0x0000000000447edf: loope 0x47edc; xchg eax, edx; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000447ee4: loope 0x47f65; jg 0x47ee9; ret; 
0x0000000000447fb1: loope 0x47fb1; sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000447fb7: loope 0x47fb7; sub byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x0000000000447fc1: loope 0x47fc1; or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000447fc7: loope 0x47fc7; or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x000000000044adf2: loope 0x4ae14; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000044b1fa: loope 0x4b1fa; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b266: loope 0x4b266; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b2e2: loope 0x4b2e2; sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000044b45f: loope 0x4b45f; sub byte ptr [rdi + 1], bh; ret; 
0x000000000044ba4a: loope 0x4ba4a; sub byte ptr [rdi + 7], bh; ret; 
0x000000000044ba9a: loope 0x4ba9a; sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044baa0: loope 0x4baa0; sub byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x000000000044bae1: loope 0x4bb62; sub dword ptr [rdi], edi; ret; 
0x000000000044bb65: loope 0x4bb65; sub byte ptr [rdi + 1], bh; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000044bba1: loope 0x4bba1; or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000044bba7: loope 0x4bba7; or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x000000000044bd20: loope 0x4bd42; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000044bf48: loope 0x4bf48; sub byte ptr [rdi + 0x7f], bh; jmp qword ptr [rdx - 0x1f]; 
0x000000000044c309: loope 0x4c308; sub byte ptr [rdi + 0x57], ch; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x000000000044c589: loope 0x4c588; sub byte ptr [rdi + 0x57], ch; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x000000000044c642: loope 0x4c664; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044cd18: loope 0x4cd18; sub byte ptr [rdi + 0x7f], bh; jmp qword ptr [rdx - 0x1f]; 
0x000000000044d0bd: loope 0x4d0ba; xchg eax, ebx; sal bl, 0x48; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d84d: loope 0x4d84a; xchg eax, ebx; sal bl, 0x48; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044ecf9: loope 0x4ed65; add byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x0000000000452ad1: loope 0x52ad5; jne 0x52b00; xor r8d, r8d; mov eax, 0x19; syscall; 
0x0000000000453df1: loope 0x53df7; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x53dad; xor eax, eax; ret; 
0x0000000000456c48: loope 0x56c4d; pop r12; shl eax, cl; ret; 
0x000000000045931d: loope 0x5931e; jmp qword ptr [rsi + 0xf]; 
0x000000000046bfed: loope 0x6c043; stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000047572c: loope 0x75792; mov qword ptr [0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000047832e: loope 0x7833f; je 0x78350; ret; 
0x0000000000478de8: loope 0x78df1; sarx eax, eax, ecx; test eax, eax; je 0x78d07; tzcnt eax, eax; ret; 
0x0000000000479029: loope 0x7904b; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000048691b: loope 0x86969; mov dword ptr [rdi], ecx; ret; 
0x000000000048694c: loope 0x8699a; mov dword ptr [rdi - 8], ecx; ret; 
0x00000000004869cd: loope 0x86a1b; mov dword ptr [rdi - 0x10], ecx; ret; 
0x0000000000492fdc: loope 0x92f9c; or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000493007: loope 0x92fc7; or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x00000000004930c4: loope 0x93084; sbb al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x000000000049672e: loope 0x9678b; ret; 
0x0000000000407996: mov ah, 0x24; cwde; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe801; 
0x000000000048842c: mov ah, 0x3e; add al, 0; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000416b2e: mov ah, 0x90; endbr64; xor eax, eax; test rdx, rdx; jne 0x16b40; ret; 
0x00000000004932fa: mov ah, 0xd7; cmp dl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4c01; 
0x0000000000487e77: mov ah, 0xfc; jmp qword ptr [rsi + 0xf]; 
0x000000000042049f: mov ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000493237: mov al, 0; add byte ptr [rax], al; ret; 
0x000000000040aac8: mov al, 0x72; add byte ptr [rcx + rdi - 0x1d], r9b; jae 0xaae3; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004044b2: mov al, 0xa; add byte ptr [rax - 0x77], cl; ret; 
0x000000000042115c: mov al, 0xa; add dh, dh; ret 0x7402; 
0x000000000048d223: mov al, 0xe8; add al, byte ptr [rbx - 0x1f7cfc1a]; add eax, dword ptr [rbx - 0x6bf0fe02]; ret 0xf883; 
0x0000000000458223: mov al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000420954: mov al, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000489e87: mov al, 3; add byte ptr [rcx + rcx*4 - 0x30], cl; add rsp, 0x28; ret; 
0x000000000045cb45: mov al, ah; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x000000000040d4d9: mov al, bl; add eax, 0xc7480000; ret; 
0x0000000000422d31: mov al, byte ptr [rax]; add bh, dh; ret 0; 
0x0000000000451482: mov al, byte ptr [rax]; add byte ptr [rax], al; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000442e96: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004416e6: mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000442ec4: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000441704: mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000442e70: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000004416c0: mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000422fa2: mov al, byte ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x28ad4; cmove rax, rdx; ret; 
0x0000000000442ed4: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000441714: mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000442e80: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000442e90: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004416e0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000004416d0: mov ax, word ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x000000000044c0e1: mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000443fc1: mov bh, 0x16; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000004340c1: mov bh, 0x16; mov word ptr [rdi], dx; ret; 
0x000000000043fda1: mov bh, 0x16; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000455251: mov bh, 0x42; or byte ptr [rax - 0x7d], cl; ret 0x4110; 
0x0000000000444148: mov bh, 0x48; lea eax, [rdi + 7]; ret; 
0x0000000000422f65: mov bh, 0x4e; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x000000000041bb45: mov bh, 0x71; add eax, dword ptr [rax]; nop dword ptr [rax]; ret; 
0x000000000046f561: mov bh, 0xb5; pop rax; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x000000000041527e: mov bh, 0xd8; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000044c0f1: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000443fd1: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x000000000044cec1: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000043fdb1: mov bh, 0xe; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000475d8b: mov bh, 0xf8; jmp qword ptr [rsi - 0x70]; 
0x0000000000477a8b: mov bh, 0xfd; jmp qword ptr [rsi - 0x70]; 
0x000000000042025f: mov bh, 0xff; jmp qword ptr [rsi + 0x66]; 
0x000000000046d892: mov bh, 2; add al, ch; je 0x6d893; jmp qword ptr [rsi + 0xf]; 
0x000000000044f116: mov bh, bl; shr eax, 2; vzeroupper; ret; 
0x0000000000445a3e: mov bl, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044db49: mov bl, 0x45; and byte ptr [rdi], bh; ret 0xc500; 
0x000000000047932c: mov bl, 0x45; and byte ptr [rdi], bl; ret 0xc500; 
0x0000000000413c2a: mov bl, 0x48; add esp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000044c2ce: mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x000000000044d06d: mov bl, 0x7d; and byte ptr [rdi], bh; ret 0x6200; 
0x000000000044bde1: mov bl, 0x7d; and byte ptr [rdi], bh; ret 0xc500; 
0x000000000044be07: mov bl, 0x7d; and byte ptr [rdi], bh; ret; 
0x000000000044f8a3: mov bl, 0x7d; and byte ptr [rdi], bl; ret 0x6200; 
0x000000000044f941: mov bl, 0x7d; and byte ptr [rdi], bl; ret; 
0x0000000000456b8f: mov bl, 0x80; or eax, 0x759e9; or al, 0x5b; ret; 
0x0000000000496324: mov bl, 0xf6; jmp qword ptr [rsi + 0xf]; 
0x0000000000454195: mov byte ptr [0x971], 0; mov byte ptr fs:[0x972], 0; add rsp, 0x10; pop rbx; ret; 
0x000000000045419e: mov byte ptr [0x972], 0; add rsp, 0x10; pop rbx; ret; 
0x000000000041a9f2: mov byte ptr [0x972], 0; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000041aa25: mov byte ptr [0x972], al; cmp eax, 1; je 0x1aa38; ret; 
0x0000000000404c39: mov byte ptr [r8 - 0x73], r9b; sbb byte ptr [rax - 0x77], cl; ret 0x8948; 
0x000000000044cea2: mov byte ptr [rax + 0x48], 0x83; mov dword ptr [rax - 0x17], 0xffffff4c; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000045426b: mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x0000000000454259: mov byte ptr [rax + 0x50], 1; ret; 
0x00000000004154f3: mov byte ptr [rax + 0x6b], 0x4c; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000445657: mov byte ptr [rax + 0x75], 0xc5; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000474782: mov byte ptr [rax + 0x972], 0; ret; 
0x0000000000465c72: mov byte ptr [rax + 6], dh; mov qword ptr [rsp + 0x68], r8; mov rsi, qword ptr [rsp + 8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000465c71: mov byte ptr [rax + 6], sil; mov qword ptr [rsp + 0x68], r8; mov rsi, qword ptr [rsp + 8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000422e24: mov byte ptr [rax + rax + 0x158d4800], bh; and dword ptr [rbx], edx; add dword ptr [rax], eax; cmovne rax, rdx; ret; 
0x0000000000447c34: mov byte ptr [rax + rdx - 1], bh; ret; 
0x0000000000447df4: mov byte ptr [rax + rdx - 1], bh; vzeroupper; ret; 
0x0000000000447c33: mov byte ptr [rax + rdx - 1], dil; ret; 
0x0000000000447df3: mov byte ptr [rax + rdx - 1], dil; vzeroupper; ret; 
0x0000000000404c3a: mov byte ptr [rax - 0x73], cl; sbb byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004044b1: mov byte ptr [rax - 0x76b7fff6], dh; ret; 
0x0000000000459967: mov byte ptr [rax - 0x7c], 0xf6; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000458d93: mov byte ptr [rax - 0x7d], cl; ret; 
0x00000000004652f2: mov byte ptr [rax], al; add byte ptr [rax], al; mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000045298f: mov byte ptr [rax], al; add byte ptr [rax], al; pop rbx; pop rbp; ret; 
0x0000000000447c17: mov byte ptr [rax], dh; ret; 
0x0000000000447dbc: mov byte ptr [rax], dh; vzeroupper; ret; 
0x0000000000447c16: mov byte ptr [rax], sil; ret; 
0x0000000000447dbb: mov byte ptr [rax], sil; vzeroupper; ret; 
0x00000000004748f3: mov byte ptr [rbp + 0x31], 0xc0; syscall; 
0x000000000041aabc: mov byte ptr [rbp + 0x31], 0xd2; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000041b0c9: mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000040d5bb: mov byte ptr [rbp - 0x8e8], al; call rax; 
0x000000000040d5ba: mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x000000000040d5b4: mov byte ptr [rbp - 0x8ec], cl; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x000000000040d5b3: mov byte ptr [rbp - 0x8ec], r9b; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x000000000046e38f: mov byte ptr [rbp - 0x8f8], cl; call rax; 
0x000000000046e38e: mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x000000000046e388: mov byte ptr [rbp - 0x910], al; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x000000000046e387: mov byte ptr [rbp - 0x910], r8b; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x0000000000476e26: mov byte ptr [rcx], 0; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x0000000000407e86: mov byte ptr [rcx], 0x88; dec qword ptr [rax - 0x7d]; ret 0x4901; 
0x000000000048558c: mov byte ptr [rcx], al; add al, ch; pushfq; mov ebx, 0xc748fff7; ret 0xffff; 
0x000000000040cda4: mov byte ptr [rcx], bl; idiv edi; dec dword ptr [rax - 0x39]; ret; 
0x0000000000443ae8: mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000443448: mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000443b5e: mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044349e: mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000443be0: mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000443520: mov byte ptr [rdi + 0x18], dh; ret; 
0x0000000000465572: mov byte ptr [rdi + 0x48000008], ch; mov edi, dword ptr [rsp + 0x10]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000044c0f6: mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000443fd6: mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x000000000044cec6: mov byte ptr [rdi + 2], 0; ret; 
0x000000000043fdb6: mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000443996: mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000443366: mov byte ptr [rdi + 2], dh; ret; 
0x00000000004439b2: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000443382: mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x0000000000443a03: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004433c3: mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x000000000042dcab: mov byte ptr [rdi - 1], dl; ret; 
0x000000000044c061: mov byte ptr [rdi], 0; lea rax, [rdi]; ret; 
0x0000000000443f41: mov byte ptr [rdi], 0; lea rax, [rdi]; vzeroupper; ret; 
0x0000000000449d25: mov byte ptr [rdi], 0; lea rax, [rdi]; xtest; je 0x49d34; vzeroall; ret; 
0x000000000044ce31: mov byte ptr [rdi], 0; ret; 
0x000000000043fd21: mov byte ptr [rdi], 0; vzeroupper; ret; 
0x000000000044a0e5: mov byte ptr [rdi], 0; xtest; je 0x4a0f1; vzeroall; ret; 
0x000000000040dd96: mov byte ptr [rdi], ah; out 0xff, eax; inc dword ptr [rcx]; ret; 
0x0000000000436e16: mov byte ptr [rdi], cl; ret; 
0x0000000000443970: mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000443340: mov byte ptr [rdi], dh; ret; 
0x0000000000434133: mov byte ptr [rdi], dl; ret; 
0x000000000045439e: mov byte ptr [rdx + 0x50], 1; ret; 
0x000000000041b716: mov byte ptr [rdx + 0x971], bh; xor eax, eax; ret; 
0x000000000041b715: mov byte ptr [rdx + 0x971], dil; xor eax, eax; ret; 
0x0000000000442e99: mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004416e9: mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000442ec7: mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000441707: mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x000000000044557b: mov byte ptr [rdx + rdx*8 + 0xac840f], 0; add dh, dh; ret 0x7501; 
0x000000000042331e: mov byte ptr [rdx], al; add byte ptr [rax - 0x73], cl; add eax, 0x2a918; cmove rax, rdx; ret; 
0x0000000000442e72: mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x00000000004416c2: mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000490e34: mov byte ptr [rip + 0x3bc15], 8; ret; 
0x0000000000490e2d: mov byte ptr [rip + 0x3bc1b], 8; mov byte ptr [rip + 0x3bc15], 8; ret; 
0x0000000000490e26: mov byte ptr [rip + 0x3bc21], 8; mov byte ptr [rip + 0x3bc1b], 8; mov byte ptr [rip + 0x3bc15], 8; ret; 
0x0000000000490e1f: mov byte ptr [rip + 0x3bc27], 8; mov byte ptr [rip + 0x3bc21], 8; mov byte ptr [rip + 0x3bc1b], 8; mov byte ptr [rip + 0x3bc15], 8; ret; 
0x0000000000490e18: mov byte ptr [rip + 0x3bc2d], 8; mov byte ptr [rip + 0x3bc27], 8; mov byte ptr [rip + 0x3bc21], 8; mov byte ptr [rip + 0x3bc1b], 8; mov byte ptr [rip + 0x3bc15], 8; ret; 
0x0000000000456b6e: mov byte ptr [rip + 0x75a0c], al; ret; 
0x0000000000456b3d: mov byte ptr [rip + 0x75a3d], al; pop rbx; ret; 
0x0000000000456ade: mov byte ptr [rip + 0x75a9c], al; ret; 
0x0000000000456aad: mov byte ptr [rip + 0x75acd], al; pop rbx; ret; 
0x000000000040176a: mov byte ptr [rip + 0xc5b4f], 1; pop rbp; ret; 
0x00000000004600cd: mov byte ptr [rip - 0x72b70000], al; add r9b, byte ptr [r8 + 0x39]; ret; 
0x0000000000407ebe: mov byte ptr [rsi], 0; pop rbx; pop rbp; pop r12; ret; 
0x000000000040eaf4: mov byte ptr [rsp + 0x40], 0x20; jmp rdx; 
0x000000000040d001: mov byte ptr [rsp + rsi*8 - 0x74b60001], bh; xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000454194: mov byte ptr fs:[0x971], 0; mov byte ptr fs:[0x972], 0; add rsp, 0x10; pop rbx; ret; 
0x000000000045419d: mov byte ptr fs:[0x972], 0; add rsp, 0x10; pop rbx; ret; 
0x000000000041a9f1: mov byte ptr fs:[0x972], 0; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000041aa24: mov byte ptr fs:[0x972], al; cmp eax, 1; je 0x1aa38; ret; 
0x0000000000452297: mov ch, 0; add byte ptr [rax], al; mov rdi, qword ptr [r13]; call rbx; 
0x000000000046f562: mov ch, 0x58; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x000000000043efc9: mov ch, 0x74; fcmovnb st(0), st(5); std; xlatb; ret; 
0x0000000000495c33: mov ch, 0xf6; jmp qword ptr [rsi + 0x2e]; 
0x0000000000478340: mov ch, dh; and ch, 0xf; je 0x78360; add rax, 2; ret; 
0x0000000000475729: mov cl, 0x10; jne 0x7570e; mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x0000000000453f18: mov cl, 0x15; ret 0x783; 
0x0000000000488379: mov cl, 0x17; jne 0x883b3; xor eax, eax; ret; 
0x0000000000474f85: mov cl, 0x4d; add byte ptr [rsi + rdi - 0x77], dh; ret 0x48e9; 
0x0000000000479a39: mov cl, 0xe8; cwde; std; call qword ptr [rax - 0x5e1f00d]; mov eax, 0x3f; syscall; 
0x0000000000477dc4: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; add rax, rdi; ret; 
0x0000000000477de4: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000477e04: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477e24: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000477b2d: mov cl, 0xee; add cl, byte ptr [rax + 0x29]; jbe 0x77e40; add rax, rdi; add rax, rcx; ret; 
0x000000000040c6c2: mov cl, byte ptr [rax + 1]; sar dword ptr [rsi], 1; jmp rcx; 
0x0000000000497698: mov cl, byte ptr [rax - 0x77]; ret 0xc148; 
0x0000000000439605: mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x000000000044657f: mov cl, byte ptr [rsi]; je 0x4658d; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000446b84: mov cl, byte ptr [rsi]; je 0x46b92; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000044732a: mov cl, byte ptr [rsi]; je 0x47338; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x00000000004487d4: mov cl, byte ptr [rsi]; je 0x487e2; movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000044b295: mov cl, byte ptr [rsi]; je 0x4b2a3; movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000436e14: mov cl, byte ptr [rsi]; mov byte ptr [rdi], cl; ret; 
0x000000000047832b: mov cl, dl; and cl, 0xf; je 0x78350; ret; 
0x000000000045302d: mov cs, word ptr [rbx - 0x2d7aeeec]; jne 0x53040; ret; 
0x000000000043dbae: mov cs, word ptr [rip - 0x7cb80000]; ret 0xe910; 
0x0000000000436e02: mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000443af4: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000443454: mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000443bf8: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000443538: mov cx, word ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000042e0f4: mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000434054: mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000443990: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000443360: mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000436e01: mov cx, word ptr ss:[rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000494102: mov dh, 0; add rsp, 0x18; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000418331: mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000419fd4: mov dh, 0; ret; 
0x0000000000409f99: mov dh, 0x11; test dl, dl; jne 0x9f78; ret; 
0x00000000004707b3: mov dh, 0x14; adc byte ptr [rax - 0x73], cl; sbb eax, 0x52423; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x0000000000470846: mov dh, 0x14; adc byte ptr [rax - 0x73], cl; sbb eax, 0x52490; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000040f93e: mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd1; jmp rdx; 
0x000000000040f633: mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd6; jmp rdx; 
0x000000000040f675: mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd7; jmp rdx; 
0x000000000040eb33: mov dh, 0x14; adc byte ptr [rcx - 0x75], cl; adc al, 0xd3; jmp rdx; 
0x0000000000434131: mov dh, 0x16; mov byte ptr [rdi], dl; ret; 
0x000000000042b095: mov dh, 0x16; sub eax, edx; ret; 
0x0000000000418758: mov dh, 0x36; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000041156c: mov dh, 0x40; add eax, dword ptr [rbp - 0x77]; ret 0x8341; 
0x0000000000409e97: mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x0000000000466e54: mov dh, 0x42; add cl, byte ptr [rax - 0x72b7fdbf]; add ecx, dword ptr [rcx + 0x39]; ret; 
0x0000000000466e44: mov dh, 0x42; add dword ptr [rax - 0x72b7febf], ecx; add cl, byte ptr [rcx + 0x39]; ret; 
0x00000000004073c1: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0x8401; 
0x0000000000408039: mov dh, 0x42; add dword ptr [rax - 0x7d], ecx; ret 0xa801; 
0x0000000000409eb1: mov dh, 0x43; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000044c89a: mov dh, 0x44; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x0000000000425ef1: mov dh, 0x44; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x0000000000445611: mov dh, 0x47; cmc; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000445601: mov dh, 0x47; hlt; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000004455d1: mov dh, 0x47; int1; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x00000000004455f1: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000004455e1: mov dh, 0x47; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x000000000040c9c3: mov dh, 0x47; or al, 0x83; ret; 
0x000000000040fa4a: mov dh, 0x4a; add cl, byte ptr [rax - 0x7d]; ret 0x8302; 
0x0000000000468da8: mov dh, 0x50; or al, 0x89; sal dh, 1; ret 0xf40; 
0x0000000000467787: mov dh, 0x50; or al, 0xf6; ret 0x7540; 
0x00000000004940cb: mov dh, 0x53; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000044c89f: mov dh, 0x54; cmp ah, byte ptr [rax]; sub eax, edx; ret; 
0x0000000000425ef6: mov dh, 0x54; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x0000000000445615: mov dh, 0x56; cmc; sub eax, edx; ret; 
0x0000000000445605: mov dh, 0x56; hlt; sub eax, edx; ret; 
0x00000000004455d5: mov dh, 0x56; int1; sub eax, edx; ret; 
0x00000000004455e5: mov dh, 0x56; sub eax, edx; ret; 
0x00000000004105fc: mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x8901; 
0x00000000004891a3: mov dh, 0x75; ret; 
0x000000000040b092: mov dh, 0x7b; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000040d70f: mov dh, 0x8d; idiv rdi; dec dword ptr [rcx - 0x77]; ret; 
0x000000000040e373: mov dh, 0x8d; idiv rdi; inc dword ptr [rbp + 0x31]; ror byte ptr [rcx - 0x77], cl; ret; 
0x0000000000422e12: mov dh, 0x95; or al, byte ptr [rax]; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x0000000000479d76: mov dh, 0xc0; add rsp, 0x58; ret; 
0x000000000041a9ec: mov dh, 0xc0; mov dword ptr [rdi + 0x10], eax; mov byte ptr fs:[0x972], 0; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000042b0b5: mov dh, 0xc0; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x0000000000401a98: mov dh, 0xc1; mov rax, r8; pop rbx; ret; 
0x0000000000447bf2: mov dh, 0xc6; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447b22: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447ca9: mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000459966: mov dh, 0xc6; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000462d66: mov dh, 0xd1; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000042b0bb: mov dh, 0xd2; sub eax, edx; ret; 
0x00000000004247e1: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042a501: mov dh, 0xe; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000000042b8b9: mov dh, 0xe; sub eax, ecx; ret; 
0x0000000000495f67: mov dh, 0xf6; jmp qword ptr [rsi + 0xf]; 
0x0000000000464823: mov dh, 0xfb; jmp qword ptr [rsi + 0x2e]; 
0x000000000048e42b: mov dh, 0xfd; pop rbx; pop rbp; jmp rdx; 
0x0000000000418291: mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000456ad1: mov dh, 5; test eax, 0x5b00075a; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x75a9c], al; ret; 
0x000000000042049a: mov dh, 7; add al, ch; out dx, al; mov ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000043e9a4: mov dh, 7; lea rdx, [rip + 0x61733]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043d324: mov dh, 7; lea rdx, [rip + 0x62db3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b774: mov dh, 7; lea rdx, [rip + 0x64963]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b8b6: mov dh, 7; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042b092: mov dh, 7; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000041ba7a: mov dh, 7; or eax, dword ptr [rax]; ret; 
0x00000000004247e4: mov dh, 7; sub eax, ecx; ret; 
0x000000000042a504: mov dh, 7; sub eax, ecx; vzeroupper; ret; 
0x000000000044f115: mov dil, r11b; shr eax, 2; vzeroupper; ret; 
0x000000000044b00b: mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000044affd: mov dl, 0x6d; and byte ptr [rsi], ah; ret 0xfbc5; 
0x000000000047617a: mov dl, 0xae; cli; dec dword ptr [rax - 0x77]; ret; 
0x000000000044ed2d: mov dl, 0xf7; ret 0xfffb; 
0x000000000048919f: mov dl, 0xff; dec dword ptr [rdi]; mov dh, 0x75; ret; 
0x000000000042076b: mov dl, 0xff; jmp qword ptr [rsi - 0x70]; 
0x00000000004223e4: mov dl, 2; add bh, dh; ret 0; 
0x000000000045103f: mov dl, 7; add byte ptr [rax + 0x39], cl; clc; jb 0x51050; xor eax, eax; ret; 
0x000000000042dd30: mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000040d2b5: mov ds, eax; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000047572f: mov dword ptr [0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000041a9fc: mov dword ptr [0x2f8], edi; ret; 
0x000000000048d37a: mov dword ptr [0x48], eax; ret; 
0x000000000048d379: mov dword ptr [0x48], r8d; ret; 
0x000000000045418d: mov dword ptr [0x698], eax; mov byte ptr fs:[0x971], 0; mov byte ptr fs:[0x972], 0; add rsp, 0x10; pop rbx; ret; 
0x0000000000436e0a: mov dword ptr [r9 - 2], ecx; ret; 
0x0000000000436df5: mov dword ptr [r9 - 4], ecx; ret; 
0x000000000048ac0d: mov dword ptr [rax + 0x10], 0; ret; 
0x000000000047340b: mov dword ptr [rax + 0x10], ecx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000047447d: mov dword ptr [rax + 0x10], ecx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000004744c2: mov dword ptr [rax + 0x10], edi; movups xmmword ptr [rax], xmm0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000419be9: mov dword ptr [rax + 0x18], ecx; mov rsi, rcx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000473bac: mov dword ptr [rax + 0x18], edx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x000000000041c398: mov dword ptr [rax + 0x20], edx; add rsp, 8; ret; 
0x0000000000473ba8: mov dword ptr [rax + 0x28], edx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x00000000004845f9: mov dword ptr [rax + 0x310], edx; movups xmmword ptr [rax + 0x300], xmm0; ret; 
0x000000000048d6a5: mov dword ptr [rax + 0x378], edx; pop rbx; ret; 
0x0000000000454252: mov dword ptr [rax + 0x38], esi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000043ee86: mov dword ptr [rax + 0x3a], 0xe8750734; add rax, rdi; vzeroupper; ret; 
0x0000000000454256: mov dword ptr [rax + 0x40], edx; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000047340f: mov dword ptr [rax + 0x40], edx; movups xmmword ptr [rax], xmm0; ret; 
0x00000000004733d4: mov dword ptr [rax + 0x40], edx; movups xmmword ptr [rax], xmm1; ret; 
0x000000000045424e: mov dword ptr [rax + 0x48], ecx; mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x0000000000454270: mov dword ptr [rax + 0x48], edx; ret; 
0x0000000000474223: mov dword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000474945: mov dword ptr [rax + 0x6e], edi; ret; 
0x000000000043eff6: mov dword ptr [rax + 0x7343a40], 0x1480775; clc; vzeroupper; ret; 
0x00000000004190f1: mov dword ptr [rax + 0xa0], 0xffffffff; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004190e5: mov dword ptr [rax + 0xa8], 0; ret; 
0x0000000000408df8: mov dword ptr [rax + 4], ebx; pop rbx; ret; 
0x000000000041fd76: mov dword ptr [rax + 8], 0; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000419030: mov dword ptr [rax + 8], 0; ret; 
0x0000000000488467: mov dword ptr [rax + 8], edi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x43e70], 0; ret; 
0x0000000000453324: mov dword ptr [rax + 8], edx; ret; 
0x0000000000419bf3: mov dword ptr [rax + 8], esi; xor eax, eax; ret; 
0x0000000000447c2b: mov dword ptr [rax + rdx - 4], edi; ret; 
0x0000000000447de2: mov dword ptr [rax + rdx - 4], edi; vzeroupper; ret; 
0x0000000000447c24: mov dword ptr [rax + rdx - 8], edi; ret; 
0x0000000000447dd4: mov dword ptr [rax + rdx - 8], edi; vzeroupper; ret; 
0x000000000044c0d6: mov dword ptr [rax - 0x17], 0xffffff4c; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x000000000044cea6: mov dword ptr [rax - 0x17], 0xffffff4c; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000043fd92: mov dword ptr [rax - 0x17], 0xffffff50; nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000497998: mov dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x0000000000408df2: mov dword ptr [rax], 0; mov dword ptr [rax + 4], ebx; pop rbx; ret; 
0x0000000000419029: mov dword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000048dd4d: mov dword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x460]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000465208: mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004511b8: mov dword ptr [rax], 0x16; mov rax, -1; ret; 
0x000000000044fad0: mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x00000000004120a4: mov dword ptr [rax], 0x89480000; ret; 
0x0000000000451058: mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041ebd8: mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x0000000000450358: mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x000000000048813e: mov dword ptr [rax], eax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000048815b: mov dword ptr [rax], eax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000473ccd: mov dword ptr [rax], ecx; mov eax, dword ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000447c31: mov dword ptr [rax], edi; mov byte ptr [rax + rdx - 1], dil; ret; 
0x0000000000447df1: mov dword ptr [rax], edi; mov byte ptr [rax + rdx - 1], dil; vzeroupper; ret; 
0x0000000000447c29: mov dword ptr [rax], edi; mov dword ptr [rax + rdx - 4], edi; ret; 
0x0000000000447de0: mov dword ptr [rax], edi; mov dword ptr [rax + rdx - 4], edi; vzeroupper; ret; 
0x0000000000447c21: mov dword ptr [rax], edi; mov qword ptr [rax + rdx - 8], rdi; ret; 
0x0000000000447dd1: mov dword ptr [rax], edi; mov qword ptr [rax + rdx - 8], rdi; vzeroupper; ret; 
0x000000000048dd05: mov dword ptr [rax], edi; pop rbx; ret; 
0x0000000000488427: mov dword ptr [rax], edx; mov qword ptr [rip + 0x43eb4], 0; ret; 
0x000000000048dcf9: mov dword ptr [rax], edx; pop rbx; ret; 
0x0000000000493f21: mov dword ptr [rax], edx; ret; 
0x0000000000474488: mov dword ptr [rax], edx; xor eax, eax; ret; 
0x000000000041915f: mov dword ptr [rbp + 0x48], 0; test byte ptr [rbp], 0x80; jne 0x19180; pop rbp; ret; 
0x0000000000493348: mov dword ptr [rbp + 8], eax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000418465: mov dword ptr [rbp + 8], eax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000496f2f: mov dword ptr [rbp + rbx*8], edx; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x96f3e; call rax; 
0x00000000004841ea: mov dword ptr [rbp - 0x88], ecx; call rax; 
0x000000000040c3fc: mov dword ptr [rbp - 0x8a0], eax; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040d2db: mov dword ptr [rbp - 0x8a0], eax; mov rdx, r13; mov rsi, r11; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040e0a3: mov dword ptr [rbp - 0x8a0], eax; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040d02e: mov dword ptr [rbp - 0x8b8], eax; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004841dc: mov dword ptr [rbp - 0xa0], edx; add rax, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x88], r9; call rax; 
0x0000000000483aa9: mov dword ptr [rbp - 0xa0], edx; call rax; 
0x00000000004841ce: mov dword ptr [rbp - 0xb0], ebx; mov rax, qword ptr [rbp - 0x90]; mov qword ptr [rbp - 0xa0], r10; add rax, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x88], r9; call rax; 
0x0000000000483252: mov dword ptr [rbp - 0xb0], edx; call rax; 
0x00000000004689d9: mov dword ptr [rbp - 0xe8], eax; call rax; 
0x00000000004689c9: mov dword ptr [rbp - 0xf0], ecx; mov rdx, r8; mov rsi, r14; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x00000000004689c8: mov dword ptr [rbp - 0xf0], r9d; mov rdx, r8; mov rsi, r14; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x0000000000475d4f: mov dword ptr [rbp], 2; mov rdi, rbp; mov eax, 0xca; syscall; 
0x00000000004743aa: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000419a54: mov dword ptr [rbp], eax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000047a496: mov dword ptr [rbx + 0x10], 0; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x00000000004626b2: mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000485d52: mov dword ptr [rbx + 0x10], eax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000485c87: mov dword ptr [rbx + 0x18], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000048e0a9: mov dword ptr [rbx + 0x18], eax; pop rbx; ret; 
0x000000000048e1ed: mov dword ptr [rbx + 0x20], eax; pop rbx; ret; 
0x00000000004180a6: mov dword ptr [rbx + 0x20], eax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000046513f: mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000046511c: mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000041810e: mov dword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x00000000004743ae: mov dword ptr [rbx + 0x60], ebp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000419a58: mov dword ptr [rbx + 0x60], ebp; pop rbx; pop rbp; pop r12; ret; 
0x000000000041694e: mov dword ptr [rbx + 0x70], 0xffffffff; pop rbx; ret; 
0x0000000000473b0e: mov dword ptr [rbx + 0x74], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x0000000000473465: mov dword ptr [rbx + 0x74], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000473a7e: mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000414de0: mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000415239: mov dword ptr [rbx + 0x90], esi; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000041dc73: mov dword ptr [rbx + 0xa], edi; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000458297: mov dword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048e372: mov dword ptr [rbx], 0; pop rbx; ret; 
0x0000000000418e36: mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x000000000048bff6: mov dword ptr [rbx], eax; add rsp, 0x10; pop rbx; ret; 
0x000000000041858d: mov dword ptr [rbx], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004886de: mov dword ptr [rbx], eax; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000422066: mov dword ptr [rbx], eax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000004903cd: mov dword ptr [rbx], eax; pop rax; pop rdx; pop rbx; ret; 
0x000000000041ff92: mov dword ptr [rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000046c223: mov dword ptr [rbx], ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000473bb1: mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000422183: mov dword ptr [rbx], edi; add byte ptr [rax], al; test ch, 4; jne 0x2214a; ret; 
0x000000000041bc5c: mov dword ptr [rbx], esp; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000414d53: mov dword ptr [rbx], esp; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000414d52: mov dword ptr [rbx], r12d; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x000000000043eec6: mov dword ptr [rcx + 0x40], 0x7507343a; cmpsd dword ptr [rsi], dword ptr [rdi]; add rax, rdi; vzeroupper; ret; 
0x0000000000478627: mov dword ptr [rcx + 1], 0x2e8c1f8; vzeroupper; ret; 
0x000000000043f6c7: mov dword ptr [rcx + 1], 0x77f8c5f8; ret; 
0x0000000000466f5d: mov dword ptr [rcx + rdx*8], eax; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000004748f0: mov dword ptr [rcx + rsi - 0x3a], eax; xor r8d, r8d; syscall; 
0x0000000000436e0b: mov dword ptr [rcx - 2], ecx; ret; 
0x0000000000436df6: mov dword ptr [rcx - 4], ecx; ret; 
0x0000000000436de5: mov dword ptr [rcx - 8], ecx; ret; 
0x00000000004785e7: mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x000000000043f6a7: mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x000000000045029e: mov dword ptr [rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000046507c: mov dword ptr [rcx], edx; mov rax, qword ptr [rax + 0x58]; mov rdx, -0x20; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464fac: mov dword ptr [rcx], edx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000049318b: mov dword ptr [rcx], edx; ret; 
0x000000000041a9ee: mov dword ptr [rdi + 0x10], eax; mov byte ptr fs:[0x972], 0; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000443afd: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x11]; ret; 
0x0000000000443b3b: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000443bbd: mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x17]; ret; 
0x0000000000443b5b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x000000000044349b: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000443bdd: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044351d: mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x18], dh; ret; 
0x000000000044345d: mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000443c20: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000443560: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000443c40: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000443580: mov dword ptr [rdi + 0x10], edx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000443c01: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000443541: mov dword ptr [rdi + 0x10], edx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000443c23: mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000443563: mov dword ptr [rdi + 0x17], ecx; ret; 
0x00000000004882d5: mov dword ptr [rdi + 0x18], eax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000443c05: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x19]; ret; 
0x0000000000443c43: mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000443545: mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000418024: mov dword ptr [rdi + 0x18], edx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000041afa8: mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x000000000048263b: mov dword ptr [rdi + 0x458], ecx; test byte ptr [rax + 0x31c], 4; jne 0x82658; or byte ptr [rdi + 0x31d], 0x40; ret; 
0x0000000000453544: mov dword ptr [rdi + 0x460], edx; add rsp, 8; ret; 
0x0000000000418028: mov dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000417fed: mov dword ptr [rdi + 0x48], eax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x00000000004931d5: mov dword ptr [rdi + 0x98], esi; ret; 
0x000000000041205d: mov dword ptr [rdi + 0xd8], edx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x0000000000443b7d: mov dword ptr [rdi + 0xe], ecx; lea rax, [rdi + 0x15]; ret; 
0x00000000004434bd: mov dword ptr [rdi + 0xe], ecx; ret; 
0x0000000000443b1b: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000443b9d: mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x16]; ret; 
0x000000000044347b: mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000433f75: mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433db8: mov dword ptr [rdi + 1], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000434058: mov dword ptr [rdi + 1], edx; mov word ptr [rdi], cx; ret; 
0x0000000000433f05: mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433d48: mov dword ptr [rdi + 2], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004439e7: mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x0000000000433e95: mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433cd8: mov dword ptr [rdi + 3], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004433a7: mov dword ptr [rdi + 3], edx; ret; 
0x00000000004439c9: mov dword ptr [rdi + 4], edx; lea rax, [rdi + 5]; ret; 
0x0000000000433c68: mov dword ptr [rdi + 4], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443399: mov dword ptr [rdi + 4], edx; ret; 
0x0000000000443a7b: mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x0000000000433bf8: mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000044340b: mov dword ptr [rdi + 5], edx; ret; 
0x0000000000443a9b: mov dword ptr [rdi + 6], edx; lea rax, [rdi + 0xd]; ret; 
0x0000000000433b88: mov dword ptr [rdi + 6], edx; mov qword ptr [rdi], rcx; ret; 
0x000000000044341b: mov dword ptr [rdi + 6], edx; ret; 
0x0000000000443a39: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x0000000000443abb: mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xe]; ret; 
0x0000000000433b18: mov dword ptr [rdi + 7], edx; mov qword ptr [rdi], rcx; ret; 
0x00000000004433e9: mov dword ptr [rdi + 7], edx; ret; 
0x000000000046c5a7: mov dword ptr [rdi + 8], 0; xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x6c5c0; ret; 
0x0000000000486ad8: mov dword ptr [rdi + 8], eax; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000486a68: mov dword ptr [rdi + 8], ecx; ret; 
0x0000000000443a59: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x0000000000443a1b: mov dword ptr [rdi + 8], edx; lea rax, [rdi + 9]; ret; 
0x0000000000488010: mov dword ptr [rdi + 8], edx; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000487ed8: mov dword ptr [rdi + 8], edx; mov eax, ecx; adc eax, eax; ret; 
0x00000000004882c8: mov dword ptr [rdi + 8], edx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x00000000004433db: mov dword ptr [rdi + 8], edx; ret; 
0x000000000048708d: mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000447334: mov dword ptr [rdi + rdx + 2], esi; mov byte ptr [rdi], cl; ret; 
0x0000000000446589: mov dword ptr [rdi + rdx - 2], esi; mov byte ptr [rdi], cl; ret; 
0x000000000044c118: mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; ret; 
0x0000000000444008: mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044cee8: mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000043fdd8: mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x0000000000446596: mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000044c13c: mov dword ptr [rdi + rdx - 7], ecx; lea rax, [rdi + rdx]; ret; 
0x000000000044402c: mov dword ptr [rdi + rdx - 7], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044cefc: mov dword ptr [rdi + rdx - 7], ecx; ret; 
0x000000000043fdec: mov dword ptr [rdi + rdx - 7], ecx; vzeroupper; ret; 
0x00000000004465ac: mov dword ptr [rdi + rdx - 8], ecx; ret; 
0x00000000004472fe: mov dword ptr [rdi + rdx], esi; ret; 
0x0000000000493191: mov dword ptr [rdi + rsi*8], edx; ret; 
0x000000000042d9f5: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da33: mov dword ptr [rdi - 0x10], ebx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004869cf: mov dword ptr [rdi - 0x10], ecx; ret; 
0x000000000042dba8: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dca4: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbf0: mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd78: mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df58: mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e148: mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e319: mov dword ptr [rdi - 0x15], ebx; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e519: mov dword ptr [rdi - 0x16], ebx; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e719: mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042d9f1: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da2f: mov dword ptr [rdi - 0x18], edx; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042dba4: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dca0: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbec: mov dword ptr [rdi - 0x19], edx; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd74: mov dword ptr [rdi - 0x1a], edx; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df54: mov dword ptr [rdi - 0x1b], edx; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e144: mov dword ptr [rdi - 0x1c], edx; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e315: mov dword ptr [rdi - 0x1d], edx; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e515: mov dword ptr [rdi - 0x1e], edx; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e715: mov dword ptr [rdi - 0x1f], edx; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042d9ed: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da2b: mov dword ptr [rdi - 0x20], ecx; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042dba0: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dc9c: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbe8: mov dword ptr [rdi - 0x21], ecx; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd70: mov dword ptr [rdi - 0x22], ecx; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df50: mov dword ptr [rdi - 0x23], ecx; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e140: mov dword ptr [rdi - 0x24], ecx; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e311: mov dword ptr [rdi - 0x25], ecx; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e511: mov dword ptr [rdi - 0x26], ecx; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e711: mov dword ptr [rdi - 0x27], ecx; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042d9e9: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da27: mov dword ptr [rdi - 0x28], eax; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042dd7c: mov dword ptr [rdi - 0xa], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004335c8: mov dword ptr [rdi - 0xa], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042df5c: mov dword ptr [rdi - 0xb], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000433548: mov dword ptr [rdi - 0xb], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e14c: mov dword ptr [rdi - 0xc], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004334c8: mov dword ptr [rdi - 0xc], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e31d: mov dword ptr [rdi - 0xd], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433439: mov dword ptr [rdi - 0xd], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042e51d: mov dword ptr [rdi - 0xe], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004333a9: mov dword ptr [rdi - 0xe], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042e71d: mov dword ptr [rdi - 0xf], ecx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433319: mov dword ptr [rdi - 0xf], edx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042e0fd: mov dword ptr [rdi - 2], ecx; ret; 
0x000000000042df15: mov dword ptr [rdi - 2], edx; ret; 
0x000000000042e0f9: mov dword ptr [rdi - 3], edx; mov word ptr [rdi - 2], cx; ret; 
0x000000000042e4d9: mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042dbaf: mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e4d6: mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e6d6: mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e8d6: mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004869c8: mov dword ptr [rdi - 8], eax; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000042d9f9: mov dword ptr [rdi - 8], ecx; ret; 
0x000000000042da37: mov dword ptr [rdi - 8], edx; ret; 
0x000000000042dbac: mov dword ptr [rdi - 9], eax; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dca8: mov dword ptr [rdi - 9], ecx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbf4: mov dword ptr [rdi - 9], ecx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000433648: mov dword ptr [rdi - 9], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000488071: mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x00000000004881cd: mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x00000000004880a8: mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x0000000000488232: mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x00000000004536ac: mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x73ca3]; mov qword ptr [rsi], rax; ret; 
0x0000000000486948: mov dword ptr [rdi], eax; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000486a62: mov dword ptr [rdi], eax; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x00000000004869c1: mov dword ptr [rdi], ebx; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000486ad1: mov dword ptr [rdi], ebx; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x00000000004439b5: mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000443a07: mov dword ptr [rdi], ecx; lea rax, [rdi + 8]; ret; 
0x000000000044c0f4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000443fd4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x000000000044cec4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000043fdb4: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000443994: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000443364: mov dword ptr [rdi], ecx; mov byte ptr [rdi + 2], dh; ret; 
0x00000000004439e5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004433a5: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000443a37: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004433e7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000443a57: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004433f7: mov dword ptr [rdi], ecx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004472fc: mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x000000000044628b: mov dword ptr [rdi], ecx; mov dword ptr [rsi - 4], ecx; ret; 
0x000000000044c112: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; ret; 
0x0000000000444002: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044cee2: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000043fdd2: mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x0000000000443a78: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000443408: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000443a98: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000443418: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000443ab8: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000443428: mov dword ptr [rdi], ecx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000044c139: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000444029: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044cef9: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000043fde9: mov dword ptr [rdi], ecx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000004439c6: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000443396: mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000443a18: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004433d8: mov dword ptr [rdi], ecx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000446297: mov dword ptr [rdi], ecx; mov word ptr [rsi - 2], cx; ret; 
0x0000000000433b1c: mov dword ptr [rdi], ecx; ret; 
0x0000000000443984: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; ret; 
0x0000000000443fc4: mov dword ptr [rdi], edx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000004439a2: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x0000000000443ff2: mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x00000000004439f4: mov dword ptr [rdi], edx; lea rax, [rdi + 7]; ret; 
0x0000000000433e24: mov dword ptr [rdi], edx; ret; 
0x000000000043fda4: mov dword ptr [rdi], edx; vzeroupper; ret; 
0x0000000000436df3: mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000436de2: mov dword ptr [rdi], esi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004882c5: mov dword ptr [rdi], esi; mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x00000000004465a9: mov dword ptr [rdi], esi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000436e07: mov dword ptr [rdi], esi; mov word ptr [r9 - 2], cx; ret; 
0x000000000044659a: mov dword ptr [rdi], esi; ret; 
0x000000000041c390: mov dword ptr [rdx + 0x28], ecx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000454397: mov dword ptr [rdx + 0x38], eax; mov qword ptr [rdx + 0x40], rcx; mov byte ptr [rdx + 0x50], 1; ret; 
0x000000000045439b: mov dword ptr [rdx + 0x40], ecx; mov byte ptr [rdx + 0x50], 1; ret; 
0x0000000000454393: mov dword ptr [rdx + 0x48], ecx; mov qword ptr [rdx + 0x38], rax; mov qword ptr [rdx + 0x40], rcx; mov byte ptr [rdx + 0x50], 1; ret; 
0x0000000000414ebd: mov dword ptr [rdx + 0xe0], ecx; pop rbx; ret; 
0x000000000041206b: mov dword ptr [rdx + 0xe0], ecx; ret; 
0x0000000000442ef7: mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000441727: mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000442ed9: mov dword ptr [rdx + 4], eax; lea rax, [rdx + 5]; ret; 
0x0000000000441719: mov dword ptr [rdx + 4], eax; mov rax, rdi; ret; 
0x0000000000442f8b: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 0xc]; ret; 
0x0000000000442f09: mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000441739: mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000442fab: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 0xd]; ret; 
0x0000000000442f29: mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000441749: mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000442f49: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000442fcb: mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xe]; ret; 
0x0000000000441759: mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000442f69: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000442e5b: mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xf]; ret; 
0x0000000000488423: mov dword ptr [rdx + 8], eax; mov qword ptr [rax], rdx; mov qword ptr [rip + 0x43eb4], 0; ret; 
0x00000000004540b6: mov dword ptr [rdx + 8], eax; mov qword ptr [rip + 0x78250], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x00000000004416ab: mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x00000000004626c7: mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x000000000041fd71: mov dword ptr [rdx + r12*2], ecx; mov qword ptr [rax + 8], 0; add rsp, 0x18; pop rbp; pop r12; ret; 
0x00000000004880fc: mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000488162: mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000048b469: mov dword ptr [rdx], eax; add al, ch; jmp qword ptr [rcx - 1]; 
0x0000000000442e84: mov dword ptr [rdx], eax; lea rax, [rdx + 1]; ret; 
0x0000000000442eb2: mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000442e04: mov dword ptr [rdx], eax; lea rax, [rdx + 7]; ret; 
0x0000000000442e94: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004416e4: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x0000000000442ec2: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000441702: mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000442ed2: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000441712: mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000409fe8: mov dword ptr [rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000044fab2: mov dword ptr [rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000488147: mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000442ef2: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000441722: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000442f04: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000441734: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000442f24: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000441744: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000442f44: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000441754: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000442f64: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000441764: mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x000000000045055a: mov dword ptr [rdx], eax; mov rax, -1; ret; 
0x0000000000442f84: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000441774: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000442fa4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000441794: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000442fc4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004417b4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000442e54: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004416a4: mov dword ptr [rdx], eax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000441654: mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x000000000048dd71: mov dword ptr [rdx], eax; pop rbx; ret; 
0x0000000000419b49: mov dword ptr [rdx], eax; ret; 
0x000000000041ce08: mov dword ptr [rdx], ecx; add byte ptr [rcx - 0x77], cl; ret 0xbd41; 
0x000000000047371d: mov dword ptr [rdx], ecx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048ac0a: mov dword ptr [rdx], ecx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000041fd72: mov dword ptr [rdx], ecx; mov qword ptr [rax + 8], 0; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000403083: mov dword ptr [rdx], edi; add eax, 0x1be4e800; add eax, 0xee894800; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x0000000000491073: mov dword ptr [rdx], edx; pop rbx; ret; 
0x0000000000496724: mov dword ptr [rip + 0x31a66], ebx; test rbx, rbx; jne 0x96710; pop rbx; ret; 
0x000000000049732e: mov dword ptr [rip + 0x354c0], 0; add rsp, 8; ret; 
0x0000000000496edc: mov dword ptr [rip + 0x3576a], 0; add rsp, 8; ret; 
0x000000000048a403: mov dword ptr [rip + 0x3aac7], eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000489e84: mov dword ptr [rip + 0x3b03e], ecx; mov rax, r10; add rsp, 0x28; ret; 
0x000000000048c3e3: mov dword ptr [rip + 0x3ff47], eax; add rsp, 0x18; ret; 
0x000000000048ac9d: mov dword ptr [rip + 0x41d81], 0; pop rbx; ret; 
0x0000000000489aaa: mov dword ptr [rip + 0x42f4c], 2; test byte ptr [rip + 0x42b09], 0x40; jne 0x89abe; ret; 
0x000000000048846e: mov dword ptr [rip + 0x43e70], 0; ret; 
0x000000000048842a: mov dword ptr [rip + 0x43eb4], 0; ret; 
0x0000000000482634: mov dword ptr [rip + 0x44d26], ecx; mov qword ptr [rdi + 0x458], rcx; test byte ptr [rax + 0x31c], 4; jne 0x82658; or byte ptr [rdi + 0x31d], 0x40; ret; 
0x00000000004806f1: mov dword ptr [rip + 0x4c1b9], eax; add rsp, 8; ret; 
0x00000000004805a8: mov dword ptr [rip + 0x4c2f2], eax; mov qword ptr [rip + 0x4c2fb], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004805af: mov dword ptr [rip + 0x4c2fb], ecx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000475f42: mov dword ptr [rip + 0x50b80], eax; add rsp, 8; ret; 
0x0000000000475f37: mov dword ptr [rip + 0x50b87], eax; call 0x79b70; mov dword ptr [rip + 0x50b80], eax; add rsp, 8; ret; 
0x0000000000474af8: mov dword ptr [rip + 0x51fd2], eax; ret; 
0x0000000000474ae7: mov dword ptr [rip + 0x51fd3], eax; ret; 
0x00000000004747c7: mov dword ptr [rip + 0x522ef], eax; ret; 
0x00000000004747b7: mov dword ptr [rip + 0x522fb], eax; ret; 
0x00000000004747a7: mov dword ptr [rip + 0x52307], eax; ret; 
0x0000000000474797: mov dword ptr [rip + 0x52313], eax; ret; 
0x00000000004747ec: mov dword ptr [rip + 0x539fe], eax; ret; 
0x0000000000464f81: mov dword ptr [rip + 0x61aa9], eax; mov qword ptr [rip + 0x61aaa], rdx; cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x0000000000464f88: mov dword ptr [rip + 0x61aaa], edx; cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x0000000000456cda: mov dword ptr [rip + 0x6ddb0], eax; pop rbx; ret; 
0x0000000000452a8d: mov dword ptr [rip + 0x7360d], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045353d: mov dword ptr [rip + 0x73e45], edx; mov qword ptr [rdi + 0x460], rdx; add rsp, 8; ret; 
0x00000000004534f1: mov dword ptr [rip + 0x73e59], eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004540ba: mov dword ptr [rip + 0x78250], eax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x00000000004533b4: mov dword ptr [rip + 0x78ebe], eax; lea rax, [rip + 0x78eaf]; ret; 
0x0000000000453372: mov dword ptr [rip + 0x78f18], edi; cmp qword ptr [rip + 0x78ef8], 0; je 0x533a0; lea rax, [rip + 0x78ee7]; ret; 
0x000000000045103c: mov dword ptr [rip + 0x7b226], eax; cmp rax, rdi; jb 0x51050; xor eax, eax; ret; 
0x000000000041ba43: mov dword ptr [rip + 0xa9d27], eax; ret; 
0x000000000041ba62: mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041ba23: mov dword ptr [rip + 0xa9d3f], eax; ret; 
0x000000000041ba58: mov dword ptr [rip + 0xa9d46], 1; mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041ba03: mov dword ptr [rip + 0xa9d57], eax; ret; 
0x000000000041ba38: mov dword ptr [rip + 0xa9d66], 1; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba18: mov dword ptr [rip + 0xa9d86], 1; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041b7f9: mov dword ptr [rip + 0xa9fe1], eax; ret; 
0x000000000041b789: mov dword ptr [rip + 0xa9fe9], eax; ret; 
0x000000000041b7e2: mov dword ptr [rip + 0xa9ff0], eax; ret; 
0x000000000041b7c8: mov dword ptr [rip + 0xa9ffa], edx; ret; 
0x000000000041b779: mov dword ptr [rip + 0xaa001], eax; ret; 
0x000000000041fbb7: mov dword ptr [rip + 0xac663], 0; ret; 
0x0000000000419f90: mov dword ptr [rip + 0xae21e], 0; ret; 
0x0000000000419f19: mov dword ptr [rip + 0xae299], ebx; add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x000000000041ba78: mov dword ptr [rip + 0xb07b6], eax; ret; 
0x000000000041b987: mov dword ptr [rip + 0xb08ab], eax; ret; 
0x0000000000401e31: mov dword ptr [rip + 0xca545], 0x800; pop rbx; ret; 
0x0000000000401e28: mov dword ptr [rip + 0xca552], eax; pop rbx; ret; 
0x000000000040421d: mov dword ptr [rsi + 0x10], esi; syscall; 
0x0000000000489dd1: mov dword ptr [rsi + 0x18], 0; ret; 
0x0000000000489dc9: mov dword ptr [rsi + 0x18], edx; ret; 
0x0000000000404211: mov dword ptr [rsi + 8], eax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004881e9: mov dword ptr [rsi + 8], eax; mov eax, 2; ret; 
0x0000000000463130: mov dword ptr [rsi + rbx*8], eax; lea rax, [rip + 0x61ae6]; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x63145; call rax; 
0x0000000000463560: mov dword ptr [rsi - 0x80], edx; mov rdx, qword ptr [rax + rbp*8]; test rdx, rdx; je 0x6356e; call rdx; 
0x000000000044629a: mov dword ptr [rsi - 2], ecx; ret; 
0x000000000044628d: mov dword ptr [rsi - 4], ecx; ret; 
0x000000000041b713: mov dword ptr [rsi], eax; mov byte ptr [rdx + 0x971], dil; xor eax, eax; ret; 
0x00000000004931c2: mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x00000000004536b6: mov dword ptr [rsi], eax; ret; 
0x00000000004809cd: mov dword ptr [rsi], ecx; mov rax, r8; ret; 
0x0000000000464fa1: mov dword ptr [rsi], ecx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000048846b: mov dword ptr [rsi], edi; mov qword ptr [rip + 0x43e70], 0; ret; 
0x00000000004880a6: mov dword ptr [rsi], edx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000048808b: mov dword ptr [rsi], edx; ret; 
0x000000000040421a: mov dword ptr [rsi], esi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000452775: mov dword ptr [rsp + 0x1008], eax; xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x0000000000475d24: mov dword ptr [rsp + 0x10], 1; movaps xmmword ptr [rsp + 0x20], xmm0; call 0x882c0; call rbx; 
0x00000000004506d5: mov dword ptr [rsp + 0x10], edi; mov rdi, qword ptr [rsp + 0x10]; mov eax, 0x4f; syscall; 
0x0000000000481708: mov dword ptr [rsp + 0x18], eax; call 0x80f90; add rsp, 0xd8; ret; 
0x0000000000450dd5: mov dword ptr [rsp + 0x20], eax; cmp esi, 9; je 0x50e08; mov eax, 0x48; syscall; 
0x0000000000479e8a: mov dword ptr [rsp + 0x28], eax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x00000000004704b4: mov dword ptr [rsp + 0x48], 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000046fb62: mov dword ptr [rsp + 0x50], 0x20; jmp rdx; 
0x00000000004708c4: mov dword ptr [rsp + 0x50], 0x20; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000046fb5a: mov dword ptr [rsp + 0x54], 0; mov dword ptr [rsp + 0x50], 0x20; jmp rdx; 
0x0000000000470884: mov dword ptr [rsp + 0x54], 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000040eaec: mov dword ptr [rsp + 0x58], 0; mov byte ptr [rsp + 0x40], 0x20; jmp rdx; 
0x00000000004704ec: mov dword ptr [rsp + 0x58], 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000470800: mov dword ptr [rsp + 0x60], 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000465c76: mov dword ptr [rsp + 0x68], eax; mov rsi, qword ptr [rsp + 8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x00000000004708fc: mov dword ptr [rsp + 0x70], 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000450538: mov dword ptr [rsp + 8], eax; call 0x74770; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000453761: mov dword ptr [rsp + 8], eax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000450e62: mov dword ptr [rsp + 8], eax; xor eax, eax; cmp esi, 9; je 0x50e98; mov eax, 0x48; syscall; 
0x0000000000493da7: mov dword ptr [rsp + 8], ecx; call rax; 
0x00000000004130d7: mov dword ptr [rsp + 8], ecx; mov rdi, r15; call rax; 
0x00000000004156d0: mov dword ptr [rsp + 8], ecx; mov rdi, rbp; call rax; 
0x0000000000454f12: mov dword ptr [rsp], 0; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x00000000004909ad: mov dword ptr [rsp], eax; call 0x90d40; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000476cc2: mov dword ptr [rsp], esi; pop r12; pop r13; pop r14; ret; 
0x000000000048d378: mov dword ptr fs:[0x48], r8d; ret; 
0x0000000000465207: mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004511b7: mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000044facf: mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000451057: mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041ebd7: mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000450357: mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000041ff91: mov dword ptr fs:[rbx], ebp; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x000000000045029d: mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000409fe7: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000044fab1: mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000450559: mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000446595: mov dword ptr ss:[rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000434050: mov dx, word ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000004439c2: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000443392: mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000443a13: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004433d3: mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000042df10: mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000042e0f0: mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000443980: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000443350: mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000401868: mov eax, 0; leave; ret; 
0x0000000000401009: mov eax, 0; test rax, rax; je 0x1016; call rax; 
0x00000000004016dd: mov eax, 0; test rax, rax; je 0x16f0; mov edi, 0x4c6ae0; jmp rax; 
0x000000000040171f: mov eax, 0; test rax, rax; je 0x1730; mov edi, 0x4c6ae0; jmp rax; 
0x0000000000450404: mov eax, 0x101; syscall; 
0x0000000000450377: mov eax, 0x106; syscall; 
0x0000000000450377: mov eax, 0x106; syscall; cmp eax, 0xfffff000; ja 0x50390; xor eax, eax; ret; 
0x000000000041b97d: mov eax, 0x10; cmova rax, rdx; mov qword ptr [rip + 0xb08ab], rax; ret; 
0x0000000000479e93: mov eax, 0x10; syscall; 
0x0000000000454113: mov eax, 0x111; movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000479e37: mov eax, 0x11; syscall; 
0x0000000000479e37: mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x79e50; ret; 
0x0000000000450ffb: mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000450ffb: mov eax, 0x12e; xor edi, edi; syscall; cmp rax, -0x1000; ja 0x51010; ret; 
0x0000000000466690: mov eax, 0x13e; syscall; 
0x0000000000466690: mov eax, 0x13e; syscall; cmp rax, -0x1000; ja 0x666f0; ret; 
0x000000000048106d: mov eax, 0x14; syscall; 
0x000000000045415a: mov eax, 0x14e; syscall; 
0x0000000000454aa9: mov eax, 0x15; syscall; 
0x0000000000421d49: mov eax, 0x16; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004749f4: mov eax, 0x16; pop rbx; pop r12; pop r13; ret; 
0x0000000000421f44: mov eax, 0x16; ret; 
0x0000000000450284: mov eax, 0x18; syscall; 
0x0000000000450284: mov eax, 0x18; syscall; cmp rax, -0xfff; jae 0x50294; ret; 
0x0000000000452ad8: mov eax, 0x19; syscall; 
0x0000000000451254: mov eax, 0x1c; syscall; 
0x0000000000451254: mov eax, 0x1c; syscall; cmp rax, -0xfff; jae 0x51264; ret; 
0x000000000048e3b4: mov eax, 0x26; syscall; 
0x000000000048e3b4: mov eax, 0x26; syscall; cmp rax, -0x1000; ja 0x8e3c8; ret; 
0x000000000044fb54: mov eax, 0x27; syscall; 
0x000000000044fb54: mov eax, 0x27; syscall; ret; 
0x0000000000479a44: mov eax, 0x3f; syscall; 
0x0000000000479a44: mov eax, 0x3f; syscall; cmp rax, -0xfff; jae 0x79a54; ret; 
0x0000000000461fd9: mov eax, 0x44000000; mov eax, eax; pop rbp; pop r12; ret; 
0x0000000000423214: mov eax, 0x4800008e; lea edx, [rip + 0xe441]; cmovne rax, rdx; ret; 
0x0000000000410d44: mov eax, 0x48000b11; mov eax, dword ptr [rax + rdi*8]; ret; 
0x0000000000450dde: mov eax, 0x48; syscall; 
0x00000000004506de: mov eax, 0x4f; syscall; 
0x0000000000480e56: mov eax, 0x59; mov rbp, rsp; mov rsi, rbp; syscall; 
0x0000000000452b54: mov eax, 0x63; syscall; 
0x0000000000452b54: mov eax, 0x63; syscall; cmp rax, -0xfff; jae 0x52b64; ret; 
0x0000000000465203: mov eax, 0x64ffffff; mov dword ptr [rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004511b3: mov eax, 0x64ffffff; mov dword ptr [rax], 0x16; mov rax, -1; ret; 
0x000000000044facb: mov eax, 0x64ffffff; mov dword ptr [rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000451053: mov eax, 0x64ffffff; mov dword ptr [rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041ebd3: mov eax, 0x64ffffff; mov dword ptr [rax], 0xc; xor eax, eax; ret; 
0x0000000000450353: mov eax, 0x64ffffff; mov dword ptr [rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000409fe3: mov eax, 0x64ffffff; mov dword ptr [rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000489d64: mov eax, 0x64ffffff; mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x0000000000479a74: mov eax, 0x66; syscall; 
0x0000000000479a74: mov eax, 0x66; syscall; ret; 
0x0000000000479a94: mov eax, 0x68; syscall; 
0x0000000000479a94: mov eax, 0x68; syscall; ret; 
0x0000000000479a84: mov eax, 0x6b; syscall; 
0x0000000000479a84: mov eax, 0x6b; syscall; ret; 
0x0000000000479aa4: mov eax, 0x6c; syscall; 
0x0000000000479aa4: mov eax, 0x6c; syscall; ret; 
0x0000000000474946: mov eax, 0x6e; ret; 
0x0000000000479844: mov eax, 0x7fffffff; cmp rdx, rax; cmova rdx, rax; mov eax, 0xd9; syscall; 
0x0000000000475953: mov eax, 0x83; ret; 
0x0000000000479ab4: mov eax, 0x8f; syscall; 
0x0000000000479ab4: mov eax, 0x8f; syscall; cmp rax, -0xfff; jae 0x79ac4; ret; 
0x0000000000479ae4: mov eax, 0x90; syscall; 
0x0000000000479ae4: mov eax, 0x90; syscall; cmp rax, -0xfff; jae 0x79af4; ret; 
0x0000000000479b14: mov eax, 0x91; syscall; 
0x0000000000479b14: mov eax, 0x91; syscall; cmp rax, -0xfff; jae 0x79b24; ret; 
0x0000000000479b44: mov eax, 0x92; syscall; 
0x0000000000479b44: mov eax, 0x92; syscall; cmp rax, -0xfff; jae 0x79b54; ret; 
0x0000000000479b74: mov eax, 0x93; syscall; 
0x0000000000479b74: mov eax, 0x93; syscall; cmp rax, -0xfff; jae 0x79b84; ret; 
0x0000000000404214: mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000403094: mov eax, 0x9e; syscall; 
0x0000000000451224: mov eax, 0xa; syscall; 
0x0000000000451224: mov eax, 0xa; syscall; cmp rax, -0xfff; jae 0x51234; ret; 
0x00000000004511f4: mov eax, 0xb; syscall; 
0x00000000004511f4: mov eax, 0xb; syscall; cmp rax, -0xfff; jae 0x51204; ret; 
0x000000000041ada0: mov eax, 0xba; syscall; 
0x0000000000451034: mov eax, 0xc; syscall; 
0x0000000000475622: mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000041aa64: mov eax, 0xca; syscall; 
0x0000000000475da7: mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x75dc0; ret; 
0x000000000041ab21: mov eax, 0xca; syscall; ret; 
0x000000000041aac5: mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000041b259: mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000452781: mov eax, 0xcc; syscall; 
0x000000000042333e: mov eax, 0xd1890001; and ecx, 0x120; cmp ecx, 0x120; je 0x23358; ret; 
0x0000000000479850: mov eax, 0xd9; syscall; 
0x0000000000479850: mov eax, 0xd9; syscall; cmp rax, -0x1000; ja 0x79860; ret; 
0x00000000004652fc: mov eax, 0xd; syscall; 
0x00000000004540c7: mov eax, 0xda; syscall; 
0x000000000044fa98: mov eax, 0xe4; syscall; 
0x000000000041ae54: mov eax, 0xe; mov rdx, r14; lea rsi, [rip + 0x7fb1d]; syscall; 
0x000000000041acf0: mov eax, 0xe; syscall; 
0x000000000041ad84: mov eax, 0xea; syscall; 
0x0000000000450297: mov eax, 0xf7ffffff; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000044faab: mov eax, 0xf7ffffff; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000450553: mov eax, 0xf7ffffff; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x0000000000465231: mov eax, 0xf; syscall; 
0x0000000000488140: mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000464fc5: mov eax, 0xffffffa8; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000465201: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004511b1: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000044fac9: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000451051: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041ebd1: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000450351: mov eax, 0xffffffb8; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000489d62: mov eax, 0xffffffb8; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x0000000000465025: mov eax, 0xffffffe0; add rax, qword ptr fs:[0]; ret; 
0x0000000000465005: mov eax, 0xffffffe8; add rax, qword ptr fs:[0]; ret; 
0x0000000000464fe5: mov eax, 0xfffffff0; add rax, qword ptr fs:[0]; ret; 
0x000000000048a01a: mov eax, 0xffffffff; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x00000000004664ae: mov eax, 0xffffffff; pop rbp; pop r12; pop r13; ret; 
0x0000000000409fea: mov eax, 0xffffffff; pop rbp; ret; 
0x000000000041dab5: mov eax, 0xffffffff; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000413f2c: mov eax, 0xffffffff; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000472b6c: mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000415253: mov eax, 0xffffffff; pop rbx; ret; 
0x00000000004145a0: mov eax, 0xffffffff; ret; 
0x0000000000493d48: mov eax, 1; cmp qword ptr [rsi + 8], rcx; ja 0x93d55; sbb eax, eax; ret; 
0x000000000048815d: mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000488085: mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x000000000046c239: mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x0000000000422068: mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000472b4a: mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000418e3c: mov eax, 1; pop rbx; ret; 
0x00000000004755c3: mov eax, 1; ret; 
0x0000000000450590: mov eax, 1; syscall; 
0x0000000000450590: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x505f0; ret; 
0x0000000000450fc4: mov eax, 1; syscall; cmp rax, -0x1000; ja 0x50fd8; ret; 
0x0000000000478391: mov eax, 2; ret; 
0x00000000004783a1: mov eax, 3; ret; 
0x0000000000450d74: mov eax, 3; syscall; 
0x0000000000450d74: mov eax, 3; syscall; cmp rax, -0x1000; ja 0x50d88; ret; 
0x00000000004783b1: mov eax, 4; ret; 
0x00000000004783c1: mov eax, 5; ret; 
0x00000000004783d1: mov eax, 6; ret; 
0x00000000004783e1: mov eax, 7; ret; 
0x0000000000450624: mov eax, 8; syscall; 
0x0000000000450624: mov eax, 8; syscall; cmp rax, -0x1000; ja 0x50638; ret; 
0x00000000004511a0: mov eax, 9; syscall; 
0x00000000004511a0: mov eax, 9; syscall; cmp rax, -0x1000; ja 0x511d0; ret; 
0x000000000048007b: mov eax, dword ptr [0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x000000000047477b: mov eax, dword ptr [0x10]; mov byte ptr [rax + 0x972], 0; ret; 
0x000000000041b6e6: mov eax, dword ptr [0x10]; ret; 
0x00000000004504e5: mov eax, dword ptr [0x18]; test eax, eax; jne 0x50500; syscall; 
0x00000000004882cd: mov eax, dword ptr [0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000413795: mov eax, dword ptr [rax + 0x20]; jmp rax; 
0x000000000046507f: mov eax, dword ptr [rax + 0x58]; mov rdx, -0x20; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000418fc0: mov eax, dword ptr [rax + 0x68]; test rax, rax; jne 0x18fb8; ret; 
0x000000000041fbac: mov eax, dword ptr [rax + 0x870]; cmp rax, rsi; jne 0x1fb80; mov dword ptr [rip + 0xac663], 0; ret; 
0x0000000000473a35: mov eax, dword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000473b6a: mov eax, dword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041378e: mov eax, dword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000048fafa: mov eax, dword ptr [rax + 8]; mov rdx, r13; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000485c25: mov eax, dword ptr [rax + 8]; ret; 
0x0000000000485c35: mov eax, dword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000046313b: mov eax, dword ptr [rax + rbx*8]; test rax, rax; je 0x63145; call rax; 
0x0000000000496f34: mov eax, dword ptr [rax + rbx*8]; test rax, rax; je 0x96f3e; call rax; 
0x0000000000464fd3: mov eax, dword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000410d49: mov eax, dword ptr [rax + rdi*8]; ret; 
0x000000000048d35b: mov eax, dword ptr [rax + rdx*8]; mov rsi, qword ptr [rax + 8]; call 0x54de0; nop word ptr [rax + rax]; ret; 
0x0000000000489d69: mov eax, dword ptr [rax]; add rsp, 8; ret; 
0x000000000047371a: mov eax, dword ptr [rax]; mov qword ptr [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000464fd0: mov eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000493139: mov eax, dword ptr [rax]; ret; 
0x0000000000419b39: mov eax, dword ptr [rax]; test rax, rax; jne 0x19b30; ret; 
0x0000000000489e7f: mov eax, dword ptr [rbp + 0x31]; ror byte ptr [rcx + rcx*4 + 0xd], cl; mov al, 3; add byte ptr [rcx + rcx*4 - 0x30], cl; add rsp, 0x28; ret; 
0x000000000048a3ff: mov eax, dword ptr [rbp + 8]; mov qword ptr [rip + 0x3aac7], rax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000404770: mov eax, dword ptr [rbp + 8]; sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000451a8f: mov eax, dword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x0000000000457bc9: mov eax, dword ptr [rbp - 0x68]; mov rdi, r12; call rax; 
0x00000000004841d5: mov eax, dword ptr [rbp - 0x90]; mov qword ptr [rbp - 0xa0], r10; add rax, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x88], r9; call rax; 
0x0000000000487dee: mov eax, dword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x87e75; leave; ret; 
0x0000000000482a72: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x0000000000483246: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x83261; mov qword ptr [rbp - 0xb0], r10; call rax; 
0x0000000000483a1d: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x83a2a; call rax; 
0x0000000000483117: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test esi, esi; jne 0x83124; call rax; 
0x0000000000483a9c: mov eax, dword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test r11d, r11d; jne 0x83ab8; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000048dd49: mov eax, dword ptr [rbx + 0x10]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x460]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048dd01: mov eax, dword ptr [rbx + 0x10]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000048dcf1: mov eax, dword ptr [rbx + 0x10]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000418162: mov eax, dword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041817e: mov eax, dword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041824f: mov eax, dword ptr [rbx + 0x20]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041841f: mov eax, dword ptr [rbx + 0x28]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x00000000004188fe: mov eax, dword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000418db0: mov eax, dword ptr [rbx + 0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x00000000004909b1: mov eax, dword ptr [rbx]; add byte ptr [rax], al; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x0000000000452a8a: mov eax, dword ptr [rbx]; mov qword ptr [rip + 0x7360d], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000442ef4: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000441724: mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x0000000000442ed5: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000441715: mov eax, dword ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000442f06: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000441736: mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000442f87: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000441777: mov eax, dword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000442f26: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000441746: mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000442fa7: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000441797: mov eax, dword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000442f46: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000441756: mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000442fc7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004417b7: mov eax, dword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000442f66: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000441766: mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000442e57: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004416a7: mov eax, dword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000043ba0a: mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000044de0d: mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x4ddf8; ret; 
0x000000000043d2e2: mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000442eb0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x0000000000442ec0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; lea rax, [rdx + 4]; ret; 
0x0000000000441700: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov al, byte ptr [rcx + 4]; mov byte ptr [rdx + 4], al; mov rax, rdi; ret; 
0x0000000000442ed0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000441710: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov ax, word ptr [rcx + 4]; mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x0000000000442ef0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; lea rax, [rdx + 6]; ret; 
0x0000000000441720: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov eax, dword ptr [rcx + 3]; mov dword ptr [rdx + 3], eax; mov rax, rdi; ret; 
0x00000000004416f0: mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; mov rax, rdi; ret; 
0x0000000000442e01: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000442f01: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000441731: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000442f21: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000441741: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000442f41: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000441751: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000442f61: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000441761: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000442f81: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000441771: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000442fa1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000441791: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000442fc1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004417b1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000442e51: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004416a1: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000441651: mov eax, dword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000442e81: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000442e91: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004416e1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000004416d1: mov eax, dword ptr [rcx]; mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x00000000004808d2: mov eax, dword ptr [rcx]; ret; 
0x000000000041aa21: mov eax, dword ptr [rdi + 0x10]; mov byte ptr fs:[0x972], al; cmp eax, 1; je 0x1aa38; ret; 
0x000000000041a965: mov eax, dword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000419b54: mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x0000000000419b7c: mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x00000000004743fe: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000474410: mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000041801c: mov eax, dword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000417fe1: mov eax, dword ptr [rdi + 0x18]; punpckhqdq xmm1, xmm2; movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x00000000004647e6: mov eax, dword ptr [rdi + 0x20]; mov rbp, rdi; test rax, rax; je 0x647f3; call rax; 
0x0000000000497215: mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x97224; call rax; 
0x000000000041c394: mov eax, dword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000482580: mov eax, dword ptr [rdi + 0x28]; test byte ptr [rax + 0x31c], 4; jne 0x825a0; or byte ptr [rdi + 0x31d], 0x40; xor eax, eax; ret; 
0x0000000000419ed5: mov eax, dword ptr [rdi + 0x68]; ret; 
0x0000000000493145: mov eax, dword ptr [rdi + 0x90]; ret; 
0x00000000004931a5: mov eax, dword ptr [rdi + 0x98]; ret; 
0x0000000000473a15: mov eax, dword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x73a28; ret; 
0x00000000004931e5: mov eax, dword ptr [rdi + 0xa0]; ret; 
0x0000000000493245: mov eax, dword ptr [rdi + 0xa8]; ret; 
0x0000000000493235: mov eax, dword ptr [rdi + 0xb0]; ret; 
0x00000000004931f5: mov eax, dword ptr [rdi + 0xb8]; ret; 
0x00000000004931b5: mov eax, dword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000419fcb: mov eax, dword ptr [rdi + 8]; cmp rax, rdx; jae 0x19ff8; movzx eax, byte ptr [rax]; ret; 
0x0000000000488306: mov eax, dword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, r8; jmp rax; 
0x0000000000493c05: mov eax, dword ptr [rdi + 8]; mov rsi, rdi; test rax, rax; je 0x93c20; mov edi, 1; jmp rax; 
0x000000000042163e: mov eax, dword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000004458cc: mov eax, dword ptr [rdi - 4]; mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x45ae0; xor eax, eax; ret; 
0x000000000041b795: mov eax, dword ptr [rdi]; cmp rax, 0x408; jbe 0x1b7a0; ret; 
0x000000000041b965: mov eax, dword ptr [rdi]; cmp rax, 0xa0; jbe 0x1b970; ret; 
0x000000000041b7d5: mov eax, dword ptr [rdi]; cmp rax, 0xffff; jbe 0x1b7e0; ret; 
0x0000000000474ae5: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x51fd3], eax; ret; 
0x00000000004747c5: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x522ef], eax; ret; 
0x00000000004747b5: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x522fb], eax; ret; 
0x00000000004747a5: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x52307], eax; ret; 
0x0000000000474795: mov eax, dword ptr [rdi]; mov dword ptr [rip + 0x52313], eax; ret; 
0x0000000000419b46: mov eax, dword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000474af5: mov eax, dword ptr [rdi]; mov qword ptr [rip + 0x51fd2], rax; ret; 
0x000000000048830a: mov eax, dword ptr [rdi]; mov rdi, r8; jmp rax; 
0x000000000041ba55: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d46], 1; mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041ba35: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d66], 1; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba15: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d86], 1; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041ba75: mov eax, dword ptr [rdi]; nop; mov dword ptr [rip + 0xb07b6], eax; ret; 
0x000000000041b7f5: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0xa9fe1], rax; ret; 
0x000000000041b785: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0xa9fe9], rax; ret; 
0x000000000041b775: mov eax, dword ptr [rdi]; nop; mov qword ptr [rip + 0xaa001], rax; ret; 
0x0000000000475e14: mov eax, dword ptr [rdi]; test al, 2; je 0x75e20; xor eax, eax; ret; 
0x00000000004883e4: mov eax, dword ptr [rdi]; test eax, eax; jne 0x883f0; xend; xor eax, eax; ret; 
0x0000000000495924: mov eax, dword ptr [rdi]; test eax, eax; jne 0x95930; ret; 
0x0000000000495c74: mov eax, dword ptr [rdi]; test eax, eax; jne 0x95c80; ret; 
0x000000000041458e: mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x0000000000439606: mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000453db2: mov eax, dword ptr [rdx + rax]; cmp rax, -1; je 0x53dfa; ret; 
0x00000000004533b0: mov eax, dword ptr [rdx + rax]; mov qword ptr [rip + 0x78ebe], rax; lea rax, [rip + 0x78eaf]; ret; 
0x0000000000473ccf: mov eax, dword ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000488b14: mov eax, dword ptr [rip + 0x437a6]; ret; 
0x0000000000477731: mov eax, dword ptr [rip + 0x54e39]; ret; 
0x0000000000477721: mov eax, dword ptr [rip + 0x54e41]; ret; 
0x0000000000477711: mov eax, dword ptr [rip + 0x54e49]; ret; 
0x0000000000477701: mov eax, dword ptr [rip + 0x54e51]; ret; 
0x00000000004776f1: mov eax, dword ptr [rip + 0x54e59]; ret; 
0x00000000004776e1: mov eax, dword ptr [rip + 0x54e61]; ret; 
0x00000000004776d1: mov eax, dword ptr [rip + 0x54e69]; ret; 
0x00000000004776c1: mov eax, dword ptr [rip + 0x54e71]; ret; 
0x00000000004776b1: mov eax, dword ptr [rip + 0x54e79]; ret; 
0x00000000004776a1: mov eax, dword ptr [rip + 0x54e81]; ret; 
0x0000000000477691: mov eax, dword ptr [rip + 0x54e89]; ret; 
0x0000000000477689: mov eax, dword ptr [rip + 0x54ee9]; ret; 
0x00000000004747e0: mov eax, dword ptr [rip + 0x57c02]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x539fe], eax; ret; 
0x0000000000461e85: mov eax, dword ptr [rip + 0x6a7bd]; ret; 
0x00000000004536af: mov eax, dword ptr [rip + 0x73ca3]; mov qword ptr [rsi], rax; ret; 
0x00000000004536a5: mov eax, dword ptr [rip + 0x73cbd]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x73ca3]; mov qword ptr [rsi], rax; ret; 
0x000000000045363e: mov eax, dword ptr [rip + 0x73d44]; mov rax, r8; ret; 
0x0000000000458245: mov eax, dword ptr [rip + 0x743bd]; ret; 
0x0000000000458235: mov eax, dword ptr [rip + 0x743c5]; ret; 
0x000000000044fa75: mov eax, dword ptr [rip + 0x7500d]; test rax, rax; je 0x4fa98; sub rsp, 8; call rax; 
0x0000000000451105: mov eax, dword ptr [rip + 0x7506d]; test rax, rax; je 0x51111; ret; 
0x0000000000456cb4: mov eax, dword ptr [rip + 0x75926]; test eax, eax; je 0x56cc0; ret; 
0x0000000000452a34: mov eax, dword ptr [rip + 0x79886]; mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x0000000000419eb5: mov eax, dword ptr [rip + 0xab2a5]; ret; 
0x0000000000460227: mov eax, dword ptr [rsp + 0x10]; call rax; 
0x0000000000454f1a: mov eax, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x00000000004515e4: mov eax, dword ptr [rsp + 0x10]; mov rdi, rbp; call rax; 
0x000000000045a0f2: mov eax, dword ptr [rsp + 0x18]; call rax; 
0x0000000000459b32: mov eax, dword ptr [rsp + 0x28]; call rax; 
0x0000000000450542: mov eax, dword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000401c94: mov eax, dword ptr [rsp + 8]; call rax; 
0x0000000000490c42: mov eax, dword ptr [rsp]; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000004909b6: mov eax, dword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000040a12c: mov eax, dword ptr [rsp]; call rax; 
0x0000000000493da4: mov eax, dword ptr [rsp]; mov dword ptr [rsp + 8], ecx; call rax; 
0x0000000000412d45: mov eax, dword ptr [rsp]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000040a2b1: mov eax, dword ptr [rsp]; mov r13, r15; add r15, r14; call rax; 
0x0000000000493dc7: mov eax, dword ptr [rsp]; mov rdi, r15; mov rsi, qword ptr [r14]; call rax; 
0x000000000040a0a1: mov eax, dword ptr [rsp]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000040a24d: mov eax, dword ptr [rsp]; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000488b7c: mov eax, dword ptr [rsp]; pop rbx; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x00000000004504e4: mov eax, dword ptr fs:[0x18]; test eax, eax; jne 0x50500; syscall; 
0x0000000000489d68: mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x000000000040ac1a: mov eax, eax; add qword ptr [rip + 0xbd13c], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000450476: mov eax, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004505c2: mov eax, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x0000000000450522: mov eax, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x00000000004666c1: mov eax, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x0000000000479cd1: mov eax, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000480a46: mov eax, eax; neg rax; test dil, dil; cmove r8, rax; mov rax, r8; ret; 
0x000000000041b3ea: mov eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000414d57: mov eax, eax; pop rbp; pop r12; ret; 
0x000000000040ac88: mov eax, eax; pop rbx; pop rbp; ret; 
0x0000000000401a9b: mov eax, eax; pop rbx; ret; 
0x000000000044d83c: mov eax, eax; ret; 
0x0000000000475cc4: mov eax, eax; syscall; 
0x000000000043f9c5: mov eax, eax; vzeroupper; ret; 
0x000000000044abb7: mov eax, eax; xtest; je 0x4abc2; vzeroall; ret; 
0x000000000044f72a: mov eax, eax; xtest; je 0x4f735; vzeroall; ret; 
0x00000000004930c0: mov eax, ebp; mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x0000000000492fd8: mov eax, ebp; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x00000000004160c2: mov eax, ebp; movups xmmword ptr [rbx + 8], xmm1; pop rbx; pop rbp; pop r12; ret; 
0x000000000041213e: mov eax, ebp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004519e9: mov eax, ebp; pop rbp; pop r12; pop r13; ret; 
0x0000000000421ac6: mov eax, ebp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000480755: mov eax, ebp; pop rbx; pop rbp; ret; 
0x0000000000474f28: mov eax, ebp; syscall; 
0x0000000000488013: mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x000000000044ee1b: mov eax, ebx; cmovne rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000492e9d: mov eax, ebx; mov rcx, rbp; or esi, 2; mov edi, 1; call rax; 
0x0000000000416a2a: mov eax, ebx; pop rbx; pop rbp; pop r12; ret; 
0x00000000004019b0: mov eax, ebx; pop rbx; shr eax, 0x16; add eax, 1; ret; 
0x0000000000487edb: mov eax, ecx; adc eax, eax; ret; 
0x00000000004653d0: mov eax, ecx; add rsp, 0x148; ret; 
0x0000000000479f1f: mov eax, ecx; add rsp, 0x38; ret; 
0x0000000000474481: mov eax, ecx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000046c7ab: mov eax, ecx; pop r14; ret; 
0x000000000046c6f7: mov eax, ecx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000414956: mov eax, ecx; syscall; 
0x0000000000466d53: mov eax, edi; mov rdi, rdx; cmp rax, 9; ja 0x66d30; mov rax, r8; ret; 
0x0000000000474df1: mov eax, edi; not esi; and esi, 0x80; syscall; 
0x0000000000419ee5: mov eax, edi; ret; 
0x0000000000489e8b: mov eax, edx; add rsp, 0x28; ret; 
0x00000000004881e1: mov eax, edx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x000000000045434e: mov eax, edx; cmp rsi, r9; ja 0x543f0; cmp r9, rcx; jbe 0x5437d; ret; 
0x00000000004543e1: mov eax, edx; mov rcx, rdi; cmp r9, rax; jge 0x54378; ret; 
0x00000000004775d8: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x000000000047720c: mov eax, edx; mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000487095: mov eax, edx; pop rbx; ret; 
0x0000000000440019: mov eax, edx; ret; 
0x0000000000401cc2: mov eax, edx; syscall; 
0x0000000000447cb1: mov eax, edx; vzeroupper; ret; 
0x0000000000475e69: mov eax, esi; mov r10d, 8; mov rsi, r8; mov eax, 0xe; syscall; 
0x000000000048ac04: mov eax, esi; mov rcx, qword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x00000000004651c9: mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x000000000048d3ed: mov eax, esi; or eax, 2; test r8b, r8b; cmove esi, eax; mov eax, 0x9e; syscall; 
0x0000000000411fe6: mov eax, esi; pop r12; pop r13; pop r14; ret; 
0x0000000000411f9e: mov eax, esi; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000044d930: mov eax, esi; ret; 
0x000000000044fb2d: mov eax, esi; syscall; 
0x00000000004934c5: mov eax, esp; mov rcx, r14; mov esi, 1; mov edi, 1; call rax; 
0x0000000000404609: mov eax, esp; pop r12; ret; 
0x00000000004520d2: mov eax, esp; pop rbp; pop r12; jmp rax; 
0x00000000004512d9: mov eax, esp; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000412611: mov eax, esp; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000047a54b: mov eax, esp; pop rbp; pop r12; pop r13; ret; 
0x0000000000413c14: mov eax, esp; pop rbp; pop r12; ret; 
0x000000000040adf4: mov eax, esp; pop rbx; pop r12; ret; 
0x000000000041133e: mov eax, esp; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040456b: mov eax, esp; pop rbx; pop rbp; pop r12; ret; 
0x00000000004666e0: mov eax, fs; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000454f05: mov eax, r12d; pop r12; ret; 
0x0000000000412610: mov eax, r12d; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000048d1d8: mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x0000000000413c13: mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000040adf3: mov eax, r12d; pop rbx; pop r12; ret; 
0x00000000004528d1: mov eax, r12d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040ad13: mov eax, r12d; pop rbx; pop rbp; pop r12; ret; 
0x0000000000421ac5: mov eax, r13d; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000474f27: mov eax, r13d; syscall; 
0x0000000000474df0: mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x000000000041b3e9: mov eax, r8d; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000041aff6: mov eax, r8d; pop rbp; pop r12; ret; 
0x0000000000494054: mov eax, r8d; pop rbx; pop rbp; ret; 
0x0000000000469fe5: mov eax, r8d; ret; 
0x0000000000475cc3: mov eax, r8d; syscall; 
0x00000000004653cf: mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000479f1e: mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000414955: mov eax, r9d; syscall; 
0x0000000000479c72: mov ebp, 0x48000000; add esp, 0x78; ret; 
0x00000000004536a7: mov ebp, 0x4800073c; mov dword ptr [rdi], eax; mov rax, qword ptr [rip + 0x73ca3]; mov qword ptr [rsi], rax; ret; 
0x000000000043fa06: mov ebp, 0x83d72948; shl byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000453e8c: mov ebp, 0x8948fffc; ret 0x8548; 
0x000000000042337a: mov ebp, 0x8d480001; add eax, 0x1b86c; cmove rax, rdx; ret; 
0x00000000004883b2: mov ebp, 0x8ec8348; call 0x1aaa0; xor eax, eax; add rsp, 8; ret; 
0x0000000000476e2c: mov ebp, 0xf80148c0; ret; 
0x00000000004770bc: mov ebp, 0xf80148c6; ret; 
0x000000000046e382: mov ebp, 0xfffff748; mov byte ptr [rbp - 0x910], r8b; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x000000000046e4e8: mov ebp, 0xfffff748; mov rdx, r13; mov rsi, r15; call qword ptr [rax + 0x38]; 
0x000000000048105e: mov ebp, 0xfffffbb0; lea rsi, [rbp - 0x430]; mov rdx, r12; mov eax, 0x14; syscall; 
0x0000000000470654: mov ebp, 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000493564: mov ebp, dword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000493716: mov ebp, dword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x00000000004513ec: mov ebp, dword ptr [rsp + 0x10]; test r13, r13; jne 0x5146b; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045141c: mov ebp, dword ptr [rsp + 0x10]; test r13, r13; jne 0x514a0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000452248: mov ebp, dword ptr [rsp + 0x10]; test r13, r13; jne 0x522b0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000465568: mov ebp, eax; mov rdi, r12; call rbx; 
0x00000000004651cf: mov ebp, ecx; nop; jmp rdx; 
0x000000000040a2b5: mov ebp, edi; add r15, r14; call rax; 
0x00000000004647ea: mov ebp, edi; test rax, rax; je 0x647f3; call rax; 
0x0000000000480e5c: mov ebp, esp; mov rsi, rbp; syscall; 
0x00000000004540c2: mov ebx, 0x2d0; mov eax, 0xda; syscall; 
0x000000000040aabf: mov ebx, 0x4c72a8; mov r12, 0x4c72b0; cmp rbx, r12; jae 0xaae3; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000462b94: mov ebx, 0x752ffa80; ret 0x8341; 
0x0000000000459244: mov ebx, 0x83480006; ret 0x4901; 
0x0000000000485591: mov ebx, 0xc748fff7; ret 0xffff; 
0x000000000047b491: mov ebx, 0xebfff85c; int 0x66; nop dword ptr [rax + rax]; ret; 
0x0000000000470621: mov ebx, 1; xor ebp, ebp; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000042db41: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db25: mov ebx, dword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004707c2: mov ebx, dword ptr [rsp + 0x90]; jmp rdx; 
0x0000000000484c51: mov ebx, dword ptr [rsp]; add rsp, 0x30; ret; 
0x00000000004704c1: mov ebx, ecx; jmp rdx; 
0x000000000047061e: mov ebx, ecx; mov r11d, 1; xor ebp, ebp; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004705ae: mov ebx, ecx; mov r9d, 1; mov r10d, 1; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000046fb92: mov ebx, ecx; mov r9d, 1; xor r10d, r10d; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x0000000000475ded: mov ebx, edi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000475ded: mov ebx, edi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000473a2d: mov ebx, edi; test byte ptr [rdi], 2; jne 0x73aa8; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000046c307: mov ecx, 0x1b85b; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x00000000004806f3: mov ecx, 0x480004c1; add esp, 8; ret; 
0x000000000044e3be: mov ecx, 0x58d48c3; cdq; adc eax, dword ptr [rax]; add bh, dh; ret 0; 
0x00000000004777ae: mov ecx, 0x58d48c3; leave; adc al, 0; add bh, dh; ret 0; 
0x000000000042b586: mov ecx, 0x83d72948; jmp qword ptr [rax + 0x73]; 
0x00000000004713cd: mov ecx, 0x89000007; ret 0xc083; 
0x0000000000492ab2: mov ecx, 0xfc0c7; add byte ptr [rax], al; syscall; 
0x0000000000450295: mov ecx, 0xffffffb8; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000464fa4: mov ecx, 0xffffffe8; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000474a2b: mov ecx, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000000474991: mov ecx, 0xffffffff; xor r8d, r8d; mov r10, rcx; mov edx, r13d; mov eax, 0xca; syscall; 
0x00000000004705b1: mov ecx, 1; mov r10d, 1; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004705ed: mov ecx, 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000046fb95: mov ecx, 1; xor r10d, r10d; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000048ac07: mov ecx, dword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000436e03: mov ecx, dword ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000436df0: mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000436dde: mov ecx, dword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049317f: mov ecx, dword ptr [rdi + rsi*8]; cmp al, 8; jne 0x1618; mov qword ptr [rcx], rdx; ret; 
0x0000000000493d45: mov ecx, dword ptr [rdx + 8]; mov eax, 1; cmp qword ptr [rsi + 8], rcx; ja 0x93d55; sbb eax, eax; ret; 
0x0000000000439603: mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004806c5: mov ecx, dword ptr [rip + 0x4c1d5]; cmp rcx, rdi; je 0x806d8; ret; 
0x0000000000443b34: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000443b54: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000443494: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000443484: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000443bb5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000443bd5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000443515: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004434f5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000443af5: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000443455: mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000443c18: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x0000000000443558: mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000443c38: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000443578: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000443bf9: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000443539: mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000443b75: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004434b5: mov ecx, dword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000443b14: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000443474: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000443b95: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004434d5: mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x000000000044c114: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; ret; 
0x0000000000444004: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044cee4: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000043fdd4: mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x0000000000446590: mov ecx, dword ptr [rsi + rdx - 4]; mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x000000000044c134: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000444024: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044cef4: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000043fde4: mov ecx, dword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000004465a1: mov ecx, dword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000042dee5: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df01: mov ecx, dword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0c5: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0e1: mov ecx, dword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2a5: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2c1: mov ecx, dword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e495: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e4b1: mov ecx, dword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e695: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e6b1: mov ecx, dword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e895: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e8b1: mov ecx, dword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e0f5: mov ecx, dword ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x00000000004458cf: mov ecx, dword ptr [rsi - 4]; cmp eax, ecx; jne 0x45ae0; xor eax, eax; ret; 
0x000000000042e4d3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e6d3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e8d3: mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004335c4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000433544: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004334c4: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000433644: mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000433435: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004333a5: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000433315: mov ecx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042dd05: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd21: mov ecx, dword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004439b0: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; lea rax, [rdi + 4]; ret; 
0x0000000000443380: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 4], dh; mov dword ptr [rdi], ecx; ret; 
0x0000000000443a01: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004433c1: mov ecx, dword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000433f73: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433f03: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433e93: mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x000000000044c110: mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; ret; 
0x000000000044cee0: mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000043fdd0: mov ecx, dword ptr [rsi]; mov dword ptr [rdi], ecx; mov ecx, dword ptr [rsi + rdx - 3]; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x00000000004439c0: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000443390: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000443a11: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004433d1: mov ecx, dword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x00000000004439e0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004433a0: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000443a31: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004433e1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000443a51: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004433f1: mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x00000000004472f7: mov ecx, dword ptr [rsi]; mov esi, dword ptr [rsi + rdx]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x0000000000433db5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433d45: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433cd5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433c65: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433bf5: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433b85: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433b15: mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044c131: mov ecx, dword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x000000000044cef1: mov ecx, dword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000043fde1: mov ecx, dword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x0000000000443a71: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000443401: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000443a91: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000443411: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000443ab1: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000443421: mov ecx, dword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000434055: mov ecx, dword ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000443991: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000443361: mov ecx, dword ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000454ebd: mov ecx, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000044e28b: mov ecx, dword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000045a8ed: mov ecx, dword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045b6ff: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000460218: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea6f: mov ecx, dword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045da5d: mov ecx, dword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000436def: mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000453040: mov ecx, eax; and ecx, dword ptr [rsi + 0x10]; lea rcx, [rsi + rcx*4]; add eax, dword ptr [rcx + rdx]; ret; 
0x00000000004808cb: mov ecx, eax; cmp rcx, rdx; jne 0x808a8; mov eax, dword ptr [rcx]; ret; 
0x000000000044de0b: mov ecx, eax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x4ddf8; ret; 
0x000000000046c7a4: mov ecx, eax; pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000492ea0: mov ecx, ebp; or esi, 2; mov edi, 1; call rax; 
0x00000000004543e4: mov ecx, edi; cmp r9, rax; jge 0x54378; ret; 
0x0000000000422321: mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x22338; ret; 
0x0000000000422391: mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x223a8; ret; 
0x0000000000422ca1: mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x22cb8; ret; 
0x00000000004232c1: mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x232d8; ret; 
0x0000000000423341: mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x23358; ret; 
0x00000000004764f1: mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x76508; ret; 
0x00000000004777d1: mov ecx, edx; and ecx, 0x120; cmp ecx, 0x120; je 0x777e8; ret; 
0x0000000000447bf5: mov ecx, edx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447d85: mov ecx, edx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000447b1e: mov ecx, edx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000446756: mov ecx, edx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004934c8: mov ecx, esi; mov esi, 1; mov edi, 1; call rax; 
0x00000000004930bd: mov ecx, esi; mov r8, r13; mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x0000000000492fd5: mov ecx, esi; mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000457353: mov ecx, esi; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000044eb6e: mov ecx, esi; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rcx, r12; call rbx; 
0x0000000000414677: mov ecx, esi; mov rsi, r13; mov rdi, r15; call rbx; 
0x000000000048d5cf: mov ecx, esi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x8d5c0; mov eax, 1; ret; 
0x000000000044eb79: mov ecx, esp; call rbx; 
0x00000000004930c3: mov ecx, esp; mov esi, 0x1a; mov edi, 1; call rax; 
0x0000000000492fdb: mov ecx, esp; mov esi, 0xa; mov edi, 1; call rax; 
0x000000000040308f: mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x00000000004036f6: mov edi, 0x3002; mov eax, 0x9e; syscall; 
0x000000000040372c: mov edi, 0x3003; mov eax, 0x9e; syscall; 
0x000000000040de48: mov edi, 0x440f48c0; ret 0x19e9; 
0x000000000042327d: mov edi, 0x4800027f; cmove eax, edx; ret; 
0x000000000042331d: mov edi, 0x48000288; lea eax, [rip + 0x2a918]; cmove rax, rdx; ret; 
0x0000000000401760: mov edi, 0x4b4b70; call 0x95c60; mov byte ptr [rip + 0xc5b4f], 1; pop rbp; ret; 
0x000000000042ac20: mov edi, 0x4b74c085; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004016e7: mov edi, 0x4c6ae0; jmp rax; 
0x0000000000419283: mov edi, 0x8c48348; pop rbx; pop rbp; ret; 
0x00000000004972bb: mov edi, 0xe8000084; cld; sal esi, 1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000477a85: mov edi, 0xe8fffffe; mov bh, 0xfd; jmp qword ptr [rsi - 0x70]; 
0x0000000000496e7d: mov edi, 0xe9000357; push -0x5d; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000046212c: mov edi, 0xff114ee8; jmp qword ptr [rsi + 0x66]; 
0x00000000004503ff: mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000492ea5: mov edi, 1; call rax; 
0x0000000000493c10: mov edi, 1; jmp rax; 
0x000000000041ad39: mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000414950: mov edi, 2; mov eax, r9d; syscall; 
0x000000000045147a: mov edi, dword ptr [rbp + 0x10]; test rdi, rdi; jne 0x51510; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514db: mov edi, dword ptr [rbp + 0x10]; test rdi, rdi; jne 0x51530; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514af: mov edi, dword ptr [rbp + 0x10]; test rdi, rdi; jne 0x51550; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000451447: mov edi, dword ptr [rbp + 0x10]; test rdi, rdi; jne 0x51570; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522eb: mov edi, dword ptr [rbp + 0x10]; test rdi, rdi; jne 0x52310; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522bf: mov edi, dword ptr [rbp + 0x10]; test rdi, rdi; jne 0x52330; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045228f: mov edi, dword ptr [rbp + 0x10]; test rdi, rdi; jne 0x52350; mov rdi, qword ptr [r13]; call rbx; 
0x000000000048105d: mov edi, dword ptr [rbp - 0x450]; lea rsi, [rbp - 0x430]; mov rdx, r12; mov eax, 0x14; syscall; 
0x000000000046e381: mov edi, dword ptr [rbp - 0x8b8]; mov byte ptr [rbp - 0x910], r8b; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x000000000046e4e7: mov edi, dword ptr [rbp - 0x8b8]; mov rdx, r13; mov rsi, r15; call qword ptr [rax + 0x38]; 
0x000000000049356c: mov edi, dword ptr [rbp - 8]; leave; ret; 
0x0000000000493712: mov edi, dword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x00000000004513c4: mov edi, dword ptr [rbp]; call rbx; 
0x0000000000477a20: mov edi, dword ptr [rbp]; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x0000000000482a6f: mov edi, dword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x00000000004651c6: mov edi, dword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000475df0: mov edi, dword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000475df0: mov edi, dword ptr [rdi + 8]; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000048e1e5: mov edi, dword ptr [rdi]; call 0x903e0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048e0a1: mov edi, dword ptr [rdi]; call 0x90700; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000485be5: mov edi, dword ptr [rip + 0x46d25]; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x85c00; ret; 
0x00000000004506da: mov edi, dword ptr [rsp + 0x10]; mov eax, 0x4f; syscall; 
0x0000000000474a26: mov edi, dword ptr [rsp + 0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000000465578: mov edi, dword ptr [rsp + 0x10]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x000000000044df7d: mov edi, dword ptr [rsp + 0x10]; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044df03: mov edi, dword ptr [rsp + 0x10]; push 1; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x000000000045221c: mov edi, dword ptr [rsp + 0x10]; test rdi, rdi; jne 0x52270; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000401c8a: mov edi, dword ptr [rsp + 0x14]; mov rsi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000454f1f: mov edi, dword ptr [rsp + 0x18]; call rax; 
0x0000000000454ec2: mov edi, dword ptr [rsp + 0x18]; call rcx; 
0x0000000000479cd8: mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x0000000000460222: mov edi, dword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea79: mov edi, dword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045da67: mov edi, dword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045b709: mov edi, dword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000459b2d: mov edi, dword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a0ed: mov edi, dword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000418933: mov edi, dword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004666c4: mov edi, dword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x00000000004505c4: mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x0000000000450524: mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x0000000000418186: mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x00000000004513f6: mov edi, dword ptr [rsp]; call rbx; 
0x000000000040a125: mov edi, dword ptr [rsp]; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x0000000000401861: mov edi, eax; call 0x11ed0; mov eax, 0; leave; ret; 
0x0000000000401810: mov edi, eax; call 0x12570; nop; pop rbp; ret; 
0x0000000000409fcf: mov edi, eax; call 0x1ae00; test eax, eax; jne 0x9fe0; pop rbp; ret; 
0x0000000000412d4e: mov edi, eax; call qword ptr [rax + 0x18]; 
0x0000000000466cd3: mov edi, eax; cmp rdx, rcx; jae 0x66cbc; mov rax, r8; ret; 
0x000000000048830d: mov edi, eax; jmp rax; 
0x0000000000475620: mov edi, eax; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000047597d: mov edi, eax; mov eax, 0xca; syscall; 
0x000000000041adb3: mov edi, eax; mov eax, 0xea; syscall; 
0x000000000041aeef: mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000041ad7f: mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x0000000000450535: mov edi, eax; mov qword ptr [rsp + 8], rax; call 0x74770; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000041b202: mov edi, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000416317: mov edi, ebp; call qword ptr [rax + 0x78]; 
0x000000000048fb4a: mov edi, ebp; call qword ptr [rax]; 
0x0000000000411c4d: mov edi, ebp; call qword ptr [rbx + 0x10]; 
0x00000000004182d8: mov edi, ebp; call qword ptr [rbx + 0x18]; 
0x000000000040f421: mov edi, ebp; call qword ptr [rbx + 0x38]; 
0x000000000040be97: mov edi, ebp; call qword ptr [rcx + 0x38]; 
0x00000000004156d5: mov edi, ebp; call rax; 
0x000000000044ed08: mov edi, ebp; call rbx; 
0x000000000044e145: mov edi, ebp; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000475d57: mov edi, ebp; mov eax, 0xca; syscall; 
0x0000000000474f25: mov edi, ebp; mov eax, r13d; syscall; 
0x0000000000474dee: mov edi, ebp; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x0000000000475cc1: mov edi, ebp; mov eax, r8d; syscall; 
0x000000000047518a: mov edi, ebp; mov esi, 7; mov eax, 0xca; syscall; 
0x000000000040a2ae: mov edi, ebp; mov rax, qword ptr [rsp]; mov r13, r15; add r15, r14; call rax; 
0x00000000004520cf: mov edi, ebp; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x00000000004512d6: mov edi, ebp; mov rax, r12; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000044e290: mov edi, ebp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000041378a: mov edi, ebp; pop rbp; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000473795: mov edi, ebp; pop rbp; pop r12; jmp rax; 
0x0000000000418257: mov edi, ebp; pop rbx; pop rbp; jmp rax; 
0x000000000041655c: mov edi, ebp; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000416821: mov edi, ebp; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000041b2e6: mov edi, ebp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000418071: mov edi, ebx; call qword ptr [rbp + 0x18]; 
0x00000000004186c2: mov edi, ebx; call qword ptr [rbp + 0x20]; 
0x00000000004191e2: mov edi, ebx; call qword ptr [rbp + 0x30]; 
0x0000000000411e46: mov edi, ebx; call qword ptr [rbp + 0x60]; 
0x000000000041270f: mov edi, ebx; call qword ptr [rbp + 0x68]; 
0x0000000000415efa: mov edi, ebx; call qword ptr [rbp + 0x70]; 
0x000000000041969b: mov edi, ebx; call qword ptr [rcx + 0x58]; 
0x00000000004193bf: mov edi, ebx; call qword ptr [rdx + 0x18]; 
0x00000000004114f2: mov edi, ebx; call rax; 
0x0000000000454158: mov edi, ebx; mov eax, 0x14e; syscall; 
0x00000000004129de: mov edi, ebx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x000000000041b5dd: mov edi, ebx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004806e6: mov edi, ecx; sub rdx, rcx; call 0x1110; mov qword ptr [rip + 0x4c1b9], rax; add rsp, 8; ret; 
0x000000000041252f: mov edi, edi; call qword ptr [rbp + 0x38]; 
0x00000000004130dc: mov edi, edi; call rax; 
0x000000000041467d: mov edi, edi; call rbx; 
0x0000000000493d9e: mov edi, edi; mov rdx, qword ptr [r14]; mov rax, qword ptr [rsp]; mov dword ptr [rsp + 8], ecx; call rax; 
0x0000000000493dcb: mov edi, edi; mov rsi, qword ptr [r14]; call rax; 
0x0000000000466d56: mov edi, edx; cmp rax, 9; ja 0x66d30; mov rax, r8; ret; 
0x000000000042b5cf: mov edi, edx; inc ecx; jne 0x2b500; vzeroupper; ret; 
0x00000000004775db: mov edi, esi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x000000000047720f: mov edi, esi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000040c409: mov edi, esi; call qword ptr [rax + 0x38]; 
0x000000000040d2e8: mov edi, esi; call qword ptr [rcx + 0x38]; 
0x000000000040d5b1: mov edi, esi; mov byte ptr [rbp - 0x8ec], r9b; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x0000000000451a8c: mov edi, esi; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x000000000047110d: mov edi, esp; call qword ptr [rax + 0x38]; 
0x000000000046f92d: mov edi, esp; call qword ptr [rbp + 0x38]; 
0x000000000041875f: mov edi, esp; call qword ptr [rbx + 0x18]; 
0x000000000046fe07: mov edi, esp; call qword ptr [rbx + 0x38]; 
0x000000000040a0ab: mov edi, esp; call rax; 
0x000000000046556b: mov edi, esp; call rbx; 
0x00000000004689d6: mov edi, esp; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x0000000000450534: mov edi, r8d; mov qword ptr [rsp + 8], rax; call 0x74770; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x000000000043ea0a: mov edx, 0; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x000000000046c237: mov edx, 0x1b85b; add byte ptr [rax], al; pop rbp; pop r12; pop r13; ret; 
0x0000000000401cb4: mov edx, 0x3c; nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x000000000047767d: mov edx, 0x3ed00148; jmp rax; 
0x0000000000452a3a: mov edx, 0x64; test eax, eax; cmove eax, edx; ret; 
0x000000000041b254: mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000475d9d: mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041b1fc: mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041b5d7: mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000044ad92: mov edx, 0x83000000; ret 0x7e20; 
0x0000000000411bf2: mov edx, 0x89000000; ret 0xe281; 
0x0000000000456cc2: mov edx, 0x8900022d; ret; 
0x00000000004881e5: mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; ret; 
0x000000000041b717: mov edx, 0x971; xor eax, eax; ret; 
0x000000000042abb2: mov edx, 0xf3000000; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000409fe1: mov edx, 0xffffffb8; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000044faa9: mov edx, 0xffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000450551: mov edx, 0xffffffb8; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000465083: mov edx, 0xffffffe0; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464faf: mov edx, 0xffffffe0; mov qword ptr fs:[rdx], rax; ret; 
0x000000000045996b: mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000488372: mov edx, 1; lock cmpxchg dword ptr [rdi], edx; jne 0x883b3; xor eax, eax; ret; 
0x000000000041ab3b: mov edx, 1; mov eax, 0xca; syscall; 
0x000000000041ab3b: mov edx, 1; mov eax, 0xca; syscall; ret; 
0x000000000041ab17: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041ab17: mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000475972: mov edx, 1; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000041b2e0: mov edx, 1; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004705b7: mov edx, 1; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x0000000000414948: mov edx, 1; mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x000000000041aac0: mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000041aa5a: mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000048471d: mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x00000000004527fe: mov edx, 2; test eax, eax; cmove eax, edx; add rsp, 8; ret; 
0x00000000004652f7: mov edx, 8; mov eax, 0xd; syscall; 
0x000000000041ace1: mov edx, 8; mov rdx, rbp; lea rsi, [rip + 0x7fc90]; mov eax, 0xe; syscall; 
0x0000000000475e6c: mov edx, 8; mov rsi, r8; mov eax, 0xe; syscall; 
0x000000000048ab9f: mov edx, dword ptr [rax + 0x10]; test rdx, rdx; jne 0x8ab90; ret; 
0x0000000000463564: mov edx, dword ptr [rax + rbp*8]; test rdx, rdx; je 0x6356e; call rdx; 
0x000000000046fb9e: mov edx, dword ptr [rax + rdx*8]; jmp rdx; 
0x000000000049106c: mov edx, dword ptr [rax]; add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000493f31: mov edx, dword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x00000000004156c9: mov edx, dword ptr [rbp + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, rbp; call rax; 
0x0000000000483a16: mov edx, dword ptr [rbp - 0xc4]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x83a2a; call rax; 
0x0000000000492e99: mov edx, dword ptr [rbp]; mov r8, rbx; mov rcx, rbp; or esi, 2; mov edi, 1; call rax; 
0x000000000041abe7: mov edx, dword ptr [rbp]; test rdx, rdx; je 0x1abc0; call rdx; 
0x000000000048dd6d: mov edx, dword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004129da: mov edx, dword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x000000000040eb37: mov edx, dword ptr [rbx + rdx*8]; jmp rdx; 
0x00000000004707be: mov edx, dword ptr [rbx + rdx*8]; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x00000000004704bd: mov edx, dword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000493dc4: mov edx, dword ptr [rbx]; mov rax, qword ptr [rsp]; mov rdi, r15; mov rsi, qword ptr [r14]; call rax; 
0x000000000043d2df: mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043ba0d: mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000040f942: mov edx, dword ptr [rcx + rdx*8]; jmp rdx; 
0x0000000000453320: mov edx, dword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000045302e: mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x53040; ret; 
0x000000000041a969: mov edx, dword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000048dcf5: mov edx, dword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x00000000004130d0: mov edx, dword ptr [rdi + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000048dd54: mov edx, dword ptr [rdi + 0x460]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000412064: mov edx, dword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000040f679: mov edx, dword ptr [rdi + rdx*8]; jmp rdx; 
0x0000000000489dc2: mov edx, dword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000417fad: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x17fa8; ret; 
0x0000000000473385: mov edx, dword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x73380; ret; 
0x00000000004543b1: mov edx, dword ptr [rdx]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x00000000004910cd: mov edx, dword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000493f41: mov edx, dword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x000000000048892e: mov edx, dword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000401c84: mov edx, dword ptr [rip + 0xca5d6]; mov edi, dword ptr [rsp + 0x14]; mov rsi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000443555: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000443575: mov edx, dword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000434051: mov edx, dword ptr [rsi + 1]; mov cx, word ptr [rsi]; mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x0000000000433f70: mov edx, dword ptr [rsi + 1]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 1], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433db1: mov edx, dword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433f00: mov edx, dword ptr [rsi + 2]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 2], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433d41: mov edx, dword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004439e2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; lea rax, [rdi + 6]; ret; 
0x00000000004433a2: mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000433e90: mov edx, dword ptr [rsi + 3]; mov ecx, dword ptr [rsi]; mov dword ptr [rdi + 3], edx; mov dword ptr [rdi], ecx; ret; 
0x0000000000433cd1: mov edx, dword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x00000000004439c3: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000443393: mov edx, dword ptr [rsi + 4]; mov dword ptr [rdi], ecx; mov word ptr [rdi + 4], dx; ret; 
0x0000000000433c61: mov edx, dword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443a74: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000443404: mov edx, dword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000433bf1: mov edx, dword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443a94: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000443414: mov edx, dword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000433b81: mov edx, dword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443a33: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004433e3: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000443ab4: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000443424: mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000433b11: mov edx, dword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443a53: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004433f3: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000443a14: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004433d4: mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000040f637: mov edx, dword ptr [rsi + rdx*8]; jmp rdx; 
0x00000000004335c1: mov edx, dword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000433541: mov edx, dword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004334c1: mov edx, dword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000433431: mov edx, dword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004333a1: mov edx, dword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000433311: mov edx, dword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042df11: mov edx, dword ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000042e0f1: mov edx, dword ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000042e2d0: mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd08: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dee8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0c8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2a8: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df04: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0e4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2c4: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd24: mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e4d0: mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e6d0: mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e8d0: mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042db45: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e499: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e699: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e899: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db29: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e4b5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e6b5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e8b5: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db61: mov edx, dword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433641: mov edx, dword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000454269: mov edx, dword ptr [rsi]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x00000000004439a0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x0000000000443ff0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x0000000000433fe0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x000000000043fdc0: mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x00000000004439f1: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000433e21: mov edx, dword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x00000000004934c2: mov edx, dword ptr [rsi]; mov r8, r12; mov rcx, r14; mov esi, 1; mov edi, 1; call rax; 
0x0000000000493da1: mov edx, dword ptr [rsi]; mov rax, qword ptr [rsp]; mov dword ptr [rsp + 8], ecx; call rax; 
0x0000000000443981: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000443351: mov edx, dword ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x0000000000485e16: mov edx, dword ptr [rsp + 0x48]; sub rdx, qword ptr fs:[0x28]; jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485ee8: mov edx, dword ptr [rsp + 0x48]; sub rdx, qword ptr fs:[0x28]; jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fb8: mov edx, dword ptr [rsp + 0x48]; sub rdx, qword ptr fs:[0x28]; jne 0x85ff4; add rsp, 0x58; ret; 
0x00000000004860d6: mov edx, dword ptr [rsp + 0x58]; sub rdx, qword ptr fs:[0x28]; jne 0x86197; add rsp, 0x68; ret; 
0x000000000045a0e3: mov edx, dword ptr [rsp + 0x60]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000040a248: mov edx, dword ptr [rsp + 8]; mov rax, qword ptr [rsp]; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000492fff: mov edx, dword ptr [rsp]; mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000401960: mov edx, eax; and edx, 0x1f; jne 0x1947; xor eax, eax; pop rbx; ret; 
0x00000000004036f2: mov edx, eax; mov esi, edx; mov edi, 0x3002; mov eax, 0x9e; syscall; 
0x0000000000419b36: mov edx, eax; mov rax, qword ptr [rax]; test rax, rax; jne 0x19b30; ret; 
0x00000000004689d0: mov edx, eax; mov rsi, r14; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x0000000000450f1b: mov edx, eax; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000048fafe: mov edx, ebp; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000041ace7: mov edx, ebp; lea rsi, [rip + 0x7fc90]; mov eax, 0xe; syscall; 
0x000000000047499d: mov edx, ebp; mov eax, 0xca; syscall; 
0x000000000044e288: mov edx, ebp; mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000465c80: mov edx, ebp; mov rdi, r12; call rbx; 
0x000000000044ecfd: mov edx, ebp; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x00000000004104fd: mov edx, ebp; mov rsi, r10; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000040d2e2: mov edx, ebp; mov rsi, r11; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000046557d: mov edx, ebp; mov rsi, r12; call rbx; 
0x000000000048fb45: mov edx, ebp; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x00000000004655a1: mov edx, ebp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000040d035: mov edx, ebp; mov rsi, r12; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040e0aa: mov edx, ebp; mov rsi, r12; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040c019: mov edx, ebp; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x00000000004655bc: mov edx, ebp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000046e4ee: mov edx, ebp; mov rsi, r15; call qword ptr [rax + 0x38]; 
0x000000000045734e: mov edx, ebp; push 0; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x0000000000411e37: mov edx, ebp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x11e90; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000412700: mov edx, ebp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x1274a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004185fd: mov edx, ebp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x18670; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004186b3: mov edx, ebp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x186e8; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418a2e: mov edx, ebp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x18c30; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004191d3: mov edx, ebp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x19210; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004736f3: mov edx, ebp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x73740; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000474268: mov edx, ebp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x742a0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000044e13f: mov edx, ebp; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x000000000046f92a: mov edx, ebx; mov rdi, r12; call qword ptr [rbp + 0x38]; 
0x00000000004748e5: mov edx, ebx; xor esi, 0x100; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x0000000000450375: mov edx, ecx; mov eax, 0x106; syscall; 
0x0000000000479e35: mov edx, ecx; mov eax, 0x11; syscall; 
0x0000000000479e35: mov edx, ecx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x79e50; ret; 
0x000000000047499a: mov edx, ecx; mov edx, r13d; mov eax, 0xca; syscall; 
0x0000000000451195: mov edx, ecx; test r9d, 0xfff; jne 0x511b0; mov eax, 9; syscall; 
0x0000000000454294: mov edx, edi; cmp r9, rsi; jge 0x54248; ret; 
0x00000000004587f8: mov edx, edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000466cd0: mov edx, edi; mov rdi, rax; cmp rdx, rcx; jae 0x66cbc; mov rax, r8; ret; 
0x000000000040f41e: mov edx, edi; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x0000000000415ef4: mov edx, edi; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000471107: mov edx, edi; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000447b25: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447cac: mov edx, edi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000040d5ab: mov edx, edx; mov rsi, r15; mov rdi, r14; mov byte ptr [rbp - 0x8ec], r9b; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x000000000046e37b: mov edx, edx; mov rsi, rbx; mov rdi, qword ptr [rbp - 0x8b8]; mov byte ptr [rbp - 0x910], r8b; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x000000000041ae5a: mov edx, esi; lea rsi, [rip + 0x7fb1d]; syscall; 
0x000000000040a129: mov edx, esi; mov rax, qword ptr [rsp]; call rax; 
0x000000000040be91: mov edx, esi; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000040a0a5: mov edx, esi; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000416311: mov edx, esi; mov rsi, r13; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000046fe01: mov edx, esi; mov rsi, r15; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x0000000000450ff5: mov edx, esi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000479e91: mov edx, esp; mov eax, 0x10; syscall; 
0x000000000048106b: mov edx, esp; mov eax, 0x14; syscall; 
0x000000000045277f: mov edx, esp; mov eax, 0xcc; syscall; 
0x000000000041aeed: mov edx, esp; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000041ad7d: mov edx, esp; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x0000000000450e99: mov edx, esp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000041adaf: mov edx, esp; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000040c403: mov edx, esp; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004503fa: mov edx, esp; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000450470: mov edx, esp; mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004748e4: mov edx, r11d; xor esi, 0x100; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x000000000041aeec: mov edx, r12d; mov edi, eax; mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000041ad7c: mov edx, r12d; mov edi, eax; mov esi, r14d; mov eax, 0xea; syscall; 
0x000000000041adae: mov edx, r12d; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x00000000004503f9: mov edx, r12d; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000045046f: mov edx, r12d; mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000047499c: mov edx, r13d; mov eax, 0xca; syscall; 
0x0000000000450f1a: mov edx, r8d; mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000423215: mov es, word ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0xe441; cmovne rax, rdx; ret; 
0x00000000004184a6: mov es, word ptr [rax]; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000046442e: mov es, word ptr [rax]; cli; jmp qword ptr [rsi + 0x66]; 
0x0000000000453048: mov es, word ptr [rbx]; add al, 0x11; ret; 
0x00000000004533b7: mov es, word ptr [rdi]; add byte ptr [rax - 0x73], cl; add eax, 0x78eaf; ret; 
0x000000000045337c: mov es, word ptr [rdi]; add byte ptr [rax], al; je 0x533a0; lea rax, [rip + 0x78ee7]; ret; 
0x0000000000450e0d: mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004930c5: mov esi, 0x1a; mov edi, 1; call rax; 
0x0000000000454152: mov esi, 0x20; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000467086: mov esi, 0x2ebffffe; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000042318e: mov esi, 0x48000164; cmovne eax, edx; ret; 
0x00000000004533b6: mov esi, 0x4800078e; lea eax, [rip + 0x78eaf]; ret; 
0x000000000041aa5f: mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000484722: mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000475cbb: mov esi, 0x80; mov rdi, rbp; mov eax, r8d; syscall; 
0x000000000041ab1c: mov esi, 0x81; mov eax, 0xca; syscall; 
0x0000000000475da2: mov esi, 0x81; mov eax, 0xca; syscall; cmp rax, -0x1000; ja 0x75dc0; ret; 
0x000000000041ab1c: mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x000000000045921a: mov esi, 0x83480142; ret 0x4101; 
0x000000000040aef2: mov esi, 0x83480143; ret; 
0x000000000040bb33: mov esi, 0x8b4864c0; adc cl, byte ptr [rax - 0x75]; adc cl, byte ptr [rbx + rcx*4 + 0x74]; ret 0x4c40; 
0x0000000000492fdd: mov esi, 0xa; mov edi, 1; call rax; 
0x000000000040185b: mov esi, 0xc8; mov rdi, rax; call 0x11ed0; mov eax, 0; leave; ret; 
0x0000000000401a4c: mov esi, 0xf000000; lahf; ret 0x3145; 
0x0000000000473b70: mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000412d48: mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x00000000004182d2: mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000041806b: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000419274: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004193b9: mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rdx + 0x18]; 
0x00000000004934ca: mov esi, 1; mov edi, 1; call rax; 
0x0000000000475977: mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x00000000004114ec: mov esi, 1; mov rdi, rbx; call rax; 
0x000000000047518c: mov esi, 7; mov eax, 0xca; syscall; 
0x000000000048d35f: mov esi, dword ptr [rax + 8]; call 0x54de0; nop word ptr [rax + rax]; ret; 
0x000000000048ac23: mov esi, dword ptr [rax + 8]; lea rdx, [rax + 8]; cmp rcx, rsi; jb 0x8ac06; ret; 
0x0000000000451a89: mov esi, dword ptr [rax]; mov rdi, r14; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x0000000000493568: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049370e: mov esi, dword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000483110: mov esi, dword ptr [rbp - 0xc4]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test esi, esi; jne 0x83124; call rax; 
0x000000000040a121: mov esi, dword ptr [rbp]; mov rdi, qword ptr [r12]; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x00000000004129d6: mov esi, dword ptr [rbx + 0x10]; mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x0000000000493d9b: mov esi, dword ptr [rbx]; mov rdi, r15; mov rdx, qword ptr [r14]; mov rax, qword ptr [rsp]; mov dword ptr [rsp + 8], ecx; call rax; 
0x000000000048e1e1: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x903e0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048e09d: mov esi, dword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x90700; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004472f9: mov esi, dword ptr [rsi + rdx]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x0000000000493dce: mov esi, dword ptr [rsi]; call rax; 
0x0000000000436e00: mov esi, dword ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000446594: mov esi, dword ptr [rsi]; mov dword ptr [rdi + rdx - 4], ecx; mov dword ptr [rdi], esi; ret; 
0x0000000000436dee: mov esi, dword ptr [rsi]; mov ecx, dword ptr [rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x00000000004465a6: mov esi, dword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004515e1: mov esi, dword ptr [rsi]; mov rax, qword ptr [rsp + 0x10]; mov rdi, rbp; call rax; 
0x0000000000436ddb: mov esi, dword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000479cd4: mov esi, dword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004505bd: mov esi, dword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x000000000045051d: mov esi, dword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x00000000004666bc: mov esi, dword ptr [rsp + 0x10]; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x000000000041892e: mov esi, dword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000044e293: mov esi, dword ptr [rsp + 0x18]; call rbx; 
0x0000000000401c8f: mov esi, dword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000457356: mov esi, dword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000044eb71: mov esi, dword ptr [rsp + 0x18]; xor r8d, r8d; mov rcx, r12; call rbx; 
0x000000000044ed00: mov esi, dword ptr [rsp + 0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x000000000040f419: mov esi, dword ptr [rsp + 0x38]; mov rdx, r15; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000045b704: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000459b28: mov esi, dword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046021d: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea74: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045da62: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a0e8: mov esi, dword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000040f933: mov esi, dword ptr [rsp + 0x60]; sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rcx + rdx*8]; jmp rdx; 
0x0000000000474a21: mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp + 0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000000418181: mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000465c7b: mov esi, dword ptr [rsp + 8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000046f925: mov esi, dword ptr [rsp + 8]; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp + 0x38]; 
0x000000000045421d: mov esi, eax; cmp rcx, r9; ja 0x542a0; cmp r9, rdx; jbe 0x5424d; ret; 
0x0000000000475e72: mov esi, eax; mov eax, 0xe; syscall; 
0x0000000000454291: mov esi, eax; mov rdx, rdi; cmp r9, rsi; jge 0x54248; ret; 
0x0000000000477dc3: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x77e40; add rax, rdi; ret; 
0x0000000000477de3: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x77e40; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000477e03: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x77e40; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477e23: mov esi, eax; shr esi, 2; sub rdx, rsi; jbe 0x77e40; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000041aabb: mov esi, eax; xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000041aef2: mov esi, ebp; mov eax, 0xea; syscall; 
0x000000000040308d: mov esi, ebp; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x00000000004503fd: mov esi, ebp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000041ad37: mov esi, ebp; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000041adb1: mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x0000000000450473: mov esi, ebp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000047110a: mov esi, ebp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000040a0a8: mov esi, ebp; mov rdi, r12; call rax; 
0x000000000040c406: mov esi, ebp; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000041252c: mov esi, ebp; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x000000000041467a: mov esi, ebp; mov rdi, r15; call rbx; 
0x0000000000416314: mov esi, ebp; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x0000000000480e5f: mov esi, ebp; syscall; 
0x000000000041b24f: mov esi, ebp; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000041494e: mov esi, ebx; mov edi, 2; mov eax, r9d; syscall; 
0x000000000046e37e: mov esi, ebx; mov rdi, qword ptr [rbp - 0x8b8]; mov byte ptr [rbp - 0x910], r8b; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x000000000040d2e5: mov esi, ebx; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040a2ab: mov esi, ebx; mov rdi, rbp; mov rax, qword ptr [rsp]; mov r13, r15; add r15, r14; call rax; 
0x0000000000419bed: mov esi, ecx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000419c27: mov esi, ecx; add rsi, rdx; movups xmmword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000450f1e: mov esi, ecx; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000040f66c: mov esi, ecx; sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rdi + rdx*8]; jmp rdx; 
0x000000000040f73c: mov esi, ecx; sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rsi + rdx*8]; jmp rdx; 
0x000000000041b33d: mov esi, ecx; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000046e4f1: mov esi, edi; call qword ptr [rax + 0x38]; 
0x0000000000450ff9: mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x000000000046fe04: mov esi, edi; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x000000000040d5ae: mov esi, edi; mov rdi, r14; mov byte ptr [rbp - 0x8ec], r9b; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x0000000000493c09: mov esi, edi; test rax, rax; je 0x93c20; mov edi, 1; jmp rax; 
0x00000000004036f4: mov esi, edx; mov edi, 0x3002; mov eax, 0x9e; syscall; 
0x0000000000410500: mov esi, edx; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000041ad82: mov esi, esi; mov eax, 0xea; syscall; 
0x000000000041aea4: mov esi, esi; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000004655bf: mov esi, esi; mov rdi, r12; call rbx; 
0x00000000004689d3: mov esi, esi; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x0000000000415ef7: mov esi, esi; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000465580: mov esi, esp; call rbx; 
0x000000000048fb48: mov esi, esp; mov edi, ebp; call qword ptr [rax]; 
0x000000000048fb04: mov esi, esp; mov edi, ebp; call rax; 
0x00000000004655a4: mov esi, esp; mov rdi, r13; call rbx; 
0x000000000040d038: mov esi, esp; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040e0ad: mov esi, esp; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040be94: mov esi, esp; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x0000000000473791: mov esi, esp; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x0000000000473790: mov esi, r12d; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x000000000041aef1: mov esi, r13d; mov eax, 0xea; syscall; 
0x000000000041ad81: mov esi, r14d; mov eax, 0xea; syscall; 
0x000000000041aaba: mov esi, r8d; xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000041b33c: mov esi, r9d; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x000000000044d6f2: mov esp, 0x1448dc0; lahf; ret; 
0x000000000044f7e2: mov esp, 0x1448dc0; out dx, eax; ret; 
0x000000000043f872: mov esp, 0x21e983c0; add eax, ecx; vzeroupper; ret; 
0x000000000044a91d: mov esp, 0x295e9c0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000044f3b2: mov esp, 0x2e6c1c0; cmp rsi, rax; cmovb eax, esi; shr eax, 2; vzeroupper; ret; 
0x000000000044f09d: mov esp, 0x2e8c1c0; vzeroupper; ret; 
0x000000000047897c: mov esp, 0x2e8c1c0; xtest; je 0x7898a; vzeroall; ret; 
0x000000000044c443: mov esp, 0x343a40c0; add dh, byte ptr [rbp - 0x72]; add rax, rdx; ret; 
0x000000000042abe2: mov esp, 0x39c931c0; ret 0x8d48; 
0x000000000043f05d: mov esp, 0x40c931c0; cmp dh, byte ptr [rdx + rax]; lea rax, [rdx + rax]; cmovne rax, rcx; vzeroupper; ret; 
0x000000000044d8e2: mov esp, 0x40ee83c0; cmp esi, eax; jb 0x4d8f4; sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000043f862: mov esp, 0x41e983c0; add eax, ecx; vzeroupper; ret; 
0x000000000042a8d1: mov esp, 0x448d48c0; cmp al, dh; ret; 
0x000000000042a901: mov esp, 0x448d48c0; cmp byte ptr [rax], ah; ret; 
0x000000000042a8f1: mov esp, 0x448d48c0; cmp byte ptr [rax], dl; ret; 
0x0000000000478eb2: mov esp, 0x448d48c0; xchg dword ptr [rax], esp; ret; 
0x000000000044c897: mov esp, 0x44b60ff9; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x0000000000425eee: mov esp, 0x44b60ff9; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x00000000004104f8: mov esp, 0x4c000004; mov edx, ebp; mov rsi, r10; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000040aac6: mov esp, 0x4c72b0; cmp rbx, r12; jae 0xaae3; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000477f03: mov esp, 0x5874c085; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000043f852: mov esp, 0x61e983c0; add eax, ecx; vzeroupper; ret; 
0x000000000044d82c: mov esp, 0x72c639c0; or dword ptr [rax + 0x29], ecx; xlatb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044f91a: mov esp, 0x72c639c0; or eax, 0x48d72948; sar edi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044f9aa: mov esp, 0x72c639c0; push 0x48d72948; sar edi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d8aa: mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044d85e: mov esp, 0x72c639c0; xlatb; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000462c73: mov esp, 0x752ffa80; ret 0x8341; 
0x000000000042ad3d: mov esp, 0x76c239c0; pop rbp; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000478030: mov esp, 0x76c239c0; push 0x48; add edi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044db0f: mov esp, 0x76c239c0; sbb al, 0x48; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000043f68b: mov esp, 0x77f8c5c0; ret; 
0x000000000044adc2: mov esp, 0x80ea83c0; cmp edx, eax; jbe 0x4add1; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044db22: mov esp, 0x80ea83c0; cmp edx, eax; jbe 0x4db31; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000478622: mov esp, 0x83d729c0; mov dword ptr [rcx + 1], 0x2e8c1f8; vzeroupper; ret; 
0x000000000043f6c2: mov esp, 0x83d729c0; mov dword ptr [rcx + 1], 0x77f8c5f8; ret; 
0x000000000044f112: mov esp, 0x88448dc0; ffreep st(1); call 0x77fdb620; ret; 
0x000000000044f0f2: mov esp, 0x88448dc0; lahf; shr eax, 2; vzeroupper; ret; 
0x0000000000422e25: mov esp, 0x8d480000; adc eax, 0x11321; cmovne rax, rdx; ret; 
0x0000000000444250: mov esp, 0xa8000000; jne 0x44320; lea rax, [rdi + 7]; ret; 
0x000000000043ea08: mov esp, 0xbac0; add byte ptr [rax], al; lea rax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000477dc1: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; add rax, rdi; ret; 
0x0000000000477de1: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000477e01: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477e21: mov esp, 0xc1c689c0; out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000478cc2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000478cd2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000478ce2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000478cb2: mov esp, 0xc1d729c0; inc dword ptr [rdx]; lea eax, [rdi + rax + 8]; ret; 
0x000000000042a6aa: mov esp, 0xc22948c0; jbe 0x2a950; add rax, rdi; add rax, rcx; ret; 
0x000000000042a911: mov esp, 0xc22948c0; jbe 0x2a950; add rax, rdi; ret; 
0x000000000042a921: mov esp, 0xc22948c0; jbe 0x2a950; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042a931: mov esp, 0xc22948c0; jbe 0x2a950; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042a941: mov esp, 0xc22948c0; jbe 0x2a950; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044d935: mov esp, 0xc63948c0; cmovb eax, esi; ret; 
0x000000000043faa2: mov esp, 0xc63948c0; cmovb eax, esi; vzeroupper; ret; 
0x000000000042ac52: mov esp, 0xc78348c0; add rax, rdi; vzeroupper; ret; 
0x000000000042ac42: mov esp, 0xc78348c0; and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x000000000043eec2: mov esp, 0xc78348c0; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000043f232: mov esp, 0xc78348c0; or byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000042ac32: mov esp, 0xc7ff48c0; add rax, rdi; vzeroupper; ret; 
0x000000000043ee82: mov esp, 0xc7ff48c0; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000044bc2d: mov esp, 0xc80148c0; ret; 
0x000000000042aeab: mov esp, 0xc80148c0; vzeroupper; ret; 
0x000000000044908b: mov esp, 0xc80148c0; xtest; je 0x49099; vzeroall; ret; 
0x000000000044b14e: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042b646: mov esp, 0xd00148c0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000044c6b3: mov esp, 0xd00148c0; ret; 
0x000000000043f27d: mov esp, 0xd00148c0; vzeroupper; ret; 
0x0000000000449a9d: mov esp, 0xd00148c0; xtest; je 0x49aab; vzeroall; ret; 
0x000000000043f423: mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000044eff8: mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x0000000000427982: mov esp, 0xd32949d2; jbe 0x27994; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004290f2: mov esp, 0xd32949d2; jbe 0x29104; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a0d2: mov esp, 0xd32949d2; jbe 0x2a0e4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000044a37c: mov esp, 0xd6010fc0; je 0x4a387; vzeroall; ret; 
0x000000000044f332: mov esp, 0xd72948c0; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa32: mov esp, 0xd72948c0; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044f312: mov esp, 0xd72948c0; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa22: mov esp, 0xd72948c0; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000044d8c2: mov esp, 0xd72948c0; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d8d2: mov esp, 0xd72948c0; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044f9e2: mov esp, 0xd72948c0; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044f9c2: mov esp, 0xd72948c0; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000044d54b: mov esp, 0xda394cd1; jae 0x4d520; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000478ff2: mov esp, 0xe0ea83c0; cmp edx, eax; jbe 0x79001; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000479302: mov esp, 0xe0ea83c0; cmp edx, eax; jbe 0x79311; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000043f21a: mov esp, 0xef8348c0; add rax, rdi; vzeroupper; ret; 
0x000000000043efda: mov esp, 0xef8348c0; cmp sil, byte ptr [rdi + rax]; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000042adc2: mov esp, 0xef8348c0; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x000000000042afa2: mov esp, 0xef8348c0; jg 0x2aff1; add eax, edi; vzeroupper; ret; 
0x000000000043f792: mov esp, 0xef8348c0; jg 0x3f7e1; add eax, edi; vzeroupper; ret; 
0x000000000043f992: mov esp, 0xef8348c0; jg 0x3f9e1; add eax, edi; vzeroupper; ret; 
0x000000000044f262: mov esp, 0xef8348c0; jg 0x4f2b1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000478722: mov esp, 0xef8348c0; jg 0x78771; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000044f282: mov esp, 0xef8348c0; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afb2: mov esp, 0xef8348c0; pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000000042a9cb: mov esp, 0xf80148c0; add rax, rcx; ret; 
0x000000000044c209: mov esp, 0xf80148c0; cmp sil, byte ptr [rax]; jne 0x4c231; ret; 
0x000000000042a8e1: mov esp, 0xf80148c0; ret; 
0x000000000042abb8: mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000000448087: mov esp, 0xf80148c0; xtest; je 0x48095; vzeroall; ret; 
0x0000000000478a2a: mov esp, 0xf80148c0; xtest; je 0x78a38; vzeroall; ret; 
0x00000000004785e2: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x2e8c1f8; vzeroupper; ret; 
0x000000000043f6a2: mov esp, 0xffd729c0; mov dword ptr [rcx], 0x77f8c5f8; ret; 
0x0000000000413c0a: mov esp, 0xffffffff; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000004510a8: mov esp, 0xffffffff; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x00000000004513bb: mov esp, dword ptr [rbp + 0x10]; test r12, r12; jne 0x5140c; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004521e4: mov esp, dword ptr [rbp + 0x10]; test r12, r12; jne 0x52210; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000493560: mov esp, dword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000474a1f: mov esp, eax; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp + 0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x00000000004651cc: mov esp, eax; mov rbp, r9; nop; jmp rdx; 
0x0000000000454eb2: mov esp, eax; test eax, eax; jne 0x54f38; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000484c4e: mov esp, ebx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x000000000049371a: mov esp, ecx; pop rcx; jmp rcx; 
0x0000000000493186: mov fs, esp; idiv bh; mov qword ptr [rcx], rdx; ret; 
0x000000000047572e: mov qword ptr [0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000041a9fb: mov qword ptr [0x2f8], rdi; ret; 
0x000000000045418c: mov qword ptr [0x698], rax; mov byte ptr fs:[0x971], 0; mov byte ptr fs:[0x972], 0; add rsp, 0x10; pop rbx; ret; 
0x0000000000491072: mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000453760: mov qword ptr [r12 + 8], rax; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000454f11: mov qword ptr [r12], 0; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000476cc1: mov qword ptr [r12], r14; pop r12; pop r13; pop r14; ret; 
0x0000000000496f2e: mov qword ptr [r13 + rbx*8], rdx; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x96f3e; call rax; 
0x000000000046312f: mov qword ptr [r14 + rbx*8], rax; lea rax, [rip + 0x61ae6]; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x63145; call rax; 
0x000000000046355f: mov qword ptr [r14 - 0x80], rdx; mov rdx, qword ptr [rax + rbp*8]; test rdx, rdx; je 0x6356e; call rdx; 
0x000000000048813d: mov qword ptr [r8], rax; mov eax, 0xffffc002; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x000000000048815a: mov qword ptr [r8], rax; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x0000000000493f20: mov qword ptr [r8], rdx; ret; 
0x0000000000436de4: mov qword ptr [r9 - 8], rcx; ret; 
0x000000000048ac0c: mov qword ptr [rax + 0x10], 0; ret; 
0x000000000047340a: mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000047447c: mov qword ptr [rax + 0x10], rcx; mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x00000000004744c1: mov qword ptr [rax + 0x10], rdi; movups xmmword ptr [rax], xmm0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000419be8: mov qword ptr [rax + 0x18], rcx; mov rsi, rcx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000473bab: mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x000000000041c397: mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000473ba7: mov qword ptr [rax + 0x28], rdx; mov qword ptr [rax + 0x18], rdx; xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x00000000004845f8: mov qword ptr [rax + 0x310], rdx; movups xmmword ptr [rax + 0x300], xmm0; ret; 
0x000000000048d6a4: mov qword ptr [rax + 0x378], rdx; pop rbx; ret; 
0x0000000000454251: mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x0000000000454255: mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000047340e: mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x00000000004733d3: mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm1; ret; 
0x000000000045424d: mov qword ptr [rax + 0x48], r9; mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000045426f: mov qword ptr [rax + 0x48], rdx; ret; 
0x0000000000474222: mov qword ptr [rax + 0x50], 0; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x00000000004190f0: mov qword ptr [rax + 0xa0], -1; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004190e4: mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000041fd75: mov qword ptr [rax + 8], 0; add rsp, 0x18; pop rbp; pop r12; ret; 
0x000000000041902f: mov qword ptr [rax + 8], 0; ret; 
0x0000000000488466: mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x43e70], 0; ret; 
0x0000000000453323: mov qword ptr [rax + 8], rdx; ret; 
0x0000000000419bf2: mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000447c23: mov qword ptr [rax + rdx - 8], rdi; ret; 
0x0000000000447dd3: mov qword ptr [rax + rdx - 8], rdi; vzeroupper; ret; 
0x0000000000419028: mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000048dd4c: mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x460]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000473ccc: mov qword ptr [rax], rcx; mov eax, dword ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000447c20: mov qword ptr [rax], rdi; mov qword ptr [rax + rdx - 8], rdi; ret; 
0x0000000000447dd0: mov qword ptr [rax], rdi; mov qword ptr [rax + rdx - 8], rdi; vzeroupper; ret; 
0x000000000048dd04: mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000488426: mov qword ptr [rax], rdx; mov qword ptr [rip + 0x43eb4], 0; ret; 
0x000000000048dcf8: mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000474487: mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000041915e: mov qword ptr [rbp + 0x48], 0; test byte ptr [rbp], 0x80; jne 0x19180; pop rbp; ret; 
0x0000000000493347: mov qword ptr [rbp + 8], rax; add rsp, 0x278; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000418464: mov qword ptr [rbp + 8], rax; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004841e9: mov qword ptr [rbp - 0x88], r9; call rax; 
0x000000000040c3fb: mov qword ptr [rbp - 0x8a0], r8; mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040d2da: mov qword ptr [rbp - 0x8a0], r8; mov rdx, r13; mov rsi, r11; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040e0a2: mov qword ptr [rbp - 0x8a0], r8; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040d02d: mov qword ptr [rbp - 0x8b8], r8; mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x00000000004841db: mov qword ptr [rbp - 0xa0], r10; add rax, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x88], r9; call rax; 
0x0000000000483aa8: mov qword ptr [rbp - 0xa0], r10; call rax; 
0x0000000000483251: mov qword ptr [rbp - 0xb0], r10; call rax; 
0x00000000004841cd: mov qword ptr [rbp - 0xb0], r11; mov rax, qword ptr [rbp - 0x90]; mov qword ptr [rbp - 0xa0], r10; add rax, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x88], r9; call rax; 
0x00000000004689d8: mov qword ptr [rbp - 0xe8], r8; call rax; 
0x00000000004743a9: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000419a53: mov qword ptr [rbp], rax; mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x000000000047a495: mov qword ptr [rbx + 0x10], 0; movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x00000000004626b1: mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000485d51: mov qword ptr [rbx + 0x10], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000485c86: mov qword ptr [rbx + 0x18], rax; pop rax; pop rdx; pop rbx; ret; 
0x000000000048e0a8: mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000048e1ec: mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x00000000004180a5: mov qword ptr [rbx + 0x20], rax; xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041810d: mov qword ptr [rbx + 0x58], 0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x00000000004743ad: mov qword ptr [rbx + 0x60], rbp; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000419a57: mov qword ptr [rbx + 0x60], rbp; pop rbx; pop rbp; pop r12; ret; 
0x0000000000414ddf: mov qword ptr [rbx + 0x90], rax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000415238: mov qword ptr [rbx + 0x90], rsi; xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x0000000000458296: mov qword ptr [rbx], 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048e371: mov qword ptr [rbx], 0; pop rbx; ret; 
0x000000000041bc5b: mov qword ptr [rbx], r12; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000046c222: mov qword ptr [rbx], r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000048bff5: mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x00000000004886dd: mov qword ptr [rbx], rax; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000422065: mov qword ptr [rbx], rax; mov eax, 1; pop rbx; pop rbp; pop r12; ret; 
0x00000000004903cc: mov qword ptr [rbx], rax; pop rax; pop rdx; pop rbx; ret; 
0x0000000000466f5c: mov qword ptr [rcx + rdx*8], rax; add rsp, 8; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000046507b: mov qword ptr [rcx], rdx; mov rax, qword ptr [rax + 0x58]; mov rdx, -0x20; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464fab: mov qword ptr [rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000049318a: mov qword ptr [rcx], rdx; ret; 
0x0000000000486ade: mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000443bbc: mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000443bdc: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x000000000044351c: mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004434fc: mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000443c1f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044355f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000443c3f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044357f: mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000443c00: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000443540: mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x00000000004882d4: mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000418023: mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000048263a: mov qword ptr [rdi + 0x458], rcx; test byte ptr [rax + 0x31c], 4; jne 0x82658; or byte ptr [rdi + 0x31d], 0x40; ret; 
0x0000000000453543: mov qword ptr [rdi + 0x460], rdx; add rsp, 8; ret; 
0x0000000000418027: mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000417fec: mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x00000000004931d4: mov qword ptr [rdi + 0x98], rsi; ret; 
0x000000000041205c: mov qword ptr [rdi + 0xd8], rdx; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x0000000000443b7c: mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004434bc: mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000443b9c: mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004434dc: mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000433db7: mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433d47: mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433cd7: mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433c67: mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443a7a: mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000433bf7: mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044340a: mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000443a9a: mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000433b87: mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044341a: mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000443aba: mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000433b17: mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044342a: mov qword ptr [rdi + 7], rdx; ret; 
0x000000000046c5a6: mov qword ptr [rdi + 8], 0; xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x6c5c0; ret; 
0x000000000048800f: mov qword ptr [rdi + 8], r10; mov eax, ebx; adc rax, rdx; pop rbp; pop rbx; ret; 
0x0000000000487ed7: mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000486ad7: mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000486a67: mov qword ptr [rdi + 8], r9; ret; 
0x00000000004882c7: mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000048708c: mov qword ptr [rdi + r11*8 + 8], r9; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x000000000044c13b: mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x000000000044402b: mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044cefb: mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000043fdeb: mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x00000000004465ab: mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000493190: mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000042d9f4: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da32: mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004869ce: mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000042dba7: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dca3: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbef: mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd77: mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df57: mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e147: mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e318: mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e518: mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e718: mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042d9f0: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da2e: mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042dba3: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dc9f: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbeb: mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd73: mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df53: mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e143: mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e314: mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e514: mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e714: mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042d9ec: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da2a: mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db9f: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dc9b: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbe7: mov qword ptr [rdi - 0x21], r9; mov qword ptr [rdi - 0x19], r10; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd6f: mov qword ptr [rdi - 0x22], r9; mov qword ptr [rdi - 0x1a], r10; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df4f: mov qword ptr [rdi - 0x23], r9; mov qword ptr [rdi - 0x1b], r10; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e13f: mov qword ptr [rdi - 0x24], r9; mov qword ptr [rdi - 0x1c], r10; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e310: mov qword ptr [rdi - 0x25], r9; mov qword ptr [rdi - 0x1d], r10; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e510: mov qword ptr [rdi - 0x26], r9; mov qword ptr [rdi - 0x1e], r10; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e710: mov qword ptr [rdi - 0x27], r9; mov qword ptr [rdi - 0x1f], r10; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042d9e8: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da26: mov qword ptr [rdi - 0x28], r8; mov qword ptr [rdi - 0x20], r9; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042dd7b: mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004335c7: mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042df5b: mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000433547: mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e14b: mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004334c7: mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e31c: mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433438: mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042e51c: mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004333a8: mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042e71c: mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433318: mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004869c7: mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048694d: mov qword ptr [rdi - 8], r9; ret; 
0x000000000042d9f8: mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da36: mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042dbab: mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dca7: mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbf3: mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000433647: mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004869c0: mov qword ptr [rdi], r11; shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000486ad0: mov qword ptr [rdi], r11; shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000486947: mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000486a61: mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000048691c: mov qword ptr [rdi], r9; ret; 
0x00000000004536ab: mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x73ca3]; mov qword ptr [rsi], rax; ret; 
0x0000000000443a06: mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x0000000000443a36: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004433e6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000443a56: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004433f6: mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000443a77: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000443407: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000443a97: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000443417: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000443ab7: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000443427: mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x000000000044c138: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000444028: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044cef8: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000043fde8: mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x0000000000443a17: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004433d7: mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000433b1b: mov qword ptr [rdi], rcx; ret; 
0x00000000004439f3: mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000433e23: mov qword ptr [rdi], rdx; ret; 
0x0000000000436de1: mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004882c4: mov qword ptr [rdi], rsi; mov qword ptr [rdi + 8], rdx; mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x00000000004465a8: mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000041c38f: mov qword ptr [rdx + 0x28], rcx; mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x0000000000454396: mov qword ptr [rdx + 0x38], rax; mov qword ptr [rdx + 0x40], rcx; mov byte ptr [rdx + 0x50], 1; ret; 
0x000000000045439a: mov qword ptr [rdx + 0x40], rcx; mov byte ptr [rdx + 0x50], 1; ret; 
0x0000000000454392: mov qword ptr [rdx + 0x48], r9; mov qword ptr [rdx + 0x38], rax; mov qword ptr [rdx + 0x40], rcx; mov byte ptr [rdx + 0x50], 1; ret; 
0x0000000000414ebc: mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x000000000041206a: mov qword ptr [rdx + 0xe0], rcx; ret; 
0x0000000000442f8a: mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x000000000044177a: mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000442faa: mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x000000000044179a: mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000442fca: mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004417ba: mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000442e5a: mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x0000000000488422: mov qword ptr [rdx + 8], rax; mov qword ptr [rax], rdx; mov qword ptr [rip + 0x43eb4], 0; ret; 
0x00000000004540b5: mov qword ptr [rdx + 8], rax; mov qword ptr [rip + 0x78250], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x00000000004416aa: mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x000000000048b468: mov qword ptr [rdx], rax; add al, ch; jmp qword ptr [rcx - 1]; 
0x0000000000442e03: mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000442f03: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000441733: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000442f23: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000441743: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000442f43: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000441753: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000442f63: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000441763: mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000442f83: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000441773: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000442fa3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000441793: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000442fc3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004417b3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000442e53: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004416a3: mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000441653: mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000048dd70: mov qword ptr [rdx], rax; pop rbx; ret; 
0x0000000000419b48: mov qword ptr [rdx], rax; ret; 
0x000000000047371c: mov qword ptr [rdx], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048ac09: mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000496723: mov qword ptr [rip + 0x31a66], rbx; test rbx, rbx; jne 0x96710; pop rbx; ret; 
0x000000000049732d: mov qword ptr [rip + 0x354c0], 0; add rsp, 8; ret; 
0x0000000000496edb: mov qword ptr [rip + 0x3576a], 0; add rsp, 8; ret; 
0x000000000048a402: mov qword ptr [rip + 0x3aac7], rax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000489e83: mov qword ptr [rip + 0x3b03e], r9; mov rax, r10; add rsp, 0x28; ret; 
0x000000000048ac9c: mov qword ptr [rip + 0x41d81], 0; pop rbx; ret; 
0x000000000048846d: mov qword ptr [rip + 0x43e70], 0; ret; 
0x0000000000488429: mov qword ptr [rip + 0x43eb4], 0; ret; 
0x0000000000482633: mov qword ptr [rip + 0x44d26], rcx; mov qword ptr [rdi + 0x458], rcx; test byte ptr [rax + 0x31c], 4; jne 0x82658; or byte ptr [rdi + 0x31d], 0x40; ret; 
0x00000000004806f0: mov qword ptr [rip + 0x4c1b9], rax; add rsp, 8; ret; 
0x00000000004805a7: mov qword ptr [rip + 0x4c2f2], rax; mov qword ptr [rip + 0x4c2fb], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004805ae: mov qword ptr [rip + 0x4c2fb], rcx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000474af7: mov qword ptr [rip + 0x51fd2], rax; ret; 
0x0000000000464f80: mov qword ptr [rip + 0x61aa9], rax; mov qword ptr [rip + 0x61aaa], rdx; cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x0000000000464f87: mov qword ptr [rip + 0x61aaa], rdx; cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x0000000000452a8c: mov qword ptr [rip + 0x7360d], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000045353c: mov qword ptr [rip + 0x73e45], rdx; mov qword ptr [rdi + 0x460], rdx; add rsp, 8; ret; 
0x00000000004534f0: mov qword ptr [rip + 0x73e59], rax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x00000000004540b9: mov qword ptr [rip + 0x78250], rax; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x00000000004533b3: mov qword ptr [rip + 0x78ebe], rax; lea rax, [rip + 0x78eaf]; ret; 
0x0000000000453371: mov qword ptr [rip + 0x78f18], rdi; cmp qword ptr [rip + 0x78ef8], 0; je 0x533a0; lea rax, [rip + 0x78ee7]; ret; 
0x000000000045103b: mov qword ptr [rip + 0x7b226], rax; cmp rax, rdi; jb 0x51050; xor eax, eax; ret; 
0x000000000041ba42: mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba22: mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041ba02: mov qword ptr [rip + 0xa9d57], rax; ret; 
0x000000000041b7f8: mov qword ptr [rip + 0xa9fe1], rax; ret; 
0x000000000041b788: mov qword ptr [rip + 0xa9fe9], rax; ret; 
0x000000000041b7e1: mov qword ptr [rip + 0xa9ff0], rax; ret; 
0x000000000041b7c7: mov qword ptr [rip + 0xa9ffa], rdx; ret; 
0x000000000041b778: mov qword ptr [rip + 0xaa001], rax; ret; 
0x0000000000419f8f: mov qword ptr [rip + 0xae21e], 0; ret; 
0x0000000000419f18: mov qword ptr [rip + 0xae299], rbx; add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x000000000041b986: mov qword ptr [rip + 0xb08ab], rax; ret; 
0x0000000000401e30: mov qword ptr [rip + 0xca545], 0x800; pop rbx; ret; 
0x0000000000401e27: mov qword ptr [rip + 0xca552], rax; pop rbx; ret; 
0x000000000040421c: mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000489dd0: mov qword ptr [rsi + 0x18], 0; ret; 
0x0000000000489dc8: mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000404210: mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004881e8: mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x00000000004536b5: mov qword ptr [rsi], rax; ret; 
0x00000000004809cc: mov qword ptr [rsi], rcx; mov rax, r8; ret; 
0x0000000000464fa0: mov qword ptr [rsi], rcx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x000000000048846a: mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x43e70], 0; ret; 
0x00000000004880a5: mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000048808a: mov qword ptr [rsi], rdx; ret; 
0x0000000000404219: mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000452774: mov qword ptr [rsp + 0x1008], rax; xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x00000000004506d4: mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rsp + 0x10]; mov eax, 0x4f; syscall; 
0x0000000000481707: mov qword ptr [rsp + 0x18], rax; call 0x80f90; add rsp, 0xd8; ret; 
0x0000000000450dd4: mov qword ptr [rsp + 0x20], rax; cmp esi, 9; je 0x50e08; mov eax, 0x48; syscall; 
0x0000000000479e89: mov qword ptr [rsp + 0x28], rax; xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x0000000000465c75: mov qword ptr [rsp + 0x68], r8; mov rsi, qword ptr [rsp + 8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x0000000000450537: mov qword ptr [rsp + 8], rax; call 0x74770; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000450e61: mov qword ptr [rsp + 8], rax; xor eax, eax; cmp esi, 9; je 0x50e98; mov eax, 0x48; syscall; 
0x00000000004130d6: mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004156cf: mov qword ptr [rsp + 8], rcx; mov rdi, rbp; call rax; 
0x00000000004909ac: mov qword ptr [rsp], rax; call 0x90d40; mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000048846c: mov qword ptr ds:[rip + 0x43e70], 0; ret; 
0x000000000047572d: mov qword ptr fs:[0x2f0], 0; nop; xor eax, eax; ret; 
0x000000000041a9fa: mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000045418b: mov qword ptr fs:[0x698], rax; mov byte ptr fs:[0x971], 0; mov byte ptr fs:[0x972], 0; add rsp, 0x10; pop rbx; ret; 
0x0000000000454f10: mov qword ptr fs:[r12], 0; mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x000000000048e370: mov qword ptr fs:[rbx], 0; pop rbx; ret; 
0x000000000041bc5a: mov qword ptr fs:[rbx], r12; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000046507a: mov qword ptr fs:[rcx], rdx; mov rax, qword ptr [rax + 0x58]; mov rdx, -0x20; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464faa: mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464fb5: mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464f9f: mov qword ptr fs:[rsi], rcx; mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x00000000004465a7: mov qword ptr ss:[rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000040421b: mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x0000000000479e34: mov r10, rcx; mov eax, 0x11; syscall; 
0x0000000000479e34: mov r10, rcx; mov eax, 0x11; syscall; cmp rax, -0x1000; ja 0x79e50; ret; 
0x0000000000474999: mov r10, rcx; mov edx, r13d; mov eax, 0xca; syscall; 
0x0000000000450ff4: mov r10, rsi; xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x00000000004705b6: mov r10d, 1; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004652f6: mov r10d, 8; mov eax, 0xd; syscall; 
0x000000000041ace0: mov r10d, 8; mov rdx, rbp; lea rsi, [rip + 0x7fc90]; mov eax, 0xe; syscall; 
0x0000000000475e6b: mov r10d, 8; mov rsi, r8; mov eax, 0xe; syscall; 
0x0000000000450374: mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000451194: mov r10d, ecx; test r9d, 0xfff; jne 0x511b0; mov eax, 9; syscall; 
0x000000000042db40: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db24: mov r11, qword ptr [rsi - 0x10]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000470620: mov r11d, 1; xor ebp, ebp; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004510a7: mov r12, -1; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000040aac5: mov r12, 0x4c72b0; cmp rbx, r12; jae 0xaae3; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004513ba: mov r12, qword ptr [rbp + 0x10]; test r12, r12; jne 0x5140c; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004521e3: mov r12, qword ptr [rbp + 0x10]; test r12, r12; jne 0x52210; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000049355f: mov r12, qword ptr [rbp - 0x20]; mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x00000000004513b9: mov r12, qword ptr es:[rbp + 0x10]; test r12, r12; jne 0x5140c; mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000413c09: mov r12d, 0xffffffff; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x0000000000474a1e: mov r12d, eax; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp + 0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000000454eb1: mov r12d, eax; test eax, eax; jne 0x54f38; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x00000000004513eb: mov r13, qword ptr [r12 + 0x10]; test r13, r13; jne 0x5146b; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045141b: mov r13, qword ptr [r12 + 0x10]; test r13, r13; jne 0x514a0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000452247: mov r13, qword ptr [r12 + 0x10]; test r13, r13; jne 0x522b0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000493563: mov r13, qword ptr [rbp - 0x18]; mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000040a2b4: mov r13, r15; add r15, r14; call rax; 
0x0000000000465567: mov r13, rax; mov rdi, r12; call rbx; 
0x0000000000493567: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; leave; ret; 
0x000000000049370d: mov r14, qword ptr [rbp - 0x10]; mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x000000000040f932: mov r14, qword ptr [rsp + 0x60]; sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rcx + rdx*8]; jmp rdx; 
0x000000000040f66b: mov r14, rcx; sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rdi + rdx*8]; jmp rdx; 
0x000000000040f73b: mov r14, rcx; sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rsi + rdx*8]; jmp rdx; 
0x000000000049356b: mov r15, qword ptr [rbp - 8]; leave; ret; 
0x0000000000493711: mov r15, qword ptr [rbp - 8]; mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000482a6e: mov r15, qword ptr [rbx]; mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x00000000004651c5: mov r15, qword ptr [rdi + 0x28]; mov eax, esi; mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000451a92: mov r15d, r13d; call rax; 
0x000000000041dab4: mov r8, -1; pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000488305: mov r8, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, r8; jmp rax; 
0x000000000045363d: mov r8, qword ptr [rip + 0x73d44]; mov rax, r8; ret; 
0x00000000004934c4: mov r8, r12; mov rcx, r14; mov esi, 1; mov edi, 1; call rax; 
0x00000000004930bf: mov r8, r13; mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x0000000000492fd7: mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000492e9c: mov r8, rbx; mov rcx, rbp; or esi, 2; mov edi, 1; call rax; 
0x0000000000474480: mov r8, rcx; lea rdx, [r8 + rdx*4]; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000475e68: mov r8, rsi; mov r10d, 8; mov rsi, r8; mov eax, 0xe; syscall; 
0x0000000000450475: mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x00000000004505c1: mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x0000000000450521: mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x00000000004666c0: mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x0000000000479cd0: mov r8d, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000044c133: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000444023: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044cef3: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000043fde3: mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000044e28a: mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000045a8ec: mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045da5c: mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x00000000004930bc: mov r9, r14; mov r8, r13; mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x0000000000492fd4: mov r9, r14; mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x0000000000457352: mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000044eb6d: mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rcx, r12; call rbx; 
0x000000000044de0a: mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x4ddf8; ret; 
0x000000000046c7a3: mov r9, rax; pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000474a2a: mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000000474990: mov r9d, 0xffffffff; xor r8d, r8d; mov r10, rcx; mov edx, r13d; mov eax, 0xca; syscall; 
0x00000000004705b0: mov r9d, 1; mov r10d, 1; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004705ec: mov r9d, 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000046fb94: mov r9d, 1; xor r10d, r10d; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x0000000000464fe4: mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x0000000000465004: mov rax, -0x18; add rax, qword ptr fs:[0]; ret; 
0x0000000000465024: mov rax, -0x20; add rax, qword ptr fs:[0]; ret; 
0x0000000000465200: mov rax, -0x48; mov dword ptr fs:[rax], 0x16; mov eax, 0xffffffff; ret; 
0x00000000004511b0: mov rax, -0x48; mov dword ptr fs:[rax], 0x16; mov rax, -1; ret; 
0x000000000044fac8: mov rax, -0x48; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x0000000000451050: mov rax, -0x48; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041ebd0: mov rax, -0x48; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000450350: mov rax, -0x48; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x0000000000489d61: mov rax, -0x48; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x0000000000464fc4: mov rax, -0x58; movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000419194: mov rax, -1; ret; 
0x0000000000401008: mov rax, 0; test rax, rax; je 0x1016; call rax; 
0x0000000000465230: mov rax, 0xf; syscall; 
0x0000000000478380: mov rax, 1; ret; 
0x0000000000478390: mov rax, 2; ret; 
0x00000000004783a0: mov rax, 3; ret; 
0x00000000004783b0: mov rax, 4; ret; 
0x00000000004783c0: mov rax, 5; ret; 
0x00000000004783d0: mov rax, 6; ret; 
0x00000000004783e0: mov rax, 7; ret; 
0x000000000048007a: mov rax, qword ptr [0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x000000000047477a: mov rax, qword ptr [0x10]; mov byte ptr [rax + 0x972], 0; ret; 
0x000000000041b6e5: mov rax, qword ptr [0x10]; ret; 
0x00000000004882cc: mov rax, qword ptr [0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000488b7b: mov rax, qword ptr [r12]; pop rbx; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x0000000000413794: mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000046507e: mov rax, qword ptr [rax + 0x58]; mov rdx, -0x20; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000418fbf: mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x18fb8; ret; 
0x000000000041fbab: mov rax, qword ptr [rax + 0x870]; cmp rax, rsi; jne 0x1fb80; mov dword ptr [rip + 0xac663], 0; ret; 
0x0000000000473a34: mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000473b69: mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x000000000041378d: mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x000000000048faf9: mov rax, qword ptr [rax + 8]; mov rdx, r13; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x0000000000485c24: mov rax, qword ptr [rax + 8]; ret; 
0x0000000000485c34: mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000048d35a: mov rax, qword ptr [rax + r10*8]; mov rsi, qword ptr [rax + 8]; call 0x54de0; nop word ptr [rax + rax]; ret; 
0x000000000046313a: mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x63145; call rax; 
0x0000000000496f33: mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x96f3e; call rax; 
0x0000000000464fd2: mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000410d48: mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000464fcf: mov rax, qword ptr [rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x0000000000493138: mov rax, qword ptr [rax]; ret; 
0x0000000000419b38: mov rax, qword ptr [rax]; test rax, rax; jne 0x19b30; ret; 
0x000000000048a3fe: mov rax, qword ptr [rbp + 8]; mov qword ptr [rip + 0x3aac7], rax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000451a8e: mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x0000000000457bc8: mov rax, qword ptr [rbp - 0x68]; mov rdi, r12; call rax; 
0x00000000004841d4: mov rax, qword ptr [rbp - 0x90]; mov qword ptr [rbp - 0xa0], r10; add rax, qword ptr [rbp - 0x98]; mov qword ptr [rbp - 0x88], r9; call rax; 
0x0000000000487ded: mov rax, qword ptr [rbp - 8]; sub rax, qword ptr fs:[0x28]; jne 0x87e75; leave; ret; 
0x0000000000482a71: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; call rax; 
0x0000000000483245: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x83261; mov qword ptr [rbp - 0xb0], r10; call rax; 
0x0000000000483a1c: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test edx, edx; jne 0x83a2a; call rax; 
0x0000000000483116: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test esi, esi; jne 0x83124; call rax; 
0x0000000000483a9b: mov rax, qword ptr [rbx + 0x10]; add rax, qword ptr [r12]; test r11d, r11d; jne 0x83ab8; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000048dd48: mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rax], 0; mov rdx, qword ptr [rdi + 0x460]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048dd00: mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x000000000048dcf0: mov rax, qword ptr [rbx + 0x10]; mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000418161: mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041817d: mov rax, qword ptr [rbx + 0x18]; mov esi, dword ptr [rsp + 0xc]; mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000041824e: mov rax, qword ptr [rbx + 0x20]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041841e: mov rax, qword ptr [rbx + 0x28]; add rsp, 8; mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x00000000004188fd: mov rax, qword ptr [rbx + 0x40]; add rsp, 0x20; pop rbx; jmp rax; 
0x0000000000418daf: mov rax, qword ptr [rbx + 0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x0000000000452a89: mov rax, qword ptr [rbx]; mov qword ptr [rip + 0x7360d], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000442f86: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000441776: mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000442fa6: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000441796: mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000442fc6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004417b6: mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000442e56: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004416a6: mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000442e00: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x0000000000442f00: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; lea rax, [rdx + 8]; ret; 
0x0000000000441730: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 5]; mov dword ptr [rdx + 5], eax; mov rax, rdi; ret; 
0x0000000000442f20: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; lea rax, [rdx + 9]; ret; 
0x0000000000441740: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 6]; mov dword ptr [rdx + 6], eax; mov rax, rdi; ret; 
0x0000000000442f40: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; lea rax, [rdx + 0xa]; ret; 
0x0000000000441750: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 7]; mov dword ptr [rdx + 7], eax; mov rax, rdi; ret; 
0x0000000000442f60: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; lea rax, [rdx + 0xb]; ret; 
0x0000000000441760: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov eax, dword ptr [rcx + 8]; mov dword ptr [rdx + 8], eax; mov rax, rdi; ret; 
0x0000000000442f80: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; lea rax, [rdx + 0xc]; ret; 
0x0000000000441770: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 5]; mov qword ptr [rdx + 5], rax; mov rax, rdi; ret; 
0x0000000000442fa0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; lea rax, [rdx + 0xd]; ret; 
0x0000000000441790: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 6]; mov qword ptr [rdx + 6], rax; mov rax, rdi; ret; 
0x0000000000442fc0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; lea rax, [rdx + 0xe]; ret; 
0x00000000004417b0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 7]; mov qword ptr [rdx + 7], rax; mov rax, rdi; ret; 
0x0000000000442e50: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; lea rax, [rdx + 0xf]; ret; 
0x00000000004416a0: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, qword ptr [rcx + 8]; mov qword ptr [rdx + 8], rax; mov rax, rdi; ret; 
0x0000000000441650: mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x000000000041a964: mov rax, qword ptr [rdi + 0x10]; mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000041801b: mov rax, qword ptr [rdi + 0x18]; punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000417fe0: mov rax, qword ptr [rdi + 0x18]; punpckhqdq xmm1, xmm2; movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x00000000004647e5: mov rax, qword ptr [rdi + 0x20]; mov rbp, rdi; test rax, rax; je 0x647f3; call rax; 
0x0000000000497214: mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x97224; call rax; 
0x000000000041c393: mov rax, qword ptr [rdi + 0x28]; mov qword ptr [rax + 0x20], rdx; add rsp, 8; ret; 
0x000000000048257f: mov rax, qword ptr [rdi + 0x28]; test byte ptr [rax + 0x31c], 4; jne 0x825a0; or byte ptr [rdi + 0x31d], 0x40; xor eax, eax; ret; 
0x0000000000419ed4: mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000493144: mov rax, qword ptr [rdi + 0x90]; ret; 
0x00000000004931a4: mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000473a14: mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x73a28; ret; 
0x00000000004931e4: mov rax, qword ptr [rdi + 0xa0]; ret; 
0x0000000000493244: mov rax, qword ptr [rdi + 0xa8]; ret; 
0x0000000000493234: mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004931f4: mov rax, qword ptr [rdi + 0xb8]; ret; 
0x00000000004931b4: mov rax, qword ptr [rdi + 0xc0]; sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000419fca: mov rax, qword ptr [rdi + 8]; cmp rax, rdx; jae 0x19ff8; movzx eax, byte ptr [rax]; ret; 
0x0000000000493c04: mov rax, qword ptr [rdi + 8]; mov rsi, rdi; test rax, rax; je 0x93c20; mov edi, 1; jmp rax; 
0x000000000042163d: mov rax, qword ptr [rdi + rax + 8]; sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x000000000041b794: mov rax, qword ptr [rdi]; cmp rax, 0x408; jbe 0x1b7a0; ret; 
0x000000000041b964: mov rax, qword ptr [rdi]; cmp rax, 0xa0; jbe 0x1b970; ret; 
0x000000000041b7d4: mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x1b7e0; ret; 
0x0000000000474ae4: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x51fd3], eax; ret; 
0x00000000004747c4: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x522ef], eax; ret; 
0x00000000004747b4: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x522fb], eax; ret; 
0x00000000004747a4: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x52307], eax; ret; 
0x0000000000474794: mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x52313], eax; ret; 
0x0000000000419b45: mov rax, qword ptr [rdi]; mov qword ptr [rdx], rax; ret; 
0x0000000000474af4: mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x51fd2], rax; ret; 
0x0000000000488309: mov rax, qword ptr [rdi]; mov rdi, r8; jmp rax; 
0x000000000041ba54: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d46], 1; mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041ba34: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d66], 1; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba14: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xa9d86], 1; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041ba74: mov rax, qword ptr [rdi]; nop; mov dword ptr [rip + 0xb07b6], eax; ret; 
0x000000000041b7f4: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa9fe1], rax; ret; 
0x000000000041b784: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xa9fe9], rax; ret; 
0x000000000041b774: mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xaa001], rax; ret; 
0x0000000000453db1: mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x53dfa; ret; 
0x00000000004533af: mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x78ebe], rax; lea rax, [rip + 0x78eaf]; ret; 
0x0000000000477730: mov rax, qword ptr [rip + 0x54e39]; ret; 
0x0000000000477720: mov rax, qword ptr [rip + 0x54e41]; ret; 
0x0000000000477710: mov rax, qword ptr [rip + 0x54e49]; ret; 
0x0000000000477700: mov rax, qword ptr [rip + 0x54e51]; ret; 
0x00000000004776f0: mov rax, qword ptr [rip + 0x54e59]; ret; 
0x00000000004776e0: mov rax, qword ptr [rip + 0x54e61]; ret; 
0x00000000004776d0: mov rax, qword ptr [rip + 0x54e69]; ret; 
0x00000000004776c0: mov rax, qword ptr [rip + 0x54e71]; ret; 
0x00000000004776b0: mov rax, qword ptr [rip + 0x54e79]; ret; 
0x00000000004776a0: mov rax, qword ptr [rip + 0x54e81]; ret; 
0x0000000000477690: mov rax, qword ptr [rip + 0x54e89]; ret; 
0x0000000000477688: mov rax, qword ptr [rip + 0x54ee9]; ret; 
0x0000000000461e84: mov rax, qword ptr [rip + 0x6a7bd]; ret; 
0x00000000004536ae: mov rax, qword ptr [rip + 0x73ca3]; mov qword ptr [rsi], rax; ret; 
0x00000000004536a4: mov rax, qword ptr [rip + 0x73cbd]; mov qword ptr [rdi], rax; mov rax, qword ptr [rip + 0x73ca3]; mov qword ptr [rsi], rax; ret; 
0x0000000000458244: mov rax, qword ptr [rip + 0x743bd]; ret; 
0x0000000000458234: mov rax, qword ptr [rip + 0x743c5]; ret; 
0x000000000044fa74: mov rax, qword ptr [rip + 0x7500d]; test rax, rax; je 0x4fa98; sub rsp, 8; call rax; 
0x0000000000451104: mov rax, qword ptr [rip + 0x7506d]; test rax, rax; je 0x51111; ret; 
0x0000000000419eb4: mov rax, qword ptr [rip + 0xab2a5]; ret; 
0x0000000000460226: mov rax, qword ptr [rsp + 0x10]; call rax; 
0x0000000000454f19: mov rax, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x00000000004515e3: mov rax, qword ptr [rsp + 0x10]; mov rdi, rbp; call rax; 
0x000000000045a0f1: mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000459b31: mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000450541: mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000401c93: mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000490c41: mov rax, qword ptr [rsp]; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x00000000004909b5: mov rax, qword ptr [rsp]; add rsp, 0x38; ret; 
0x000000000040a12b: mov rax, qword ptr [rsp]; call rax; 
0x0000000000493da3: mov rax, qword ptr [rsp]; mov dword ptr [rsp + 8], ecx; call rax; 
0x0000000000412d44: mov rax, qword ptr [rsp]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000040a2b0: mov rax, qword ptr [rsp]; mov r13, r15; add r15, r14; call rax; 
0x0000000000493dc6: mov rax, qword ptr [rsp]; mov rdi, r15; mov rsi, qword ptr [r14]; call rax; 
0x000000000040a0a0: mov rax, qword ptr [rsp]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000040a24c: mov rax, qword ptr [rsp]; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000480079: mov rax, qword ptr fs:[0x10]; lea rdi, [rax + 0x1c]; mov eax, 0xca; syscall; 
0x0000000000474779: mov rax, qword ptr fs:[0x10]; mov byte ptr [rax + 0x972], 0; ret; 
0x000000000041b6e4: mov rax, qword ptr fs:[0x10]; ret; 
0x00000000004882cb: mov rax, qword ptr fs:[0x2f8]; mov qword ptr [rdi + 0x18], rax; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000464fce: mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x00000000004515e2: mov rax, qword ptr ss:[rsp + 0x10]; mov rdi, rbp; call rax; 
0x0000000000489e8a: mov rax, r10; add rsp, 0x28; ret; 
0x000000000045434d: mov rax, r10; cmp rsi, r9; ja 0x543f0; cmp r9, rcx; jbe 0x5437d; ret; 
0x00000000004543e0: mov rax, r10; mov rcx, rdi; cmp r9, rax; jge 0x54378; ret; 
0x0000000000404608: mov rax, r12; pop r12; ret; 
0x00000000004520d1: mov rax, r12; pop rbp; pop r12; jmp rax; 
0x00000000004512d8: mov rax, r12; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000041d49f: mov rax, r12; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000047a54a: mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x000000000048e12c: mov rax, r12; pop rbp; pop r12; ret; 
0x00000000004510b2: mov rax, r12; pop rbx; pop r12; ret; 
0x000000000041133d: mov rax, r12; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040456a: mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000041213d: mov rax, r13; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004519e8: mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x00000000004519d3: mov rax, r13; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000411fe5: mov rax, r14; pop r12; pop r13; pop r14; ret; 
0x0000000000411f9d: mov rax, r14; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040ac19: mov rax, r8; add qword ptr [rip + 0xbd13c], 1; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480a45: mov rax, r8; neg rax; test dil, dil; cmove r8, rax; mov rax, r8; ret; 
0x0000000000414d56: mov rax, r8; pop rbp; pop r12; ret; 
0x000000000040ac87: mov rax, r8; pop rbx; pop rbp; ret; 
0x0000000000401a9a: mov rax, r8; pop rbx; ret; 
0x000000000044d83b: mov rax, r8; ret; 
0x000000000043f9c4: mov rax, r8; vzeroupper; ret; 
0x000000000044abb6: mov rax, r8; xtest; je 0x4abc2; vzeroall; ret; 
0x000000000044f729: mov rax, r8; xtest; je 0x4f735; vzeroall; ret; 
0x000000000046c7aa: mov rax, r9; pop r14; ret; 
0x000000000046c6f6: mov rax, r9; pop rbp; pop r12; pop r13; pop r14; ret; 
0x00000000004160c1: mov rax, rbp; movups xmmword ptr [rbx + 8], xmm1; pop rbx; pop rbp; pop r12; ret; 
0x0000000000480754: mov rax, rbp; pop rbx; pop rbp; ret; 
0x000000000044ee1a: mov rax, rbx; cmovne rax, rdx; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000416a29: mov rax, rbx; pop rbx; pop rbp; pop r12; ret; 
0x0000000000466d52: mov rax, rdi; mov rdi, rdx; cmp rax, 9; ja 0x66d30; mov rax, r8; ret; 
0x000000000044174c: mov rax, rdi; ret; 
0x00000000004881e0: mov rax, rdx; bts rax, 0x30; mov qword ptr [rsi + 8], rax; mov eax, 2; ret; 
0x0000000000487094: mov rax, rdx; pop rbx; ret; 
0x0000000000440018: mov rax, rdx; ret; 
0x0000000000447cb0: mov rax, rdx; vzeroupper; ret; 
0x000000000048ac03: mov rax, rsi; mov rcx, qword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000493715: mov rbp, qword ptr [rbp]; mov rsp, rcx; pop rcx; jmp rcx; 
0x00000000004651ce: mov rbp, r9; nop; jmp rdx; 
0x00000000004647e9: mov rbp, rdi; test rax, rax; je 0x647f3; call rax; 
0x0000000000480e5b: mov rbp, rsp; mov rsi, rbp; syscall; 
0x000000000040aabe: mov rbx, 0x4c72a8; mov r12, 0x4c72b0; cmp rbx, r12; jae 0xaae3; nop dword ptr [rax]; call qword ptr [rbx]; 
0x00000000004707c1: mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x0000000000484c50: mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x00000000004704c0: mov rbx, rcx; jmp rdx; 
0x000000000047061d: mov rbx, rcx; mov r11d, 1; xor ebp, ebp; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004705ad: mov rbx, rcx; mov r9d, 1; mov r10d, 1; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000046fb91: mov rbx, rcx; mov r9d, 1; xor r10d, r10d; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x0000000000475dec: mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000475dec: mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000473a2c: mov rbx, rdi; test byte ptr [rdi], 2; jne 0x73aa8; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000464fa3: mov rcx, -0x18; mov qword ptr fs:[rcx], rdx; mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000450294: mov rcx, -0x48; neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000048ac06: mov rcx, qword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x0000000000436ddd: mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000049317e: mov rcx, qword ptr [rdi + rsi*8]; cmp al, 8; jne 0x1618; mov qword ptr [rcx], rdx; ret; 
0x0000000000493d44: mov rcx, qword ptr [rdx + 8]; mov eax, 1; cmp qword ptr [rsi + 8], rcx; ja 0x93d55; sbb eax, eax; ret; 
0x00000000004806c4: mov rcx, qword ptr [rip + 0x4c1d5]; cmp rcx, rdi; je 0x806d8; ret; 
0x0000000000443bb4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000443bd4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000443514: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004434f4: mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000443b74: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004434b4: mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000443b94: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004434d4: mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004465a0: mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x000000000042dee4: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df00: mov rcx, qword ptr [rsi - 0xa]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0c4: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0e0: mov rcx, qword ptr [rsi - 0xb]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2a4: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2c0: mov rcx, qword ptr [rsi - 0xc]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e494: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e4b0: mov rcx, qword ptr [rsi - 0xd]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e694: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e6b0: mov rcx, qword ptr [rsi - 0xe]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e894: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e8b0: mov rcx, qword ptr [rsi - 0xf]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433434: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004333a4: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000433314: mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042dd04: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd20: mov rcx, qword ptr [rsi - 9]; mov edx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000443a00: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004433c0: mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; ret; 
0x0000000000443a10: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004433d0: mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000443a30: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; lea rax, [rdi + 0xa]; ret; 
0x00000000004433e0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x0000000000443a50: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; lea rax, [rdi + 0xb]; ret; 
0x00000000004433f0: mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x0000000000433db4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433d44: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433cd4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433c64: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433bf4: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433b84: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433b14: mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000044c130: mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x000000000044cef0: mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000043fde0: mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x0000000000443a70: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000443400: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000443a90: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000443410: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000443ab0: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000443420: mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000454ebc: mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000045b6fe: mov rcx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000460217: mov rcx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea6e: mov rcx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000436ddc: mov rcx, qword ptr ss:[rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x000000000044eb78: mov rcx, r12; call rbx; 
0x00000000004930c2: mov rcx, r12; mov esi, 0x1a; mov edi, 1; call rax; 
0x0000000000492fda: mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x00000000004934c7: mov rcx, r14; mov esi, 1; mov edi, 1; call rax; 
0x0000000000414676: mov rcx, r14; mov rsi, r13; mov rdi, r15; call rbx; 
0x00000000004808ca: mov rcx, rax; cmp rcx, rdx; jne 0x808a8; mov eax, dword ptr [rcx]; ret; 
0x0000000000492e9f: mov rcx, rbp; or esi, 2; mov edi, 1; call rax; 
0x00000000004543e3: mov rcx, rdi; cmp r9, rax; jge 0x54378; ret; 
0x0000000000447bf4: mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447d84: mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000447b1d: mov rcx, rdx; movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000446755: mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000048d5ce: mov rcx, rsi; sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x8d5c0; mov eax, 1; ret; 
0x000000000044df7c: mov rdi, qword ptr [r12 + 0x10]; push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044df02: mov rdi, qword ptr [r12 + 0x10]; push 1; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x000000000045221b: mov rdi, qword ptr [r12 + 0x10]; test rdi, rdi; jne 0x52270; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004513f5: mov rdi, qword ptr [r12]; call rbx; 
0x000000000040a124: mov rdi, qword ptr [r12]; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x0000000000451479: mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x51510; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514da: mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x51530; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514ae: mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x51550; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000451446: mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x51570; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522ea: mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x52310; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522be: mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x52330; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045228e: mov rdi, qword ptr [r13 + 0x10]; test rdi, rdi; jne 0x52350; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000451453: mov rdi, qword ptr [r13]; call rbx; 
0x0000000000477a1f: mov rdi, qword ptr [r13]; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x000000000046e380: mov rdi, qword ptr [rbp - 0x8b8]; mov byte ptr [rbp - 0x910], r8b; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x000000000046e4e6: mov rdi, qword ptr [rbp - 0x8b8]; mov rdx, r13; mov rsi, r15; call qword ptr [rax + 0x38]; 
0x00000000004513c3: mov rdi, qword ptr [rbp]; call rbx; 
0x0000000000475def: mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000475def: mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000048e1e4: mov rdi, qword ptr [rdi]; call 0x903e0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048e0a0: mov rdi, qword ptr [rdi]; call 0x90700; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x0000000000485be4: mov rdi, qword ptr [rip + 0x46d25]; lea rax, [rdi - 1]; cmp rax, -3; jbe 0x85c00; ret; 
0x00000000004506d9: mov rdi, qword ptr [rsp + 0x10]; mov eax, 0x4f; syscall; 
0x0000000000474a25: mov rdi, qword ptr [rsp + 0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000000465577: mov rdi, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x0000000000454f1e: mov rdi, qword ptr [rsp + 0x18]; call rax; 
0x0000000000454ec1: mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000460221: mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea78: mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045da66: mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045b708: mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000459b2c: mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a0ec: mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000418932: mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x00000000004666c3: mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x0000000000418185: mov rdi, qword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000045221a: mov rdi, qword ptr gs:[r12 + 0x10]; test rdi, rdi; jne 0x52270; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004522e9: mov rdi, qword ptr ss:[r13 + 0x10]; test rdi, rdi; jne 0x52310; mov rdi, qword ptr [r13]; call rbx; 
0x000000000047110c: mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000046f92c: mov rdi, r12; call qword ptr [rbp + 0x38]; 
0x000000000041875e: mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000046fe06: mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x000000000040a0aa: mov rdi, r12; call rax; 
0x000000000046556a: mov rdi, r12; call rbx; 
0x00000000004689d5: mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x00000000004655a6: mov rdi, r13; call rbx; 
0x000000000040c408: mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040d2e7: mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040d5b0: mov rdi, r14; mov byte ptr [rbp - 0x8ec], r9b; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x0000000000451a8b: mov rdi, r14; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x000000000041252e: mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x00000000004130db: mov rdi, r15; call rax; 
0x000000000041467c: mov rdi, r15; call rbx; 
0x0000000000493d9d: mov rdi, r15; mov rdx, qword ptr [r14]; mov rax, qword ptr [rsp]; mov dword ptr [rsp + 8], ecx; call rax; 
0x0000000000493dca: mov rdi, r15; mov rsi, qword ptr [r14]; call rax; 
0x0000000000412d4d: mov rdi, r8; call qword ptr [rax + 0x18]; 
0x000000000048830c: mov rdi, r8; jmp rax; 
0x000000000047561f: mov rdi, r8; mov eax, 0xca; and esi, 0x80; xor sil, 0x81; syscall; 
0x000000000047597c: mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000041b201: mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000401860: mov rdi, rax; call 0x11ed0; mov eax, 0; leave; ret; 
0x000000000040180f: mov rdi, rax; call 0x12570; nop; pop rbp; ret; 
0x0000000000409fce: mov rdi, rax; call 0x1ae00; test eax, eax; jne 0x9fe0; pop rbp; ret; 
0x0000000000466cd2: mov rdi, rax; cmp rdx, rcx; jae 0x66cbc; mov rax, r8; ret; 
0x0000000000416316: mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x0000000000411c4c: mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x00000000004182d7: mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000040f420: mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000040be96: mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x00000000004156d4: mov rdi, rbp; call rax; 
0x000000000044ed07: mov rdi, rbp; call rbx; 
0x000000000044e144: mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000475d56: mov rdi, rbp; mov eax, 0xca; syscall; 
0x0000000000474f24: mov rdi, rbp; mov eax, r13d; syscall; 
0x0000000000474ded: mov rdi, rbp; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x0000000000475cc0: mov rdi, rbp; mov eax, r8d; syscall; 
0x0000000000475189: mov rdi, rbp; mov esi, 7; mov eax, 0xca; syscall; 
0x000000000040a2ad: mov rdi, rbp; mov rax, qword ptr [rsp]; mov r13, r15; add r15, r14; call rax; 
0x00000000004520ce: mov rdi, rbp; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x00000000004512d5: mov rdi, rbp; mov rax, r12; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000044e28f: mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000413789: mov rdi, rbp; pop rbp; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000473794: mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x0000000000418256: mov rdi, rbp; pop rbx; pop rbp; jmp rax; 
0x000000000041655b: mov rdi, rbp; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000416820: mov rdi, rbp; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000041b2e5: mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000418070: mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004186c1: mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004191e1: mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000411e45: mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x000000000041270e: mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000415ef9: mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000041969a: mov rdi, rbx; call qword ptr [rcx + 0x58]; 
0x00000000004193be: mov rdi, rbx; call qword ptr [rdx + 0x18]; 
0x00000000004114f1: mov rdi, rbx; call rax; 
0x0000000000454157: mov rdi, rbx; mov eax, 0x14e; syscall; 
0x00000000004129dd: mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x000000000041b5dc: mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x00000000004806e5: mov rdi, rcx; sub rdx, rcx; call 0x1110; mov qword ptr [rip + 0x4c1b9], rax; add rsp, 8; ret; 
0x0000000000466d55: mov rdi, rdx; cmp rax, 9; ja 0x66d30; mov rax, r8; ret; 
0x000000000042b5ce: mov rdi, rdx; inc ecx; jne 0x2b500; vzeroupper; ret; 
0x00000000004775da: mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x000000000047720e: mov rdi, rsi; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000465082: mov rdx, -0x20; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000464fae: mov rdx, -0x20; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000409fe0: mov rdx, -0x48; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000044faa8: mov rdx, -0x48; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000450550: mov rdx, -0x48; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000004543b0: mov rdx, qword ptr [r10]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x000000000040eb36: mov rdx, qword ptr [r11 + rdx*8]; jmp rdx; 
0x0000000000492ffe: mov rdx, qword ptr [r12]; mov r8, r13; mov rcx, r12; mov esi, 0xa; mov edi, 1; call rax; 
0x00000000004934c1: mov rdx, qword ptr [r14]; mov r8, r12; mov rcx, r14; mov esi, 1; mov edi, 1; call rax; 
0x0000000000493da0: mov rdx, qword ptr [r14]; mov rax, qword ptr [rsp]; mov dword ptr [rsp + 8], ecx; call rax; 
0x00000000004130cf: mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000046fb9d: mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000048ab9e: mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x8ab90; ret; 
0x0000000000463563: mov rdx, qword ptr [rax + rbp*8]; test rdx, rdx; je 0x6356e; call rdx; 
0x000000000049106b: mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000493f30: mov rdx, qword ptr [rax]; add rax, 8; mov qword ptr [r8], rdx; ret; 
0x00000000004156c8: mov rdx, qword ptr [rbp + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, rbp; call rax; 
0x0000000000492e98: mov rdx, qword ptr [rbp]; mov r8, rbx; mov rcx, rbp; or esi, 2; mov edi, 1; call rax; 
0x000000000041abe6: mov rdx, qword ptr [rbp]; test rdx, rdx; je 0x1abc0; call rdx; 
0x000000000048dd6c: mov rdx, qword ptr [rbx + 0x10]; mov qword ptr [rdx], rax; pop rbx; ret; 
0x00000000004129d9: mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x00000000004707bd: mov rdx, qword ptr [rbx + rdx*8]; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x00000000004704bc: mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000493dc3: mov rdx, qword ptr [rbx]; mov rax, qword ptr [rsp]; mov rdi, r15; mov rsi, qword ptr [r14]; call rax; 
0x000000000040f941: mov rdx, qword ptr [rcx + rdx*8]; jmp rdx; 
0x000000000045331f: mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x000000000041a968: mov rdx, qword ptr [rdi + 0x28]; cmp rax, rdx; cmovb rax, rdx; sub rax, qword ptr [rdi + 0x18]; ret; 
0x000000000048dcf4: mov rdx, qword ptr [rdi + 0x30]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x000000000048dd53: mov rdx, qword ptr [rdi + 0x460]; mov qword ptr [rax], rdx; pop rbx; ret; 
0x0000000000412063: mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000040f678: mov rdx, qword ptr [rdi + rdx*8]; jmp rdx; 
0x0000000000489dc1: mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x0000000000417fac: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x17fa8; ret; 
0x0000000000473384: mov rdx, qword ptr [rdx]; cmp rax, rcx; cmovg rax, rcx; test rdx, rdx; jne 0x73380; ret; 
0x00000000004910cc: mov rdx, qword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000493f40: mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x000000000048892d: mov rdx, qword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000401c83: mov rdx, qword ptr [rip + 0xca5d6]; mov edi, dword ptr [rsp + 0x14]; mov rsi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000443554: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x17]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000443574: mov rdx, qword ptr [rsi + 0x10]; mov ecx, dword ptr [rsi + 0x18]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000433db0: mov rdx, qword ptr [rsi + 1]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 1], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433d40: mov rdx, qword ptr [rsi + 2]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 2], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433cd0: mov rdx, qword ptr [rsi + 3]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 3], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433c60: mov rdx, qword ptr [rsi + 4]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443a73: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; lea rax, [rdi + 0xc]; ret; 
0x0000000000443403: mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000433bf0: mov rdx, qword ptr [rsi + 5]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 5], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443a93: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; lea rax, [rdi + 0xd]; ret; 
0x0000000000443413: mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x0000000000433b80: mov rdx, qword ptr [rsi + 6]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 6], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443ab3: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; lea rax, [rdi + 0xe]; ret; 
0x0000000000443423: mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x0000000000433b10: mov rdx, qword ptr [rsi + 7]; mov rcx, qword ptr [rsi]; mov qword ptr [rdi + 7], rdx; mov qword ptr [rdi], rcx; ret; 
0x000000000040f636: mov rdx, qword ptr [rsi + rdx*8]; jmp rdx; 
0x00000000004335c0: mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000433540: mov rdx, qword ptr [rsi - 0xb]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004334c0: mov rdx, qword ptr [rsi - 0xc]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000433430: mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004333a0: mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000433310: mov rdx, qword ptr [rsi - 0xf]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042db44: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e498: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e698: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e898: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db28: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e4b4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e6b4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e8b4: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db60: mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000433640: mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000454268: mov rdx, qword ptr [rsi]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x00000000004439f0: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x0000000000433e20: mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x0000000000485e15: mov rdx, qword ptr [rsp + 0x48]; sub rdx, qword ptr fs:[0x28]; jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485ee7: mov rdx, qword ptr [rsp + 0x48]; sub rdx, qword ptr fs:[0x28]; jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fb7: mov rdx, qword ptr [rsp + 0x48]; sub rdx, qword ptr fs:[0x28]; jne 0x85ff4; add rsp, 0x58; ret; 
0x00000000004860d5: mov rdx, qword ptr [rsp + 0x58]; sub rdx, qword ptr fs:[0x28]; jne 0x86197; add rsp, 0x68; ret; 
0x000000000045a0e2: mov rdx, qword ptr [rsp + 0x60]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000040a247: mov rdx, qword ptr [rsp + 8]; mov rax, qword ptr [rsp]; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000040d5aa: mov rdx, r10; mov rsi, r15; mov rdi, r14; mov byte ptr [rbp - 0x8ec], r9b; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x000000000046e37a: mov rdx, r10; mov rsi, rbx; mov rdi, qword ptr [rbp - 0x8b8]; mov byte ptr [rbp - 0x910], r8b; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x000000000048106a: mov rdx, r12; mov eax, 0x14; syscall; 
0x000000000040c402: mov rdx, r12; mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000048fafd: mov rdx, r13; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000044e287: mov rdx, r13; mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000044ecfc: mov rdx, r13; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x00000000004104fc: mov rdx, r13; mov rsi, r10; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000040d2e1: mov rdx, r13; mov rsi, r11; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000048fb44: mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000040d034: mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040e0a9: mov rdx, r13; mov rsi, r12; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040c018: mov rdx, r13; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000046e4ed: mov rdx, r13; mov rsi, r15; call qword ptr [rax + 0x38]; 
0x000000000044e13e: mov rdx, r13; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x000000000041ae59: mov rdx, r14; lea rsi, [rip + 0x7fb1d]; syscall; 
0x000000000040a128: mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x000000000040be90: mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000040a0a4: mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000416310: mov rdx, r14; mov rsi, r13; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000046fe00: mov rdx, r14; mov rsi, r15; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x000000000040f41d: mov rdx, r15; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x0000000000415ef3: mov rdx, r15; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x0000000000471106: mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x00000000004689cf: mov rdx, r8; mov rsi, r14; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x0000000000419b35: mov rdx, rax; mov rax, qword ptr [rax]; test rax, rax; jne 0x19b30; ret; 
0x000000000041ace6: mov rdx, rbp; lea rsi, [rip + 0x7fc90]; mov eax, 0xe; syscall; 
0x0000000000465c7f: mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000046557c: mov rdx, rbp; mov rsi, r12; call rbx; 
0x00000000004655a0: mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x00000000004655bb: mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000045734d: mov rdx, rbp; push 0; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x0000000000411e36: mov rdx, rbp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x11e90; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x00000000004126ff: mov rdx, rbp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x1274a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004185fc: mov rdx, rbp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x18670; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004186b2: mov rdx, rbp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x186e8; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418a2d: mov rdx, rbp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x18c30; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x00000000004191d2: mov rdx, rbp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x19210; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004736f2: mov rdx, rbp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x73740; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000474267: mov rdx, rbp; sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x742a0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x000000000046f929: mov rdx, rbx; mov rdi, r12; call qword ptr [rbp + 0x38]; 
0x0000000000454293: mov rdx, rdi; cmp r9, rsi; jge 0x54248; ret; 
0x0000000000466ccf: mov rdx, rdi; mov rdi, rax; cmp rdx, rcx; jae 0x66cbc; mov rax, r8; ret; 
0x0000000000447b24: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447cab: mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000479e90: mov rdx, rsp; mov eax, 0x10; syscall; 
0x000000000045277e: mov rdx, rsp; mov eax, 0xcc; syscall; 
0x0000000000450e98: mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000040a120: mov rsi, qword ptr [r13]; mov rdi, qword ptr [r12]; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x0000000000493dcd: mov rsi, qword ptr [r14]; call rax; 
0x00000000004515e0: mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; mov rdi, rbp; call rax; 
0x000000000048d35e: mov rsi, qword ptr [rax + 8]; call 0x54de0; nop word ptr [rax + rax]; ret; 
0x000000000048ac22: mov rsi, qword ptr [rax + 8]; lea rdx, [rax + 8]; cmp rcx, rsi; jb 0x8ac06; ret; 
0x0000000000451a88: mov rsi, qword ptr [rax]; mov rdi, r14; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x00000000004129d5: mov rsi, qword ptr [rbx + 0x10]; mov rdx, qword ptr [rbx + 0x40]; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x0000000000493d9a: mov rsi, qword ptr [rbx]; mov rdi, r15; mov rdx, qword ptr [r14]; mov rax, qword ptr [rsp]; mov dword ptr [rsp + 8], ecx; call rax; 
0x000000000048e1e0: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x903e0; mov qword ptr [rbx + 0x20], rax; pop rbx; ret; 
0x000000000048e09c: mov rsi, qword ptr [rdi + 8]; mov rdi, qword ptr [rdi]; call 0x90700; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x00000000004465a5: mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x0000000000436dda: mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x0000000000479cd3: mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004505bc: mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; mov eax, 1; syscall; 
0x000000000045051c: mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov edi, dword ptr [rsp + 8]; xor eax, eax; syscall; 
0x00000000004666bb: mov rsi, qword ptr [rsp + 0x10]; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x000000000041892d: mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000044e292: mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000401c8e: mov rsi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000457355: mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000044eb70: mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rcx, r12; call rbx; 
0x000000000044ecff: mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x000000000040f418: mov rsi, qword ptr [rsp + 0x38]; mov rdx, r15; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000045b703: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000459b27: mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000046021c: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea73: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045da61: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a0e7: mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000465c7a: mov rsi, qword ptr [rsp + 8]; mov rdx, rbp; mov rdi, r12; call rbx; 
0x000000000046f924: mov rsi, qword ptr [rsp + 8]; mov rdx, rbx; mov rdi, r12; call qword ptr [rbp + 0x38]; 
0x00000000004104ff: mov rsi, r10; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x000000000040d2e4: mov rsi, r11; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000046557f: mov rsi, r12; call rbx; 
0x000000000048fb47: mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000048fb03: mov rsi, r12; mov edi, ebp; call rax; 
0x00000000004655a3: mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000040d037: mov rsi, r12; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000040e0ac: mov rsi, r12; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000040be93: mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000040a0a7: mov rsi, r13; mov rdi, r12; call rax; 
0x000000000040c405: mov rsi, r13; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000041252b: mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x0000000000414679: mov rsi, r13; mov rdi, r15; call rbx; 
0x0000000000416313: mov rsi, r13; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x000000000041aea3: mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall; 
0x00000000004655be: mov rsi, r14; mov rdi, r12; call rbx; 
0x00000000004689d2: mov rsi, r14; mov rdi, r12; mov qword ptr [rbp - 0xe8], r8; call rax; 
0x0000000000415ef6: mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000046e4f0: mov rsi, r15; call qword ptr [rax + 0x38]; 
0x000000000046fe03: mov rsi, r15; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x000000000040d5ad: mov rsi, r15; mov rdi, r14; mov byte ptr [rbp - 0x8ec], r9b; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x000000000045421c: mov rsi, r8; cmp rcx, r9; ja 0x542a0; cmp r9, rdx; jbe 0x5424d; ret; 
0x0000000000475e71: mov rsi, r8; mov eax, 0xe; syscall; 
0x0000000000454290: mov rsi, r8; mov rdx, rdi; cmp r9, rsi; jge 0x54248; ret; 
0x0000000000450f1d: mov rsi, r9; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000040308c: mov rsi, rbp; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x00000000004503fc: mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000041ad36: mov rsi, rbp; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000450472: mov rsi, rbp; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000471109: mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000480e5e: mov rsi, rbp; syscall; 
0x000000000041494d: mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x000000000046e37d: mov rsi, rbx; mov rdi, qword ptr [rbp - 0x8b8]; mov byte ptr [rbp - 0x910], r8b; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x000000000040a2aa: mov rsi, rbx; mov rdi, rbp; mov rax, qword ptr [rsp]; mov r13, r15; add r15, r14; call rax; 
0x0000000000419bec: mov rsi, rcx; add rsi, rdx; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000419c26: mov rsi, rcx; add rsi, rdx; movups xmmword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x0000000000493c08: mov rsi, rdi; test rax, rax; je 0x93c20; mov edi, 1; jmp rax; 
0x00000000004651cb: mov rsp, r8; mov rbp, r9; nop; jmp rdx; 
0x0000000000484c4d: mov rsp, rbx; mov rbx, qword ptr [rsp]; add rsp, 0x30; ret; 
0x0000000000493719: mov rsp, rcx; pop rcx; jmp rcx; 
0x0000000000436dff: mov si, word ptr [rsi]; mov cx, word ptr [rcx - 2]; mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000436e09: mov word ptr [r9 - 2], cx; ret; 
0x000000000045d0d2: mov word ptr [rax + rbx*4], fs; add byte ptr [rax], al; add al, ch; ret; 
0x000000000045c0c6: mov word ptr [rax + rcx*4], fs; add byte ptr [rax], al; add byte ptr [rcx - 0x77], al; ret; 
0x0000000000447c30: mov word ptr [rax], di; mov byte ptr [rax + rdx - 1], dil; ret; 
0x0000000000447df0: mov word ptr [rax], di; mov byte ptr [rax + rdx - 1], dil; vzeroupper; ret; 
0x0000000000470650: mov word ptr [rbx], fs; add eax, 0x1bd00; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x00000000004906f0: mov word ptr [rbx], gs; cld; jmp qword ptr [rsi + 0x66]; 
0x00000000004505e0: mov word ptr [rcx + 2], es; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x000000000049079e: mov word ptr [rcx], es; add byte ptr [rax], al; add rsp, 0x78; pop rbp; pop r12; ret; 
0x0000000000443afc: mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x000000000044345c: mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000443c04: mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x0000000000443544: mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000434057: mov word ptr [rdi + 1], dx; mov word ptr [rdi], cx; ret; 
0x00000000004439c8: mov word ptr [rdi + 4], dx; lea rax, [rdi + 5]; ret; 
0x0000000000443398: mov word ptr [rdi + 4], dx; ret; 
0x0000000000443a1a: mov word ptr [rdi + 8], dx; lea rax, [rdi + 9]; ret; 
0x00000000004433da: mov word ptr [rdi + 8], dx; ret; 
0x0000000000447333: mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000446588: mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x000000000042e0fc: mov word ptr [rdi - 2], cx; ret; 
0x000000000042df14: mov word ptr [rdi - 2], dx; ret; 
0x000000000042e0f8: mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044c0f3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000443fd3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x000000000044cec3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000043fdb3: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000443993: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000443363: mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; ret; 
0x0000000000446296: mov word ptr [rdi], cx; mov word ptr [rsi - 2], cx; ret; 
0x000000000043405b: mov word ptr [rdi], cx; ret; 
0x0000000000443983: mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000443fc3: mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000004340c3: mov word ptr [rdi], dx; ret; 
0x000000000043fda3: mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000436e06: mov word ptr [rdi], si; mov word ptr [r9 - 2], cx; ret; 
0x0000000000442ed8: mov word ptr [rdx + 4], ax; lea rax, [rdx + 5]; ret; 
0x0000000000441718: mov word ptr [rdx + 4], ax; mov rax, rdi; ret; 
0x000000000041fd70: mov word ptr [rdx + r12*2], cx; mov qword ptr [rax + 8], 0; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000442e83: mov word ptr [rdx], ax; lea rax, [rdx + 1]; ret; 
0x0000000000442e93: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; lea rax, [rdx + 2]; ret; 
0x00000000004416e3: mov word ptr [rdx], ax; mov al, byte ptr [rcx + 2]; mov byte ptr [rdx + 2], al; mov rax, rdi; ret; 
0x00000000004416d3: mov word ptr [rdx], ax; mov rax, rdi; ret; 
0x0000000000423134: mov word ptr [rdx], es; add bh, dh; ret 0; 
0x0000000000493210: mov word ptr [rdx], gs; add byte ptr [rax], al; test rax, rax; cmovne rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000446299: mov word ptr [rsi - 2], cx; ret; 
0x0000000000473a17: movabs al, byte ptr [0x30788348000000]; je 0x73a28; ret; 
0x0000000000422124: movabs al, byte ptr [0x40000000c2f70002]; je 0x22101; ret; 
0x00000000004190f3: movabs al, byte ptr [0x48ffffffff000000]; mov dword ptr [rax + 0xa8], 0; ret; 
0x00000000004794f9: movabs al, byte ptr [0x5d5be0894c000000]; pop r12; ret; 
0x0000000000470258: movabs al, byte ptr [0x840fc08548000000]; ret 0x12; 
0x000000000046c651: movabs al, byte ptr [0x852c8d4c000000]; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x0000000000472916: movabs al, byte ptr [0xa0c48148000000]; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000412066: movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x00000000004293fc: movabs al, byte ptr [0xf10eb834900000c]; xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000422159: movabs byte ptr [0x123c058d4802000a], al; add byte ptr [rax], al; lea rdx, [rip + 0x2935]; cmovne rax, rdx; ret; 
0x0000000000401e20: movabs byte ptr [0x894800000204838d], al; add eax, 0xca552; pop rbx; ret; 
0x0000000000403f4a: movabs byte ptr [0x98c48148000000], al; add byte ptr [rax], al; ret; 
0x000000000041adaa: movabs byte ptr [0xee89e2894400034d], al; mov edi, eax; mov eax, 0xea; syscall; 
0x00000000004296fa: movabs byte ptr [0xf10eb8349000009], al; xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000041aa8a: movabs byte ptr [0xffffa22de80007fe], al; nop dword ptr [rax + rax]; ret; 
0x0000000000496e83: movabs dword ptr [0x841f0f2e66fffb], eax; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000476529: movabs dword ptr [0x89c058d4800000b], eax; add byte ptr [rax], al; cmove rax, rdx; ret; 
0x0000000000470250: movabs dword ptr [0xa024848b496c73d0], eax; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0x12; 
0x0000000000472b62: movabs dword ptr [0xc483480000441f0f], eax; or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x0000000000422237: movabs eax, dword ptr [0x3e1e158d4810000a]; add al, byte ptr [rax]; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x00000000004222f7: movabs eax, dword ptr [0x415d5be0894c0004]; pop rsp; ret; 
0x000000000041aaf5: movabs eax, dword ptr [0x841f0fffff]; add byte ptr [rax], al; ret; 
0x00000000004221d9: movabs eax, dword ptr [0xdc5c058d4802000a]; add dword ptr [rax], eax; lea rdx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x0000000000475d2c: movaps xmmword ptr [rsp + 0x20], xmm0; call 0x882c0; call rbx; 
0x000000000045406b: movd mm0, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x78287], xmm0; ret; 
0x000000000045411a: movd mm0, edi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000484648: movd mm0, esi; punpcklqdq xmm0, xmm2; movups xmmword ptr [rax + 0x308], xmm0; ret; 
0x000000000045406a: movd mm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x78287], xmm0; ret; 
0x0000000000454119: movd mm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000484647: movd mm0, rsi; punpcklqdq xmm0, xmm2; movups xmmword ptr [rax + 0x308], xmm0; ret; 
0x0000000000443af0: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000443450: movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000443b30: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000443490: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000443480: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000443b10: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000443470: movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000443bb0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000443510: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004434f0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000443b70: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004434b0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000443b90: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004434d0: movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004435f0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000443c50: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000443590: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000443c70: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004435b0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004435d0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000443ad0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000443ae0: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000443440: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000443430: movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000042b980: movdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; inc ax; jne 0x2b903; ret; 
0x00000000004435f4: movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000443c54: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000443594: movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000443c74: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004435b4: movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004435d4: movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000433aa1: movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000443cbd: movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004435fd: movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000434111: movdqu xmmword ptr [rdi + 0x11], xmm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004340a1: movdqu xmmword ptr [rdi + 0x12], xmm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000434031: movdqu xmmword ptr [rdi + 0x13], xmm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433fc1: movdqu xmmword ptr [rdi + 0x14], xmm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433f51: movdqu xmmword ptr [rdi + 0x15], xmm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433ee1: movdqu xmmword ptr [rdi + 0x16], xmm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e71: movdqu xmmword ptr [rdi + 0x17], xmm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e01: movdqu xmmword ptr [rdi + 0x18], xmm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433d91: movdqu xmmword ptr [rdi + 0x19], xmm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433d21: movdqu xmmword ptr [rdi + 0x1a], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433cb1: movdqu xmmword ptr [rdi + 0x1b], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433c41: movdqu xmmword ptr [rdi + 0x1c], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433bd1: movdqu xmmword ptr [rdi + 0x1d], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433b61: movdqu xmmword ptr [rdi + 0x1e], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433af1: movdqu xmmword ptr [rdi + 0x1f], xmm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433a97: movdqu xmmword ptr [rdi + 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000433d2f: movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433cbf: movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433c4f: movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433bdf: movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000443c5d: movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044359d: movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000433b6f: movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000443c7d: movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004435bd: movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000433aff: movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000443c9d: movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004435dd: movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000043411f: movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004340af: movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043403f: movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433fcf: movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433f5f: movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433eef: movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e7f: movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e0f: movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433d9f: movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043328b: movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x00000000004332fb: movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433a36: movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004339b6: movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433926: movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004338a6: movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433826: movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004337a6: movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433726: movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004336a6: movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433626: movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004335a6: movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433526: movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004334a6: movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433416: movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433386: movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004332f6: movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433281: movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000433a27: movdqu xmmword ptr [rdi - 0x21], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004339a7: movdqu xmmword ptr [rdi - 0x22], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433917: movdqu xmmword ptr [rdi - 0x23], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433897: movdqu xmmword ptr [rdi - 0x24], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433817: movdqu xmmword ptr [rdi - 0x25], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433797: movdqu xmmword ptr [rdi - 0x26], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433717: movdqu xmmword ptr [rdi - 0x27], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433697: movdqu xmmword ptr [rdi - 0x28], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433597: movdqu xmmword ptr [rdi - 0x2a], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433517: movdqu xmmword ptr [rdi - 0x2b], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433497: movdqu xmmword ptr [rdi - 0x2c], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433407: movdqu xmmword ptr [rdi - 0x2d], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433377: movdqu xmmword ptr [rdi - 0x2e], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004332e7: movdqu xmmword ptr [rdi - 0x2f], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433277: movdqu xmmword ptr [rdi - 0x30], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000443ad4: movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000443ae4: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000443444: movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000443b37: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000443b57: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000443497: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000443487: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000443b17: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000443477: movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000443bb8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000443bd8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000443518: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004434f8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000443c1b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044355b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000443c3b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044357b: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000443bfc: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044353c: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000443b78: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004434b8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000443b98: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004434d8: movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000443af8: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000443458: movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000443cb9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004435f9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000443c59: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000443599: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000443c79: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004435b9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000443c99: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004435d9: movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000433aaa: movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000433b04: movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004733cf: movhps qword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm1; ret; 
0x0000000000417fe8: movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000419b78: movntps xmmword ptr [rax + 0x18], xmm2; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000443af1: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000443451: movq mm0, qword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000443b31: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000443491: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000443481: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000443b11: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000443471: movq mm0, qword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000443bb1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000443511: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004434f1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000443b71: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004434b1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000443b91: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004434d1: movq mm0, qword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004435f1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000443c51: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000443591: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000443c71: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004435b1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004435d1: movq mm0, qword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000443ad1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000443ae1: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000443441: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000443431: movq mm0, qword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000042b981: movq mm1, qword ptr [rsi + rdx - 0x10]; pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; inc ax; jne 0x2b903; ret; 
0x00000000004435f5: movq mm2, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000443c55: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000443595: movq mm2, qword ptr [rsi + 0xd]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000443c75: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004435b5: movq mm2, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004435d5: movq mm2, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000433aa2: movq qword ptr [rdi + 0x10], mm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000443cbe: movq qword ptr [rdi + 0x10], mm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004435fe: movq qword ptr [rdi + 0x10], mm2; ret; 
0x0000000000434112: movq qword ptr [rdi + 0x11], mm0; lddqu xmm0, xmmword ptr [rsi + 1]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 1], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004340a2: movq qword ptr [rdi + 0x12], mm0; lddqu xmm0, xmmword ptr [rsi + 2]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 2], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000434032: movq qword ptr [rdi + 0x13], mm0; lddqu xmm0, xmmword ptr [rsi + 3]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 3], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433fc2: movq qword ptr [rdi + 0x14], mm0; lddqu xmm0, xmmword ptr [rsi + 4]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 4], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433f52: movq qword ptr [rdi + 0x15], mm0; lddqu xmm0, xmmword ptr [rsi + 5]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 5], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433ee2: movq qword ptr [rdi + 0x16], mm0; lddqu xmm0, xmmword ptr [rsi + 6]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 6], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e72: movq qword ptr [rdi + 0x17], mm0; lddqu xmm0, xmmword ptr [rsi + 7]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 7], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e02: movq qword ptr [rdi + 0x18], mm0; lddqu xmm0, xmmword ptr [rsi + 8]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 8], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433d92: movq qword ptr [rdi + 0x19], mm0; lddqu xmm0, xmmword ptr [rsi + 9]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 9], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433d22: movq qword ptr [rdi + 0x1a], mm0; lddqu xmm0, xmmword ptr [rsi + 0xa]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xa], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433cb2: movq qword ptr [rdi + 0x1b], mm0; lddqu xmm0, xmmword ptr [rsi + 0xb]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xb], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433c42: movq qword ptr [rdi + 0x1c], mm0; lddqu xmm0, xmmword ptr [rsi + 0xc]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xc], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433bd2: movq qword ptr [rdi + 0x1d], mm0; lddqu xmm0, xmmword ptr [rsi + 0xd]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433b62: movq qword ptr [rdi + 0x1e], mm0; lddqu xmm0, xmmword ptr [rsi + 0xe]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xe], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433af2: movq qword ptr [rdi + 0x1f], mm0; lddqu xmm0, xmmword ptr [rsi + 0xf]; lddqu xmm1, xmmword ptr [rsi]; movdqu xmmword ptr [rdi + 0xf], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433a98: movq qword ptr [rdi + 0x20], mm0; lddqu xmm0, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi + 0x10], xmm0; lddqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x0000000000433d30: movq qword ptr [rdi + 0xa], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433cc0: movq qword ptr [rdi + 0xb], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433c50: movq qword ptr [rdi + 0xc], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433be0: movq qword ptr [rdi + 0xd], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000443c5e: movq qword ptr [rdi + 0xd], mm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044359e: movq qword ptr [rdi + 0xd], mm2; ret; 
0x0000000000433b70: movq qword ptr [rdi + 0xe], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000443c7e: movq qword ptr [rdi + 0xe], mm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004435be: movq qword ptr [rdi + 0xe], mm2; ret; 
0x0000000000433b00: movq qword ptr [rdi + 0xf], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000443c9e: movq qword ptr [rdi + 0xf], mm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004435de: movq qword ptr [rdi + 0xf], mm2; ret; 
0x0000000000434120: movq qword ptr [rdi + 1], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x00000000004340b0: movq qword ptr [rdi + 2], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000434040: movq qword ptr [rdi + 3], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433fd0: movq qword ptr [rdi + 4], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433f60: movq qword ptr [rdi + 5], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433ef0: movq qword ptr [rdi + 6], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e80: movq qword ptr [rdi + 7], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433e10: movq qword ptr [rdi + 8], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433da0: movq qword ptr [rdi + 9], mm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000043328c: movq qword ptr [rdi - 0x10], mm0; ret; 
0x00000000004332fc: movq qword ptr [rdi - 0x10], mm1; ret; 
0x0000000000433a37: movq qword ptr [rdi - 0x11], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004339b7: movq qword ptr [rdi - 0x12], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433927: movq qword ptr [rdi - 0x13], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004338a7: movq qword ptr [rdi - 0x14], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433827: movq qword ptr [rdi - 0x15], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004337a7: movq qword ptr [rdi - 0x16], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433727: movq qword ptr [rdi - 0x17], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004336a7: movq qword ptr [rdi - 0x18], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433627: movq qword ptr [rdi - 0x19], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004335a7: movq qword ptr [rdi - 0x1a], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433527: movq qword ptr [rdi - 0x1b], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004334a7: movq qword ptr [rdi - 0x1c], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433417: movq qword ptr [rdi - 0x1d], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433387: movq qword ptr [rdi - 0x1e], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004332f7: movq qword ptr [rdi - 0x1f], mm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433282: movq qword ptr [rdi - 0x20], mm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000433a28: movq qword ptr [rdi - 0x21], mm0; lddqu xmm0, xmmword ptr [rsi - 0x11]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004339a8: movq qword ptr [rdi - 0x22], mm0; lddqu xmm0, xmmword ptr [rsi - 0x12]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433918: movq qword ptr [rdi - 0x23], mm0; lddqu xmm0, xmmword ptr [rsi - 0x13]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x13], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433898: movq qword ptr [rdi - 0x24], mm0; lddqu xmm0, xmmword ptr [rsi - 0x14]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x14], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433818: movq qword ptr [rdi - 0x25], mm0; lddqu xmm0, xmmword ptr [rsi - 0x15]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x15], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433798: movq qword ptr [rdi - 0x26], mm0; lddqu xmm0, xmmword ptr [rsi - 0x16]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x16], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433718: movq qword ptr [rdi - 0x27], mm0; lddqu xmm0, xmmword ptr [rsi - 0x17]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x17], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433698: movq qword ptr [rdi - 0x28], mm0; lddqu xmm0, xmmword ptr [rsi - 0x18]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x18], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433598: movq qword ptr [rdi - 0x2a], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1a]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1a], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433518: movq qword ptr [rdi - 0x2b], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1b]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1b], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433498: movq qword ptr [rdi - 0x2c], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1c]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1c], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433408: movq qword ptr [rdi - 0x2d], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1d]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1d], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433378: movq qword ptr [rdi - 0x2e], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1e]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1e], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x00000000004332e8: movq qword ptr [rdi - 0x2f], mm0; lddqu xmm0, xmmword ptr [rsi - 0x1f]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x1f], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000433278: movq qword ptr [rdi - 0x30], mm0; lddqu xmm0, xmmword ptr [rsi - 0x20]; movdqu xmmword ptr [rdi - 0x20], xmm0; lddqu xmm0, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000443ad5: movq qword ptr [rdi], mm0; lea rax, [rdi + 0xf]; ret; 
0x0000000000443ae5: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000443445: movq qword ptr [rdi], mm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x0000000000443b38: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; lea rax, [rdi + 0x13]; ret; 
0x0000000000443b58: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; lea rax, [rdi + 0x14]; ret; 
0x0000000000443498: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; mov byte ptr [rdi + 0x14], dh; ret; 
0x0000000000443488: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x0000000000443b18: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000443478: movq qword ptr [rdi], mm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x0000000000443bb9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; lea rax, [rdi + 0x17]; ret; 
0x0000000000443bd9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; lea rax, [rdi + 0x18]; ret; 
0x0000000000443519: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; mov byte ptr [rdi + 0x18], dh; ret; 
0x00000000004434f9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x0000000000443c1c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; lea rax, [rdi + 0x1a]; ret; 
0x000000000044355c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000443c3c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044357c: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000443bfd: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044353d: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000443b79: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; lea rax, [rdi + 0x15]; ret; 
0x00000000004434b9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x0000000000443b99: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x00000000004434d9: movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000443af9: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; lea rax, [rdi + 0x11]; ret; 
0x0000000000443459: movq qword ptr [rdi], mm0; mov word ptr [rdi + 0x10], cx; ret; 
0x0000000000443cba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004435fa: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000443c5a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x000000000044359a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000443c7a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; lea rax, [rdi + 0x1d]; ret; 
0x00000000004435ba: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x0000000000443c9a: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x00000000004435da: movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000433aab: movq qword ptr [rdi], mm0; ret; 
0x0000000000433b05: movq qword ptr [rdi], mm1; ret; 
0x0000000000454069: movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x78287], xmm0; ret; 
0x0000000000454118: movq xmm0, rdi; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000484646: movq xmm0, rsi; punpcklqdq xmm0, xmm2; movups xmmword ptr [rax + 0x308], xmm0; ret; 
0x00000000004464ee: movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004464e0: movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000446de5: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000044b52e: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000447600: movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000401e34: movsd dword ptr [rdi], dword ptr [rsi]; or al, 0; add byte ptr [rax], cl; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000401c87: movsd dword ptr [rdi], dword ptr [rsi]; or al, 0; mov edi, dword ptr [rsp + 0x14]; mov rsi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000401e2b: movsd dword ptr [rdi], dword ptr [rsi]; or al, 0; pop rbx; ret; 
0x000000000040de2e: movsd dword ptr [rdi], dword ptr [rsi]; push 0xffffff7; or dword ptr [rdx - 4], 0x69e9ffff; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x0000000000486982: movsd dword ptr [rdi], dword ptr [rsi]; ret; 
0x0000000000490dac: movss xmm0, dword ptr [rip + 0x239ec]; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x0000000000485456: movsx eax, cl; neg eax; ret; 
0x00000000004854d9: movsx eax, dl; sub eax, ecx; ret; 
0x0000000000469fde: movsx ecx, byte ptr [rsi]; cmp edi, ecx; ja 0x69fc8; mov eax, r8d; ret; 
0x000000000048105a: movsxd r12, r12d; mov edi, dword ptr [rbp - 0x450]; lea rsi, [rbp - 0x430]; mov rdx, r12; mov eax, 0x14; syscall; 
0x00000000004888b7: movsxd rax, dword ptr [rax]; adc dh, byte ptr [rbx - 0xc]; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000040c12b: movsxd rax, dword ptr [rax]; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000452b55: movsxd rax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000452b55: movsxd rax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x52b64; ret; 
0x00000000004460cf: movsxd rax, ecx; ret; 
0x000000000043c6db: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e338: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043db58: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043df48: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d768: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d23b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ca1b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043c1fb: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000043d907: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043cd5b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043c53b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043bd1b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043cefb: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000043ddf8: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d618: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e728: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c05b: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043c191: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ce91: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c9b1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dcf9: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e629: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d1d1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c4d1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043bff1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ccf1: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000043de49: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d669: movsxd rax, ecx; sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000041fbb9: movsxd rax, esi; or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000044617b: movsxd rbx, ebx; cmp cl, byte ptr [rax + 0x63]; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000446103: movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000410d3f: movsxd rdi, edi; lea rax, [rip + 0xb11b8]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x0000000000464fcc: movsxd rdi, edi; mov rax, qword ptr fs:[rax]; mov rax, qword ptr [rax + rdi*8 + 0x80]; ret; 
0x000000000044e947: movsxd rdi, esp; jmp qword ptr [rsi + 0xf]; 
0x0000000000412529: movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x000000000040eb30: movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [r11 + rdx*8]; jmp rdx; 
0x000000000040f93b: movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rcx + rdx*8]; jmp rdx; 
0x000000000040f672: movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rdi + rdx*8]; jmp rdx; 
0x000000000040f630: movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rsi + rdx*8]; jmp rdx; 
0x000000000044559c: movsxd rsi, esi; ret 0x7520; 
0x000000000048105b: movsxd rsp, esp; mov edi, dword ptr [rbp - 0x450]; lea rsi, [rbp - 0x430]; mov rdx, r12; mov eax, 0x14; syscall; 
0x0000000000490dad: movups xmm0, xmmword ptr [rip + 0x239ec]; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x000000000044646e: movups xmm1, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004468d0: movups xmm3, xmmword ptr [rsi + rdx - 0x10]; movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x00000000004465b6: movups xmm3, xmmword ptr [rsi + rdx - 0x20]; movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000048a34e: movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jne 0x8a2e0; ret; 
0x000000000048a349: movups xmmword ptr [r9 - 0x20], xmm0; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jne 0x8a2e0; ret; 
0x0000000000419c2c: movups xmmword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 8], rsi; xor eax, eax; ret; 
0x00000000004845ff: movups xmmword ptr [rax + 0x300], xmm0; ret; 
0x000000000048464f: movups xmmword ptr [rax + 0x308], xmm0; ret; 
0x0000000000473a7a: movups xmmword ptr [rax + 0x30], xmm0; mov dword ptr [rbx + 0x74], edx; pop rbx; pop rbp; pop r12; ret; 
0x000000000047422a: movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000447b6b: movups xmmword ptr [rax + rdx - 0x10], xmm0; ret; 
0x00000000004744c5: movups xmmword ptr [rax], xmm0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000447b68: movups xmmword ptr [rax], xmm0; movups xmmword ptr [rax + rdx - 0x10], xmm0; ret; 
0x0000000000473412: movups xmmword ptr [rax], xmm0; ret; 
0x00000000004733d7: movups xmmword ptr [rax], xmm1; ret; 
0x000000000048a0db: movups xmmword ptr [rbp + 0x18], xmm6; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000047229d: movups xmmword ptr [rbx + 0x18], xmm0; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000041a932: movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000414e42: movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x00000000004745c6: movups xmmword ptr [rbx + 0x28], xmm0; add rsp, 0x28; mov eax, r12d; pop rbx; pop r12; ret; 
0x000000000041a936: movups xmmword ptr [rbx + 0x28], xmm0; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000414e46: movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000454121: movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000418e32: movups xmmword ptr [rbx + 0x38], xmm0; mov dword ptr [rbx], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x0000000000418646: movups xmmword ptr [rbx + 0x38], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004598eb: movups xmmword ptr [rbx + 0x48], xmm0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418115: movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000414e3e: movups xmmword ptr [rbx + 8], xmm0; movups xmmword ptr [rbx + 0x18], xmm0; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000415245: movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x00000000004160c4: movups xmmword ptr [rbx + 8], xmm1; pop rbx; pop rbp; pop r12; ret; 
0x000000000047a49d: movups xmmword ptr [rbx], xmm0; pop rbx; ret; 
0x00000000004190d4: movups xmmword ptr [rcx + 0x10], xmm0; movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004190d8: movups xmmword ptr [rcx + 0x20], xmm0; movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004190dc: movups xmmword ptr [rcx + 0x30], xmm0; movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004190e0: movups xmmword ptr [rcx + 0x40], xmm0; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000048a34f: movups xmmword ptr [rcx - 0x10], xmm1; cmp r10, r11; jne 0x8a2e0; ret; 
0x000000000048a34a: movups xmmword ptr [rcx - 0x20], xmm0; movups xmmword ptr [r9 - 0x10], xmm1; cmp r10, r11; jne 0x8a2e0; ret; 
0x00000000004466cb: movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000447bdb: movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004465be: movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044672e: movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000447bdf: movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000446732: movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000447be3: movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x0000000000446736: movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000041901f: movups xmmword ptr [rdi + 0x58], xmm0; test rax, rax; je 0x19037; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000418ee9: movups xmmword ptr [rdi + 0xa0], xmm0; ret; 
0x000000000041802b: movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000417ff0: movups xmmword ptr [rdi + 8], xmm1; ret; 
0x0000000000447aec: movups xmmword ptr [rdi + rdx - 0x10], xmm0; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000446476: movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x00000000004465c2: movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x00000000004468e4: movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000044661b: movups xmmword ptr [rdi + rdx - 0x10], xmm4; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004468df: movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x00000000004465c7: movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x0000000000446620: movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004468da: movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000446625: movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004468d5: movups xmmword ptr [rdi + rdx - 0x40], xmm0; movups xmmword ptr [rdi + rdx - 0x30], xmm1; movups xmmword ptr [rdi + rdx - 0x20], xmm2; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x000000000044662a: movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x0000000000447b75: movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000447b71: movups xmmword ptr [rdi - 0x20], xmm0; movups xmmword ptr [rdi - 0x10], xmm0; ret; 
0x0000000000488463: movups xmmword ptr [rdi], xmm0; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x43e70], 0; ret; 
0x0000000000447bd8: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm0; movups xmmword ptr [rdi + 0x20], xmm0; movups xmmword ptr [rdi + 0x30], xmm0; ret; 
0x00000000004465bb: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm1; movups xmmword ptr [rdi + rdx - 0x10], xmm2; movups xmmword ptr [rdi + rdx - 0x20], xmm3; ret; 
0x000000000044672b: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + 0x10], xmm5; movups xmmword ptr [rdi + 0x20], xmm6; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x0000000000446473: movups xmmword ptr [rdi], xmm0; movups xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447af1: movups xmmword ptr [rdi], xmm0; ret; 
0x00000000004466c3: movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004466bf: movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000473b0a: movups xmmword ptr [rdx + 0x30], xmm0; mov dword ptr [rbx + 0x74], eax; add rsp, 0x10; mov eax, 1; pop rbx; ret; 
0x00000000004466bb: movups xmmword ptr [rdx + 0x30], xmm5; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000044673b: movups xmmword ptr [rdx + rdi - 0x10], xmm0; ret; 
0x000000000044673a: movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x00000000004466c8: movups xmmword ptr [rdx], xmm0; movups xmmword ptr [rcx], xmm0; ret; 
0x00000000004466c7: movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000454072: movups xmmword ptr [rip + 0x78287], xmm0; ret; 
0x0000000000454062: movups xmmword ptr [rip + 0x782a7], xmm0; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x78287], xmm0; ret; 
0x000000000048a1cf: movups xmmword ptr [rsi + 0x18], xmm4; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000048822f: movups xmmword ptr [rsi], xmm0; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x0000000000479d75: movzx eax, al; add rsp, 0x58; ret; 
0x000000000041a9eb: movzx eax, al; mov dword ptr [rdi + 0x10], eax; mov byte ptr fs:[0x972], 0; mov qword ptr fs:[0x2f8], rdi; ret; 
0x000000000042b0b4: movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000044b158: movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042b650: movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000044c9e9: movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; ret; 
0x0000000000426012: movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000044c8f7: movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; ret; 
0x0000000000425f2c: movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000042499d: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000425ec7: movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000044c899: movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x0000000000425ef0: movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000044c8c9: movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; ret; 
0x0000000000425f10: movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000044d350: movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; ret; 
0x000000000042a327: movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x000000000041923f: movzx eax, byte ptr [rax - 1]; and dword ptr [rbx], 0xffffffef; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000494101: movzx eax, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000418330: movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000419fd3: movzx eax, byte ptr [rax]; ret; 
0x000000000042b8d0: movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042b4c9: movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044b048: movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000042b4e9: movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042b90d: movzx eax, byte ptr [rdi + rax - 0x10]; sub eax, ecx; ret; 
0x000000000044b1b7: movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000042b68b: movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044b1a4: movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000042b66b: movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042b8ef: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042b4a8: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x00000000004483a8: movzx eax, byte ptr [rdi + rax]; sub eax, ecx; xtest; je 0x483b7; vzeroall; ret; 
0x000000000044b01b: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042b51f: movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c094: movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x0000000000429284: movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000044c70e: movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; ret; 
0x0000000000425d64: movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000044c71f: movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; ret; 
0x0000000000425d84: movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000044c730: movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; ret; 
0x0000000000425da4: movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000043e988: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x6174d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043d308: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x62dcd]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b758: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x6497d]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x00000000004395f8: movzx eax, byte ptr [rdi + rdx]; lea rdx, [rip + 0x66add]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000044ca13: movzx eax, byte ptr [rdi + rdx]; movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x4ca00; sub eax, ecx; ret; 
0x000000000044d508: movzx eax, byte ptr [rdi + rdx]; movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x4d4f0; sub eax, ecx; ret; 
0x0000000000424833: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000425d4a: movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x00000000004247c8: movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004455c0: movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000445620: movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000445610: movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000445600: movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000004455f0: movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000004455e0: movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000004455d0: movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000044597a: movzx eax, byte ptr [rdi - 1]; cmp al, byte ptr [rsi - 1]; jne 0x45af5; xor eax, eax; ret; 
0x00000000004455a7: movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000043e9a3: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x61733]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043d323: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x62db3]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000043b773: movzx eax, byte ptr [rdi]; lea rdx, [rip + 0x64963]; mov ecx, dword ptr [rdx + rcx*4]; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x000000000042b8b5: movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000042b091: movzx eax, byte ptr [rdi]; movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x00000000004247e3: movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042a503: movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x0000000000418290: movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000456b60: movzx eax, byte ptr [rip + 0x75a19]; pop rbx; and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x75a0c], al; ret; 
0x0000000000456b30: movzx eax, byte ptr [rip + 0x75a49]; and eax, 0xfffffff3; or eax, 4; mov byte ptr [rip + 0x75a3d], al; pop rbx; ret; 
0x0000000000456ad0: movzx eax, byte ptr [rip + 0x75aa9]; pop rbx; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x75a9c], al; ret; 
0x0000000000456aa0: movzx eax, byte ptr [rip + 0x75ad9]; and eax, 0xfffffffc; or eax, 1; mov byte ptr [rip + 0x75acd], al; pop rbx; ret; 
0x000000000044de06: movzx eax, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x4ddf8; ret; 
0x0000000000401a97: movzx eax, cl; mov rax, r8; pop rbx; ret; 
0x0000000000447bf1: movzx eax, dh; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447b21: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447ca8: movzx eax, dh; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000459965: movzx eax, dh; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000447bf0: movzx eax, sil; mov rcx, rdx; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447b20: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447ca7: movzx eax, sil; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000459964: movzx eax, sil; test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000042b8cb: movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; ret; 
0x000000000042b4c4: movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044b043: movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; ret; 
0x000000000042b4e4: movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000044b153: movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042b64b: movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042b908: movzx ecx, byte ptr [rsi + rax - 0x10]; movzx eax, byte ptr [rdi + rax - 0x10]; sub eax, ecx; ret; 
0x000000000044b1b2: movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000042b686: movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044b19f: movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000042b666: movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000042b8eb: movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042b4a4: movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x000000000044b020: movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; ret; 
0x000000000042b524: movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000042c098: movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x0000000000445bfa: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45bf0; ret; 
0x0000000000445caa: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45ca0; ret; 
0x0000000000445f6a: movzx ecx, byte ptr [rsi + rdx + 3]; test cl, cl; jne 0x45f60; sub rax, 1; ret; 
0x00000000004247c4: movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000424a86: movzx ecx, byte ptr [rsi + rdx]; test al, al; jne 0x24a70; xor eax, eax; sub eax, ecx; ret; 
0x0000000000426047: movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x26030; sub eax, ecx; vzeroupper; ret; 
0x000000000042a4dc: movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x2a4c0; sub eax, ecx; vzeroupper; ret; 
0x000000000044ca17: movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x4ca00; sub eax, ecx; ret; 
0x000000000044d50c: movzx ecx, byte ptr [rsi + rdx]; test eax, eax; jne 0x4d4f0; sub eax, ecx; ret; 
0x00000000004247e0: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x000000000042a500: movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; vzeroupper; ret; 
0x000000000042b8b8: movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x000000000044c0f0: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000443fd0: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x000000000044cec0: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; ret; 
0x000000000043fdb0: movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000048e429: movzx edi, bpl; pop rbx; pop rbp; jmp rdx; 
0x000000000042b707: movzx edi, byte ptr [rdi + rdx - 1]; movzx esi, byte ptr [rsi + rdx - 1]; or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x000000000048e42a: movzx edi, ch; pop rbx; pop rbp; jmp rdx; 
0x00000000004707b2: movzx edx, byte ptr [rax + rdx]; lea rbx, [rip + 0x52423]; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x0000000000470845: movzx edx, byte ptr [rax + rdx]; lea rbx, [rip + 0x52490]; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000040eb32: movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [r11 + rdx*8]; jmp rdx; 
0x000000000040f93d: movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rcx + rdx*8]; jmp rdx; 
0x000000000040f674: movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rdi + rdx*8]; jmp rdx; 
0x000000000040f632: movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rsi + rdx*8]; jmp rdx; 
0x0000000000409f98: movzx edx, byte ptr [rcx]; test dl, dl; jne 0x9f78; ret; 
0x000000000044c9ee: movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; ret; 
0x0000000000426017: movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000044c8fc: movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; ret; 
0x0000000000425f31: movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x00000000004249a1: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000425ecb: movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000044c89e: movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x0000000000425ef5: movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000044c8ce: movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; ret; 
0x0000000000425f15: movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000044d354: movzx edx, byte ptr [rdx + rdi]; sub eax, edx; ret; 
0x000000000042a32b: movzx edx, byte ptr [rdx + rdi]; sub eax, edx; vzeroupper; ret; 
0x0000000000445e1a: movzx edx, byte ptr [rsi + rax + 3]; test dl, dl; jne 0x45e10; lea rax, [rcx - 1]; ret; 
0x000000000043d53f: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x62b96]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043b9ff: movzx edx, byte ptr [rsi + rcx]; lea rcx, [rip + 0x646d6]; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000429288: movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x000000000044c713: movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; ret; 
0x0000000000425d69: movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000044c724: movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; ret; 
0x0000000000425d89: movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000044c735: movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; ret; 
0x0000000000425da9: movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x0000000000424837: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000425d4e: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x0000000000449462: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; xtest; je 0x49471; vzeroall; ret; 
0x000000000044a3ee: movzx edx, byte ptr [rsi + rdx]; sub eax, edx; xtest; je 0x4a3fd; vzeroall; ret; 
0x000000000042a0b3: movzx edx, byte ptr [rsi + rdx]; test r8d, r8d; je 0x2a0bd; xchg eax, edx; sub eax, edx; ret; 
0x00000000004455c4: movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x0000000000445624: movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x0000000000445614: movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x0000000000445604: movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000004455f4: movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000004455e4: movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000004455d4: movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x0000000000433a50: movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x00000000004455ab: movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000434130: movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x000000000042b094: movzx edx, byte ptr [rsi]; sub eax, edx; ret; 
0x000000000042b0ba: movzx edx, dl; sub eax, edx; ret; 
0x00000000004339d0: movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044c0e0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x0000000000443fc0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; vzeroupper; ret; 
0x00000000004340c0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000043fda0: movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000418756: movzx esi, byte ptr [r14]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000042b70c: movzx esi, byte ptr [rsi + rdx - 1]; or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x0000000000418757: movzx esi, byte ptr [rsi]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000044732e: movzx esi, word ptr [rsi + rdx + 2]; mov word ptr [rdi + rdx + 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000446583: movzx esi, word ptr [rsi + rdx - 2]; mov word ptr [rdi + rdx - 2], si; mov byte ptr [rdi], cl; ret; 
0x0000000000494100: movzx r8d, byte ptr [rax]; add rsp, 0x18; pop rbx; pop rbp; mov eax, r8d; ret; 
0x000000000044de05: movzx r8d, byte ptr [rsi + rdx]; mov r9, rax; mov eax, dword ptr [rcx + rax*4]; sub eax, dword ptr [rcx + r8*4]; je 0x4ddf8; ret; 
0x0000000000401a96: movzx r8d, cl; mov rax, r8; pop rbx; ret; 
0x0000000000476f07: mul byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000004749da: neg eax; add rsp, 0x20; pop rbx; pop r12; pop r13; ret; 
0x000000000045029b: neg eax; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x000000000044faaf: neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000450557: neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x000000000047492a: neg eax; ret; 
0x000000000048d8d7: neg eax; sbb eax, eax; add rsp, 8; ret; 
0x0000000000480a49: neg eax; test dil, dil; cmove r8, rax; mov rax, r8; ret; 
0x0000000000480a48: neg rax; test dil, dil; cmove r8, rax; mov rax, r8; ret; 
0x0000000000478358: nop dword ptr [rax + rax]; add rax, 3; ret; 
0x0000000000418e5b: nop dword ptr [rax + rax]; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000472b63: nop dword ptr [rax + rax]; add rsp, 8; mov eax, 0xffffffff; pop rbx; pop rbp; ret; 
0x0000000000457513: nop dword ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048066b: nop dword ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000042a8e8: nop dword ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000403173: nop dword ptr [rax + rax]; call qword ptr [rbx + 0x10]; 
0x0000000000450278: nop dword ptr [rax + rax]; endbr64; mov eax, 0x18; syscall; 
0x0000000000418678: nop dword ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000456cab: nop dword ptr [rax + rax]; endbr64; mov eax, dword ptr [rip + 0x75926]; test eax, eax; je 0x56cc0; ret; 
0x0000000000464fdb: nop dword ptr [rax + rax]; endbr64; mov rax, -0x10; add rax, qword ptr fs:[0]; ret; 
0x0000000000419e48: nop dword ptr [rax + rax]; endbr64; mov rax, -1; ret; 
0x0000000000419ec8: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x0000000000493198: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047478b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x52313], eax; ret; 
0x000000000041b76b: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; nop; mov qword ptr [rip + 0xaa001], rax; ret; 
0x0000000000458228: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0x743c5]; ret; 
0x0000000000419ea8: nop dword ptr [rax + rax]; endbr64; mov rax, qword ptr [rip + 0xab2a5]; ret; 
0x00000000004016b8: nop dword ptr [rax + rax]; endbr64; ret; 
0x0000000000419108: nop dword ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x0000000000444348: nop dword ptr [rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000444358: nop dword ptr [rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000444368: nop dword ptr [rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000444378: nop dword ptr [rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000444388: nop dword ptr [rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x00000000004442d8: nop dword ptr [rax + rax]; lea rax, [rdi + 2]; ret; 
0x00000000004442e8: nop dword ptr [rax + rax]; lea rax, [rdi + 3]; ret; 
0x00000000004442f8: nop dword ptr [rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000444308: nop dword ptr [rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000444318: nop dword ptr [rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000444328: nop dword ptr [rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000444338: nop dword ptr [rax + rax]; lea rax, [rdi + 9]; ret; 
0x000000000042211b: nop dword ptr [rax + rax]; lea rax, [rip + 0x2a099]; test edx, 0x40000000; je 0x22101; ret; 
0x0000000000466633: nop dword ptr [rax + rax]; lea rdi, [rip + 0x661c1]; call 0x1ab10; xor eax, eax; add rsp, 8; ret; 
0x0000000000450e03: nop dword ptr [rax + rax]; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000443968: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000443338: nop dword ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000044398b: nop dword ptr [rax + rax]; mov cx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], dh; lea rax, [rdi + 2]; ret; 
0x0000000000474ad3: nop dword ptr [rax + rax]; mov eax, 0x16; ret; 
0x000000000041ad9b: nop dword ptr [rax + rax]; mov eax, 0xba; syscall; 
0x000000000041379b: nop dword ptr [rax + rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000414598: nop dword ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000004747db: nop dword ptr [rax + rax]; mov eax, dword ptr [rip + 0x57c02]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x539fe], eax; ret; 
0x000000000044fb18: nop dword ptr [rax + rax]; mov eax, edx; syscall; 
0x000000000044336b: nop dword ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000447c1b: nop dword ptr [rax + rax]; mov qword ptr [rax], rdi; mov qword ptr [rax + rdx - 8], rdi; ret; 
0x000000000044fac3: nop dword ptr [rax + rax]; mov rax, -0x48; mov dword ptr fs:[rax], 0x26; mov eax, 0xffffffff; ret; 
0x000000000045104b: nop dword ptr [rax + rax]; mov rax, -0x48; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x000000000041ebcb: nop dword ptr [rax + rax]; mov rax, -0x48; mov dword ptr fs:[rax], 0xc; xor eax, eax; ret; 
0x0000000000477738: nop dword ptr [rax + rax]; mov rax, -1; ret; 
0x0000000000478388: nop dword ptr [rax + rax]; mov rax, 2; ret; 
0x0000000000478398: nop dword ptr [rax + rax]; mov rax, 3; ret; 
0x00000000004783a8: nop dword ptr [rax + rax]; mov rax, 4; ret; 
0x00000000004783b8: nop dword ptr [rax + rax]; mov rax, 5; ret; 
0x00000000004783c8: nop dword ptr [rax + rax]; mov rax, 6; ret; 
0x00000000004783d8: nop dword ptr [rax + rax]; mov rax, 7; ret; 
0x0000000000477728: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x54e39]; ret; 
0x0000000000477718: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x54e41]; ret; 
0x0000000000477708: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x54e49]; ret; 
0x00000000004776f8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x54e51]; ret; 
0x00000000004776e8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x54e59]; ret; 
0x00000000004776d8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x54e61]; ret; 
0x00000000004776c8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x54e69]; ret; 
0x00000000004776b8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x54e71]; ret; 
0x00000000004776a8: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x54e79]; ret; 
0x0000000000477698: nop dword ptr [rax + rax]; mov rax, qword ptr [rip + 0x54e81]; ret; 
0x00000000004543db: nop dword ptr [rax + rax]; mov rax, r10; mov rcx, rdi; cmp r9, rax; jge 0x54378; ret; 
0x000000000048e7e8: nop dword ptr [rax + rax]; mov rax, r8; ret; 
0x000000000044b2bb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004439fb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov byte ptr [rdi + 8], dh; mov qword ptr [rdi], rcx; lea rax, [rdi + 8]; ret; 
0x00000000004433cb: nop dword ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x000000000045054b: nop dword ptr [rax + rax]; mov rdx, -0x48; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x0000000000493f3b: nop dword ptr [rax + rax]; mov rdx, qword ptr [rdx]; mov qword ptr [r8], rdx; ret; 
0x00000000004433ab: nop dword ptr [rax + rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000045428b: nop dword ptr [rax + rax]; mov rsi, r8; mov rdx, rdi; cmp r9, rsi; jge 0x54248; ret; 
0x0000000000447deb: nop dword ptr [rax + rax]; mov word ptr [rax], di; mov byte ptr [rax + rdx - 1], dil; vzeroupper; ret; 
0x000000000041832b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044561b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xa]; movzx edx, byte ptr [rsi - 0xa]; sub eax, edx; ret; 
0x000000000044560b: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xb]; movzx edx, byte ptr [rsi - 0xb]; sub eax, edx; ret; 
0x00000000004455fb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xc]; movzx edx, byte ptr [rsi - 0xc]; sub eax, edx; ret; 
0x00000000004455eb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xd]; movzx edx, byte ptr [rsi - 0xd]; sub eax, edx; ret; 
0x00000000004455db: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xe]; movzx edx, byte ptr [rsi - 0xe]; sub eax, edx; ret; 
0x00000000004455cb: nop dword ptr [rax + rax]; movzx eax, byte ptr [rdi - 0xf]; movzx edx, byte ptr [rsi - 0xf]; sub eax, edx; ret; 
0x000000000044c0eb: nop dword ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x000000000043fdab: nop dword ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000474ac8: nop dword ptr [rax + rax]; neg eax; ret; 
0x0000000000465224: nop dword ptr [rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000042b774: nop dword ptr [rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004442c7: nop dword ptr [rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x00000000004442b7: nop dword ptr [rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000478377: nop dword ptr [rax + rax]; nop; mov rax, 1; ret; 
0x0000000000477e36: nop dword ptr [rax + rax]; nop; xor eax, eax; ret; 
0x000000000041524b: nop dword ptr [rax + rax]; or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000401773: nop dword ptr [rax + rax]; ret; 
0x0000000000419b83: nop dword ptr [rax + rax]; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000474353: nop dword ptr [rax + rax]; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x00000000004192c3: nop dword ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x000000000044c4e8: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044ae1b: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000044ac8b: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044ac9b: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044acab: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000478ea8: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000478ebb: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000478ecb: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000478edb: nop dword ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000044cfbb: nop dword ptr [rax + rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000044cfcb: nop dword ptr [rax + rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x000000000044cfdb: nop dword ptr [rax + rax]; tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000042ae3b: nop dword ptr [rax + rax]; tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044733b: nop dword ptr [rax + rax]; vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000447fab: nop dword ptr [rax + rax]; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044baa8: nop dword ptr [rax + rax]; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x0000000000447eab: nop dword ptr [rax + rax]; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x000000000041414b: nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000042a4eb: nop dword ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x00000000004440f8: nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x00000000004655b4: nop dword ptr [rax]; add r14, r15; mov rdx, rbp; mov rsi, r14; mov rdi, r12; call rbx; 
0x000000000047834c: nop dword ptr [rax]; add rax, 1; ret; 
0x000000000048fb3d: nop dword ptr [rax]; add rbx, 8; mov rdx, r13; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x000000000048074d: nop dword ptr [rax]; add rsp, 8; mov rax, rbp; pop rbx; pop rbp; ret; 
0x0000000000495834: nop dword ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000480874: nop dword ptr [rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000042a8d9: nop dword ptr [rax]; bsf eax, eax; add rax, rdi; ret; 
0x000000000042a8f9: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi + 0x20]; ret; 
0x000000000042a8cc: nop dword ptr [rax]; bsf eax, eax; lea rax, [rax + rdi - 0x10]; ret; 
0x000000000042a91c: nop dword ptr [rax]; bsf eax, eax; sub rdx, rax; jbe 0x2a950; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042c08d: nop dword ptr [rax]; bsf rcx, rcx; movzx eax, byte ptr [rdi + rcx]; movzx ecx, byte ptr [rsi + rcx]; sub eax, ecx; ret; 
0x000000000044d6cc: nop dword ptr [rax]; bts rax, rsi; tzcnt eax, eax; ret; 
0x000000000043f82d: nop dword ptr [rax]; bts rax, rsi; tzcnt eax, eax; vzeroupper; ret; 
0x000000000048807d: nop dword ptr [rax]; bts rdx, 0x34; mov eax, 1; mov qword ptr [rsi], rdx; ret; 
0x000000000040aad1: nop dword ptr [rax]; call qword ptr [rbx]; 
0x000000000048c03c: nop dword ptr [rax]; call rax; 
0x000000000047a6f4: nop dword ptr [rax]; cmp byte ptr [r8 + 8], 0x2f; jne 0x7a6bf; leave; mov eax, 1; ret; 
0x00000000004185bd: nop dword ptr [rax]; endbr64; cmp qword ptr [rdi + 0x38], 0; je 0x185d0; ret; 
0x000000000048e3ac: nop dword ptr [rax]; endbr64; mov eax, 0x26; syscall; 
0x0000000000452b4c: nop dword ptr [rax]; endbr64; mov eax, 0x63; syscall; 
0x0000000000479a8c: nop dword ptr [rax]; endbr64; mov eax, 0x68; syscall; 
0x0000000000479a8c: nop dword ptr [rax]; endbr64; mov eax, 0x68; syscall; ret; 
0x0000000000479a7c: nop dword ptr [rax]; endbr64; mov eax, 0x6b; syscall; 
0x0000000000479a7c: nop dword ptr [rax]; endbr64; mov eax, 0x6b; syscall; ret; 
0x0000000000479a9c: nop dword ptr [rax]; endbr64; mov eax, 0x6c; syscall; 
0x0000000000479a9c: nop dword ptr [rax]; endbr64; mov eax, 0x6c; syscall; ret; 
0x0000000000479aac: nop dword ptr [rax]; endbr64; mov eax, 0x8f; syscall; 
0x000000000045102c: nop dword ptr [rax]; endbr64; mov eax, 0xc; syscall; 
0x0000000000419e5c: nop dword ptr [rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000450fbc: nop dword ptr [rax]; endbr64; mov eax, 1; syscall; 
0x000000000045061d: nop dword ptr [rax]; endbr64; mov eax, 8; syscall; 
0x0000000000419b4c: nop dword ptr [rax]; endbr64; mov eax, dword ptr [rdi + 0x10]; sub eax, dword ptr [rsi + 0x10]; ret; 
0x00000000004931cc: nop dword ptr [rax]; endbr64; mov qword ptr [rdi + 0x98], rsi; ret; 
0x0000000000419189: nop dword ptr [rax]; endbr64; mov rax, -1; ret; 
0x0000000000485c29: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rax + 8]; sub rax, qword ptr fs:[0]; ret; 
0x000000000049313c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0x90]; ret; 
0x00000000004931dc: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xa0]; ret; 
0x000000000049323c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xa8]; ret; 
0x000000000049322d: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xb0]; ret; 
0x00000000004931ec: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rdi + 0xb8]; ret; 
0x000000000045823c: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x743bd]; ret; 
0x00000000004510fc: nop dword ptr [rax]; endbr64; mov rax, qword ptr [rip + 0x7506d]; test rax, rax; je 0x51111; ret; 
0x0000000000419ed9: nop dword ptr [rax]; endbr64; mov rax, rdi; ret; 
0x00000000004532cc: nop dword ptr [rax]; endbr64; ret; 
0x0000000000447b0d: nop dword ptr [rax]; endbr64; test rdx, rdx; jne 0x47b1d; mov rax, rdi; ret; 
0x000000000043f42c: nop dword ptr [rax]; endbr64; test rsi, rsi; jne 0x3f43d; xor rax, rax; ret; 
0x0000000000419e7c: nop dword ptr [rax]; endbr64; xor eax, eax; ret; 
0x0000000000423389: nop dword ptr [rax]; lea rax, [rip + 0x290c9]; test edx, 0x40000000; je 0x23367; ret; 
0x0000000000422369: nop dword ptr [rax]; lea rax, [rip + 0x2ac09]; test edx, 0x40000000; je 0x22347; ret; 
0x00000000004223d9: nop dword ptr [rax]; lea rax, [rip + 0x2b299]; test edx, 0x40000000; je 0x223b7; ret; 
0x0000000000476539: nop dword ptr [rax]; lea rax, [rip + 0xf29]; test edx, 0x40000000; je 0x76517; ret; 
0x00000000004416bd: nop dword ptr [rax]; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; mov rax, rdi; ret; 
0x0000000000447ddc: nop dword ptr [rax]; mov dword ptr [rax], edi; mov dword ptr [rax + rdx - 4], edi; vzeroupper; ret; 
0x000000000048d371: nop dword ptr [rax]; mov dword ptr fs:[0x48], r8d; ret; 
0x000000000047492d: nop dword ptr [rax]; mov eax, 0x16; ret; 
0x000000000044fa91: nop dword ptr [rax]; mov eax, 0xe4; syscall; 
0x0000000000442eac: nop dword ptr [rax]; mov eax, dword ptr [rcx]; mov dword ptr [rdx], eax; lea rax, [rdx + 3]; ret; 
0x000000000047440c: nop dword ptr [rax]; mov eax, dword ptr [rdi + 0x10]; sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000473e45: nop dword ptr [rax]; mov eax, dword ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044339d: nop dword ptr [rax]; mov ecx, dword ptr [rsi]; mov edx, dword ptr [rsi + 3]; mov dword ptr [rdi], ecx; mov dword ptr [rdi + 3], edx; ret; 
0x0000000000414944: nop dword ptr [rax]; mov edx, 1; mov rsi, rbx; mov edi, 2; mov eax, r9d; syscall; 
0x00000000004338bc: nop dword ptr [rax]; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e4cc: nop dword ptr [rax]; mov edx, dword ptr [rsi - 5]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e6cc: nop dword ptr [rax]; mov edx, dword ptr [rsi - 6]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e8cc: nop dword ptr [rax]; mov edx, dword ptr [rsi - 7]; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000443fed: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; vzeroupper; ret; 
0x0000000000433fd9: nop dword ptr [rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000489dcd: nop dword ptr [rax]; mov qword ptr [rsi + 0x18], 0; ret; 
0x000000000048e36c: nop dword ptr [rax]; mov qword ptr fs:[rbx], 0; pop rbx; ret; 
0x000000000045034c: nop dword ptr [rax]; mov rax, -0x48; mov dword ptr fs:[rax], 9; mov eax, 0xffffffff; ret; 
0x000000000046522c: nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000048dcfd: nop dword ptr [rax]; mov rax, qword ptr [rbx + 0x10]; mov qword ptr [rax], rdi; pop rbx; ret; 
0x0000000000442dfd: nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; lea rax, [rdx + 7]; ret; 
0x000000000044164d: nop dword ptr [rax]; mov rax, qword ptr [rcx]; mov qword ptr [rdx], rax; mov rax, rdi; ret; 
0x0000000000477684: nop dword ptr [rax]; mov rax, qword ptr [rip + 0x54ee9]; ret; 
0x000000000040a1cd: nop dword ptr [rax]; mov rax, qword ptr [rsp]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000044659d: nop dword ptr [rax]; mov rcx, qword ptr [rsi + rdx - 8]; mov rsi, qword ptr [rsi]; mov qword ptr [rdi], rsi; mov qword ptr [rdi + rdx - 8], rcx; ret; 
0x00000000004433ed: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 8], edx; ret; 
0x000000000044ceed: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov r9, qword ptr [rsi + rdx - 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x00000000004433fd: nop dword ptr [rax]; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 5]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 5], rdx; ret; 
0x0000000000409fdc: nop dword ptr [rax]; mov rdx, -0x48; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; pop rbp; ret; 
0x0000000000450d84: nop dword ptr [rax]; mov rdx, -0x48; neg eax; mov dword ptr fs:[rdx], eax; mov eax, 0xffffffff; ret; 
0x0000000000450634: nop dword ptr [rax]; mov rdx, -0x48; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000004543a9: nop dword ptr [rax]; mov rdx, qword ptr [r10]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x00000000004335bc: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xa]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xa], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000043342c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xd]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000043339c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 0xe]; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042db5c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 8]; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043363c: nop dword ptr [rax]; mov rdx, qword ptr [rsi - 9]; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 9], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000454261: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov byte ptr [rax + 0x50], 1; mov qword ptr [rax + 0x48], rdx; ret; 
0x0000000000433e19: nop dword ptr [rax]; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; ret; 
0x000000000040c015: nop dword ptr [rax]; mov rdx, r13; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x000000000040be89: nop dword ptr [rax]; mov rdx, r14; mov rsi, r12; mov rdi, rbp; call qword ptr [rcx + 0x38]; 
0x0000000000450e91: nop dword ptr [rax]; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004515d9: nop dword ptr [rax]; mov rsi, qword ptr [r14]; mov rax, qword ptr [rsp + 0x10]; mov rdi, rbp; call rax; 
0x000000000044344c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov cx, word ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov word ptr [rdi + 0x10], cx; ret; 
0x000000000044346c: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004434ec: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0x10], rcx; ret; 
0x00000000004434ad: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xe], rcx; ret; 
0x00000000004434cc: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; mov rcx, qword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; mov qword ptr [rdi + 0xf], rcx; ret; 
0x0000000000443add: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; lea rax, [rdi + 0x10]; ret; 
0x0000000000443439: nop dword ptr [rax]; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; mov byte ptr [rdi + 0x10], dh; ret; 
0x00000000004455bd: nop dword ptr [rax]; movzx eax, byte ptr [rdi - 0x10]; movzx edx, byte ptr [rsi - 0x10]; sub eax, edx; ret; 
0x00000000004247dd: nop dword ptr [rax]; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000433a4c: nop dword ptr [rax]; movzx edx, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x0000000000434129: nop dword ptr [rax]; movzx edx, byte ptr [rsi]; mov byte ptr [rdi], dl; ret; 
0x00000000004339cc: nop dword ptr [rax]; movzx edx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000044c0dd: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; lea rax, [rdi + 1]; ret; 
0x00000000004340b9: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x000000000043fd99: nop dword ptr [rax]; movzx edx, word ptr [rsi]; mov word ptr [rdi], dx; vzeroupper; ret; 
0x0000000000418fb4: nop dword ptr [rax]; or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x18fb8; ret; 
0x000000000044e411: nop dword ptr [rax]; pop rbp; ret; 
0x0000000000488b89: nop dword ptr [rax]; pop rbx; pop rbp; pop r12; ret; 
0x000000000041bb49: nop dword ptr [rax]; ret; 
0x00000000004806a9: nop dword ptr [rax]; test rax, rax; je 0x806a4; xor eax, eax; ret; 
0x000000000043fa9d: nop dword ptr [rax]; tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000044c25c: nop dword ptr [rax]; tzcnt eax, eax; cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x4c231; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c3dc: nop dword ptr [rax]; tzcnt eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x4c3d9; lea rax, [rdi + rax]; ret; 
0x000000000044f0ed: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x000000000044f0cd: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x000000000044f7d9: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x000000000044f7c9: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000044d709: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000044d6f9: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000044d6ec: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x61]; ret; 
0x000000000044d6d9: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x000000000044f7e9: nop dword ptr [rax]; tzcnt eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000044c669: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000047904c: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000044aeac: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044db7d: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0xa0]; ret; 
0x000000000044db8d: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0xc0]; ret; 
0x000000000044bd4d: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax - 0x60]; vzeroupper; ret; 
0x00000000004790d9: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x000000000047936d: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0xa0]; ret; 
0x000000000047937d: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0xc0]; ret; 
0x000000000047903c: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000044c65d: nop dword ptr [rax]; tzcnt eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000043f86d: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x000000000043f85d: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x000000000043f83c: nop dword ptr [rax]; tzcnt eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000000043f78d: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000044d8bc: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d8cd: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044f9dc: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044f9bd: nop dword ptr [rax]; tzcnt eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000041fa11: nop dword ptr [rax]; xor eax, eax; add rsp, 8; ret; 
0x000000000041c29c: nop dword ptr [rax]; xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x0000000000409fa1: nop dword ptr [rax]; xor eax, eax; ret; 
0x000000000047728d: nop dword ptr [rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000401cb9: nop dword ptr [rax]; xor edi, edi; mov eax, edx; syscall; 
0x0000000000478357: nop dword ptr cs:[rax + rax]; add rax, 3; ret; 
0x0000000000450277: nop dword ptr cs:[rax + rax]; endbr64; mov eax, 0x18; syscall; 
0x0000000000493197: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000458227: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x743c5]; ret; 
0x0000000000419ea7: nop dword ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0xab2a5]; ret; 
0x00000000004016b7: nop dword ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000444347: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000444357: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000444367: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000444377: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000444387: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x00000000004442d7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x00000000004442e7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x00000000004442f7: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000444307: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000444317: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000444327: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000444337: nop dword ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000474ac7: nop dword ptr cs:[rax + rax]; neg eax; ret; 
0x0000000000465223: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000042b773: nop dword ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004442c6: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x00000000004442b6: nop dword ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000478376: nop dword ptr cs:[rax + rax]; nop; mov rax, 1; ret; 
0x0000000000477e35: nop dword ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x0000000000454cc7: nop dword ptr cs:[rax + rax]; ret; 
0x000000000044c4e7: nop dword ptr cs:[rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c4b7: nop dword ptr cs:[rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000042ad97: nop dword ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000478367: nop dword ptr cs:[rax + rax]; xor rax, rax; ret; 
0x0000000000418e5a: nop word ptr [rax + rax]; add rsp, 0x10; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000457512: nop word ptr [rax + rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048066a: nop word ptr [rax + rax]; add rsp, 8; xor eax, eax; pop rbx; pop rbp; ret; 
0x000000000042a8e7: nop word ptr [rax + rax]; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x0000000000418677: nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000419e47: nop word ptr [rax + rax]; endbr64; mov rax, -1; ret; 
0x0000000000419ec7: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000047478a: nop word ptr [rax + rax]; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x52313], eax; ret; 
0x0000000000419e9a: nop word ptr [rax + rax]; endbr64; ret; 
0x0000000000419107: nop word ptr [rax + rax]; endbr64; xor eax, eax; ret; 
0x000000000042211a: nop word ptr [rax + rax]; lea rax, [rip + 0x2a099]; test edx, 0x40000000; je 0x22101; ret; 
0x0000000000466632: nop word ptr [rax + rax]; lea rdi, [rip + 0x661c1]; call 0x1ab10; xor eax, eax; add rsp, 8; ret; 
0x0000000000450e02: nop word ptr [rax + rax]; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x0000000000443967: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x0000000000443337: nop word ptr [rax + rax]; mov byte ptr [rdi], dh; ret; 
0x000000000041ad9a: nop word ptr [rax + rax]; mov eax, 0xba; syscall; 
0x000000000041379a: nop word ptr [rax + rax]; mov eax, 0xffffffff; pop rbp; ret; 
0x000000000041517a: nop word ptr [rax + rax]; mov eax, 0xffffffff; ret; 
0x00000000004747da: nop word ptr [rax + rax]; mov eax, dword ptr [rip + 0x57c02]; shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x539fe], eax; ret; 
0x000000000044fb17: nop word ptr [rax + rax]; mov eax, edx; syscall; 
0x000000000044336a: nop word ptr [rax + rax]; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; ret; 
0x0000000000447c1a: nop word ptr [rax + rax]; mov qword ptr [rax], rdi; mov qword ptr [rax + rdx - 8], rdi; ret; 
0x000000000045104a: nop word ptr [rax + rax]; mov rax, -0x48; mov dword ptr fs:[rax], 0xc; mov eax, 0xffffffff; ret; 
0x00000000004543da: nop word ptr [rax + rax]; mov rax, r10; mov rcx, rdi; cmp r9, rax; jge 0x54378; ret; 
0x000000000048e7e7: nop word ptr [rax + rax]; mov rax, r8; ret; 
0x00000000004433ca: nop word ptr [rax + rax]; mov rcx, qword ptr [rsi]; mov dx, word ptr [rsi + 8]; mov qword ptr [rdi], rcx; mov word ptr [rdi + 8], dx; ret; 
0x0000000000447dea: nop word ptr [rax + rax]; mov word ptr [rax], di; mov byte ptr [rax + rdx - 1], dil; vzeroupper; ret; 
0x000000000041832a: nop word ptr [rax + rax]; movzx eax, byte ptr [rax]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000043fdaa: nop word ptr [rax + rax]; movzx ecx, word ptr [rsi]; mov word ptr [rdi], cx; mov byte ptr [rdi + 2], 0; vzeroupper; ret; 
0x000000000045218a: nop word ptr [rax + rax]; ret; 
0x0000000000419b82: nop word ptr [rax + rax]; sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000474352: nop word ptr [rax + rax]; sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x00000000004192c2: nop word ptr [rax + rax]; sub rax, rcx; sub eax, 1; ret; 
0x000000000044ac8a: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044ac9a: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044acaa: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000478ea7: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000478eba: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000478eca: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000478eda: nop word ptr [rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000447faa: nop word ptr [rax + rax]; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000041414a: nop word ptr [rax + rax]; xor eax, eax; ret; 
0x000000000042a4ea: nop word ptr [rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000478356: nop word ptr cs:[rax + rax]; add rax, 3; ret; 
0x0000000000450276: nop word ptr cs:[rax + rax]; endbr64; mov eax, 0x18; syscall; 
0x0000000000493196: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x0000000000458226: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0x743c5]; ret; 
0x0000000000419ea6: nop word ptr cs:[rax + rax]; endbr64; mov rax, qword ptr [rip + 0xab2a5]; ret; 
0x00000000004016b6: nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000444346: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xa]; ret; 
0x0000000000444356: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xb]; ret; 
0x0000000000444366: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xc]; ret; 
0x0000000000444376: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xd]; ret; 
0x0000000000444386: nop word ptr cs:[rax + rax]; lea rax, [rdi + 0xe]; ret; 
0x00000000004442d6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 2]; ret; 
0x00000000004442e6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 3]; ret; 
0x00000000004442f6: nop word ptr cs:[rax + rax]; lea rax, [rdi + 4]; ret; 
0x0000000000444306: nop word ptr cs:[rax + rax]; lea rax, [rdi + 5]; ret; 
0x0000000000444316: nop word ptr cs:[rax + rax]; lea rax, [rdi + 6]; ret; 
0x0000000000444326: nop word ptr cs:[rax + rax]; lea rax, [rdi + 8]; ret; 
0x0000000000444336: nop word ptr cs:[rax + rax]; lea rax, [rdi + 9]; ret; 
0x0000000000474ac6: nop word ptr cs:[rax + rax]; neg eax; ret; 
0x0000000000465222: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000042b772: nop word ptr cs:[rax + rax]; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004442c5: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi + 1]; ret; 
0x00000000004442b5: nop word ptr cs:[rax + rax]; nop; lea rax, [rdi]; ret; 
0x0000000000478375: nop word ptr cs:[rax + rax]; nop; mov rax, 1; ret; 
0x0000000000477e34: nop word ptr cs:[rax + rax]; nop; xor eax, eax; ret; 
0x0000000000454cc6: nop word ptr cs:[rax + rax]; ret; 
0x000000000044c4e6: nop word ptr cs:[rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c4b6: nop word ptr cs:[rax + rax]; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000042ad96: nop word ptr cs:[rax + rax]; xor eax, eax; vzeroupper; ret; 
0x0000000000478366: nop word ptr cs:[rax + rax]; xor rax, rax; ret; 
0x00000000004845fa: nop; adc byte ptr [rbx], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x300], xmm0; ret; 
0x0000000000422f2c: nop; add al, byte ptr [r8]; cmovne rax, rdx; ret; 
0x0000000000423394: nop; add al, byte ptr [rax]; test edx, 0x40000000; je 0x23367; ret; 
0x00000000004942a4: nop; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x0000000000488594: nop; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8348; 
0x0000000000433177: nop; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x00000000004129f6: nop; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000423035: nop; add byte ptr [rax], al; lea rdx, [rip + 0xe601]; cmovne rax, rdx; ret; 
0x0000000000475a3f: nop; add rsp, 0x18; ret; 
0x00000000004958ef: nop; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000047084c: nop; and al, 5; add byte ptr [rax - 0x75], cl; adc al, 0xd3; mov rbx, rcx; jmp rdx; 
0x000000000042324f: nop; and ch, 2; lea rdx, [rip + 0x231f6]; lea rax, [rip + 0x232df]; cmove rax, rdx; ret; 
0x000000000042306f: nop; and ch, 2; lea rdx, [rip + 0x233c6]; lea rax, [rip + 0x2347f]; cmove rax, rdx; ret; 
0x0000000000422e5f: nop; and ch, 2; lea rdx, [rip + 0x235e6]; lea rax, [rip + 0x236cf]; cmove rax, rdx; ret; 
0x000000000042a92f: nop; bsf eax, eax; sub rdx, rax; jbe 0x2a950; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042a93f: nop; bsf eax, eax; sub rdx, rax; jbe 0x2a950; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000457f6f: nop; cli; jmp qword ptr [rsi + 0x49]; 
0x000000000041fa2f: nop; endbr64; cmp byte ptr [rip + 0xac7e5], 0; jne 0x1fa40; ret; 
0x00000000004747cf: nop; endbr64; cmp dword ptr [rdi], 1; je 0x747e0; ret; 
0x000000000045124f: nop; endbr64; mov eax, 0x1c; syscall; 
0x0000000000479a3f: nop; endbr64; mov eax, 0x3f; syscall; 
0x0000000000479a6f: nop; endbr64; mov eax, 0x66; syscall; 
0x0000000000479a6f: nop; endbr64; mov eax, 0x66; syscall; ret; 
0x0000000000479adf: nop; endbr64; mov eax, 0x90; syscall; 
0x0000000000479b0f: nop; endbr64; mov eax, 0x91; syscall; 
0x0000000000479b3f: nop; endbr64; mov eax, 0x92; syscall; 
0x0000000000479b6f: nop; endbr64; mov eax, 0x93; syscall; 
0x000000000045121f: nop; endbr64; mov eax, 0xa; syscall; 
0x00000000004511ef: nop; endbr64; mov eax, 0xb; syscall; 
0x0000000000488b0f: nop; endbr64; mov eax, dword ptr [rip + 0x437a6]; ret; 
0x000000000045036f: nop; endbr64; mov r10d, ecx; mov eax, 0x106; syscall; 
0x0000000000473a0f: nop; endbr64; mov rax, qword ptr [rdi + 0xa0]; cmp qword ptr [rax + 0x30], 0; je 0x73a28; ret; 
0x000000000041b7cf: nop; endbr64; mov rax, qword ptr [rdi]; cmp rax, 0xffff; jbe 0x1b7e0; ret; 
0x0000000000474adf: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x51fd3], eax; ret; 
0x00000000004747bf: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x522ef], eax; ret; 
0x00000000004747af: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x522fb], eax; ret; 
0x000000000047479f: nop; endbr64; mov rax, qword ptr [rdi]; mov dword ptr [rip + 0x52307], eax; ret; 
0x0000000000474aef: nop; endbr64; mov rax, qword ptr [rdi]; mov qword ptr [rip + 0x51fd2], rax; ret; 
0x000000000041b6df: nop; endbr64; mov rax, qword ptr fs:[0x10]; ret; 
0x0000000000416b2f: nop; endbr64; xor eax, eax; test rdx, rdx; jne 0x16b40; ret; 
0x0000000000488d91: nop; hlt; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ror dword ptr [rax], 0x83; ret 0x8001; 
0x00000000004651d1: nop; jmp rdx; 
0x000000000048d6a6: nop; js 0x8d6ac; add byte ptr [rax], al; pop rbx; ret; 
0x00000000004442cf: nop; lea rax, [rdi + 1]; ret; 
0x00000000004442bf: nop; lea rax, [rdi]; ret; 
0x0000000000442e6f: nop; mov al, byte ptr [rcx]; mov byte ptr [rdx], al; lea rax, [rdx]; ret; 
0x000000000047833f: nop; mov ch, dh; and ch, 0xf; je 0x78360; add rax, 2; ret; 
0x000000000042dd2f: nop; mov dl, byte ptr [rsi - 1]; mov byte ptr [rdi - 1], dl; ret; 
0x000000000041ba57: nop; mov dword ptr [rip + 0xa9d46], 1; mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041ba37: nop; mov dword ptr [rip + 0xa9d66], 1; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba17: nop; mov dword ptr [rip + 0xa9d86], 1; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041ba77: nop; mov dword ptr [rip + 0xb07b6], eax; ret; 
0x000000000042df0f: nop; mov dx, word ptr [rsi - 2]; mov word ptr [rdi - 2], dx; ret; 
0x000000000042e0ef: nop; mov dx, word ptr [rsi - 3]; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044334f: nop; mov dx, word ptr [rsi]; mov word ptr [rdi], dx; ret; 
0x00000000004744cf: nop; mov eax, 0xffffffff; ret; 
0x000000000042e2cf: nop; mov edx, dword ptr [rsi - 4]; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044399f: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; lea rax, [rdi + 3]; ret; 
0x000000000043fdbf: nop; mov edx, dword ptr [rsi]; mov dword ptr [rdi], edx; vzeroupper; ret; 
0x00000000004744c0: nop; mov qword ptr [rax + 0x10], rdi; movups xmmword ptr [rax], xmm0; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x0000000000447fcf: nop; mov qword ptr [rax], rdi; mov qword ptr [rax + rdx - 8], rdi; ret; 
0x0000000000474486: nop; mov qword ptr [rax], rdx; xor eax, eax; ret; 
0x000000000049318f: nop; mov qword ptr [rdi + rsi*8], rdx; ret; 
0x000000000041b7f7: nop; mov qword ptr [rip + 0xa9fe1], rax; ret; 
0x000000000041b787: nop; mov qword ptr [rip + 0xa9fe9], rax; ret; 
0x000000000041b7e0: nop; mov qword ptr [rip + 0xa9ff0], rax; ret; 
0x000000000041b777: nop; mov qword ptr [rip + 0xaa001], rax; ret; 
0x000000000047837f: nop; mov rax, 1; ret; 
0x000000000040a09f: nop; mov rax, qword ptr [rsp]; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x00000000004433df: nop; mov rcx, qword ptr [rsi]; mov edx, dword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov dword ptr [rdi + 7], edx; ret; 
0x000000000044340f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 6]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 6], rdx; ret; 
0x000000000044341f: nop; mov rcx, qword ptr [rsi]; mov rdx, qword ptr [rsi + 7]; mov qword ptr [rdi], rcx; mov qword ptr [rdi + 7], rdx; ret; 
0x00000000004505ef: nop; mov rdx, -0x48; neg eax; mov dword ptr fs:[rdx], eax; mov rax, -1; ret; 
0x00000000004439ef: nop; mov rdx, qword ptr [rsi]; mov qword ptr [rdi], rdx; lea rax, [rdi + 7]; ret; 
0x000000000046559f: nop; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x000000000040a11f: nop; mov rsi, qword ptr [r13]; mov rdi, qword ptr [r12]; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x000000000044347f: nop; movdqu xmm0, xmmword ptr [rsi]; mov ecx, dword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; mov dword ptr [rdi + 0x10], ecx; ret; 
0x00000000004435ef: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0x10]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x00000000004435af: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xe]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xe], xmm2; ret; 
0x00000000004435cf: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmm2, xmmword ptr [rsi + 0xf]; movdqu xmmword ptr [rdi], xmm0; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000443acf: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; lea rax, [rdi + 0xf]; ret; 
0x000000000044342f: nop; movdqu xmm0, xmmword ptr [rsi]; movdqu xmmword ptr [rdi], xmm0; ret; 
0x000000000044d52f: nop; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000465220: nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000046521f: nop; nop; nop word ptr cs:[rax + rax]; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x0000000000410d77: nop; or byte ptr [rax], al; add rax, rdx; ret; 
0x0000000000401817: nop; pop rbp; ret; 
0x000000000041aff4: nop; pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x00000000004016ef: nop; ret; 
0x0000000000422f6f: nop; test eax, eax; lea rdx, [rip + 0x25f27]; lea rax, [rip + 0x25f80]; cmove rax, rdx; ret; 
0x000000000044ddaf: nop; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042ac3f: nop; tzcnt eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042ac4f: nop; tzcnt eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042ac5f: nop; tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000044c3ef: nop; tzcnt eax, eax; cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x4c3d9; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c21f: nop; tzcnt eax, eax; cmp sil, byte ptr [rdi + rax + 0x60]; jne 0x4c231; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000042aebf: nop; tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044f10f: nop; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x000000000044f0ff: nop; tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x000000000044bc3f: nop; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044bd3f: nop; tzcnt eax, eax; lea rax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x000000000047935f: nop; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x000000000044aeef: nop; tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x0000000000478cbf: nop; tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000478ccf: nop; tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000478cdf: nop; tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000042adbf: nop; tzcnt eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042afaf: nop; tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x000000000043f23f: nop; tzcnt eax, eax; sub rdi, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000043f98f: nop; tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000447cef: nop; vmovdqu ymmword ptr [rdi - 0x40], ymm0; vmovdqu ymmword ptr [rdi - 0x20], ymm0; vzeroupper; ret; 
0x0000000000447fbf: nop; vmovdqu64 xmmword ptr [rax], xmm16; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000475324: nop; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000410d7f: nop; xor eax, eax; ret; 
0x000000000041aa56: nop; xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x0000000000474df3: not esi; and esi, 0x80; syscall; 
0x000000000044e3b7: or al, 0; add byte ptr [rax - 0x468afb1b], al; ret; 
0x0000000000429407: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dcff: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429435: or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000045105a: or al, 0; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x0000000000451035: or al, 0; add byte ptr [rax], al; syscall; 
0x000000000041ebda: or al, 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000401e35: or al, 0; add byte ptr [rax], cl; add byte ptr [rax], al; pop rbx; ret; 
0x0000000000403153: or al, 0; add eax, ebp; in eax, 0xff; dec dword ptr [rax - 0x39]; ret; 
0x0000000000401c88: or al, 0; mov edi, dword ptr [rsp + 0x14]; mov rsi, qword ptr [rsp + 0x18]; mov rax, qword ptr [rsp + 8]; call rax; 
0x0000000000401e2c: or al, 0; pop rbx; ret; 
0x00000000004247c6: or al, 0x16; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000424a88: or al, 0x16; test al, al; jne 0x24a70; xor eax, eax; sub eax, ecx; ret; 
0x0000000000426049: or al, 0x16; test eax, eax; jne 0x26030; sub eax, ecx; vzeroupper; ret; 
0x000000000042a4de: or al, 0x16; test eax, eax; jne 0x2a4c0; sub eax, ecx; vzeroupper; ret; 
0x000000000044ca19: or al, 0x16; test eax, eax; jne 0x4ca00; sub eax, ecx; ret; 
0x000000000044d50e: or al, 0x16; test eax, eax; jne 0x4d4f0; sub eax, ecx; ret; 
0x0000000000403721: or al, 0x3c; or al, 0xf; test byte ptr [rsi + 0x31fffff9], bl; idiv byte ptr [rdi + 0x3003]; mov eax, 0x9e; syscall; 
0x000000000047cd80: or al, 0x44; std; dec dword ptr [rcx - 0x77]; ret 0x8348; 
0x000000000047de3f: or al, 0x47; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000041fa0b: or al, 0x48; add esp, 8; ret; 
0x0000000000453028: or al, 0x48; lea ecx, [rsi + rcx*4]; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x53040; ret; 
0x0000000000474a24: or al, 0x48; mov edi, dword ptr [rsp + 0x10]; mov r9d, 0xffffffff; mov eax, 0xca; syscall; 
0x0000000000418184: or al, 0x48; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x000000000048892c: or al, 0x48; mov edx, dword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x000000000043f9b7: or al, 0x48; sub edi, edx; inc eax; add rax, rdi; vzeroupper; ret; 
0x0000000000456b96: or al, 0x5b; ret; 
0x000000000041fd73: or al, 0x62; mov qword ptr [rax + 8], 0; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000450e28: or al, 0x75; ret 0xd8f7; 
0x000000000046267b: or al, 0x83; inc byte ptr [rbx]; je 0x62688; pop rbx; ret; 
0x000000000040c9c5: or al, 0x83; ret; 
0x000000000046511b: or al, 0x89; jae 0x6515f; xor eax, eax; pop rbx; ret; 
0x0000000000468daa: or al, 0x89; sal dh, 1; ret 0xf40; 
0x0000000000439604: or al, 0x8a; mov eax, dword ptr [rdx + rax*4]; sub eax, ecx; ret; 
0x0000000000436ded: or al, 0x8b; mov ecx, dword ptr ss:[rcx - 4]; mov dword ptr [rdi], esi; mov dword ptr [r9 - 4], ecx; ret; 
0x0000000000453047: or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000045302c: or al, 0x8e; mov edx, dword ptr [rcx + rdx]; test edx, edx; jne 0x53040; ret; 
0x0000000000486f70: or al, 0xc3; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000042c09a: or al, 0xe; sub eax, ecx; ret; 
0x000000000041921c: or al, 0xeb; ret 0xf390; 
0x000000000044ae94: or al, 0xf3; bsf eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x00000000004790c1: or al, 0xf3; bsf eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000433c53: or al, 0xf3; movq qword ptr [rdi], mm1; ret; 
0x000000000041b3ae: or al, 0xf6; ret 0x7501; 
0x0000000000467789: or al, 0xf6; ret 0x7540; 
0x0000000000493180: or al, 0xf7; cmp al, 8; jne 0x1618; mov qword ptr [rcx], rdx; ret; 
0x0000000000403723: or al, 0xf; test byte ptr [rsi + 0x31fffff9], bl; idiv byte ptr [rdi + 0x3003]; mov eax, 0x9e; syscall; 
0x000000000047c887: or al, 0xf; xchg byte ptr [rbx + rax], bh; add byte ptr [rax + 1], cl; ret 0xba41; 
0x0000000000475322: or al, 1; nop; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000048c3de: or al, 1; setne al; mov dword ptr [rip + 0x3ff47], eax; add rsp, 0x18; ret; 
0x000000000042b8ed: or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042b4a6: or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x0000000000422238: or al, byte ptr [rax]; adc byte ptr [rax - 0x73], cl; adc eax, 0x23e1e; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x000000000044e383: or al, byte ptr [rax]; add byte ptr [rax - 0x73], cl; adc eax, 0xaa3; cmovne rax, rdx; ret; 
0x00000000004295e7: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c881: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429615: or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000419f94: or al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000492fde: or al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000451225: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000451225: or al, byte ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x51234; ret; 
0x000000000041fa38: or al, byte ptr [rax]; add byte ptr [rbp + 3], dh; ret; 
0x000000000042215a: or al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; add eax, 0x123c; lea rdx, [rip + 0x2935]; cmovne rax, rdx; ret; 
0x00000000004230fa: or al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; add eax, 0x1ce2c; lea rdx, [rip + 0x1e6c5]; cmovne rax, rdx; ret; 
0x00000000004221da: or al, byte ptr [rax]; add cl, byte ptr [rax - 0x73]; add eax, 0x1dc5c; lea rdx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x0000000000422e14: or al, byte ptr [rax]; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x000000000041ba5c: or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041ba3c: or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba1c: or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041b9fc: or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d57], rax; ret; 
0x0000000000419f1d: or al, byte ptr [rax]; add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x0000000000419f64: or al, byte ptr [rax]; cmp eax, 1; jg 0x19f70; ret; 
0x0000000000419f14: or al, byte ptr [rax]; jne 0x19f30; mov qword ptr [rip + 0xae299], rbx; add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x000000000041da21: or al, byte ptr [rax]; jne 0x1da70; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000422c78: or al, byte ptr [rax]; or byte ptr [rax - 0x73], cl; adc eax, 0xfffffc9e; lea rax, [rip + 0x22e87]; cmove rax, rdx; ret; 
0x0000000000419eb9: or al, byte ptr [rax]; ret; 
0x000000000046542a: or al, byte ptr [rcx]; add byte ptr [rbp + 0x480f75c0], al; add esp, 8; ret; 
0x000000000045d592: or al, byte ptr [rdx]; add byte ptr [rcx - 0x77], al; ret 0x5a58; 
0x000000000041bb5b: or al, ch; iretd; jo 0x1bb63; add byte ptr [rbx + 0xa7401f8], al; add rsp, 8; ret; 
0x000000000048d361: or al, ch; jns 0x8d3df; cld; jmp qword ptr [rsi + 0xf]; 
0x00000000004666de: or al, ch; mov eax, fs; add byte ptr [rax], al; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x00000000004505de: or al, ch; mov word ptr [rcx + 2], es; add byte ptr [rax - 0x75], cl; and al, 8; add rsp, 0x28; ret; 
0x000000000048dc7c: or al, ch; out dx, al; ret 0xfffe; 
0x0000000000458548: or al, ch; ret 0xfc25; 
0x000000000041da77: or al, ch; ret; 
0x000000000048aa10: or al, ch; retf 0xf951; jmp qword ptr [rsi + 0x49]; 
0x000000000046c99f: or al, ch; sbb edi, dword ptr [rbx - 7]; jmp qword ptr [rsi + 0x66]; 
0x000000000048faa8: or al, ch; xor dl, byte ptr [rbx - 4]; jmp qword ptr [rsi - 0x70]; 
0x00000000004806ed: or bh, al; dec dword ptr [rax - 0x77]; add eax, 0x4c1b9; add rsp, 8; ret; 
0x000000000040175f: or bh, byte ptr [rdi + 0x4b4b70]; call 0x95c60; mov byte ptr [rip + 0xc5b4f], 1; pop rbp; ret; 
0x0000000000422d24: or bh, dh; ret 0; 
0x000000000044fa8f: or bl, al; nop dword ptr [rax]; mov eax, 0xe4; syscall; 
0x0000000000453bf4: or bl, bh; jmp qword ptr [rsi + 0xf]; 
0x0000000000452125: or bl, byte ptr [rbp + 0x41]; pop rsp; pop r13; ret; 
0x0000000000486940: or bl, ch; shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000433e13: or bl, dh; movq qword ptr [rdi], mm1; ret; 
0x00000000004160c6: or byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x000000000047531e: or byte ptr [r11 - 0x6ffef3b9], r8b; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000414e40: or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000418466: or byte ptr [r15], r9b; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418208: or byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x00000000004874bb: or byte ptr [r8 + 0x39], r9b; ret; 
0x0000000000419fcc: or byte ptr [r8 + 0x39], r9b; sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x00000000004416a8: or byte ptr [r8 - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x0000000000472110: or byte ptr [r8 - 0x77], cl; ret 0x8b; 
0x000000000048a400: or byte ptr [r8 - 0x77], r9b; add eax, 0x3aac7; pop rbx; pop rbp; pop r12; ret; 
0x000000000046d936: or byte ptr [r8 - 0x77], r9b; or cl, r13b; ret 0xfffe; 
0x000000000047ba92: or byte ptr [r8 - 0x7b], cl; sal byte ptr [rdi + 0x48], 0x89; ret; 
0x000000000047b955: or byte ptr [r8 - 0x7d], cl; ret; 
0x000000000046c5a8: or byte ptr [r8], r8b; add byte ptr [rax], al; add byte ptr [rdi + 0x1f88307], al; jg 0x6c5c0; ret; 
0x0000000000441767: or byte ptr [r9 - 0x76b7f7be], cl; clc; ret; 
0x00000000004666c7: or byte ptr [rax + 0x13e], bh; syscall; 
0x000000000041321e: or byte ptr [rax + 0x2b], cl; adc dword ptr [rax - 0x3f], ecx; cli; add cl, byte ptr [rax + 0xf]; scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000479bda: or byte ptr [rax + 0x39], cl; div dword ptr [rbp - 0x28]; mov eax, r8d; ret; 
0x000000000048ac29: or byte ptr [rax + 0x39], cl; int1; jb 0x8ac06; ret; 
0x000000000047ff44: or byte ptr [rax + 0x39], cl; ret 0x2074; 
0x0000000000418209: or byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000041ec3e: or byte ptr [rax + 0x39], cl; ret; 
0x0000000000419fcd: or byte ptr [rax + 0x39], cl; sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x0000000000404213: or byte ptr [rax + 0x9e], bh; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000404212: or byte ptr [rax + 0x9e], r15b; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x000000000048e428: or byte ptr [rax + 0xf], al; mov dh, 0xfd; pop rbx; pop rbp; jmp rdx; 
0x000000000043f237: or byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000493d47: or byte ptr [rax + 1], bh; cmp qword ptr [rsi + 8], rcx; ja 0x93d55; sbb eax, eax; ret; 
0x0000000000472b49: or byte ptr [rax + 1], bh; pop rbx; pop rbp; ret; 
0x00000000004505c7: or byte ptr [rax + 1], bh; syscall; 
0x0000000000494f8c: or byte ptr [rax + 1], cl; call 0x76f188e0; ret; 
0x0000000000493d46: or byte ptr [rax + 1], dil; cmp qword ptr [rsi + 8], rcx; ja 0x93d55; sbb eax, eax; ret; 
0x00000000004881eb: or byte ptr [rax + 2], bh; ret; 
0x00000000004881ea: or byte ptr [rax + 2], r15b; ret; 
0x0000000000486cd4: or byte ptr [rax + 3], cl; add dword ptr [rdi], ecx; xchg eax, edx; ret 0x8948; 
0x000000000041b799: or byte ptr [rax + rax], al; add byte ptr [rsi + 1], dh; ret; 
0x0000000000485c37: or byte ptr [rax + rcx*2 + 0x2b], ah; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000485c36: or byte ptr [rax + rcx*2 + 0x2b], spl; add al, 0x25; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000401007: or byte ptr [rax - 0x39], cl; rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x000000000048f2e0: or byte ptr [rax - 0x3f], 0xe0; add eax, 0x1543948; and byte ptr [rdi], cl; xchg eax, ebp; ret 0xc931; 
0x000000000045342b: or byte ptr [rax - 0x73], cl; adc byte ptr [r11 + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000422c7a: or byte ptr [rax - 0x73], cl; adc eax, 0xfffffc9e; lea rax, [rip + 0x22e87]; cmove rax, rdx; ret; 
0x000000000047776e: or byte ptr [rax - 0x73], cl; add eax, 0x9da; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x000000000044e37e: or byte ptr [rax - 0x73], cl; add eax, 0xa6a; lea rdx, [rip + 0xaa3]; cmovne rax, rdx; ret; 
0x000000000046d933: or byte ptr [rax - 0x73], cl; or byte ptr [r8 - 0x77], r9b; or cl, r13b; ret 0xfffe; 
0x000000000047109b: or byte ptr [rax - 0x73], cl; or byte ptr [rax - 0x77], cl; or cl, r13b; ret; 
0x000000000048ac25: or byte ptr [rax - 0x73], cl; push rax; or byte ptr [rax + 0x39], cl; int1; jb 0x8ac06; ret; 
0x0000000000487614: or byte ptr [rax - 0x73], cl; push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x0000000000487c84: or byte ptr [rax - 0x73], cl; push rsi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x00000000004552f2: or byte ptr [rax - 0x75], cl; adc byte ptr [rax - 0x7d], cl; ret 0x8310; 
0x000000000041b84b: or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000040a24b: or byte ptr [rax - 0x75], cl; add al, 0x24; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000041e269: or byte ptr [rax - 0x75], cl; je 0x1e292; adc byte ptr [rax - 0x7b], cl; ror byte ptr [rbx + rcx*4 + 0x44], 0x24; sbb byte ptr [rax - 0x77], cl; ret 0x850f; 
0x000000000045087e: or byte ptr [rax - 0x75], cl; je 0x508a7; sub byte ptr [rdi], cl; xchg eax, esp; ret 0x3948; 
0x000000000041be93: or byte ptr [rax - 0x75], cl; push rdx; adc byte ptr [rcx + 1], cl; ret 0x3948; 
0x0000000000414c33: or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000488425: or byte ptr [rax - 0x77], cl; adc byte ptr [rax - 0x39], cl; add eax, 0x43eb4; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000048a401: or byte ptr [rax - 0x77], cl; add eax, 0x3aac7; pop rbx; pop rbp; pop r12; ret; 
0x00000000004540b8: or byte ptr [rax - 0x77], cl; add eax, 0x78250; lea rdi, [rbx + 0x2d0]; mov eax, 0xda; syscall; 
0x0000000000422064: or byte ptr [rax - 0x77], cl; add edi, dword ptr [rax + 1]; pop rbx; pop rbp; pop r12; ret; 
0x00000000004416ad: or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000046f928: or byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x19]; call qword ptr [rbp + 0x38]; 
0x0000000000488469: or byte ptr [rax - 0x77], cl; mov qword ptr ds:[rip + 0x43e70], 0; ret; 
0x00000000004416a9: or byte ptr [rax - 0x77], cl; or byte ptr [rax - 0x77], cl; clc; ret; 
0x000000000046d937: or byte ptr [rax - 0x77], cl; or cl, r13b; ret 0xfffe; 
0x000000000047109f: or byte ptr [rax - 0x77], cl; or cl, r13b; ret; 
0x00000000004156d3: or byte ptr [rax - 0x77], cl; out dx, eax; call rax; 
0x00000000004520cd: or byte ptr [rax - 0x77], cl; out dx, eax; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x0000000000418255: or byte ptr [rax - 0x77], cl; out dx, eax; pop rbx; pop rbp; jmp rax; 
0x00000000004130e4: or byte ptr [rax - 0x77], cl; ret 0x3948; 
0x0000000000472111: or byte ptr [rax - 0x77], cl; ret 0x8b; 
0x0000000000493e3e: or byte ptr [rax - 0x77], cl; ret; 
0x0000000000452072: or byte ptr [rax - 0x7b], cl; div byte ptr [rbp + 8]; add rsp, 8; pop rbp; pop r12; ret; 
0x000000000047ba93: or byte ptr [rax - 0x7b], cl; sal byte ptr [rdi + 0x48], 0x89; ret; 
0x00000000004551db: or byte ptr [rax - 0x7d], cl; ret 0x4110; 
0x0000000000488e75: or byte ptr [rax - 0x7d], cl; ret 0x4808; 
0x000000000048e961: or byte ptr [rax - 0x7d], cl; ret 0x4918; 
0x000000000048e82d: or byte ptr [rax - 0x7d], cl; ret 0x4c08; 
0x000000000047092a: or byte ptr [rax - 0x7d], cl; ret 0x8d08; 
0x000000000045522a: or byte ptr [rax - 0x7d], cl; ret 0xbb10; 
0x00000000004551b3: or byte ptr [rax - 0x7d], cl; ret 0xbd10; 
0x00000000004552cb: or byte ptr [rax - 0x7d], cl; ret 0xc610; 
0x0000000000410ff9: or byte ptr [rax - 0x7d], cl; ret 0xf01; 
0x0000000000405aea: or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000472b6b: or byte ptr [rax - 1], bh; pop rbx; pop rbp; ret; 
0x00000000004516df: or byte ptr [rax - 9], cl; ret 0xfffe; 
0x0000000000484651: or byte ptr [rax], 3; add byte ptr [rax], al; ret; 
0x000000000041dc4b: or byte ptr [rax], al; add byte ptr [rax + 0x1c840f01], ch; or byte ptr [rax], al; add byte ptr [rcx - 0x73], cl; dec dword ptr [r9 - 0x7b]; ret; 
0x00000000004298b7: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ca21: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004297f5: or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046c5a9: or byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rdi + 0x1f88307], al; jg 0x6c5c0; ret; 
0x000000000045b5bf: or byte ptr [rax], al; add byte ptr [rax], al; add dh, dh; ret 0x7501; 
0x00000000004652f8: or byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xd; syscall; 
0x000000000041ace2: or byte ptr [rax], al; add byte ptr [rax], al; mov rdx, rbp; lea rsi, [rip + 0x7fc90]; mov eax, 0xe; syscall; 
0x0000000000475e6d: or byte ptr [rax], al; add byte ptr [rax], al; mov rsi, r8; mov eax, 0xe; syscall; 
0x0000000000450625: or byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000450625: or byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x50638; ret; 
0x000000000041ef8e: or byte ptr [rax], al; add byte ptr [rbp + 0x66850ff6], al; add al, byte ptr [rax]; add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x0000000000470925: or byte ptr [rax], al; add byte ptr [rbx - 0x7cb7f7a6], cl; ret 0x8d08; 
0x000000000041dc53: or byte ptr [rax], al; add byte ptr [rcx - 0x73], cl; dec dword ptr [r9 - 0x7b]; ret; 
0x0000000000410d78: or byte ptr [rax], al; add rax, rdx; ret; 
0x000000000040ac76: or byte ptr [rax], al; call 0x44c0; xor eax, eax; ret; 
0x0000000000446751: or byte ptr [rax], al; jae 0x46760; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000453307: or byte ptr [rax], al; je 0x53310; ret; 
0x000000000040ac6f: or byte ptr [rax], al; lea rdi, [rip + 0x8e305]; call 0x44c0; xor eax, eax; ret; 
0x0000000000452778: or byte ptr [rax], dl; add byte ptr [rax], al; xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x000000000043e0ee: or byte ptr [rax], r8b; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000047788e: or byte ptr [rbp + 0x15], dh; and ch, 4; lea rax, [rip - 0x2fdfb]; lea rdx, [rip - 0x2fc62]; cmove rax, rdx; ret; 
0x00000000004755ba: or byte ptr [rbp + 0x2d850fc0], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], bh; ret; 
0x000000000040ac83: or byte ptr [rbp + 0x31], al; ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x0000000000488b83: or byte ptr [rbp + 0x41], bl; pop rsp; jmp rax; 
0x000000000045207b: or byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x00000000004221fd: or byte ptr [rbp - 0x11], dh; lea rax, [rip + 0x1d8a9]; test ch, 4; jne 0x221ca; ret; 
0x000000000042311d: or byte ptr [rbp - 0x11], dh; lea rax, [rip + 0x20ba9]; test ch, 4; jne 0x230ea; ret; 
0x000000000042217d: or byte ptr [rbp - 0x11], dh; lea rax, [rip + 0x3b89]; test ch, 4; jne 0x2214a; ret; 
0x000000000042210a: or byte ptr [rbp - 0x1a], dh; lea rax, [rip + 0x1ccec]; test ch, 4; jne 0x220de; ret; 
0x0000000000423370: or byte ptr [rbp - 0x22], dh; and ch, 4; lea rdx, [rip + 0x1bd03]; lea rax, [rip + 0x1b86c]; cmove rax, rdx; ret; 
0x0000000000422350: or byte ptr [rbp - 0x22], dh; and ch, 4; lea rdx, [rip + 0x1d303]; lea rax, [rip + 0x1cf2c]; cmove rax, rdx; ret; 
0x00000000004223c0: or byte ptr [rbp - 0x22], dh; and ch, 4; lea rdx, [rip + 0x1d413]; lea rax, [rip + 0x1d05c]; cmove rax, rdx; ret; 
0x0000000000476520: or byte ptr [rbp - 0x22], dh; and ch, 4; lea rdx, [rip + 0xba3]; lea rax, [rip + 0x89c]; cmove rax, rdx; ret; 
0x000000000044e3b0: or byte ptr [rbp - 0x22], dh; lea rax, [rip + 0xca6]; and ch, 4; jne 0x4e378; ret; 
0x00000000004777a0: or byte ptr [rbp - 0x22], dh; lea rax, [rip + 0xdf6]; and ch, 4; jne 0x77768; ret; 
0x0000000000422d78: or byte ptr [rbp - 0x2a], dh; and esi, 0x400; lea rax, [rip + 0x8638]; jne 0x22d2d; ret; 
0x000000000041610e: or byte ptr [rbx + 0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x0000000000421f97: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000415ac4: or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004160c7: or byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x0000000000404779: or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000040350a: or byte ptr [rbx + rbx - 9], dh; ret 0; 
0x0000000000462d63: or byte ptr [rbx - 0x17], bl; mov dh, 0xd1; sti; jmp qword ptr [rsi + 0xf]; 
0x0000000000473cce: or byte ptr [rbx - 0x3b7cb7fe], cl; or byte ptr [rbx + 0x5d], bl; ret; 
0x000000000047531f: or byte ptr [rbx - 0x6ffef3b9], al; xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x0000000000411cf1: or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x00000000004724fa: or byte ptr [rbx - 0x77ccf18], al; or dword ptr [rdi], ecx; xchg ah, ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8908; 
0x000000000041131d: or byte ptr [rbx - 0x7bf00002], al; ret; 
0x0000000000484652: or byte ptr [rbx], al; add byte ptr [rax], al; ret; 
0x00000000004164fa: or byte ptr [rbx], cl; add byte ptr [rbx + 0xc08d], cl; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x000000000048800b: or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000041caa7: or byte ptr [rcx + 0x39], cl; ret 0x850f; 
0x000000000045571f: or byte ptr [rcx + 0x3f095], cl; add dh, dh; ret 0x7402; 
0x000000000048d86b: or byte ptr [rcx + 1], cl; ret 0x894c; 
0x00000000004872a1: or byte ptr [rcx + 1], cl; ret 0x8d48; 
0x0000000000487090: or byte ptr [rcx + rax - 0x3e], cl; mov rax, rdx; pop rbx; ret; 
0x000000000041e618: or byte ptr [rcx + rcx*4 + 0x62], cl; or byte ptr [rcx - 0x7d], al; ret 0x4901; 
0x000000000048fafc: or byte ptr [rcx + rcx*4 - 0x16], cl; add rax, qword ptr [rbx]; mov rsi, r12; mov edi, ebp; call rax; 
0x000000000048fb43: or byte ptr [rcx + rcx*4 - 0x16], cl; mov rsi, r12; mov edi, ebp; call qword ptr [rax]; 
0x0000000000421ac4: or byte ptr [rcx + rcx*4 - 0x18], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004519d2: or byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000413c12: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbp; pop r12; ret; 
0x0000000000466f63: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop r12; ret; 
0x0000000000466559: or byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x00000000004510b1: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop r12; ret; 
0x0000000000412240: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000453764: or byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; ret; 
0x00000000004130da: or byte ptr [rcx + rcx*4 - 1], cl; call rax; 
0x0000000000488012: or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000000413498: or byte ptr [rcx - 0x75], cl; push rdi; adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x0000000000413509: or byte ptr [rcx - 0x75], cl; sub byte ptr [r13 - 0x7b], r8b; sal byte ptr [rbp + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000441768: or byte ptr [rcx - 0x76b7f7be], cl; clc; ret; 
0x0000000000488159: or byte ptr [rcx - 0x77], 0; mov eax, 1; mov dword ptr [rdx], 0xffffc002; ret; 
0x000000000046c202: or byte ptr [rcx - 0x77], al; ret; 
0x000000000047c58f: or byte ptr [rcx - 0x77], al; xchg eax, edi; lock add eax, dword ptr [rax]; add dh, dh; ret 0x7402; 
0x000000000041e61c: or byte ptr [rcx - 0x7d], al; ret 0x4901; 
0x000000000040b4a9: or byte ptr [rcx - 0x7d], cl; ret; 
0x0000000000451646: or byte ptr [rcx - 0xa], al; ret; 
0x000000000040bcdf: or byte ptr [rcx], bh; ret 0xef72; 
0x000000000044f8d7: or byte ptr [rcx], cl; sal bl, 1; bsf eax, eax; add rax, rdi; ret; 
0x0000000000452feb: or byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000041d04d: or byte ptr [rcx], dh; ret; 
0x000000000045545c: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8348; 
0x0000000000455b98: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8d48; 
0x0000000000455b77: or byte ptr [rcx], dh; rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8d48; 
0x000000000041d06c: or byte ptr [rcx], dh; ror byte ptr [rax + 9], 1; ret; 
0x000000000048264a: or byte ptr [rdi + 0x31d], 0x40; ret; 
0x000000000048258c: or byte ptr [rdi + 0x31d], 0x40; xor eax, eax; ret; 
0x0000000000447fc9: or byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x0000000000493d50: or byte ptr [rdi + 2], dh; sbb eax, eax; ret; 
0x0000000000493d4f: or byte ptr [rdi + 2], r14b; sbb eax, eax; ret; 
0x00000000004115bb: or byte ptr [rdi + rcx - 0x4a], al; add byte ptr [rax - 0x77], cl; ret 0x8945; 
0x0000000000411569: or byte ptr [rdi + rcx - 0x4a], al; add eax, dword ptr [rbp - 0x77]; ret 0x8341; 
0x0000000000447fc3: or byte ptr [rdi], bh; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x000000000047a6fb: or byte ptr [rdi], ch; jne 0x7a6bf; leave; mov eax, 1; ret; 
0x0000000000414e41: or byte ptr [rdi], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000418517: or byte ptr [rdi], cl; mov dh, 0; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000479d74: or byte ptr [rdi], cl; mov dh, 0xc0; add rsp, 0x58; ret; 
0x0000000000418467: or byte ptr [rdi], cl; mov dh, 2; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048cb2c: or byte ptr [rdi], cl; test byte ptr [rbp - 0x75000000], cl; adc byte ptr [r13 - 0x2d7bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000493183: or byte ptr [rdi], cl; test dword ptr [rsi + 0x48fff6e4], ecx; mov dword ptr [rcx], edx; ret; 
0x0000000000446275: or byte ptr [rdx + 0xa], dh; vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x0000000000436dd7: or byte ptr [rdx + 0xf], dh; mov rsi, qword ptr [rsi]; mov rcx, qword ptr [rcx - 8]; mov qword ptr [rdi], rsi; mov qword ptr [r9 - 8], rcx; ret; 
0x00000000004231d3: or byte ptr [rdx + rbx - 0x80], dh; in eax, 2; lea rdx, [rip + 0x25530]; lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000422ff3: or byte ptr [rdx + rbx - 0x80], dh; in eax, 2; lea rdx, [rip + 0x25700]; lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000422de3: or byte ptr [rdx + rbx - 0x80], dh; in eax, 2; lea rdx, [rip + 0x25920]; lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000456b90: or byte ptr [rip + 0x759e9], 0xc; pop rbx; ret; 
0x0000000000456b00: or byte ptr [rip + 0x75a79], 3; pop rbx; ret; 
0x000000000047de39: or byte ptr [rip + 0x7a81d375], al; or al, 0x47; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x0000000000482a6a: or byte ptr [rip - 0x74b3ec8b], ah; cmp ecx, dword ptr [rax - 0x75]; adc byte ptr [r9 + 3], cl; add al, 0x24; call rax; 
0x0000000000483547: or byte ptr [rip - 0x7cb7218c], ah; ret; 
0x0000000000450e0c: or byte ptr [rsi + 0x10], bh; mov eax, 0x48; syscall; 
0x000000000044f792: or byte ptr [rsi + 0x1b], dh; test eax, eax; je 0x4f800; tzcnt eax, eax; ret; 
0x0000000000478e2b: or byte ptr [rsi + 0x32], dh; test eax, eax; je 0x78f00; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000047912b: or byte ptr [rsi + 0x32], dh; test eax, eax; je 0x79200; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000048ca11: or byte ptr [rsp - 0x75], dh; adc byte ptr [r13 + 0x59840fc0], al; add eax, 0x1480000; ret; 
0x0000000000412a06: or cl, byte ptr [rax + 1]; ret 0x8948; 
0x0000000000415ab6: or cl, byte ptr [rax + 1]; ret 0x8949; 
0x0000000000484632: or cl, byte ptr [rax - 0x7d]; ret 0x6608; 
0x0000000000414af8: or cl, byte ptr [rax - 0x7d]; ret; 
0x00000000004542ea: or cl, byte ptr [rbx + rcx*4 + 0x50]; cmp byte ptr [rbp - 0x6af0be37], al; ret; 
0x000000000041fcd5: or cl, byte ptr [rcx + rdi - 0x1f]; jne 0x1feb8; add rsp, 0x18; pop rbp; pop r12; ret; 
0x0000000000404a21: or cl, ch; imul edi, edi, -1; jmp qword ptr [rsi + 0xf]; 
0x000000000046d93b: or cl, ch; ret 0xfffe; 
0x00000000004710a3: or cl, ch; ret; 
0x000000000046d93a: or cl, r13b; ret 0xfffe; 
0x00000000004710a2: or cl, r13b; ret; 
0x00000000004748ee: or dh, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x0000000000429282: or dh, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000433d33: or dh, bl; movq qword ptr [rdi], mm1; ret; 
0x0000000000413c28: or dh, byte ptr [rbx + rsi*4 + 0x48]; add esp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x00000000004192b6: or dh, byte ptr [rdi + rcx + 0x48]; cmp ecx, esi; ja 0x192b0; lea eax, [rdx + rdi]; ret; 
0x0000000000474346: or dh, byte ptr [rdi + rcx + 0x48]; cmp ecx, esi; ja 0x74340; lea eax, [rdx + rdi]; ret; 
0x000000000044d831: or dword ptr [rax + 0x29], ecx; xlatb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d8ea: or dword ptr [rax + 0x29], ecx; xlatb; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000418fb8: or dword ptr [rax + 0x74], 0x80; mov rax, qword ptr [rax + 0x68]; test rax, rax; jne 0x18fb8; ret; 
0x0000000000409e99: or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x0000000000464956: or dword ptr [rax - 0x7d], ecx; ret 0x4101; 
0x000000000040b2cf: or dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000043ff1e: or dword ptr [rax - 1], ecx; ret 0xc148; 
0x00000000004164f9: or dword ptr [rax], 0xb; add byte ptr [rbx + 0xc08d], cl; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x0000000000477773: or dword ptr [rax], eax; add byte ptr [rax - 0x73], cl; adc eax, 0xc73; cmovne rax, rdx; ret; 
0x0000000000461dd2: or dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0x8948; 
0x00000000004297c7: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043df9f: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429705: or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004541a2: or dword ptr [rax], eax; add byte ptr [rax], al; add rsp, 0x10; pop rbx; ret; 
0x0000000000454199: or dword ptr [rax], eax; add byte ptr [rax], al; mov byte ptr fs:[0x972], 0; add rsp, 0x10; pop rbx; ret; 
0x000000000045035a: or dword ptr [rax], eax; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041a9f6: or dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr fs:[0x2f8], rdi; ret; 
0x0000000000474785: or dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x00000000004511a1: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x00000000004511a1: or dword ptr [rax], eax; add byte ptr [rax], al; syscall; cmp rax, -0x1000; ja 0x511d0; ret; 
0x000000000041aa29: or dword ptr [rax], eax; add byte ptr [rbx + 0x77401f8], al; ret; 
0x0000000000471103: or dword ptr [rax], eax; add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000041b710: or dword ptr [rax], eax; add byte ptr [rcx - 0x4577bffa], cl; jno 0x1b723; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000401768: or dword ptr [rax], eax; mov byte ptr [rip + 0xc5b4f], 1; pop rbp; ret; 
0x0000000000401767: or dword ptr [rax], r8d; mov byte ptr [rip + 0xc5b4f], 1; pop rbp; ret; 
0x000000000044d18e: or dword ptr [rbp + 0xf000003], 0xffffffb6; add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x000000000046c1ff: or dword ptr [rbx - 0x76bef791], ecx; ret; 
0x000000000046809b: or dword ptr [rbx - 0x7bf0cf08], eax; ret; 
0x0000000000415250: or dword ptr [rbx], 0x20; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000489ab6: or dword ptr [rbx], ebp; add al, 0; jne 0x89abe; ret; 
0x00000000004016e6: or dword ptr [rdi + 0x4c6ae0], edi; jmp rax; 
0x0000000000466d5b: or dword ptr [rdi - 0x2e], esi; mov rax, r8; ret; 
0x00000000004940c9: or dword ptr [rdi], 0xffffffb6; push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x0000000000409e95: or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x0000000000472500: or dword ptr [rdi], ecx; xchg ah, ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8908; 
0x0000000000470921: or dword ptr [rdi], ecx; xchg dword ptr [rax - 0x74fffff8], ecx; pop rdx; or byte ptr [rax - 0x7d], cl; ret 0x8d08; 
0x0000000000410808: or dword ptr [rdi], ecx; xchg dword ptr [rcx + 0xf000000], edx; mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x8901; 
0x000000000040fa42: or dword ptr [rdi], ecx; xchg dword ptr [rdi + 0xffffff5], esp; mov dh, 0x4a; add cl, byte ptr [rax - 0x7d]; ret 0x8302; 
0x0000000000422373: or dword ptr [rdx + rax + 0xc2f700], ebp; add byte ptr [rax], al; je 0x22347; ret; 
0x000000000040de34: or dword ptr [rdx - 4], 0x69e9ffff; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x00000000004854c5: or dword ptr [rsi - 0x18], esi; cmp esi, eax; je 0x85420; sub eax, esi; ret; 
0x0000000000443c61: or eax, 0x1c478d48; ret; 
0x000000000048b45f: or eax, 0x31ffff62; ror byte ptr [rax - 0x73], 0x3d; mov qword ptr [rdx], rax; add al, ch; jmp qword ptr [rcx - 1]; 
0x0000000000489e85: or eax, 0x3b03e; mov rax, r10; add rsp, 0x28; ret; 
0x0000000000482635: or eax, 0x44d26; mov qword ptr [rdi + 0x458], rcx; test byte ptr [rax + 0x31c], 4; jne 0x82658; or byte ptr [rdi + 0x31d], 0x40; ret; 
0x0000000000452a8f: or eax, 0x48000736; add esp, 8; pop rbx; pop rbp; ret; 
0x000000000044fa77: or eax, 0x48000750; test eax, eax; je 0x4fa98; sub rsp, 8; call rax; 
0x000000000044f91f: or eax, 0x48d72948; sar edi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044fa0a: or eax, 0x48d72948; sar edi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x000000000043f535: or eax, 0x48fad348; test edx, edx; je 0x3f560; bsf rax, rdx; ret; 
0x00000000004806c6: or eax, 0x4c1d5; cmp rcx, rdi; je 0x806d8; ret; 
0x00000000004805b0: or eax, 0x4c2fb; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000404602: or eax, 0x5be43145; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000401814: or eax, 0x5d900001; ret; 
0x000000000043e95a: or eax, 0x61781; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d545: or eax, 0x62b96; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x000000000043d2da: or eax, 0x62e01; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043ba05: or eax, 0x646d6; mov eax, dword ptr [rcx + rax*4]; mov edx, dword ptr [rcx + rdx*4]; sub eax, edx; ret; 
0x0000000000410d72: or eax, 0x66158d48; nop; or byte ptr [rax], al; add rax, rdx; ret; 
0x0000000000453316: or eax, 0x72ea5; shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x0000000000456b91: or eax, 0x759e9; or al, 0x5b; ret; 
0x0000000000443c58: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000443598: or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x0000000000429317: or eax, 0x83480000; ret 0x4910; 
0x000000000043c541: or eax, 0x83480000; ret 0xe910; 
0x0000000000429345: or eax, 0x83480000; ret 0xeb10; 
0x000000000043fa5a: or eax, 0x83d72948; rol byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x0000000000475658: or eax, 0xa30f4800; ret 0x820f; 
0x0000000000414eb7: or eax, 0xb1e04; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x000000000047d1ff: or eax, 0xb9e80002; jb 0x7d1fe; jmp qword ptr [rsi + 0xf]; 
0x000000000044ef62: or eax, 0xc2bc0f48; shr rax, 2; ret; 
0x0000000000403150: or eax, 0xc41ba; add eax, ebp; in eax, 0xff; dec dword ptr [rax - 0x39]; ret; 
0x0000000000433bda: or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433be3: or eax, 0xf7f0ff3; ret; 
0x000000000040265a: or eax, 0xffffffff; ret; 
0x0000000000456aaa: or eax, 1; mov byte ptr [rip + 0x75acd], al; pop rbx; ret; 
0x000000000042b7f9: or eax, 1; ret; 
0x0000000000456adb: or eax, 2; mov byte ptr [rip + 0x75a9c], al; ret; 
0x00000000004036ef: or eax, 2; mov edx, eax; mov esi, edx; mov edi, 0x3002; mov eax, 0x9e; syscall; 
0x000000000048d3ef: or eax, 2; test r8b, r8b; cmove esi, eax; mov eax, 0x9e; syscall; 
0x0000000000456b3a: or eax, 4; mov byte ptr [rip + 0x75a3d], al; pop rbx; ret; 
0x0000000000456b6b: or eax, 8; mov byte ptr [rip + 0x75a0c], al; ret; 
0x000000000047652a: or eax, dword ptr [rax]; add byte ptr [rax - 0x73], cl; add eax, 0x89c; cmove rax, rdx; ret; 
0x00000000004294f7: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c6e1: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429525: or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x00000000004511f5: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; 
0x00000000004511f5: or eax, dword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x51204; ret; 
0x0000000000417adc: or eax, dword ptr [rax]; cmp eax, 1; jg 0x17b20; add rsp, 8; ret; 
0x0000000000414eba: or eax, dword ptr [rax]; mov qword ptr [rdx + 0xe0], rcx; pop rbx; ret; 
0x0000000000410d46: or eax, dword ptr [rax]; mov rax, qword ptr [rax + rdi*8]; ret; 
0x000000000041b98b: or eax, dword ptr [rax]; ret; 
0x0000000000475f3a: or eax, dword ptr [rip + 0x3c2ee800]; add byte ptr [rax], al; mov dword ptr [rip + 0x50b80], eax; add rsp, 8; ret; 
0x000000000042b85e: or eax, ecx; ret; 
0x000000000043ed47: or eax, ecx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044c3c5: or eax, ecx; tzcnt rax, rax; cmp sil, byte ptr [rdi + rax + 0x40]; jne 0x4c3d9; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c645: or eax, ecx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044adf5: or eax, ecx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000044bd23: or eax, ecx; tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000042ad69: or eax, ecx; tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042af85: or eax, ecx; tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000043f215: or eax, ecx; tzcnt rax, rax; sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000042b711: or eax, edi; or ecx, esi; sub eax, ecx; ret; 
0x000000000043ed4e: or eax, edx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044f8d8: or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044d0a0: or eax, edx; tzcnt rax, rax; add rax, rdi; ret; 
0x000000000046c971: or ebp, dword ptr [rcx - 2]; jmp qword ptr [rsi + 0x66]; 
0x000000000041fb0c: or ebx, dword ptr [rbx + 0x5d]; pop r12; ret; 
0x0000000000433da3: or ebx, esi; movq qword ptr [rdi], mm1; ret; 
0x00000000004464d5: or ecx, dword ptr [rax - 0x73]; adc al, 0xe; cmp rdi, rdx; jb 0x464e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000446754: or ecx, dword ptr [rax - 0x77]; sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000446750: or ecx, dword ptr [rax]; add byte ptr [rbx + 0xb], dh; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000424997: or ecx, esi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042b713: or ecx, esi; sub eax, ecx; ret; 
0x000000000042b854: or ecx, esi; sub rax, rcx; cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x000000000042b7f0: or ecx, esi; sub rax, rcx; je 0x2b7fc; sbb eax, eax; or eax, 1; ret; 
0x00000000004486f0: or ecx, esi; sub rax, rcx; je 0x486fc; sbb eax, eax; or eax, 1; ret; 
0x0000000000443200: or edi, dword ptr [rsi]; jmp rcx; 
0x00000000004805fe: or edi, ebp; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x000000000043f41f: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044f04b: or edx, ecx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000043f5e0: or edx, ecx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000492ea2: or esi, 2; mov edi, 1; call rax; 
0x00000000004464d3: or esi, dword ptr [rbx + rcx + 0x48]; lea edx, [rsi + rcx]; cmp rdi, rdx; jb 0x464e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000042ae2b: or esi, ebx; bsf eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000433cc3: or esi, ebx; movq qword ptr [rdi], mm1; ret; 
0x0000000000415251: or esp, dword ptr [rax]; mov eax, 0xffffffff; pop rbx; ret; 
0x0000000000471102: or qword ptr [r8], r8; add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x0000000000433e12: or r11b, r14b; movq qword ptr [rdi], mm1; ret; 
0x0000000000433da2: or r11d, r14d; movq qword ptr [rdi], mm1; ret; 
0x0000000000429281: or r14b, al; movzx eax, byte ptr [rdi + rcx]; movzx edx, byte ptr [rsi + rcx]; sub eax, edx; ret; 
0x0000000000433d32: or r14b, r11b; movq qword ptr [rdi], mm1; ret; 
0x0000000000433cc2: or r14d, r11d; movq qword ptr [rdi], mm1; ret; 
0x0000000000402659: or rax, 0xffffffffffffffff; ret; 
0x000000000043ed46: or rax, rcx; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044c3c4: or rax, rcx; tzcnt rax, rax; cmp sil, byte ptr [rdi + rax + 0x40]; jne 0x4c3d9; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c644: or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044adf4: or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000044bd22: or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000042ad68: or rax, rcx; tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042af84: or rax, rcx; tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000043f214: or rax, rcx; tzcnt rax, rax; sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000043ed4d: or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000044d09f: or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x0000000000424996: or rcx, rsi; bsf rcx, rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042b853: or rcx, rsi; sub rax, rcx; cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x000000000042b7ef: or rcx, rsi; sub rax, rcx; je 0x2b7fc; sbb eax, eax; or eax, 1; ret; 
0x00000000004486ef: or rcx, rsi; sub rax, rcx; je 0x486fc; sbb eax, eax; or eax, 1; ret; 
0x000000000043f41e: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x000000000044f04a: or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; shr rax, 2; ret; 
0x000000000043f5df: or rdx, rcx; bts rdx, r11; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x00000000004748ed: or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x0000000000422d7c: out 0, al; add al, 0; add byte ptr [rax - 0x73], cl; add eax, 0x8638; jne 0x22d2d; ret; 
0x0000000000490da8: out 0x20, eax; je 0x90dbc; movss xmm0, dword ptr [rip + 0x239ec]; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x0000000000422e66: out 0x35, al; add al, byte ptr [rax]; lea rax, [rip + 0x236cf]; cmove rax, rdx; ret; 
0x00000000004609d6: out 0x3a, al; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000470a55: out 0x41, eax; call qword ptr [rdi + 0x38]; 
0x00000000004702f7: out 0x41, eax; call qword ptr [rsi + 0x38]; 
0x000000000042210c: out 0x48, al; lea eax, [rip + 0x1ccec]; test ch, 4; jne 0x220de; ret; 
0x000000000040be95: out 0x48, al; mov edi, ebp; call qword ptr [rcx + 0x38]; 
0x000000000043f01d: out 0x48, eax; add eax, edi; vzeroupper; ret; 
0x000000000042dd76: out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004655a5: out 0x4c, al; mov edi, ebp; call rbx; 
0x000000000040d039: out 0x4c, al; mov edi, esi; call qword ptr [rax + 0x38]; 
0x000000000040e0ae: out 0x4c, al; mov edi, esi; call qword ptr [rcx + 0x38]; 
0x00000000004689d7: out 0x4c, eax; mov dword ptr [rbp - 0xe8], eax; call rax; 
0x000000000042dba6: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dca2: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbee: out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000473792: out 0x5b, al; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x000000000047a396: out 0x6d, al; clc; dec dword ptr [rax - 0x77]; ret 0x8948; 
0x0000000000491671: out 0x83, al; call qword ptr [rcx]; 
0x000000000040ca62: out 0x83, al; ret; 
0x000000000048fb49: out 0x89, al; out dx, eax; call qword ptr [rax]; 
0x000000000048fb05: out 0x89, al; out dx, eax; call rax; 
0x000000000049708d: out 0xb3, eax; dec dword ptr [rax - 0x39]; ret 0x2de0; 
0x0000000000497064: out 0xb3, eax; dec dword ptr [rax - 0x39]; ret 0x30a0; 
0x00000000004970b6: out 0xb3, eax; dec dword ptr [rax - 0x39]; ret 0x35e0; 
0x00000000004970df: out 0xb3, eax; dec dword ptr [rax - 0x39]; ret 0x3640; 
0x0000000000497108: out 0xb3, eax; dec dword ptr [rax - 0x39]; ret 0x36c0; 
0x0000000000497131: out 0xb3, eax; dec dword ptr [rax - 0x39]; ret 0x3780; 
0x000000000049715a: out 0xb3, eax; dec dword ptr [rax - 0x39]; ret 0x3800; 
0x0000000000497183: out 0xb3, eax; dec dword ptr [rax - 0x39]; ret 0x3860; 
0x0000000000496fc3: out 0xb3, eax; dec dword ptr [rax - 0x39]; ret 0x3920; 
0x000000000044764d: out 0xc0, eax; add rsi, rdi; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x00000000004629eb: out 0xe8, eax; jmp rsi; 
0x0000000000496a58: out 0xe8, eax; ret 0xf894; 
0x0000000000463d77: out 0xe8, eax; ret; 
0x00000000004335aa: out 0xf3, al; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000043362a: out 0xf3, eax; movq qword ptr [rdi - 0x10], mm1; ret; 
0x000000000048eba1: out 0xfe, al; dec dword ptr [rax - 0x77]; ret; 
0x000000000040de6c: out 0xff, al; dec dword ptr [rbx - 0x8977b]; inc dword ptr [rbp + 0x45880fc0]; out 0xff, al; inc dword ptr [rcx]; ret; 
0x000000000040de7a: out 0xff, al; inc dword ptr [rcx]; ret; 
0x0000000000469284: out 0xff, al; jmp qword ptr [rsi + 0xf]; 
0x000000000040ddab: out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x000000000041086e: out 0xff, eax; dec dword ptr [rax - 0x7d]; ret 0xf03; 
0x00000000004034f4: out 0xff, eax; dec dword ptr [rbx + 0xc8eeb15]; add bh, dh; ret 0; 
0x000000000040dd8a: out 0xff, eax; dec dword ptr [rbx - 0x8977b]; inc dword ptr [rbp + 0x27880fc0]; out 0xff, eax; inc dword ptr [rcx]; ret; 
0x000000000040dd98: out 0xff, eax; inc dword ptr [rcx]; ret; 
0x00000000004101fb: out 0xff, eax; jmp qword ptr [rsi - 0x70]; 
0x000000000046f92e: out 0xff, eax; push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000044f0b1: out 2, al; bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000044f3b5: out 2, al; cmp rsi, rax; cmovb eax, esi; shr eax, 2; vzeroupper; ret; 
0x0000000000423182: out 2, al; lea rax, [rip + 0x14275]; lea rdx, [rip + 0x164be]; cmovne rax, rdx; ret; 
0x0000000000422f59: out 2, al; lea rax, [rip + 0x24f1e]; lea rdx, [rip + 0x24eb7]; cmove rax, rdx; ret; 
0x000000000042244f: out 2, al; lea rax, [rip + 0x3cf8]; lea rdx, [rip + 0x5551]; cmovne rax, rdx; ret; 
0x0000000000422d3d: out 2, al; lea rax, [rip + 0x827a]; lea rdx, [rip + 0x21653]; cmovne rax, rdx; ret; 
0x000000000044e942: out 4, eax; add al, ch; jbe 0x4e9ab; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000041b0ce: out 7, al; xor sil, 0x81; syscall; 
0x0000000000422109: out 8, al; jne 0x220f3; lea rax, [rip + 0x1ccec]; test ch, 4; jne 0x220de; ret; 
0x000000000042217c: out 8, al; jne 0x2216f; lea rax, [rip + 0x3b89]; test ch, 4; jne 0x2214a; ret; 
0x00000000004221fc: out 8, al; jne 0x221ef; lea rax, [rip + 0x1d8a9]; test ch, 4; jne 0x221ca; ret; 
0x000000000042311c: out 8, al; jne 0x2310f; lea rax, [rip + 0x20ba9]; test ch, 4; jne 0x230ea; ret; 
0x000000000044e3af: out 8, al; jne 0x4e391; lea rax, [rip + 0xca6]; and ch, 4; jne 0x4e378; ret; 
0x000000000047779f: out 8, al; jne 0x77781; lea rax, [rip + 0xdf6]; and ch, 4; jne 0x77768; ret; 
0x0000000000477dc6: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; add rax, rdi; ret; 
0x0000000000477de6: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000477e06: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477e26: out dx, al; add cl, byte ptr [rax + 0x29]; bnd jbe 0x77e40; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000477b2f: out dx, al; add cl, byte ptr [rax + 0x29]; jbe 0x77e40; add rax, rdi; add rax, rcx; ret; 
0x000000000046e055: out dx, al; add dword ptr [rax - 0x8e343], eax; jmp qword ptr [rax]; 
0x000000000044d8e5: out dx, al; cmp esi, eax; jb 0x4d8f4; sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000046820f: out dx, al; jo 0x681fb; out dx, eax; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x00000000004339b0: out dx, al; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x12], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000042049e: out dx, al; mov ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000041aef3: out dx, al; mov eax, 0xea; syscall; 
0x000000000040308e: out dx, al; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x00000000004503fe: out dx, al; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000041ad38: out dx, al; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000041adb2: out dx, al; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000042dd7a: out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000450474: out dx, al; mov r8d, eax; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x000000000047110b: out dx, al; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000040a0a9: out dx, al; mov rdi, r12; call rax; 
0x000000000040c407: out dx, al; mov rdi, r14; call qword ptr [rax + 0x38]; 
0x000000000041252d: out dx, al; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x000000000041467b: out dx, al; mov rdi, r15; call rbx; 
0x0000000000416315: out dx, al; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x00000000004339ba: out dx, al; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x0000000000457f6e: out dx, al; nop; cli; jmp qword ptr [rsi + 0x49]; 
0x000000000043de4e: out dx, al; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000045de77: out dx, al; ret 0; 
0x000000000048dc7e: out dx, al; ret 0xfffe; 
0x0000000000475dd2: out dx, al; stc; jmp qword ptr [rsi + 0x66]; 
0x0000000000480e60: out dx, al; syscall; 
0x000000000041b250: out dx, al; xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x00000000004533f8: out dx, eax; adc al, ch; jno 0x533cb; cld; dec dword ptr [rax - 0x77]; ret; 
0x000000000042af66: out dx, eax; add byte ptr [rbp - 0x3a2b8b37], 0xfd; xlatb; rol dword ptr [rbp - 0x3ad38a40], 0xfd; xlatb; ret 0xc085; 
0x0000000000468fba: out dx, eax; add dword ptr [rax + 0x39], ecx; ret; 
0x000000000043f21e: out dx, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004191ee: out dx, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000419245: out dx, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000416318: out dx, eax; call qword ptr [rax + 0x78]; 
0x000000000048fb4b: out dx, eax; call qword ptr [rax]; 
0x0000000000411c4e: out dx, eax; call qword ptr [rbx + 0x10]; 
0x00000000004182d9: out dx, eax; call qword ptr [rbx + 0x18]; 
0x000000000040f422: out dx, eax; call qword ptr [rbx + 0x38]; 
0x000000000040be98: out dx, eax; call qword ptr [rcx + 0x38]; 
0x00000000004156d6: out dx, eax; call rax; 
0x000000000044ed09: out dx, eax; call rbx; 
0x000000000043efde: out dx, eax; cmp sil, byte ptr [rdi + rax]; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000042adc6: out dx, eax; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x0000000000468212: out dx, eax; idiv edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000042afa6: out dx, eax; jg 0x2aff1; add eax, edi; vzeroupper; ret; 
0x000000000043f796: out dx, eax; jg 0x3f7e1; add eax, edi; vzeroupper; ret; 
0x000000000043f996: out dx, eax; jg 0x3f9e1; add eax, edi; vzeroupper; ret; 
0x000000000044f266: out dx, eax; jg 0x4f2b1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000478726: out dx, eax; jg 0x78771; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000044dd30: out dx, eax; jmp qword ptr [rsi + 0x66]; 
0x0000000000433a30: out dx, eax; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x11], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000044e146: out dx, eax; lea r9, [rsp + 0x30]; call rbx; 
0x000000000044c3e9: out dx, eax; lea rax, [rdi + rax]; ret; 
0x00000000004221ff: out dx, eax; lea rax, [rip + 0x1d8a9]; test ch, 4; jne 0x221ca; ret; 
0x000000000042311f: out dx, eax; lea rax, [rip + 0x20ba9]; test ch, 4; jne 0x230ea; ret; 
0x000000000042217f: out dx, eax; lea rax, [rip + 0x3b89]; test ch, 4; jne 0x2214a; ret; 
0x0000000000475d58: out dx, eax; mov eax, 0xca; syscall; 
0x0000000000474f26: out dx, eax; mov eax, r13d; syscall; 
0x0000000000474def: out dx, eax; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x0000000000475cc2: out dx, eax; mov eax, r8d; syscall; 
0x000000000047518b: out dx, eax; mov esi, 7; mov eax, 0xca; syscall; 
0x000000000042dbaa: out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dca6: out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbf2: out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000040a2af: out dx, eax; mov rax, qword ptr [rsp]; mov r13, r15; add r15, r14; call rax; 
0x00000000004520d0: out dx, eax; mov rax, r12; pop rbp; pop r12; jmp rax; 
0x00000000004512d7: out dx, eax; mov rax, r12; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000489dc0: out dx, eax; mov rdx, qword ptr [rdi]; add rdx, qword ptr [rax + 0x10]; mov qword ptr [rsi + 0x18], rdx; ret; 
0x000000000044e291: out dx, eax; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x0000000000433a3a: out dx, eax; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000043df4d: out dx, eax; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041378b: out dx, eax; pop rbp; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000473796: out dx, eax; pop rbp; pop r12; jmp rax; 
0x0000000000418258: out dx, eax; pop rbx; pop rbp; jmp rax; 
0x000000000041655d: out dx, eax; pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000416822: out dx, eax; pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x000000000044f286: out dx, eax; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afb6: out dx, eax; pop rdi; add rax, rdi; vzeroupper; ret; 
0x00000000004030ae: out dx, eax; push rsi; ret 0xf02; 
0x0000000000445d43: out dx, eax; ret 0xf66; 
0x000000000044f7e7: out dx, eax; ret; 
0x0000000000419ca7: out dx, eax; ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x0000000000475ce7: out dx, eax; stc; jmp qword ptr [rsi + 0xf]; 
0x0000000000490b49: out dx, eax; xor byte ptr [rax + 0x21], cl; ret 0x8949; 
0x00000000004806b4: out dx, eax; xor eax, eax; ret; 
0x000000000041b2e7: out dx, eax; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000043be4e: outsb dx, byte ptr [rsi]; adc al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044416e: outsb dx, byte ptr [rsi]; add dword ptr [rax], eax; add dh, dh; ret 0x7504; 
0x00000000004830f4: outsb dx, byte ptr [rsi]; fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000041ed31: outsb dx, byte ptr [rsi]; fsub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000048db6f: outsb dx, byte ptr [rsi]; int 0x80; 
0x000000000048e2da: outsb dx, byte ptr [rsi]; ret 0x160f; 
0x0000000000458dde: outsb dx, byte ptr [rsi]; ret 0x4166; 
0x000000000041c377: outsb dx, byte ptr [rsi]; ret 0x4866; 
0x0000000000417717: outsb dx, byte ptr [rsi]; ret 0x8948; 
0x0000000000405e4a: outsb dx, byte ptr [rsi]; ret 0x8b41; 
0x00000000004828ee: outsb dx, byte ptr [rsi]; ret 0x8b49; 
0x0000000000488221: outsb dx, byte ptr [rsi]; ret 0xd1b8; 
0x0000000000488260: outsb dx, byte ptr [rsi]; ret 0xd348; 
0x00000000004086d5: outsb dx, byte ptr [rsi]; ret 0xf66; 
0x0000000000402723: outsb dx, byte ptr [rsi]; ret; 
0x00000000004882a8: outsb dx, byte ptr [rsi]; retf 0x8948; ret 0x6ce9; 
0x000000000041b923: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ret 0xf41; 
0x000000000045406c: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add eax, 0x78287; ret; 
0x000000000047fee7: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x3948; 
0x0000000000412c9e: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000483790: outsb dx, byte ptr [rsi]; shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0xf41; 
0x000000000041c37c: outsb dx, byte ptr [rsi]; shl dword ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x3b48; 
0x00000000004797e7: outsb dx, byte ptr [rsi]; std; jmp qword ptr [rsi + 0xf]; 
0x00000000004797e6: outsb dx, byte ptr ss:[rsi]; std; jmp qword ptr [rsi + 0xf]; 
0x000000000046a272: outsd dx, dword ptr [rsi]; adc ah, byte ptr [rsi + 0xf]; outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000446730: outsd dx, dword ptr [rsi]; adc byte ptr [rdi], cl; adc dword ptr [rdi + 0x20], esi; movups xmmword ptr [rdi + 0x30], xmm7; movups xmmword ptr [rdx + rdi - 0x10], xmm8; ret; 
0x000000000046741f: outsd dx, dword ptr [rsi]; adc dword ptr [rax - 0xdf6b], ecx; jmp qword ptr [rsi + 0xf]; 
0x00000000004756a0: outsd dx, dword ptr [rsi]; add al, 1; je 0x755e8; xor eax, eax; ret; 
0x00000000004460aa: outsd dx, dword ptr [rsi]; add byte ptr [rsi + 0xf], ah; cmp byte ptr [rax], al; ret 0xf66; 
0x000000000042309d: outsd dx, dword ptr [rsi]; add dword ptr [rdx], 0x440f4800; ret 0x66c3; 
0x0000000000437230: outsd dx, dword ptr [rsi]; cli; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000423588: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0x7f10; 
0x00000000004377be: outsd dx, dword ptr [rsi]; fmul qword ptr [rcx - 0x7d]; ret 0xf10; 
0x00000000004235ce: outsd dx, dword ptr [rsi]; fsub st(1), st(0); imul edi, edi, -1; jmp qword ptr [rsi + 0x66]; 
0x000000000046c201: outsd dx, dword ptr [rsi]; or byte ptr [rcx - 0x77], al; ret; 
0x0000000000437388: outsd dx, dword ptr [rsi]; pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x000000000044c30c: outsd dx, dword ptr [rsi]; push rdi; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x0000000000476f0a: outsd dx, dword ptr [rsi]; push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x00000000004435f6: outsd dx, dword ptr [rsi]; push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000443c56: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000443596: outsd dx, dword ptr [rsi]; push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004435d6: outsd dx, dword ptr [rsi]; push rsi; psllq mm1, qword ptr [rdi]; jg 0x435e4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x000000000046742d: outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000004681ed: outsd dx, dword ptr [rsi]; ret 0x2be; 
0x0000000000467455: outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000445cec: outsd dx, dword ptr [rsi]; ret; 
0x0000000000467429: outsd dx, dword ptr [rsi]; retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x00000000004933db: outsd dx, dword ptr [rsi]; xchg eax, ebp; cmp ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004939b6: outsd dx, dword ptr [rsi]; xchg eax, ebp; cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000042b987: pcmpeqb mm1, mm0; pmovmskb eax, xmm1; inc ax; jne 0x2b903; ret; 
0x000000000042a8bd: pcmpeqb mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x2a920; xor eax, eax; ret; 
0x0000000000478344: pcmpeqb mm3, qword ptr [rcx]; add rax, 2; ret; 
0x000000000047832f: pcmpeqb mm3, qword ptr [rsi]; ret; 
0x000000000043f2bf: pcmpeqb mm4, mm0; pmovmskb edx, xmm4; test edx, edx; je 0x3f2ce; bsf eax, edx; ret; 
0x000000000042b986: pcmpeqb xmm1, xmm0; pmovmskb eax, xmm1; inc ax; jne 0x2b903; ret; 
0x000000000042a8bc: pcmpeqb xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x2a920; xor eax, eax; ret; 
0x000000000043f2be: pcmpeqb xmm4, xmm0; pmovmskb edx, xmm4; test edx, edx; je 0x3f2ce; bsf eax, edx; ret; 
0x0000000000477d6d: pcmpeqd mm1, qword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x77de0; xor eax, eax; ret; 
0x0000000000477d6c: pcmpeqd xmm1, xmmword ptr [rdi + 0x10]; pmovmskb eax, xmm1; test eax, eax; jne 0x77de0; xor eax, eax; ret; 
0x00000000004888b4: pcmpistri xmm0, xmmword ptr [rax], 0x12; jae 0x888b0; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x0000000000488826: pcmpistri xmm1, xmm1, 0x3a; cmp edx, ecx; jle 0x888d0; ret; 
0x0000000000446178: pcmpistri xmm3, xmm3, 0x3a; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000043f680: pextrw edi, mm5, 0xd7; rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000043ec30: pmovmskb eax, mm0; test eax, eax; je 0x3ec40; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042a82c: pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b98b: pmovmskb eax, mm1; inc ax; jne 0x2b903; ret; 
0x000000000042a8c2: pmovmskb eax, mm1; test eax, eax; jne 0x2a920; xor eax, eax; ret; 
0x000000000042a892: pmovmskb eax, mm1; test eax, eax; jne 0x2a940; xor eax, eax; ret; 
0x0000000000477d72: pmovmskb eax, mm1; test eax, eax; jne 0x77de0; xor eax, eax; ret; 
0x0000000000477d42: pmovmskb eax, mm1; test eax, eax; jne 0x77e20; xor eax, eax; ret; 
0x000000000043ec2f: pmovmskb eax, xmm0; test eax, eax; je 0x3ec40; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042a82b: pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042b98a: pmovmskb eax, xmm1; inc ax; jne 0x2b903; ret; 
0x000000000042a8c1: pmovmskb eax, xmm1; test eax, eax; jne 0x2a920; xor eax, eax; ret; 
0x000000000042a891: pmovmskb eax, xmm1; test eax, eax; jne 0x2a940; xor eax, eax; ret; 
0x0000000000477d71: pmovmskb eax, xmm1; test eax, eax; jne 0x77de0; xor eax, eax; ret; 
0x0000000000477d41: pmovmskb eax, xmm1; test eax, eax; jne 0x77e20; xor eax, eax; ret; 
0x00000000004440f1: pmovmskb edx, mm3; test eax, eax; jne 0x44104; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x000000000043f2c3: pmovmskb edx, mm4; test edx, edx; je 0x3f2ce; bsf eax, edx; ret; 
0x0000000000478423: pmovmskb edx, mm4; test edx, edx; je 0x78432; bsf eax, edx; shr rax, 2; ret; 
0x00000000004440f0: pmovmskb edx, xmm3; test eax, eax; jne 0x44104; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x000000000043f2c2: pmovmskb edx, xmm4; test edx, edx; je 0x3f2ce; bsf eax, edx; ret; 
0x0000000000478422: pmovmskb edx, xmm4; test edx, edx; je 0x78432; bsf eax, edx; shr rax, 2; ret; 
0x0000000000454aa6: pop qword ptr [rax + rax]; mov eax, 0x15; syscall; 
0x0000000000479ab5: pop qword ptr [rax]; add byte ptr [rax], al; syscall; 
0x0000000000479ab5: pop qword ptr [rax]; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x79ac4; ret; 
0x0000000000453375: pop qword ptr [rdi]; add byte ptr [rax - 0x7d], cl; cmp eax, 0x78ef8; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x78ee7]; ret; 
0x0000000000416560: pop r12; jmp rax; 
0x0000000000416825: pop r12; pop r13; jmp rax; 
0x000000000046c7a6: pop r12; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000415352: pop r12; pop r13; pop r14; jmp rax; 
0x0000000000459df2: pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004049ad: pop r12; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000401f08: pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000409f39: pop r12; pop r13; pop r14; ret; 
0x000000000047dbf3: pop r12; pop r13; pop rbp; ret; 
0x000000000040b9de: pop r12; pop r13; ret; 
0x000000000040236d: pop r12; ret; 
0x0000000000456c4a: pop r12; shl eax, cl; ret; 
0x0000000000416827: pop r13; jmp rax; 
0x000000000046c7a8: pop r13; mov rax, r9; pop r14; ret; 
0x0000000000415354: pop r13; pop r14; jmp rax; 
0x0000000000459df4: pop r13; pop r14; pop r15; jmp rax; 
0x00000000004049af: pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000401f0a: pop r13; pop r14; pop r15; ret; 
0x0000000000409f3b: pop r13; pop r14; ret; 
0x000000000047dbf5: pop r13; pop rbp; ret; 
0x000000000040b9e0: pop r13; ret; 
0x0000000000415356: pop r14; jmp rax; 
0x0000000000459df6: pop r14; pop r15; jmp rax; 
0x00000000004049b1: pop r14; pop r15; pop rbp; ret; 
0x0000000000401f0c: pop r14; pop r15; ret; 
0x0000000000409f3d: pop r14; ret; 
0x0000000000459df8: pop r15; jmp rax; 
0x00000000004049b3: pop r15; pop rbp; ret; 
0x0000000000401f0e: pop r15; ret; 
0x000000000041810f: pop r8; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000419021: pop r8; test rax, rax; je 0x19037; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000484256: pop rax; add al, 0; add cl, ch; ret 0xffef; 
0x0000000000408df9: pop rax; add al, 0x5b; ret; 
0x000000000040eaef: pop rax; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rsp + 0x40], 0x20; jmp rdx; 
0x0000000000418110: pop rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000048e0a4: pop rax; add byte ptr es:[rax], al; mov qword ptr [rbx + 0x18], rax; pop rbx; ret; 
0x000000000040e9e8: pop rax; add dword ptr [rax], eax; add al, ch; call rdi; 
0x0000000000491ec0: pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x80], al; call qword ptr [rcx]; 
0x00000000004704ef: pop rax; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000476832: pop rax; dec dword ptr [rcx - 0x77]; ret 0x3948; 
0x000000000046f563: pop rax; idiv edi; jmp qword ptr [rsi - 0x77]; 
0x000000000045a0f0: pop rax; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000465081: pop rax; mov rdx, -0x20; add rax, 0x200; mov qword ptr fs:[rdx], rax; ret; 
0x0000000000409e94: pop rax; or dword ptr [rdi], ecx; mov dh, 0x40; or dword ptr [rax + rax*8 - 0x38b78d8c], eax; ret 0xfff0; 
0x0000000000485c8a: pop rax; pop rdx; pop rbx; ret; 
0x0000000000450f47: pop rax; ret; 
0x00000000004860d9: pop rax; sub rdx, qword ptr fs:[0x28]; jne 0x86197; add rsp, 0x68; ret; 
0x0000000000419022: pop rax; test rax, rax; je 0x19037; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x0000000000477f07: pop rax; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x00000000004537f9: pop rbp; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret; 
0x000000000040e80e: pop rbp; add dh, dh; ret; 
0x0000000000494994: pop rbp; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000042ad42: pop rbp; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000416828: pop rbp; jmp rax; 
0x000000000048e42e: pop rbp; jmp rdx; 
0x000000000041ce07: pop rbp; mov dword ptr [rdx], ecx; add byte ptr [rcx - 0x77], cl; ret 0xbd41; 
0x0000000000476408: pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000000494109: pop rbp; mov eax, r8d; ret; 
0x000000000041806a: pop rbp; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000476cc0: pop rbp; mov qword ptr [r12], r14; pop r12; pop r13; pop r14; ret; 
0x000000000041378c: pop rbp; mov rax, qword ptr [rax + 0xe0]; mov rax, qword ptr [rax + 0x20]; jmp rax; 
0x0000000000404607: pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000411fe4: pop rbp; mov rax, r14; pop r12; pop r13; pop r14; ret; 
0x000000000046c7a9: pop rbp; mov rax, r9; pop r14; ret; 
0x000000000041655f: pop rbp; pop r12; jmp rax; 
0x0000000000416824: pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000415351: pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x0000000000459df1: pop rbp; pop r12; pop r13; pop r14; pop r15; jmp rax; 
0x0000000000401f07: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x0000000000409f38: pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040b9dd: pop rbp; pop r12; pop r13; ret; 
0x000000000040236c: pop rbp; pop r12; ret; 
0x0000000000415355: pop rbp; pop r14; jmp rax; 
0x0000000000459df5: pop rbp; pop r14; pop r15; jmp rax; 
0x00000000004049b0: pop rbp; pop r14; pop r15; pop rbp; ret; 
0x0000000000401f0b: pop rbp; pop r14; pop r15; ret; 
0x0000000000409f3c: pop rbp; pop r14; ret; 
0x000000000047dbf6: pop rbp; pop rbp; ret; 
0x0000000000488018: pop rbp; pop rbx; ret; 
0x0000000000401771: pop rbp; ret; 
0x0000000000456c46: pop rbp; shl ecx, 3; pop r12; shl eax, cl; ret; 
0x00000000004016b1: pop rbx; adc al, 0; add ah, dh; nop word ptr cs:[rax + rax]; endbr64; ret; 
0x0000000000488b7f: pop rbx; add rax, qword ptr [rdx + 8]; pop rbp; pop r12; jmp rax; 
0x0000000000456b67: pop rbx; and eax, 0xfffffff3; or eax, 8; mov byte ptr [rip + 0x75a0c], al; ret; 
0x0000000000456ad7: pop rbx; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x75a9c], al; ret; 
0x000000000047e8d1: pop rbx; clc; jmp qword ptr [rsi + 0x66]; 
0x0000000000401990: pop rbx; imul eax, ecx; imul eax, edx; ret; 
0x0000000000418169: pop rbx; jmp rax; 
0x000000000046c238: pop rbx; mov eax, 1; pop rbp; pop r12; pop r13; ret; 
0x000000000048d1d7: pop rbx; mov eax, r12d; pop rbp; pop r12; pop r13; ret; 
0x000000000041aff5: pop rbx; mov eax, r8d; pop rbp; pop r12; ret; 
0x000000000047a549: pop rbx; mov rax, r12; pop rbp; pop r12; pop r13; ret; 
0x00000000004519e7: pop rbx; mov rax, r13; pop rbp; pop r12; pop r13; ret; 
0x0000000000414d55: pop rbx; mov rax, r8; pop rbp; pop r12; ret; 
0x0000000000473793: pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x000000000047dbf2: pop rbx; pop r12; pop r13; pop rbp; ret; 
0x00000000004749e0: pop rbx; pop r12; pop r13; ret; 
0x000000000040adf6: pop rbx; pop r12; ret; 
0x0000000000418259: pop rbx; pop rbp; jmp rax; 
0x000000000048e42d: pop rbx; pop rbp; jmp rdx; 
0x0000000000476407: pop rbx; pop rbp; mov eax, r12d; pop r12; ret; 
0x0000000000494108: pop rbx; pop rbp; mov eax, r8d; ret; 
0x0000000000404606: pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000041655e: pop rbx; pop rbp; pop r12; jmp rax; 
0x0000000000416823: pop rbx; pop rbp; pop r12; pop r13; jmp rax; 
0x0000000000415350: pop rbx; pop rbp; pop r12; pop r13; pop r14; jmp rax; 
0x0000000000409f37: pop rbx; pop rbp; pop r12; pop r13; pop r14; ret; 
0x000000000040b9dc: pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000040236b: pop rbx; pop rbp; pop r12; ret; 
0x000000000040477a: pop rbx; pop rbp; ret; 
0x0000000000456c45: pop rbx; pop rbp; shl ecx, 3; pop r12; shl eax, cl; ret; 
0x0000000000401940: pop rbx; ret; 
0x00000000004019b2: pop rbx; shr eax, 0x16; add eax, 1; ret; 
0x000000000041610f: pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000042aea8: pop rbx; tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x0000000000407eff: pop rbx; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000422df4: pop rcx; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000422ded: pop rcx; add al, byte ptr [rax]; lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x0000000000480e57: pop rcx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; in eax, 0x48; mov esi, ebp; syscall; 
0x000000000041f823: pop rcx; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xb817; 
0x000000000048ca1b: pop rcx; add eax, 0x1480000; ret; 
0x0000000000437389: pop rcx; jmp qword ptr [rdx - 0x2f]; 
0x0000000000436d5c: pop rcx; jmp qword ptr [rdx - 0xf]; 
0x000000000049371c: pop rcx; jmp rcx; 
0x000000000048dd83: pop rcx; jo 0x8dd82; jmp qword ptr [rsi + 0xf]; 
0x000000000040cc63: pop rcx; js 0xcc65; jmp qword ptr [rsi + 0xf]; 
0x000000000042a496: pop rcx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000401813: pop rcx; or eax, 0x5d900001; ret; 
0x0000000000480653: pop rcx; ret 4; 
0x000000000044bc2a: pop rcx; tzcnt eax, eax; add rax, rcx; ret; 
0x000000000040c78f: pop rdi; add al, 0x89; ret 0x9d89; 
0x0000000000422f7d: pop rdi; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000422f76: pop rdi; add al, byte ptr [rax]; lea rax, [rip + 0x25f80]; cmove rax, rdx; ret; 
0x000000000043e5dd: pop rdi; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000047776a: pop rdi; add rax, -0x72b7f800; add eax, 0x9da; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x000000000044f287: pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afb7: pop rdi; add rax, rdi; vzeroupper; ret; 
0x0000000000452c97: pop rdi; add rsp, 0x20; pop rbx; pop rbp; pop r12; ret; 
0x000000000042e149: pop rdi; in al, dx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df59: pop rdi; in eax, dx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000459df9: pop rdi; jmp rax; 
0x0000000000452250: pop rdi; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000411cf0: pop rdi; or byte ptr [rbx - 0x76fefbb9], al; ret 0xe281; 
0x000000000042dd79: pop rdi; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dba9: pop rdi; out dx, eax; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dca5: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbf1: pop rdi; out dx, eax; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x00000000004049b4: pop rdi; pop rbp; ret; 
0x0000000000401f0f: pop rdi; ret; 
0x000000000041b8f8: pop rdx; adc byte ptr [rax + 1], cl; ret 0x349; 
0x0000000000429b86: pop rdx; add eax, 0x83480000; ret 0x4910; 
0x000000000047a176: pop rdx; cli; jmp qword ptr [rsi + 0x48]; 
0x000000000047a48e: pop rdx; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000458222: pop rdx; mov al, 0xff; jmp qword ptr [rsi + 0x2e]; 
0x0000000000470929: pop rdx; or byte ptr [rax - 0x7d], cl; ret 0x8d08; 
0x0000000000451645: pop rdx; or byte ptr [rcx - 0xa], al; ret; 
0x0000000000485c8b: pop rdx; pop rbx; ret; 
0x000000000044ed62: pop rdx; push rdi; sti; jmp qword ptr [rsi + 0x2e]; 
0x0000000000422289: pop rdx; xor eax, eax; pop rbp; pop r12; ret; 
0x000000000043e4de: pop rsi; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000474abe: pop rsi; add al, byte ptr [rax]; call 0x14cc0; nop word ptr cs:[rax + rax]; neg eax; ret; 
0x0000000000490db6: pop rsi; add eax, 0x239e8; ret; 
0x0000000000415357: pop rsi; jmp rax; 
0x0000000000475671: pop rsi; mov eax, 0x16; ret; 
0x000000000042b721: pop rsi; movzx ecx, byte ptr [rsi]; movzx eax, byte ptr [rdi]; sub eax, ecx; ret; 
0x0000000000451d7d: pop rsi; or byte ptr [rcx - 0xa], al; ret; 
0x0000000000459df7: pop rsi; pop r15; jmp rax; 
0x00000000004049b2: pop rsi; pop r15; pop rbp; ret; 
0x0000000000401f0d: pop rsi; pop r15; ret; 
0x0000000000409f3e: pop rsi; ret; 
0x000000000045745e: pop rsi; sar dl, 1; jmp qword ptr [rsi + 0x2e]; 
0x000000000043c060: pop rsp; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429e84: pop rsp; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043cd60: pop rsp; add eax, 0x83480000; ret 0xe910; 
0x0000000000479fdb: pop rsp; cli; dec dword ptr [rax - 0x77]; ret; 
0x00000000004221e0: pop rsp; fadd qword ptr [rcx]; add byte ptr [rax - 0x73], cl; adc eax, 0x1de35; cmovne rax, rdx; ret; 
0x0000000000416561: pop rsp; jmp rax; 
0x0000000000416826: pop rsp; pop r13; jmp rax; 
0x000000000046c7a7: pop rsp; pop r13; mov rax, r9; pop r14; ret; 
0x0000000000415353: pop rsp; pop r13; pop r14; jmp rax; 
0x0000000000459df3: pop rsp; pop r13; pop r14; pop r15; jmp rax; 
0x00000000004049ae: pop rsp; pop r13; pop r14; pop r15; pop rbp; ret; 
0x0000000000401f09: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000409f3a: pop rsp; pop r13; pop r14; ret; 
0x000000000047dbf4: pop rsp; pop r13; pop rbp; ret; 
0x000000000040b9df: pop rsp; pop r13; ret; 
0x000000000040236e: pop rsp; ret; 
0x0000000000456c4b: pop rsp; shl eax, cl; ret; 
0x000000000041ba3a: popf; or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000046bca7: popfq; add al, byte ptr [rax]; add byte ptr [rax - 0x39], cl; ret 0xffe0; 
0x0000000000447ae8: popfq; add byte ptr [rax], al; add byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x0000000000493430: popfq; cmp ch, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000041ba5b: popfq; or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov dword ptr [rip + 0xa9d38], eax; ret; 
0x000000000041ba3b: popfq; or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d27], rax; ret; 
0x000000000041ba1b: popfq; or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x000000000041b9fb: popfq; or al, byte ptr [rax]; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d57], rax; ret; 
0x000000000041ba06: popfq; or al, byte ptr [rax]; ret; 
0x000000000040d2af: pslld mm7, mm7; dec dword ptr [rcx - 0x75]; mov ds, eax; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000433b02: psllq mm1, qword ptr [r15]; jg 0x33b17; ret; 
0x0000000000436632: psllq mm1, qword ptr [r15]; jg 0x36647; ret; 
0x0000000000433b03: psllq mm1, qword ptr [rdi]; jg 0x33b17; ret; 
0x0000000000436633: psllq mm1, qword ptr [rdi]; jg 0x36647; ret; 
0x0000000000443476: psllq mm1, qword ptr [rdi]; jg 0x43482; mov dword ptr [rdi + 0xf], ecx; ret; 
0x00000000004434d7: psllq mm1, qword ptr [rdi]; jg 0x434e3; mov qword ptr [rdi + 0xf], rcx; ret; 
0x00000000004435d8: psllq mm1, qword ptr [rdi]; jg 0x435e4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000443b16: psllq mm1, qword ptr [rdi]; jg 0x43b22; mov dword ptr [rdi + 0xf], ecx; lea rax, [rdi + 0x12]; ret; 
0x0000000000443b97: psllq mm1, qword ptr [rdi]; jg 0x43ba3; mov qword ptr [rdi + 0xf], rcx; lea rax, [rdi + 0x16]; ret; 
0x0000000000443c98: psllq mm1, qword ptr [rdi]; jg 0x43ca4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x000000000046b3d3: psllq mm7, mm7; jmp qword ptr [rsi + 0xf]; 
0x0000000000473406: punpckhqdq xmm0, xmm0; mov qword ptr [rax + 0x10], rcx; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm0; ret; 
0x000000000041801f: punpckhqdq xmm0, xmm0; mov qword ptr [rdi + 0x18], rdx; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x00000000004733cb: punpckhqdq xmm1, xmm2; movhps qword ptr [rax + 0x10], xmm0; mov qword ptr [rax + 0x40], rdx; movups xmmword ptr [rax], xmm1; ret; 
0x0000000000417fe4: punpckhqdq xmm1, xmm2; movhps qword ptr [rdi + 0x18], xmm0; mov qword ptr [rdi + 0x48], rax; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000045411d: punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 0x2d8], xmm0; syscall; 
0x0000000000415241: punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000045406e: punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x78287], xmm0; ret; 
0x0000000000418642: punpcklqdq xmm0, xmm1; movups xmmword ptr [rbx + 0x38], xmm0; pop rbx; pop rbp; pop r12; ret; 
0x00000000004598e7: punpcklqdq xmm0, xmm1; movups xmmword ptr [rbx + 0x48], xmm0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048845f: punpcklqdq xmm0, xmm1; movups xmmword ptr [rdi], xmm0; mov qword ptr [rax + 8], rdi; mov qword ptr [rsi], rdi; mov qword ptr [rip + 0x43e70], 0; ret; 
0x000000000048822b: punpcklqdq xmm0, xmm1; movups xmmword ptr [rsi], xmm0; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x000000000048464b: punpcklqdq xmm0, xmm2; movups xmmword ptr [rax + 0x308], xmm0; ret; 
0x000000000048827b: punpcklqdq xmm0, xmm2; movups xmmword ptr [rsi], xmm0; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x000000000044bad9: push -0x43a360b; xchg eax, edx; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000401864: push -0x47fffefa; add byte ptr [rax], al; add byte ptr [rax], al; leave; ret; 
0x000000000047594e: push -0x548bfefc; mov eax, 0x83; ret; 
0x0000000000496e82: push -0x5d; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000041a812: push -0x76b70002; ret; 
0x000000000040de71: push -0x7a000009; ror byte ptr [rdi], 0x88; out 0xff, al; inc dword ptr [rcx]; ret; 
0x0000000000421905: push -0x7d; ret; 
0x0000000000444154: push -0x9ffffff; ret 0x7501; 
0x00000000004853cb: push 0; add byte ptr [rcx - 0x77], cl; ret; 
0x0000000000477a23: push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x000000000044df83: push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000045a8ea: push 0; mov r9, qword ptr [rsp + 0x18]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045da5a: push 0; mov r9, qword ptr [rsp + 0x38]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000457350: push 0; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; call rbx; 
0x000000000044eb6b: push 0; mov r9, r14; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rcx, r12; call rbx; 
0x000000000045b6fc: push 0; mov rcx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000460215: push 0; mov rcx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea6c: push 0; mov rcx, qword ptr [rsp + 0x28]; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000044e285: push 0; mov rdx, r13; mov r9, qword ptr [rsp + 0x10]; mov rdi, rbp; mov rsi, qword ptr [rsp + 0x18]; call rbx; 
0x000000000044ecfa: push 0; mov rdx, r13; mov rsi, qword ptr [rsp + 0x18]; xor r8d, r8d; mov rdi, rbp; call rbx; 
0x000000000044e13c: push 0; mov rdx, r13; xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000459b25: push 0; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000414671: push 0; xor r8d, r8d; mov rcx, r14; mov rsi, r13; mov rdi, r15; call rbx; 
0x000000000041fa02: push 0x16; add eax, dword ptr [rax]; cmp rax, -1; je 0x1fa18; add rsp, 8; ret; 
0x0000000000450e00: push 0x1f0f66c3; add byte ptr [rax], r8b; lea rdx, [rsp + 8]; mov esi, 0x10; mov eax, 0x48; syscall; 
0x00000000004466bd: push 0x30; movups xmmword ptr [rdx + 0x20], xmm6; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x0000000000418755: push 0x41; movzx esi, byte ptr [rsi]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x0000000000483dff: push 0x41ffffff; call rcx; 
0x0000000000478035: push 0x48; add edi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044f9af: push 0x48d72948; sar edi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x00000000004841e5: push 0x4cffffff; mov dword ptr [rbp - 0x88], ecx; call rax; 
0x0000000000496ede: push 0x57; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000044e382: push 0xa; add byte ptr [rax], al; lea rdx, [rip + 0xaa3]; cmovne rax, rdx; ret; 
0x000000000040de2f: push 0xffffff7; or dword ptr [rdx - 4], 0x69e9ffff; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x000000000040d935: push 0xffffff7; xchg eax, edx; ret 0x3948; 
0x000000000044df0b: push 1; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000477a1d: push 1; mov rdi, qword ptr [r13]; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x000000000044df81: push 1; push 0; lea rcx, [rax + 4]; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044df07: push 1; xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x000000000044b448: push 3; vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000469ff1: push qword ptr [r9]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x0000000000445ad8: push qword ptr [rbp + 0x1a]; xor eax, eax; ret; 
0x00000000004522f0: push qword ptr [rbp + 0x1d]; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000490c02: push qword ptr [rbp + 0x33]; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000452222: push qword ptr [rbp + 0x4b]; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004514e0: push qword ptr [rbp + 0x4d]; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522c4: push qword ptr [rbp + 0x69]; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004130cc: push qword ptr [rbp + 7]; mov rdx, qword ptr [r15 + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004156c5: push qword ptr [rbp + 7]; mov rdx, qword ptr [rbp + 0x40]; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, rbp; call rax; 
0x0000000000410d6b: push qword ptr [rbp + rax + 0x66]; test eax, eax; je 0x10d80; lea rdx, [rip + 0x89066]; add rax, rdx; ret; 
0x0000000000473a61: push qword ptr [rbp + rax - 0xa]; ret 0x7408; 
0x000000000043f533: push qword ptr [rbp + rcx + 0x48]; sar edx, cl; test rdx, rdx; je 0x3f560; bsf rax, rdx; ret; 
0x0000000000419156: push qword ptr [rbp + rcx - 0x18]; ret 0x6d; 
0x0000000000495f05: push qword ptr [rbp + rcx*2 - 0x77]; ret 0x8948; 
0x000000000043f4c3: push qword ptr [rbp + rdi*2 + 0x48]; sar edx, cl; test rdx, rdx; je 0x3f570; bsf rax, rdx; ret; 
0x0000000000497211: push qword ptr [rbp + rdx + 0x48]; mov eax, dword ptr [rdi + 0x20]; test rax, rax; je 0x97224; call rax; 
0x000000000044c968: push qword ptr [rbp + rdx - 0xd]; bsf rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000419281: push qword ptr [rbp - 0x41]; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000489e7d: push qword ptr [rbp - 0x75]; xor r10d, r10d; mov qword ptr [rip + 0x3b03e], r9; mov rax, r10; add rsp, 0x28; ret; 
0x0000000000490cae: push qword ptr [rbp - 0x79]; add rsp, 0x30; pop rbx; pop rbp; pop r12; ret; 
0x0000000000450290: push qword ptr [rbx + 1]; ret; 
0x00000000004191e9: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004742d9: push qword ptr [rbx + rax - 0x7d]; and ebp, edi; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000403729: push qword ptr [rcx]; idiv byte ptr [rdi + 0x3003]; mov eax, 0x9e; syscall; 
0x0000000000402368: push qword ptr [rcx]; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x000000000048c3d8: push qword ptr [rcx]; rol byte ptr [rbx + 0x10c247c], 0xf; xchg eax, ebp; ror byte ptr [rcx + 0x3ff4705], 0; add rsp, 0x18; ret; 
0x000000000048b462: push qword ptr [rcx]; ror byte ptr [rax - 0x73], 0x3d; mov qword ptr [rdx], rax; add al, ch; jmp qword ptr [rcx - 1]; 
0x000000000041786b: push qword ptr [rcx]; ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000469ff2: push qword ptr [rcx]; sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x000000000044fb29: push qword ptr [rdi + 0x1c]; hlt; mov eax, esi; syscall; 
0x00000000004511ac: push qword ptr [rdi + 0x21]; ret; 
0x000000000045059c: push qword ptr [rdi + 0x51]; ret; 
0x00000000004504f7: push qword ptr [rdi + 0x56]; ret; 
0x0000000000475db3: push qword ptr [rdi + 0xa]; ret; 
0x0000000000450382: push qword ptr [rdi + 0xb]; xor eax, eax; ret; 
0x000000000047985c: push qword ptr [rdi + 1]; ret; 
0x0000000000451009: push qword ptr [rdi + 4]; ret; 
0x0000000000450630: push qword ptr [rdi + 5]; ret; 
0x0000000000450f9d: push qword ptr [rdi + 8]; ret; 
0x000000000049436c: push qword ptr [rsi - 0x77]; ret 0xe283; 
0x0000000000418575: push qword ptr [rsp + rax - 0x58]; add dword ptr [rsp - 0x77], esi; ret 0xc883; 
0x000000000041fa09: push qword ptr [rsp + rcx + 0x48]; add esp, 8; ret; 
0x0000000000423003: push r15; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x000000000048aba0: push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x0000000000419b89: push rax; adc byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000474225: push rax; add byte ptr [rax], al; add byte ptr [rax], al; movups xmmword ptr [rax + 0x40], xmm0; pop rbx; ret; 
0x0000000000454cb6: push rax; add byte ptr [rsi + rdx + 0x48], dh; test edx, edx; je 0x54cd0; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x000000000041b7c5: push rax; add dword ptr [rax - 0x77], ecx; adc eax, 0xa9ffa; ret; 
0x000000000046b640: push rax; add dword ptr [rax - 0x77], ecx; push rbp; sub dh, al; add byte ptr [rip - 0x6f117], ch; jmp qword ptr [rsi - 0x70]; 
0x0000000000480228: push rax; add dword ptr [rcx - 0x6efa09f0], ecx; ret; 
0x000000000040ca0b: push rax; add dword ptr [rcx - 0x77], ecx; push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000046fb65: push rax; and byte ptr [rax], al; add byte ptr [rax], al; jmp rdx; 
0x00000000004708c7: push rax; and byte ptr [rax], al; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x00000000004573cf: push rax; call rbx; 
0x00000000004542ed: push rax; cmp byte ptr [rbp - 0x6af0be37], al; ret; 
0x0000000000420b5d: push rax; dec dword ptr [rax - 0x7b]; ret 0x840f; 
0x000000000040d566: push rax; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x0000000000488b4e: push rax; inc dword ptr [rbp + 0x481a74c0]; lea ebx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000495f52: push rax; jne 0x95f65; xor eax, eax; ret; 
0x000000000041aaeb: push rax; lea rdi, [rip + 0x7fe3d]; call 0x14cc0; nop dword ptr [rax + rax]; ret; 
0x000000000041aa86: push rax; lea rdi, [rip + 0x7fea2]; call 0x14cc0; nop dword ptr [rax + rax]; ret; 
0x0000000000454257: push rax; mov byte ptr [rax + 0x50], 1; ret; 
0x000000000045b70c: push rax; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000459b30: push rax; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000460220: push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000045ea77: push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045da65: push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x000000000045a0eb: push rax; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000473410: push rax; movups xmmword ptr [rax], xmm0; ret; 
0x00000000004733d5: push rax; movups xmmword ptr [rax], xmm1; ret; 
0x0000000000468da9: push rax; or al, 0x89; sal dh, 1; ret 0xf40; 
0x0000000000467788: push rax; or al, 0xf6; ret 0x7540; 
0x000000000048ac28: push rax; or byte ptr [rax + 0x39], cl; int1; jb 0x8ac06; ret; 
0x000000000041b84a: push rax; or byte ptr [rax - 0x75], cl; adc byte ptr [rcx - 0x7d], al; ret; 
0x000000000045571e: push rax; or byte ptr [rcx + 0x3f095], cl; add dh, dh; ret 0x7402; 
0x000000000047c58e: push rax; or byte ptr [rcx - 0x77], al; xchg eax, edi; lock add eax, dword ptr [rax]; add dh, dh; ret 0x7402; 
0x0000000000403fdc: push rax; ret; 
0x0000000000419b7a: push rax; sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000473b65: push rax; sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x00000000004967ab: push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000004231e4: push rbp; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x00000000004231dd: push rbp; add al, byte ptr [rax]; lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000470bfe: push rbp; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000042245c: push rbp; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000047de42: push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000047a158: push rbp; add dword ptr [rax + 1], ecx; ret; 
0x0000000000420e4f: push rbp; add dword ptr [rax], eax; add byte ptr [rax - 0x7b], cl; ret 0x840f; 
0x0000000000422f07: push rbp; add r8b, byte ptr [r8]; lea rax, [rip + 0x24dae]; cmove rax, rdx; ret; 
0x000000000041f91d: push rbp; and byte ptr [rax + 0x39], cl; ret 0x4473; 
0x000000000046f930: push rbp; cmp byte ptr [rax + 0x39], cl; ret; 
0x000000000041db57: push rbp; jl 0x1db64; add byte ptr [rax + 1], cl; ret; 
0x0000000000458d92: push rbp; mov byte ptr [rax - 0x7d], cl; ret; 
0x00000000004587f7: push rbp; mov edx, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004521e2: push rbp; mov r12, qword ptr [rbp + 0x10]; test r12, r12; jne 0x52210; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004647e4: push rbp; mov rax, qword ptr [rdi + 0x20]; mov rbp, rdi; test rax, rax; je 0x647f3; call rax; 
0x0000000000475b5a: push rbp; nop; add rsp, 0x18; ret; 
0x000000000045f167: push rbp; push rbx; cli; dec dword ptr [rbp - 0x77]; ret; 
0x000000000047ca13: push rbp; sub byte ptr [rax - 0x75], cl; sub byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x000000000046b644: push rbp; sub dh, al; add byte ptr [rip - 0x6f117], ch; jmp qword ptr [rsi - 0x70]; 
0x00000000004156ca: push rbp; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, rbp; call rax; 
0x000000000044cfaa: push rbp; tzcnt eax, eax; ret; 
0x000000000041927d: push rbp; xor byte ptr [rbx - 0x408a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000412c89: push rbx; adc byte ptr [rax + 1], cl; ret 0x2b48; 
0x0000000000403179: push rbx; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000004940cc: push rbx; add dword ptr [rax - 0x7d], ecx; ret; 
0x000000000040198e: push rbx; add dword ptr [rbx + 0xf], ebx; scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0x41c3; 
0x000000000044c6b0: push rbx; bsf eax, eax; add rax, rdx; ret; 
0x000000000043f27a: push rbx; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000044c440: push rbx; bsf eax, eax; cmp sil, byte ptr [rdx + rax]; jne 0x4c3d9; add rax, rdx; ret; 
0x000000000044d0ee: push rbx; bsf eax, eax; ret; 
0x0000000000478779: push rbx; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000043f7c9: push rbx; bsf eax, eax; vzeroupper; ret; 
0x000000000044a379: push rbx; bsf eax, eax; xtest; je 0x4a387; vzeroall; ret; 
0x000000000048df42: push rbx; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000048ded2: push rbx; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000048faab: push rbx; cld; jmp qword ptr [rsi - 0x70]; 
0x000000000045f168: push rbx; cli; dec dword ptr [rbp - 0x77]; ret; 
0x0000000000473a7f: push rbx; je 0x73add; pop rbp; pop r12; ret; 
0x000000000041db61: push rbx; jl 0x1db6e; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000477dec: push rbx; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000412d43: push rbx; mov rax, qword ptr [rsp]; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x0000000000475deb: push rbx; mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000473a2b: push rbx; mov rbx, rdi; test byte ptr [rdi], 2; jne 0x73aa8; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x00000000004129db: push rbx; mov rdi, rbx; sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x0000000000414c32: push rbx; or byte ptr [rax - 0x75], cl; xor ecx, dword ptr [rax - 0x7d]; ret; 
0x00000000004519aa: push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x00000000004114ea: push rbx; xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x0000000000466f8a: push rbx; xor byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x75], 0x43; sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x000000000045414f: push rbx; xor edx, edx; mov esi, 0x20; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x000000000045353a: push rcx; add dword ptr [rax - 0x77], ecx; adc eax, 0x73e45; mov qword ptr [rdi + 0x460], rdx; add rsp, 8; ret; 
0x0000000000402468: push rcx; add dword ptr [rdi], ecx; scasd eax, dword ptr [rdi]; ret 0xda89; 
0x0000000000454efd: push rcx; add rsp, 0x110; mov eax, r12d; pop r12; ret; 
0x0000000000436f63: push rcx; jl 0x36fae; adc dword ptr [rcx - 3], ebp; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436f6a: push rcx; jl 0x36fb5; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436f71: push rcx; jl 0x36fbc; adc dword ptr [rcx - 1], edi; ret; 
0x00000000004370ca: push rcx; jl 0x37115; adc dword ptr [rcx + 5], ebp; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004370d1: push rcx; jl 0x3711c; adc dword ptr [rcx + 6], esi; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004370d8: push rcx; jl 0x37123; adc dword ptr [rcx + 7], edi; ret; 
0x0000000000453e8b: push rcx; mov ebp, 0x8948fffc; ret 0x8548; 
0x000000000042245b: push rcx; push rbp; add byte ptr [rax], al; cmovne rax, rdx; ret; 
0x000000000045059e: push rcx; ret; 
0x000000000048aa13: push rcx; stc; jmp qword ptr [rsi + 0x49]; 
0x000000000041349b: push rdi; adc byte ptr [rax + 0x29], cl; retf 0x2948; ret 0x2948; 
0x00000000004439ca: push rdi; add al, 0x48; lea eax, [rdi + 5]; ret; 
0x0000000000433c69: push rdi; add al, 0x48; mov dword ptr [rdi], ecx; ret; 
0x000000000044c30d: push rdi; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x0000000000423004: push rdi; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x0000000000422ffd: push rdi; add al, byte ptr [rax]; lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000487617: push rdi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x0000000000446236: push rdi; add dword ptr [rdx - 0xf], esp; jl 0x46284; adc dword ptr [rsi - 2], edx; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000443a7c: push rdi; add eax, 0xc478d48; ret; 
0x0000000000496edf: push rdi; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x000000000049145e: push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x000000000044e8e6: push rdi; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042b3f4: push rdi; and ch, al; std; xlatb; ret 0xc0ff; 
0x000000000042d9f2: push rdi; call 0xfffffffff0626344; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042da30: push rdi; call 0xfffffffff0626382; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042da68: push rdi; call 0xfffffffff06263ba; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042daa6: push rdi; call 0xfffffffff06263f8; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042dade: push rdi; call 0xfffffffff0626430; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db06: push rdi; call 0xfffffffff0626458; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db2e: push rdi; call 0xfffffffff0626480; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004303d2: push rdi; call 0xfffffffff0628d24; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000430410: push rdi; call 0xfffffffff0628d62; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000430448: push rdi; call 0xfffffffff0628d9a; mov qword ptr [rdi - 8], rcx; ret; 
0x0000000000430486: push rdi; call 0xfffffffff0628dd8; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004304be: push rdi; call 0xfffffffff0628e10; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004304e6: push rdi; call 0xfffffffff0628e38; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043050e: push rdi; call 0xfffffffff0628e60; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042da38: push rdi; clc; ret; 
0x000000000048daa4: push rdi; cld; jmp qword ptr [rsi + 0xf]; 
0x000000000042dbb0: push rdi; cld; ret; 
0x000000000042e6d7: push rdi; cli; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000433549: push rdi; cmc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000045029a: push rdi; fsub dword ptr [rcx + rcx*4 + 1]; or rax, 0xffffffffffffffff; ret; 
0x000000000044faae: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov eax, 0xffffffff; ret; 
0x0000000000450556: push rdi; fsub dword ptr [rcx + rcx*4 + 2]; mov rax, -1; ret; 
0x00000000004334c9: push rdi; hlt; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000040da03: push rdi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000042e145: push rdi; in al, 0x4c; mov dword ptr [rdi - 0x14], ebx; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df55: push rdi; in eax, 0x4c; mov dword ptr [rdi - 0x13], ebx; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000043331a: push rdi; int1; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000042e716: push rdi; loope 0x2e765; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e75e: push rdi; loope 0x2e7ad; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e79c: push rdi; loope 0x2e7eb; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e7d4: push rdi; loope 0x2e823; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e812: push rdi; loope 0x2e861; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e84a: push rdi; loope 0x2e899; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e872: push rdi; loope 0x2e8c1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004310f6: push rdi; loope 0x31145; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043113e: push rdi; loope 0x3118d; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043117c: push rdi; loope 0x311cb; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004311b4: push rdi; loope 0x31203; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004311f2: push rdi; loope 0x31241; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000043122a: push rdi; loope 0x31279; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x0000000000431252: push rdi; loope 0x312a1; mov dword ptr [rdi - 0x17], ebx; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x00000000004333aa: push rdi; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000041610d: push rdi; or byte ptr [rbx + 0x48], bl; sub eax, edx; pop rbp; pop r12; ret; 
0x000000000048800a: push rdi; or byte ptr [rcx + 0x29], cl; ret 0x894c; 
0x000000000048d86a: push rdi; or byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000488011: push rdi; or byte ptr [rcx - 0x2feeb728], cl; pop rbp; pop rbx; ret; 
0x0000000000443c60: push rdi; or eax, 0x1c478d48; ret; 
0x000000000042dd75: push rdi; out 0x4c, al; mov dword ptr [rdi - 0x12], ebx; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dba5: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], r8; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dca1: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov byte ptr [rdi - 1], dl; ret; 
0x000000000042dbed: push rdi; out 0x4c, eax; mov dword ptr [rdi - 0x11], ebx; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000041ba05: push rdi; popfq; or al, byte ptr [rax]; ret; 
0x0000000000402a8a: push rdi; ret 0; 
0x000000000044ffd8: push rdi; ret 0x4000; 
0x0000000000418025: push rdi; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000042e8d7: push rdi; stc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e0fa: push rdi; std; mov word ptr [rdi - 2], cx; ret; 
0x000000000044ed63: push rdi; sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000042e4d7: push rdi; sti; mov dword ptr [rdi - 4], ecx; ret; 
0x00000000004130d1: push rdi; sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x000000000043f688: push rdi; tzcnt eax, eax; vzeroupper; ret; 
0x0000000000476f0b: push rdi; xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000042a8c8: push rdi; xor eax, eax; ret; 
0x000000000041be96: push rdx; adc byte ptr [rcx + 1], cl; ret 0x3948; 
0x000000000045f1ef: push rdx; cli; inc dword ptr [rcx - 0x77]; ret; 
0x0000000000401e2a: push rdx; movsd dword ptr [rdi], dword ptr [rsi]; or al, 0; pop rbx; ret; 
0x000000000044d4cd: push rdx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000041caa6: push rdx; or byte ptr [rcx + 0x39], cl; ret 0x850f; 
0x000000000042c629: push rdx; sar byte ptr [rsi], 0x41; jmp rcx; 
0x0000000000443cb7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; lea rax, [rdi + 0x1f]; ret; 
0x00000000004435f7: push rsi; adc bl, dh; movq qword ptr [rdi], mm0; movdqu xmmword ptr [rdi + 0x10], xmm2; ret; 
0x0000000000443556: push rsi; adc byte ptr [rbx + 0xff3174e], cl; jg 0x43566; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x17], ecx; ret; 
0x0000000000443576: push rsi; adc byte ptr [rbx + 0xff3184e], cl; jg 0x43586; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x000000000044637d: push rsi; add ah, byte ptr [rdx - 0xf]; jl 0x463cb; adc dword ptr [rsi + 3], edx; ret; 
0x0000000000433c62: push rsi; add al, 0x48; mov ecx, dword ptr [rsi]; mov qword ptr [rdi + 4], rdx; mov qword ptr [rdi], rcx; ret; 
0x0000000000433f01: push rsi; add cl, byte ptr [rbx + 0x257890e]; mov dword ptr [rdi], ecx; ret; 
0x0000000000433f71: push rsi; add dword ptr [rbx + 0x157890e], ecx; mov dword ptr [rdi], ecx; ret; 
0x0000000000487c87: push rsi; add dword ptr [rcx - 0x77], ecx; push rsp; ret; 
0x0000000000446376: push rsi; add dword ptr [rdx - 0xf], esp; jl 0x463c4; adc dword ptr [rsi + 2], edx; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000433bf2: push rsi; add eax, 0x480e8b48; mov dword ptr [rdi + 5], edx; mov qword ptr [rdi], rcx; ret; 
0x0000000000443a75: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; lea rax, [rdi + 0xc]; ret; 
0x0000000000443405: push rsi; add eax, 0x480f8948; mov dword ptr [rdi + 5], edx; ret; 
0x0000000000446413: push rsi; add eax, 0x487cf162; adc dword ptr [rsi + 6], edx; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000433e91: push rsi; add ecx, dword ptr [rbx + 0x357890e]; mov dword ptr [rdi], ecx; ret; 
0x00000000004439e3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; lea rax, [rdi + 6]; ret; 
0x00000000004433a3: push rsi; add ecx, dword ptr [rcx + 0x357890f]; ret; 
0x000000000042db46: push rsi; clc; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e49a: push rsi; clc; mov qword ptr [rdi - 0x15], r11; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e69a: push rsi; clc; mov qword ptr [rdi - 0x16], r11; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e89a: push rsi; clc; mov qword ptr [rdi - 0x17], r11; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db2a: push rsi; clc; mov qword ptr [rdi - 0x18], r10; mov qword ptr [rdi - 0x10], r11; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e4b6: push rsi; clc; mov qword ptr [rdi - 0xd], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e6b6: push rsi; clc; mov qword ptr [rdi - 0xe], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e8b6: push rsi; clc; mov qword ptr [rdi - 0xf], rcx; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042db62: push rsi; clc; mov qword ptr [rdi - 8], rdx; ret; 
0x000000000042e2d1: push rsi; cld; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd09: push rsi; cld; mov qword ptr [rdi - 0x11], r11; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dee9: push rsi; cld; mov qword ptr [rdi - 0x12], r11; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0c9: push rsi; cld; mov qword ptr [rdi - 0x13], r11; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2a9: push rsi; cld; mov qword ptr [rdi - 0x14], r11; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042df05: push rsi; cld; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e0e5: push rsi; cld; mov qword ptr [rdi - 0xb], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042e2c5: push rsi; cld; mov qword ptr [rdi - 0xc], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000042dd25: push rsi; cld; mov qword ptr [rdi - 9], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x000000000044620e: push rsi; cld; vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042e6d1: push rsi; cli; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 6], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000433542: push rsi; cmc; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xb], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000445616: push rsi; cmc; sub eax, edx; ret; 
0x00000000004334c2: push rsi; hlt; mov ecx, dword ptr [rsi - 4]; mov qword ptr [rdi - 0xc], rdx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000445606: push rsi; hlt; sub eax, edx; ret; 
0x0000000000433312: push rsi; int1; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xf], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004455d6: push rsi; int1; sub eax, edx; ret; 
0x0000000000423276: push rsi; jg 0x2327b; add byte ptr [rax - 0x73], cl; add eax, 0x27fbf; cmove rax, rdx; ret; 
0x0000000000433432: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xd], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x00000000004333a2: push rsi; mov rcx, qword ptr [rsi - 8]; mov qword ptr [rdi - 0xe], rdx; mov qword ptr [rdi - 8], rcx; ret; 
0x000000000047109a: push rsi; or byte ptr [rax - 0x73], cl; or byte ptr [rax - 0x77], cl; or cl, r13b; ret; 
0x0000000000443c57: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; lea rax, [rdi + 0x1c]; ret; 
0x0000000000443597: push rsi; or eax, 0x77f0ff3; movdqu xmmword ptr [rdi + 0xd], xmm2; ret; 
0x00000000004435d7: push rsi; psllq mm1, qword ptr [rdi]; jg 0x435e4; movdqu xmmword ptr [rdi + 0xf], xmm2; ret; 
0x0000000000443c97: push rsi; psllq mm1, qword ptr [rdi]; jg 0x43ca4; movdqu xmmword ptr [rdi + 0xf], xmm2; lea rax, [rdi + 0x1e]; ret; 
0x0000000000459b24: push rsi; push 0; mov rsi, qword ptr [rsp + 0x48]; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000477870: push rsi; ret 0x7420; 
0x00000000004677f3: push rsi; ret 0x7440; 
0x00000000004030af: push rsi; ret 0xf02; 
0x000000000046871f: push rsi; ret 0xf20; 
0x00000000004504f9: push rsi; ret; 
0x000000000042e8d1: push rsi; stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e0f2: push rsi; std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x0000000000446215: push rsi; std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000042e4d1: push rsi; sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000040ca0f: push rsi; sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x00000000004455e6: push rsi; sub eax, edx; ret; 
0x0000000000433642: push rsi; test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000044fa89: push rsi; xor eax, eax; add rsp, 8; ret; 
0x000000000046fb5d: push rsp; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rsp + 0x50], 0x20; jmp rdx; 
0x0000000000470887: push rsp; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x0000000000497331: push rsp; add eax, dword ptr [rax]; add byte ptr [rax], al; add byte ptr [rax], al; add rsp, 8; ret; 
0x0000000000485e17: push rsp; and al, 0x48; sub rdx, qword ptr fs:[0x28]; jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485ee9: push rsp; and al, 0x48; sub rdx, qword ptr fs:[0x28]; jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fb9: push rsp; and al, 0x48; sub rdx, qword ptr fs:[0x28]; jne 0x85ff4; add rsp, 0x58; ret; 
0x00000000004860d7: push rsp; and al, 0x58; sub rdx, qword ptr fs:[0x28]; jne 0x86197; add rsp, 0x68; ret; 
0x000000000045a0e4: push rsp; and al, 0x60; mov rsi, qword ptr [rsp + 0x50]; mov rdi, qword ptr [rsp + 0x58]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x0000000000450e0a: push rsp; and al, 8; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000040a249: push rsp; and al, 8; mov rax, qword ptr [rsp]; mov rsi, r13; mov rdi, r12; call rax; 
0x000000000048ddef: push rsp; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000044c8a0: push rsp; cmp ah, byte ptr [rax]; sub eax, edx; ret; 
0x0000000000425ef7: push rsp; cmp ah, byte ptr [rax]; sub eax, edx; vzeroupper; ret; 
0x0000000000496f30: push rsp; fld qword ptr [rax]; mov rax, qword ptr [rax + rbx*8]; test rax, rax; je 0x96f3e; call rax; 
0x000000000041f6c3: push rsp; ret 0xe8f0; 
0x000000000041eda2: push rsp; ret; 
0x000000000046bfee: push rsp; stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000043bd20: pushfq; adc eax, 0x83480000; ret 0xe910; 
0x000000000045750f: pushfq; cli; jmp qword ptr [rsi + 0xf]; 
0x0000000000422ce0: pushfq; jle 0x22ce3; add byte ptr [rax - 0x73], cl; add eax, 0x7945; cmove rax, rdx; ret; 
0x0000000000485590: pushfq; mov ebx, 0xc748fff7; ret 0xffff; 
0x000000000043ca20: pushfq; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429344: pushfq; or eax, 0x83480000; ret 0xeb10; 
0x0000000000419ca6: pxor mm0, mm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x0000000000419ca5: pxor xmm0, xmm0; movups xmmword ptr [rbx + 0x48], xmm0; pop rbx; ret; 
0x000000000041aff3: rcl byte ptr [rax - 0x3f76bba5], 0x5d; pop r12; ret; 
0x00000000004460c6: rcl byte ptr [rax], 0x29; cmp edx, ecx; jle 0x460e4; movsxd rax, ecx; ret; 
0x000000000041db32: rcl dword ptr [rip + 0xa7c64], 0x83; ret 0x8b01; 
0x0000000000496fea: rcr byte ptr [rax + 0x48ffffff], 0xc7; ret 0x23e0; 
0x000000000041b3eb: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; pop r14; ret; 
0x0000000000420c45: rcr byte ptr [rbp + 0x41], 0x5c; pop r13; ret; 
0x0000000000407f01: rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000416112: rcr byte ptr [rbp + 0x41], 1; pop rsp; ret; 
0x0000000000476cbf: rcr byte ptr [rbp + 0x4d], 0x89; xor al, 0x24; pop r12; pop r13; pop r14; ret; 
0x0000000000488017: rcr byte ptr [rbp + 0x5b], 1; ret; 
0x0000000000421dc5: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; pop r14; ret; 
0x0000000000413f01: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x000000000040236a: rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; ret; 
0x0000000000496f97: rcr byte ptr [rbx + 0x5d], 1; pop r12; pop r13; pop r14; ret; 
0x0000000000456c44: rcr dword ptr [rbx + 0x5d], 0xc1; loope 0x56c4d; pop r12; shl eax, cl; ret; 
0x0000000000486255: rcr dword ptr [rcx], 0xc0; and eax, 2; sub eax, 1; ret; 
0x000000000043c6dc: rcr dword ptr [rdx], 0xf; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e339: rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043db59: rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043df49: rcr dword ptr [rdx], 0xf; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d769: rcr dword ptr [rdx], 0xf; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d23c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ca1c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043c1fc: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000043d908: rcr dword ptr [rdx], 0xf; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043cd5c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043c53c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043bd1c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043cefc: rcr dword ptr [rdx], 0xf; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000043ddf9: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d619: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e729: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c05c: rcr dword ptr [rdx], 0xf; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043c192: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ce92: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c9b2: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dcfa: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e62a: rcr dword ptr [rdx], 0xf; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d1d2: rcr dword ptr [rdx], 0xf; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c4d2: rcr dword ptr [rdx], 0xf; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043bff2: rcr dword ptr [rdx], 0xf; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ccf2: rcr dword ptr [rdx], 0xf; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000043de4a: rcr dword ptr [rdx], 0xf; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d66a: rcr dword ptr [rdx], 0xf; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004464ed: rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x00000000004464df: rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000446de4: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000044b52d: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004475ff: rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000447b27: rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447cae: rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x000000000041f515: rep stosq qword ptr [rdi], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000402a8c: ret 0; 
0x00000000004722bf: ret 0x107; 
0x0000000000486f4a: ret 0x10e8; 
0x000000000041edda: ret 0x110; 
0x000000000040a5e3: ret 0x110f; 
0x0000000000487fec: ret 0x114d; 
0x0000000000470261: ret 0x12; 
0x000000000046691a: ret 0x13eb; 
0x00000000004192a6: ret 0x148; 
0x000000000047aad1: ret 0x149; 
0x0000000000401efc: ret 0x14d; 
0x000000000042ad88: ret 0x1576; 
0x000000000048e2db: ret 0x160f; 
0x000000000045c59c: ret 0x1676; 
0x000000000045d449: ret 0x1776; 
0x0000000000437270: ret 0x180f; 
0x000000000042a935: ret 0x1876; 
0x000000000047a2f1: ret 0x19e8; 
0x000000000040de4d: ret 0x19e9; 
0x0000000000478fe4: ret 0x1a76; 
0x000000000040336a: ret 0x1a8; 
0x000000000040f02d: ret 0x1b8; 
0x000000000044db12: ret 0x1c76; 
0x0000000000478a6c: ret 0x1f0f; 
0x00000000004792ef: ret 0x1f76; 
0x0000000000464f7b: ret 0x200; 
0x000000000047ff47: ret 0x2074; 
0x000000000041ff83: ret 0x2148; 
0x000000000045fd8b: ret 0x2174; 
0x000000000040991c: ret 0x2274; 
0x0000000000481b00: ret 0x2275; 
0x000000000044adac: ret 0x2276; 
0x000000000043ff18: ret 0x2288; 
0x000000000048c5aa: ret 0x2376; 
0x0000000000496ff1: ret 0x23e0; 
0x0000000000460892: ret 0x2476; 
0x00000000004052fc: ret 0x2548; 
0x000000000043f576: ret 0x2774; 
0x000000000042d807: ret 0x280f; 
0x000000000042a925: ret 0x2876; 
0x0000000000481b6f: ret 0x28f5; 
0x000000000046742e: ret 0x290f; 
0x000000000043fd47: ret 0x2920; 
0x00000000004695ad: ret 0x2941; 
0x0000000000488297: ret 0x2944; 
0x0000000000413229: ret 0x2948; 
0x000000000040c3eb: ret 0x2949; 
0x00000000004129c8: ret 0x294c; 
0x000000000045b54b: ret 0x29e9; 
0x0000000000420356: ret 0x2a8; 
0x0000000000412c8d: ret 0x2b48; 
0x0000000000489743: ret 0x2b49; 
0x0000000000417e0a: ret 0x2b; 
0x00000000004681ee: ret 0x2be; 
0x00000000004813f1: ret 0x2d8; 
0x0000000000497092: ret 0x2de0; 
0x0000000000497017: ret 0x2e60; 
0x0000000000472075: ret 0x2e66; 
0x0000000000497040: ret 0x3020; 
0x0000000000497069: ret 0x30a0; 
0x0000000000401a52: ret 0x3145; 
0x000000000047f113: ret 0x314c; 
0x0000000000407a1b: ret 0x3325; 
0x000000000041b8fc: ret 0x349; 
0x00000000004970bb: ret 0x35e0; 
0x00000000004970e4: ret 0x3640; 
0x0000000000461f5f: ret 0x3673; 
0x000000000045f062: ret 0x3676; 
0x000000000049710d: ret 0x36c0; 
0x0000000000481f82: ret 0x373; 
0x0000000000497136: ret 0x3780; 
0x000000000049715f: ret 0x3800; 
0x0000000000497188: ret 0x3860; 
0x000000000042a915: ret 0x3876; 
0x000000000041858c: ret 0x389; 
0x0000000000496fc8: ret 0x3920; 
0x000000000040b66b: ret 0x3948; 
0x000000000041a54b: ret 0x3949; 
0x00000000004800be: ret 0x394c; 
0x000000000040c64d: ret 0x394d; 
0x0000000000445bf2: ret 0x3a01; 
0x0000000000401a5d: ret 0x3a77; 
0x000000000041c381: ret 0x3b48; 
0x000000000048a1fa: ret 0x3bf; 
0x0000000000494ba9: ret 0x3c74; 
0x0000000000475cb1: ret 0x3c75; 
0x0000000000485970: ret 0x3d72; 
0x000000000041fb88: ret 0x3d74; 
0x000000000047a257: ret 0x3e8; 
0x000000000044ffda: ret 0x4000; 
0x00000000004099cd: ret 0x4001; 
0x000000000045c572: ret 0x4076; 
0x0000000000477a33: ret 0x408d; 
0x000000000045921f: ret 0x4101; 
0x000000000047bdab: ret 0x4102; 
0x0000000000402904: ret 0x4104; 
0x00000000004551de: ret 0x4110; 
0x0000000000458ddf: ret 0x4166; 
0x000000000040b444: ret 0x4174; 
0x0000000000401996: ret 0x41c3; 
0x00000000004249da: ret 0x4266; 
0x000000000045d41e: ret 0x4276; 
0x0000000000473464: ret 0x4389; 
0x000000000046010a: ret 0x4408; 
0x0000000000457da0: ret 0x440f; 
0x000000000041f921: ret 0x4473; 
0x000000000040f32d: ret 0x448b; 
0x000000000044ddfa: ret 0x4501; 
0x0000000000468327: ret 0x454; 
0x000000000041779f: ret 0x458b; 
0x000000000048943f: ret 0x45c6; 
0x000000000047bd76: ret 0x4776; 
0x0000000000405f29: ret 0x4801; 
0x0000000000422a5f: ret 0x4802; 
0x000000000046c904: ret 0x4803; 
0x000000000046c2b1: ret 0x4804; 
0x0000000000402b36: ret 0x4808; 
0x0000000000410293: ret 0x4810; 
0x0000000000461e46: ret 0x4811; 
0x000000000044e792: ret 0x4817; 
0x0000000000494cd6: ret 0x4830; 
0x000000000047bdd9: ret 0x4838; 
0x00000000004248e6: ret 0x4840; 
0x0000000000402292: ret 0x4853; 
0x000000000045c610: ret 0x4858; 
0x0000000000419b43: ret 0x4860; 
0x0000000000469fa3: ret 0x4864; 
0x000000000041a8f0: ret 0x4866; 
0x000000000042bbcb: ret 0x4880; 
0x000000000043f2cc: ret 0x48c3; 
0x00000000004100e0: ret 0x48e9; 
0x0000000000407e4c: ret 0x4901; 
0x0000000000459c0c: ret 0x4902; 
0x0000000000484b73: ret 0x4908; 
0x000000000042931c: ret 0x4910; 
0x00000000004627f7: ret 0x4911; 
0x000000000048e964: ret 0x4918; 
0x000000000048240a: ret 0x4a4; 
0x000000000041715e: ret 0x4a8d; 
0x000000000045e779: ret 0x4b01; 
0x0000000000493302: ret 0x4c01; 
0x000000000042a5fe: ret 0x4c04; 
0x000000000040bcd6: ret 0x4c08; 
0x000000000042a176: ret 0x4c20; 
0x000000000040bb3f: ret 0x4c40; 
0x000000000042a1b6: ret 0x4c60; 
0x0000000000468507: ret 0x4d74; 
0x0000000000414476: ret 0x4e8; 
0x000000000049527c: ret 0x4ee8; 
0x0000000000402e87: ret 0x4f0f; 
0x0000000000402466: ret 0x518d; 
0x000000000040198c: ret 0x538d; 
0x000000000047ebd1: ret 0x5441; 
0x00000000004507c2: ret 0x5488; 
0x000000000040a73f: ret 0x55bf; 
0x00000000004564b0: ret 0x589; 
0x00000000004026e8: ret 0x58b; 
0x0000000000401b3c: ret 0x58e9; 
0x000000000044ed17: ret 0x5941; 
0x000000000045d598: ret 0x5a58; 
0x0000000000411310: ret 0x5b8; 
0x000000000042ad40: ret 0x5d76; 
0x000000000042bf92: ret 0x5d77; 
0x000000000046f492: ret 0x5d7; 
0x0000000000482035: ret 0x5e8; 
0x000000000046c05a: ret 0x607; 
0x000000000044c2d2: ret 0x6200; 
0x000000000044b741: ret 0x6280; 
0x000000000046e1df: ret 0x6348; 
0x000000000041a5e3: ret 0x63e9; 
0x00000000004627ce: ret 0x6411; 
0x0000000000470945: ret 0x6604; 
0x0000000000477d51: ret 0x6608; 
0x000000000042a8a1: ret 0x6620; 
0x000000000042164c: ret 0x66c3; 
0x000000000044adc8: ret 0x676; 
0x000000000044ffce: ret 0x67; 
0x000000000041b38c: ret 0x6974; 
0x0000000000478033: ret 0x6a76; 
0x000000000040a781: ret 0x6ae9; 
0x00000000004882ac: ret 0x6ce9; 
0x000000000041915a: ret 0x6d; 
0x000000000044e780: ret 0x6de9; 
0x0000000000455dca: ret 0x6ec; 
0x000000000044ed7a: ret 0x735; 
0x0000000000458b3a: ret 0x73a; 
0x0000000000455144: ret 0x7400; 
0x0000000000421160: ret 0x7402; 
0x0000000000455733: ret 0x7404; 
0x0000000000473a65: ret 0x7408; 
0x0000000000411fb1: ret 0x7420; 
0x00000000004677f5: ret 0x7440; 
0x000000000041b3b0: ret 0x7501; 
0x000000000041b3a8: ret 0x7502; 
0x000000000041120a: ret 0x7504; 
0x0000000000445594: ret 0x7508; 
0x000000000044412b: ret 0x7510; 
0x0000000000422e1a: ret 0x7520; 
0x0000000000444145: ret 0x7540; 
0x000000000041ee76: ret 0x75e9; 
0x0000000000455de2: ret 0x767; 
0x000000000047a61b: ret 0x774; 
0x0000000000453f1a: ret 0x783; 
0x0000000000477cf1: ret 0x7e08; 
0x000000000042a841: ret 0x7e20; 
0x000000000042358c: ret 0x7f10; 
0x0000000000424769: ret 0x8000; 
0x0000000000488d9b: ret 0x8001; 
0x0000000000425e58: ret 0x80; 
0x0000000000426035: ret 0x8101; 
0x00000000004029cc: ret 0x8141; 
0x00000000004162ff: ret 0x8148; 
0x0000000000467a7c: ret 0x8149; 
0x0000000000494231: ret 0x8166; 
0x000000000048b95e: ret 0x8190; 
0x0000000000422cee: ret 0x81c3; 
0x00000000004815e5: ret 0x81e9; 
0x0000000000464bd0: ret 0x820f; 
0x0000000000401985: ret 0x8301; 
0x000000000040fa4f: ret 0x8302; 
0x00000000004717f4: ret 0x8304; 
0x0000000000426105: ret 0x8308; 
0x0000000000436e22: ret 0x830f; 
0x00000000004260d0: ret 0x8310; 
0x00000000004260a2: ret 0x8320; 
0x0000000000410dcb: ret 0x8341; 
0x000000000040ac00: ret 0x8348; 
0x000000000046e7a2: ret 0x8349; 
0x00000000004823da: ret 0x8364; 
0x00000000004073c6: ret 0x8401; 
0x000000000046c1e6: ret 0x8404; 
0x000000000041afc8: ret 0x840f; 
0x00000000004916dd: ret 0x8440; 
0x000000000048254b: ret 0x8445; 
0x0000000000410fd5: ret 0x8501; 
0x000000000040fb03: ret 0x850f; 
0x00000000004178f5: ret 0x8548; 
0x000000000042216e: ret 0x85c3; 
0x0000000000468c10: ret 0x85c7; 
0x0000000000403e8d: ret 0x860f; 
0x000000000041820c: ret 0x870f; 
0x000000000042a945: ret 0x876; 
0x0000000000488df1: ret 0x87f6; 
0x0000000000407eb1: ret 0x8801; 
0x0000000000466968: ret 0x8840; 
0x0000000000404860: ret 0x8901; 
0x0000000000472191: ret 0x8904; 
0x000000000041074b: ret 0x8908; 
0x000000000047bf86: ret 0x8944; 
0x00000000004115c2: ret 0x8945; 
0x00000000004030d9: ret 0x8948; 
0x000000000040a96b: ret 0x8949; 
0x00000000004098fc: ret 0x894c; 
0x000000000041e171: ret 0x894d; 
0x000000000048708b: ret 0x894e; 
0x000000000047c5d4: ret 0x8a8; 
0x00000000004039b0: ret 0x8ae8; 
0x000000000041db39: ret 0x8b01; 
0x0000000000453017: ret 0x8b05; 
0x0000000000405e4b: ret 0x8b41; 
0x000000000046e681: ret 0x8b42; 
0x0000000000405ae6: ret 0x8b48; 
0x000000000047fe7d: ret 0x8b49; 
0x0000000000487012: ret 0x8b4a; 
0x000000000040546b: ret 0x8b4c; 
0x0000000000472114: ret 0x8b; 
0x0000000000471774: ret 0x8d04; 
0x0000000000460165: ret 0x8d08; 
0x000000000045ddb0: ret 0x8d0f; 
0x000000000045b02c: ret 0x8d47; 
0x000000000040af5b: ret 0x8d48; 
0x00000000004203e2: ret 0x8d49; 
0x000000000047c8ce: ret 0x8d4a; 
0x00000000004696bd: ret 0x8d4b; 
0x000000000041e893: ret 0x8d4c; 
0x0000000000465adb: ret 0x8e0f; 
0x0000000000469b4b: ret 0x8fe8; 
0x0000000000406f13: ret 0x914; 
0x00000000004066e6: ret 0x920; 
0x0000000000476fa8: ret 0x94c; 
0x000000000048cc85: ret 0x95e8; 
0x0000000000406c96: ret 0x964; 
0x0000000000406d92: ret 0x969; 
0x000000000048f2bc: ret 0x974; 
0x000000000040c792: ret 0x9d89; 
0x0000000000489697: ret 0x9eb; 
0x000000000048d698: ret 0x9f70; 
0x0000000000494928: ret 0xa2e8; 
0x000000000041f23a: ret 0xa65; 
0x000000000041db42: ret 0xa7e; 
0x000000000040803e: ret 0xa801; 
0x000000000045effe: ret 0xa8eb; 
0x0000000000454e31: ret 0xa9e8; 
0x0000000000452432: ret 0xabe; 
0x000000000041e672: ret 0xadb; 
0x0000000000418fd6: ret 0xaf1; 
0x000000000041e8ad: ret 0xb0eb; 
0x000000000041ef89: ret 0xb48b; 
0x0000000000486051: ret 0xb60f; 
0x000000000048cdb2: ret 0xb70f; 
0x000000000041f829: ret 0xb817; 
0x000000000046e98f: ret 0xb8; 
0x0000000000481604: ret 0xb8eb; 
0x000000000047c890: ret 0xba41; 
0x000000000045522d: ret 0xbb10; 
0x0000000000491d15: ret 0xbc80; 
0x000000000047a34e: ret 0xbce8; 
0x00000000004551b6: ret 0xbd10; 
0x000000000041ce0d: ret 0xbd41; 
0x000000000047bdb7: ret 0xbf77; 
0x000000000044ff91: ret 0xbf98; 
0x0000000000424629: ret 0xc000; 
0x000000000040204b: ret 0xc031; 
0x000000000040b43c: ret 0xc083; 
0x000000000040e8e4: ret 0xc085; 
0x000000000042b3f9: ret 0xc0ff; 
0x0000000000401922: ret 0xc148; 
0x000000000046093f: ret 0xc1e9; 
0x000000000041b2c0: ret 0xc231; 
0x000000000041aae8: ret 0xc372; 
0x0000000000481fd9: ret 0xc475; 
0x000000000044bde5: ret 0xc500; 
0x000000000041aa83: ret 0xc572; 
0x0000000000446fd9: ret 0xc580; 
0x0000000000455063: ret 0xc600; 
0x000000000040801f: ret 0xc602; 
0x00000000004552ce: ret 0xc610; 
0x000000000046d3ec: ret 0xc689; 
0x0000000000480d52: ret 0xc6; 
0x0000000000440274: ret 0xc748; 
0x00000000004823b8: ret 0xc74; 
0x00000000004854db: ret 0xc829; 
0x000000000041857d: ret 0xc883; 
0x0000000000406a03: ret 0xc8b; 
0x000000000042b85b: ret 0xc919; 
0x000000000041c0d5: ret 0xc931; 
0x000000000041b394: ret 0xc983; 
0x0000000000422d6a: ret 0xc985; 
0x000000000043fe65: ret 0xc9ff; 
0x0000000000471859: ret 0xca08; 
0x000000000041b10b: ret 0xca83; 
0x000000000041d069: ret 0xcac1; 
0x0000000000494bde: ret 0xcb75; 
0x000000000040723b: ret 0xce80; 
0x000000000048af98: ret 0xce89; 
0x0000000000450188: ret 0xcfe9; 
0x0000000000411c88: ret 0xd008; 
0x0000000000407a2b: ret 0xd089; 
0x0000000000462970: ret 0xd108; 
0x0000000000488222: ret 0xd1b8; 
0x00000000004467a7: ret 0xd1f7; 
0x0000000000488261: ret 0xd348; 
0x000000000045cc0d: ret 0xd3e9; 
0x0000000000495df5: ret 0xd5e8; 
0x00000000004036f3: ret 0xd689; 
0x0000000000488904: ret 0xd8b; 
0x0000000000450e2a: ret 0xd8f7; 
0x000000000040246c: ret 0xda89; 
0x0000000000475e7c: ret 0xdaf7; 
0x000000000047d9dd: ret 0xdbeb; 
0x0000000000488f7c: ret 0xde89; 
0x000000000044fe4d: ret 0xdeb; 
0x00000000004244e9: ret 0xe000; 
0x00000000004440ed: ret 0xe074; 
0x000000000041f629: ret 0xe083; 
0x0000000000493b8a: ret 0xe0e8; 
0x0000000000490042: ret 0xe0e9; 
0x0000000000402985: ret 0xe281; 
0x000000000040187b: ret 0xe283; 
0x00000000004562d9: ret 0xe480; 
0x0000000000469990: ret 0xe57f; 
0x000000000046d428: ret 0xe783; 
0x0000000000488823: ret 0xe7f; 
0x000000000040799e: ret 0xe801; 
0x00000000004115e5: ret 0xe883; 
0x000000000041f6c4: ret 0xe8f0; 
0x00000000004767fb: ret 0xe901; 
0x000000000043ff06: ret 0xe908; 
0x000000000043bb86: ret 0xe910; 
0x00000000004225fc: ret 0xe975; 
0x0000000000469c67: ret 0xe9f8; 
0x00000000004673b4: ret 0xeac0; 
0x0000000000401cea: ret 0xeac1; 
0x0000000000411129: ret 0xeb01; 
0x0000000000489461: ret 0xeb08; 
0x000000000042934a: ret 0xeb10; 
0x000000000041d0b2: ret 0xeb75; 
0x000000000040247a: ret 0xebe9; 
0x000000000040a321: ret 0xec75; 
0x0000000000418c57: ret 0xee75; 
0x00000000004815d7: ret 0xee7c; 
0x000000000040bce1: ret 0xef72; 
0x00000000004243a9: ret 0xf000; 
0x00000000004894a8: ret 0xf00; 
0x0000000000402476: ret 0xf01; 
0x00000000004030b1: ret 0xf02; 
0x000000000040aff0: ret 0xf039; 
0x000000000041065b: ret 0xf03; 
0x0000000000426137: ret 0xf04; 
0x00000000004141e5: ret 0xf075; 
0x00000000004717e9: ret 0xf0c; 
0x000000000041e765: ret 0xf0f; 
0x0000000000423542: ret 0xf10; 
0x000000000040acf5: ret 0xf11; 
0x000000000046eb15: ret 0xf1e9; 
0x000000000040353d: ret 0xf20; 
0x000000000041b09b: ret 0xf283; 
0x000000000041b012: ret 0xf289; 
0x000000000041921e: ret 0xf390; 
0x000000000042ad25: ret 0xf40; 
0x00000000004110e9: ret 0xf41; 
0x000000000046dd0b: ret 0xf44; 
0x0000000000476711: ret 0xf475; 
0x0000000000411427: ret 0xf48; 
0x000000000045091f: ret 0xf49; 
0x00000000004677d9: ret 0xf50; 
0x0000000000425f6e: ret 0xf5c5; 
0x0000000000489902: ret 0xf631; 
0x000000000048bb7e: ret 0xf641; 
0x00000000004086d6: ret 0xf66; 
0x0000000000481514: ret 0xf6e8; 
0x000000000044e51a: ret 0xf70b; 
0x0000000000457d86: ret 0xf739; 
0x00000000004133e0: ret 0xf748; 
0x000000000044ac6b: ret 0xf77a; 
0x0000000000424269: ret 0xf800; 
0x000000000047e0ba: ret 0xf830; 
0x00000000004668b0: ret 0xf839; 
0x00000000004799d1: ret 0xf883; 
0x0000000000496a5a: ret 0xf894; 
0x0000000000468451: ret 0xf8; 
0x0000000000419fb7: ret 0xf8b; 
0x00000000004020c5: ret 0xf981; 
0x000000000040ede2: ret 0xf; 
0x000000000047e85a: ret 0xfa16; 
0x000000000045d6fa: ret 0xfa6d; 
0x000000000044b001: ret 0xfbc5; 
0x0000000000424129: ret 0xfc00; 
0x00000000004468a7: ret 0xfc0; 
0x000000000045854a: ret 0xfc25; 
0x00000000004220f2: ret 0xfc3; 
0x000000000048609a: ret 0xfcee; 
0x0000000000423fe9: ret 0xfe00; 
0x00000000004148ba: ret 0xfec8; 
0x0000000000423ea9: ret 0xff00; 
0x0000000000433371: ret 0xff2; 
0x000000000042b73f: ret 0xff2d; 
0x000000000042490a: ret 0xff3; 
0x00000000004927fd: ret 0xff3e; 
0x0000000000423d69: ret 0xff80; 
0x0000000000454d10: ret 0xff85; 
0x000000000040bb29: ret 0xff98; 
0x0000000000409fe2: ret 0xffb8; 
0x0000000000423c29: ret 0xffc0; 
0x000000000041f8ea: ret 0xffcc; 
0x0000000000423ae9: ret 0xffe0; 
0x000000000048425b: ret 0xffef; 
0x0000000000409ea0: ret 0xfff0; 
0x000000000040d2f2: ret 0xfff1; 
0x000000000047cce8: ret 0xfff2; 
0x000000000049309a: ret 0xfff5; 
0x0000000000495457: ret 0xfff6; 
0x000000000046256a: ret 0xfff7; 
0x0000000000423869: ret 0xfff8; 
0x0000000000464df6: ret 0xfff9; 
0x00000000004581c3: ret 0xfffa; 
0x000000000040160e: ret 0xfffb; 
0x000000000040d48a: ret 0xfffc; 
0x0000000000487b6b: ret 0xfffd; 
0x00000000004151b6: ret 0xfffe; 
0x00000000004176f5: ret 0xffff; 
0x000000000042afe9: ret 1; 
0x0000000000408a0c: ret 2; 
0x0000000000429c1e: ret 4; 
0x000000000048b782: ret 5; 
0x000000000042fe46: ret 6; 
0x000000000041f9d5: ret 7; 
0x000000000042b049: ret 8; 
0x00000000004139ba: ret 9; 
0x000000000044b9fa: ret; 
0x0000000000477e92: retf 0; add bl, dh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000478e32: retf 0; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004121a3: retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000041e185: retf 0x149; ret 0x894d; 
0x00000000004460cb: retf 0x167e; movsxd rax, ecx; ret; 
0x00000000004733ce: retf 0x170f; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm1; ret; 
0x0000000000417fe7: retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x00000000004806ea: retf 0x20e8; or bh, al; dec dword ptr [rax - 0x77]; add eax, 0x4c1b9; add rsp, 8; ret; 
0x000000000041349f: retf 0x2948; ret 0x2948; 
0x000000000041d06b: retf 0x3108; ror byte ptr [rax + 9], 1; ret; 
0x0000000000481afd: retf 0x394c; ret 0x2275; 
0x000000000040de62: retf 0x45; add byte ptr [rax + 0x39], cl; ret; 
0x000000000041d812: retf 0x8348; ret 0x4810; 
0x00000000004292ef: retf 0x8349; ret 0x7f10; 
0x000000000043bde7: retf 0x8349; ret 0xf10; 
0x0000000000402695: retf 0x8944; ret; 
0x00000000004882a9: retf 0x8948; ret 0x6ce9; 
0x0000000000429316: retf 0xd; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000466cd7: retf 0xe273; mov rax, r8; ret; 
0x000000000043f420: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000044f04c: retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000047d533: retf 0xf48; ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x000000000043f5e1: retf 0xf4c; stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000405e47: retf 0xf66; outsb dx, byte ptr [rsi]; ret 0x8b41; 
0x000000000046742a: retf 0xf66; outsd dx, dword ptr [rsi]; ret 0x290f; 
0x0000000000451196: retf 0xf741; sar edi, 0xf; add byte ptr [rax], al; jne 0x511b0; mov eax, 9; syscall; 
0x000000000048aa12: retf 0xf951; jmp qword ptr [rsi + 0x49]; 
0x00000000004770fa: retf 0xfdc5; xlatb; ret; 
0x0000000000456a72: retf 0xfff5; jmp qword ptr [rsi + 0x2e]; 
0x000000000041359a: retf 0xfffc; jmp qword ptr [rsi - 0x70]; 
0x0000000000412b0a: retf 0xfffd; jmp qword ptr [rsi - 0x70]; 
0x0000000000439abc: retf 0xfffe; jmp qword ptr [rsi + 0xf]; 
0x00000000004134da: retf 0xfffe; jmp qword ptr [rsi - 0x70]; 
0x0000000000497499: retf 1; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x000000000044d304: retf; jbe 0x4d520; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x00000000004704c2: retf; jmp rdx; 
0x000000000047061f: retf; mov r11d, 1; xor ebp, ebp; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x00000000004705af: retf; mov r9d, 1; mov r10d, 1; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000046fb93: retf; mov r9d, 1; xor r10d, r10d; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000047b5f4: retf; syscall; 
0x000000000044bc21: rol ah, 0xc2; jp 0x4bc1d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000044dc81: rol ah, 0xc2; jp 0x4dc7d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000000477d4e: rol bl, 0x83; ret 0x6608; 
0x000000000042a89e: rol bl, 0x83; ret 0x6620; 
0x000000000044c444: rol byte ptr [rax + 0x3a], 0x34; add dh, byte ptr [rbp - 0x72]; add rax, rdx; ret; 
0x00000000004248e2: rol byte ptr [rax + 0x48], 0x83; ret 0x4840; 
0x000000000043f572: rol byte ptr [rax + 0x49], 0x39; ret 0x2774; 
0x0000000000461a00: rol byte ptr [rax + rcx*2], 0x83; ret; 
0x000000000045bcff: rol byte ptr [rax + rcx*2], 0x89; test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000045545e: rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8348; 
0x0000000000455b9a: rol byte ptr [rax - 0x6af0ffc8], cl; ret 0x8d48; 
0x0000000000455b79: rol byte ptr [rax - 0x6bf0ffc8], cl; ret 0x8d48; 
0x000000000040100a: rol byte ptr [rax], 0; add byte ptr [rax], al; test rax, rax; je 0x1016; call rax; 
0x00000000004152ec: rol byte ptr [rax], 0; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x000000000045572e: rol byte ptr [rax], 0; add dh, dh; ret 0x7404; 
0x000000000044c499: rol byte ptr [rax], 0xc5; sti; xchg eax, ebx; rol byte ptr [rbp - 0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x00000000004573c6: rol byte ptr [rax], 1; xor r8d, r8d; xor ecx, ecx; xor edx, edx; push rax; call rbx; 
0x000000000044fa85: rol byte ptr [rbp + 0x315675c0], 1; ror byte ptr [rax - 0x7d], 0xc4; or bl, al; nop dword ptr [rax]; mov eax, 0xe4; syscall; 
0x0000000000479db3: rol byte ptr [rbp + 0x31], 1; shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x79df0; mov eax, 0x101; syscall; 
0x000000000044b005: rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x000000000042aaf2: rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000479335: rol byte ptr [rbp - 0x3ac98a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044dd88: rol byte ptr [rbp - 0x3acc8a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044bd0d: rol byte ptr [rbp - 0x3ad18a40], cl; std; xlatb; ret 0xc085; 
0x000000000044db52: rol byte ptr [rbp - 0x3ad68a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044c49e: rol byte ptr [rbp - 0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000044bc02: rol byte ptr [rbp - 0xc868b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000042aea4: rol byte ptr [rbp - 0xca48b40], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x000000000044bc26: rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000048c3da: rol byte ptr [rbx + 0x10c247c], 0xf; xchg eax, ebp; ror byte ptr [rcx + 0x3ff4705], 0; add rsp, 0x18; ret; 
0x0000000000452acf: rol byte ptr [rbx + 0x2b7502e1], 0x45; xor eax, eax; mov eax, 0x19; syscall; 
0x0000000000486257: rol byte ptr [rbx - 0x177cfd20], 1; ret; 
0x000000000044d8e3: rol byte ptr [rbx - 0x39c6bf12], 0x72; or dword ptr [rax + 0x29], ecx; xlatb; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004783a2: rol byte ptr [rbx], 0; add byte ptr [rax], al; ret; 
0x000000000044f35f: rol byte ptr [rcx + 0x48], 1; clc; shr rax, 2; vzeroupper; ret; 
0x000000000043fa5f: rol byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x000000000043f843: rol byte ptr [rcx + 0x81e9], 0; add eax, ecx; vzeroupper; ret; 
0x0000000000401a49: rol byte ptr [rcx + 0xbeff], cl; add byte ptr [rdi], cl; lahf; ret 0x3145; 
0x0000000000477aa5: rol byte ptr [rcx + rdi], 0xf2; je 0x77aaf; test edx, edx; jne 0x77aa0; ret; 
0x000000000047ccdf: rol byte ptr [rcx - 0x78], 1; xchg dword ptr [rsi], ebx; add eax, dword ptr [rax]; add cl, ch; ret 0xfff2; 
0x0000000000478382: rol byte ptr [rcx], 0; add byte ptr [rax], al; ret; 
0x0000000000485450: rol byte ptr [rcx], 0x84; sal byte ptr [rbp - 0x32], cl; movsx eax, cl; neg eax; ret; 
0x000000000042b905: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x10]; movzx eax, byte ptr [rdi + rax - 0x10]; sub eax, ecx; ret; 
0x000000000044b1af: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000042b683: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000044b19c: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; ret; 
0x000000000042b663: rol byte ptr [rcx], 0xd0; movzx ecx, byte ptr [rsi + rax - 0x40]; movzx eax, byte ptr [rdi + rax - 0x40]; sub eax, ecx; vzeroupper; ret; 
0x0000000000402462: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0x518d; 
0x0000000000401988: rol byte ptr [rcx], 0xf; scasd eax, dword ptr [rdi]; ret 0x538d; 
0x000000000044d34c: rol byte ptr [rcx], 1; add byte ptr [rax], al; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; ret; 
0x0000000000456c27: rol byte ptr [rcx], 1; add byte ptr [rax], al; pop rbx; pop rbp; pop r12; ret; 
0x0000000000475a37: rol byte ptr [rdi + 0x1fa8317], cl; jg 0x75a88; nop; add rsp, 0x18; ret; 
0x0000000000475b53: rol byte ptr [rdi + 0x1fa8317], cl; jg 0x75bb0; nop; add rsp, 0x18; ret; 
0x00000000004885fa: rol byte ptr [rdi + 0x43cdf05], 0; cmp eax, 1; jg 0x88638; pop rbp; ret; 
0x000000000046660a: rol byte ptr [rdi + 0x661ef05], 0; cmp eax, 1; jg 0x66638; xor eax, eax; add rsp, 8; ret; 
0x00000000004783e2: rol byte ptr [rdi], 0; add byte ptr [rax], al; ret; 
0x000000000041e489: rol byte ptr [rdi], 1; add al, ch; call rsp; 
0x000000000041e506: rol byte ptr [rdi], 1; add al, ch; sar bh, cl; jmp qword ptr [rsi - 0x70]; 
0x0000000000478392: rol byte ptr [rdx], 0; add byte ptr [rax], al; ret; 
0x000000000048bbfe: rol byte ptr [rdx], 0; add byte ptr [rcx + 0x248b4ce8], cl; ret 0xf41; 
0x000000000041130d: rol byte ptr [rdx], 0xeb; ret 0x5b8; 
0x00000000004540c3: rol byte ptr [rdx], 1; add byte ptr [rax], al; mov eax, 0xda; syscall; 
0x0000000000463242: rol byte ptr [rip - 0x76b80000], cl; ret 0x294c; 
0x00000000004783d2: rol byte ptr [rsi], 0; add byte ptr [rax], al; ret; 
0x0000000000417ada: rol byte ptr [rsi], cl; or eax, dword ptr [rax]; cmp eax, 1; jg 0x17b20; add rsp, 8; ret; 
0x000000000044ad85: rol ch, 0xf8; ja 0x4ad0f; sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x0000000000478fbd: rol ch, 0xf8; ja 0x78f47; sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x000000000043f75a: rol ch, cl; std; xlatb; ret 0xc085; 
0x0000000000477156: rol ch, cl; std; xlatb; ret; 
0x000000000047897d: rol cl, 0xe8; add cl, byte ptr [rdi]; add esi, edx; je 0x7898a; vzeroall; ret; 
0x000000000041b0cc: rol cl, cl; out 7, al; xor sil, 0x81; syscall; 
0x000000000047832c: rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x0000000000447b1f: rol dword ptr [rax + 0xf], 1; mov dh, 0xc6; mov rdx, rdi; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x00000000004806f4: rol dword ptr [rax + rax], 0x48; add esp, 8; ret; 
0x00000000004806c8: rol dword ptr [rax + rax], 0x48; cmp ecx, edi; je 0x806d8; ret; 
0x0000000000477d49: rol dword ptr [rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042a8c4: rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000477d74: rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x0000000000477d44: rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042ad53: rol dword ptr [rbp - 0x3aa78a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042af6f: rol dword ptr [rbp - 0x3ad38a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042a894: rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043f0b9: rol dword ptr [rbp - 0xc9d8b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000043f684: rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000047de3c: rol dword ptr [rcx + 0x4e470c7a], cl; push rbp; add byte ptr [rbp - 0x36], dh; ret; 
0x000000000046c7a5: rol dword ptr [rcx + 0x5c], 0x41; pop rbp; mov rax, r9; pop r14; ret; 
0x0000000000402900: rol dword ptr [rcx + rcx*2], 0x83; ret 0x4104; 
0x000000000042235a: rol dword ptr [rcx], cl; add byte ptr [rax - 0x73], cl; add eax, 0x1cf2c; cmove rax, rdx; ret; 
0x000000000045d8fe: rol dword ptr [rdx + rdx*8 - 0x157e2a87], 1; ret 0; 
0x000000000042b73b: rol ebp, 1; stc; xlatb; ret 0xff2d; 
0x0000000000455389: ror byte ptr [r8 - 0x75], 1; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000042a6ab: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2a950; add rax, rdi; add rax, rcx; ret; 
0x000000000042a912: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2a950; add rax, rdi; ret; 
0x000000000042a922: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2a950; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042a932: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2a950; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042a942: ror byte ptr [rax + 0x29], 0xc2; jbe 0x2a950; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044f333: ror byte ptr [rax + 0x29], 0xd7; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa33: ror byte ptr [rax + 0x29], 0xd7; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044f313: ror byte ptr [rax + 0x29], 0xd7; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa23: ror byte ptr [rax + 0x29], 0xd7; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000044d8c3: ror byte ptr [rax + 0x29], 0xd7; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d8d3: ror byte ptr [rax + 0x29], 0xd7; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044f9e3: ror byte ptr [rax + 0x29], 0xd7; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044f9c3: ror byte ptr [rax + 0x29], 0xd7; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000043f427: ror byte ptr [rax + 0x29], 1; clc; ret; 
0x000000000044effc: ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x000000000044d936: ror byte ptr [rax + 0x39], 0xc6; cmovb eax, esi; ret; 
0x000000000043faa3: ror byte ptr [rax + 0x39], 0xc6; cmovb eax, esi; vzeroupper; ret; 
0x000000000041a9c0: ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x000000000045b022: ror byte ptr [rax + 0x39], cl; ret; 
0x0000000000488923: ror byte ptr [rax + 0x3b], 1; add eax, 0x440c5; jae 0x88939; mov rdx, qword ptr [rip + 0x440c4]; add word ptr [rdx + rax*2], 1; ret; 
0x0000000000485a1d: ror byte ptr [rax + 0x63], cl; ret 0x8d48; 
0x000000000040de49: ror byte ptr [rax + 0xf], 0x44; ret 0x19e9; 
0x000000000045b60d: ror byte ptr [rax + 0xf], 0x44; ret; 
0x0000000000493216: ror byte ptr [rax + 0xf], 0x45; and al, 0x10; add rsp, 0x28; ret; 
0x000000000040191e: ror byte ptr [rax + 0xf], 0xaf; ret 0xc148; 
0x00000000004881e2: ror byte ptr [rax + 0xf], 1; mov edx, 0x894830e8; or byte ptr [rax + 2], r15b; ret; 
0x000000000044bc2e: ror byte ptr [rax + 1], 0xc8; ret; 
0x000000000042aeac: ror byte ptr [rax + 1], 0xc8; vzeroupper; ret; 
0x000000000044908c: ror byte ptr [rax + 1], 0xc8; xtest; je 0x49099; vzeroall; ret; 
0x000000000044b14f: ror byte ptr [rax + 1], 0xd0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; ret; 
0x000000000042b647: ror byte ptr [rax + 1], 0xd0; movzx ecx, byte ptr [rsi + rax + 0x60]; movzx eax, byte ptr [rax + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x000000000044c6b4: ror byte ptr [rax + 1], 0xd0; ret; 
0x000000000043f27e: ror byte ptr [rax + 1], 0xd0; vzeroupper; ret; 
0x0000000000449a9e: ror byte ptr [rax + 1], 0xd0; xtest; je 0x49aab; vzeroall; ret; 
0x000000000042a9cc: ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x000000000044c20a: ror byte ptr [rax + 1], 0xf8; cmp sil, byte ptr [rax]; jne 0x4c231; ret; 
0x000000000042a8e2: ror byte ptr [rax + 1], 0xf8; ret; 
0x000000000044f2ac: ror byte ptr [rax + 1], 0xf8; shr rax, 2; vzeroupper; ret; 
0x000000000042abb9: ror byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x0000000000448088: ror byte ptr [rax + 1], 0xf8; xtest; je 0x48095; vzeroall; ret; 
0x0000000000478a2b: ror byte ptr [rax + 1], 0xf8; xtest; je 0x78a38; vzeroall; ret; 
0x000000000044b585: ror byte ptr [rax + 1], 0xfe; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000044764e: ror byte ptr [rax + 1], 0xfe; sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000043f424: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; ret; 
0x000000000044eff9: ror byte ptr [rax + 1], cl; ror byte ptr [rax + 0x29], 1; clc; shr rax, 2; ret; 
0x000000000043ed45: ror byte ptr [rax + 9], 0xc8; shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000041d06e: ror byte ptr [rax + 9], 1; ret; 
0x000000000041f207: ror byte ptr [rax + rcx*2], 0x8d; push rsp; ret; 
0x000000000042b0b6: ror byte ptr [rax - 0x2d], 0xfa; movzx edx, dl; sub eax, edx; ret; 
0x000000000043f366: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x3f380; bsf rax, rdx; ret; 
0x000000000043f309: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x3f390; bsf rax, rdx; ret; 
0x00000000004784c6: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x784e0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000047846d: ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x784f0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000041c0ca: ror byte ptr [rax - 0x39], cl; ret 0; 
0x0000000000422f9d: ror byte ptr [rax - 0x73], 0x15; jnp 0x22f2d; add al, byte ptr [rax]; lea rax, [rip + 0x28ad4]; cmove rax, rdx; ret; 
0x0000000000422f03: ror byte ptr [rax - 0x73], 0x15; push rbp; add r8b, byte ptr [r8]; lea rax, [rip + 0x24dae]; cmove rax, rdx; ret; 
0x00000000004219e1: ror byte ptr [rax - 0x73], 0x35; ret; 
0x000000000048b464: ror byte ptr [rax - 0x73], 0x3d; mov qword ptr [rdx], rax; add al, ch; jmp qword ptr [rcx - 1]; 
0x000000000042a8d2: ror byte ptr [rax - 0x73], 0x44; cmp al, dh; ret; 
0x000000000042a902: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], ah; ret; 
0x000000000042a8f2: ror byte ptr [rax - 0x73], 0x44; cmp byte ptr [rax], dl; ret; 
0x0000000000478eb3: ror byte ptr [rax - 0x73], 0x44; xchg dword ptr [rax], esp; ret; 
0x0000000000466f8e: ror byte ptr [rax - 0x75], 0x43; sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x0000000000479cd2: ror byte ptr [rax - 0x75], 0x74; and al, 0x10; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x00000000004666c2: ror byte ptr [rax - 0x75], 0x7c; and al, 8; mov eax, 0x13e; syscall; 
0x000000000045538a: ror byte ptr [rax - 0x75], 1; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x000000000048d35d: ror byte ptr [rax - 0x75], 1; jo 0x8d36a; call 0x54de0; nop word ptr [rax + rax]; ret; 
0x00000000004181fd: ror byte ptr [rax - 0x77], 0x45; sbb byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; or byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x0000000000473409: ror byte ptr [rax - 0x77], 0x48; adc byte ptr [rax - 0x77], cl; push rax; movups xmmword ptr [rax], xmm0; ret; 
0x0000000000418022: ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000479e8f: ror byte ptr [rax - 0x77], 0xe2; mov eax, 0x10; syscall; 
0x000000000045277d: ror byte ptr [rax - 0x77], 0xe2; mov eax, 0xcc; syscall; 
0x000000000044ed06: ror byte ptr [rax - 0x77], 0xef; call rbx; 
0x000000000044e143: ror byte ptr [rax - 0x77], 0xef; lea r9, [rsp + 0x30]; call rbx; 
0x000000000048616a: ror byte ptr [rax - 0x77], 1; ret 0xc148; 
0x0000000000409f82: ror byte ptr [rax - 0x77], 1; ret 0xe281; 
0x0000000000413729: ror byte ptr [rax - 0x77], 1; ret; 
0x00000000004543e2: ror byte ptr [rax - 0x77], 1; stc; cmp r9, rax; jge 0x54378; ret; 
0x000000000046e37c: ror byte ptr [rax - 0x77], cl; fimul word ptr [rax - 0x75]; mov ebp, 0xfffff748; mov byte ptr [rbp - 0x910], r8b; mov byte ptr [rbp - 0x8f8], r9b; call rax; 
0x000000000041ad35: ror byte ptr [rax - 0x77], cl; out dx, al; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000474dec: ror byte ptr [rax - 0x77], cl; out dx, eax; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x0000000000475188: ror byte ptr [rax - 0x77], cl; out dx, eax; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000416b35: ror byte ptr [rax - 0x7b], 0xd2; jne 0x16b40; ret; 
0x00000000004809c6: ror byte ptr [rax - 0x7b], 0xf6; je 0x809cf; mov qword ptr [rsi], rcx; mov rax, r8; ret; 
0x000000000041d0a4: ror byte ptr [rax - 0x7d], 0xc0; adc byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror byte ptr [rdi], 0x29; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x000000000047bdcf: ror byte ptr [rax - 0x7d], 0xc0; add dword ptr [rax - 0x77], ecx; xor cl, byte ptr [rax - 0x7d]; ret 0x4838; 
0x000000000045c595: ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x1676; 
0x000000000045d442: ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x1776; 
0x000000000045f089: ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x876; 
0x00000000004943bf: ror byte ptr [rax - 0x7d], 0xc4; adc byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000044fa8b: ror byte ptr [rax - 0x7d], 0xc4; or bl, al; nop dword ptr [rax]; mov eax, 0xe4; syscall; 
0x00000000004180aa: ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000479d77: ror byte ptr [rax - 0x7d], 0xc4; pop rax; ret; 
0x000000000041786d: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rbx + 0x5d], bl; ret; 
0x000000000049404f: ror byte ptr [rax - 0x7d], 0xc4; sbb byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x000000000042ac53: ror byte ptr [rax - 0x7d], 0xc7; add rax, rdi; vzeroupper; ret; 
0x000000000042ac43: ror byte ptr [rax - 0x7d], 0xc7; and dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x000000000043eec3: ror byte ptr [rax - 0x7d], 0xc7; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000043f233: ror byte ptr [rax - 0x7d], 0xc7; or byte ptr [rax + 1], 0xf8; vzeroupper; ret; 
0x000000000043f21b: ror byte ptr [rax - 0x7d], 0xef; add rax, rdi; vzeroupper; ret; 
0x000000000043efdb: ror byte ptr [rax - 0x7d], 0xef; cmp sil, byte ptr [rdi + rax]; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000042adc3: ror byte ptr [rax - 0x7d], 0xef; fisttp word ptr [rax + 1]; clc; vzeroupper; ret; 
0x000000000042afa3: ror byte ptr [rax - 0x7d], 0xef; jg 0x2aff1; add eax, edi; vzeroupper; ret; 
0x000000000043f793: ror byte ptr [rax - 0x7d], 0xef; jg 0x3f7e1; add eax, edi; vzeroupper; ret; 
0x000000000043f993: ror byte ptr [rax - 0x7d], 0xef; jg 0x3f9e1; add eax, edi; vzeroupper; ret; 
0x000000000044f263: ror byte ptr [rax - 0x7d], 0xef; jg 0x4f2b1; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x0000000000478723: ror byte ptr [rax - 0x7d], 0xef; jg 0x78771; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000044f283: ror byte ptr [rax - 0x7d], 0xef; pop rdi; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afb3: ror byte ptr [rax - 0x7d], 0xef; pop rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044d6ae: ror byte ptr [rax - 0x7d], 0xfe; and byte ptr [rsi + 0x1b], dh; test eax, eax; je 0x4d720; tzcnt eax, eax; ret; 
0x000000000044f78e: ror byte ptr [rax - 0x7d], 0xfe; or byte ptr [rsi + 0x1b], dh; test eax, eax; je 0x4f800; tzcnt eax, eax; ret; 
0x000000000045714e: ror byte ptr [rax - 0x7d], 1; ret; 
0x000000000044604b: ror byte ptr [rax - 0x7f], 0xc4; add byte ptr [rcx], al; add byte ptr [rax], al; sub rax, rdx; ret; 
0x0000000000446048: ror byte ptr [rax - 1], 0xc0; add rsp, 0x100; sub rax, rdx; ret; 
0x0000000000446045: ror byte ptr [rax - 1], 0xc0; inc rax; add rsp, 0x100; sub rax, rdx; ret; 
0x000000000042ac33: ror byte ptr [rax - 1], 0xc7; add rax, rdi; vzeroupper; ret; 
0x000000000043ee83: ror byte ptr [rax - 1], 0xc7; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x0000000000480a47: ror byte ptr [rax - 9], 0xd8; test dil, dil; cmove r8, rax; mov rax, r8; ret; 
0x0000000000493f35: ror byte ptr [rax], 0x49; mov dword ptr [rax], edx; ret; 
0x0000000000491070: ror byte ptr [rax], 0x49; mov dword ptr [rdx], edx; pop rbx; ret; 
0x000000000047c69f: ror byte ptr [rbp + rcx*4 + 0x34], 1; ret; 
0x000000000044f0d3: ror byte ptr [rbp - 0x80777c], 0xff; inc ecx; call 0x77fdb5e3; ret; 
0x0000000000450523: ror byte ptr [rbx + 0x3108247c], 0xc0; syscall; 
0x000000000041e271: ror byte ptr [rbx + rcx*4 + 0x44], 0x24; sbb byte ptr [rax - 0x77], cl; ret 0x850f; 
0x000000000046c94c: ror byte ptr [rbx - 0x76bf29ac], cl; adc dword ptr [rax + 0x39], ecx; ret; 
0x0000000000450ff8: ror byte ptr [rcx + 0x12eb8fe], cl; add byte ptr [rax], al; xor edi, edi; syscall; 
0x000000000041e182: ror byte ptr [rcx + 0x21], 1; retf 0x149; ret 0x894d; 
0x0000000000427983: ror byte ptr [rcx + 0x29], cl; sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000477dc2: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x77e40; add rax, rdi; ret; 
0x0000000000477de2: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x77e40; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000477e02: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x77e40; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477e22: ror byte ptr [rcx + 0x2eec1c6], 0x48; sub edx, esi; jbe 0x77e40; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000411421: ror byte ptr [rcx + 0x39482c4b], cl; ret 0xf48; 
0x0000000000460121: ror byte ptr [rcx + 0x3948fc51], cl; ret; 
0x00000000004951d6: ror byte ptr [rcx + 0x3c182454], 1; dec dword ptr [rdi]; test byte ptr [rax - 0x76fffffe], dl; ret 0xe283; 
0x000000000048c3e2: ror byte ptr [rcx + 0x3ff4705], 0; add rsp, 0x18; ret; 
0x0000000000488037: ror byte ptr [rcx + 0xf486611], 0x7e; ret 0xc148; 
0x000000000046c221: ror byte ptr [rcx + rcx*4 + 0x2b], 0x5b; pop rbp; pop r12; pop r13; ret; 
0x0000000000489e82: ror byte ptr [rcx + rcx*4 + 0xd], cl; mov al, 3; add byte ptr [rcx + rcx*4 - 0x30], cl; add rsp, 0x28; ret; 
0x00000000004759ab: ror byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x000000000040ac86: ror byte ptr [rcx + rcx*4 - 0x40], 0x5b; pop rbp; ret; 
0x0000000000466d5d: ror byte ptr [rcx + rcx*4 - 0x40], cl; ret; 
0x000000000041aea2: ror byte ptr [rcx + rcx*4 - 0xa], cl; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000414675: ror byte ptr [rcx + rcx*4 - 0xf], 0x4c; mov esi, ebp; mov rdi, r15; call rbx; 
0x000000000040d5ac: ror byte ptr [rcx + rcx*4 - 2], cl; mov rdi, r14; mov byte ptr [rbp - 0x8ec], r9b; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x000000000045434f: ror byte ptr [rcx + rdi - 0x32], 1; ja 0x543f0; cmp r9, rcx; jbe 0x5437d; ret; 
0x0000000000476fbc: ror byte ptr [rcx - 0x3e], 0x48; cmovne ecx, edi; cmovne rsi, rdx; bsr rsi, rsi; lea rax, [rcx + rsi]; ret; 
0x000000000046fb9c: ror byte ptr [rcx - 0x75], cl; adc al, 0xd0; jmp rdx; 
0x0000000000474998: ror byte ptr [rcx - 0x77], 0xca; mov edx, r13d; mov eax, 0xca; syscall; 
0x000000000040e37b: ror byte ptr [rcx - 0x77], cl; ret; 
0x000000000048a2e2: ror byte ptr [rcx - 0x7d], 1; ret 0x4901; 
0x000000000045e776: ror byte ptr [rcx - 0x7d], cl; ret 0x4b01; 
0x0000000000465232: ror byte ptr [rdi], 0; add byte ptr [rax], al; syscall; 
0x0000000000454071: ror byte ptr [rdi], 0x11; add eax, 0x78287; ret; 
0x0000000000454061: ror byte ptr [rdi], 0x11; add eax, 0x782a7; movq xmm0, rax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rip + 0x78287], xmm0; ret; 
0x0000000000414e3d: ror byte ptr [rdi], 0x11; or byte ptr [r15], cl; adc dword ptr [rbx + 0x18], eax; movups xmmword ptr [rbx + 0x28], xmm0; pop rbx; ret; 
0x0000000000419ca8: ror byte ptr [rdi], 0x11; pop rbx; ret; 
0x0000000000454120: ror byte ptr [rdi], 0x11; sbb eax, 2; add byte ptr [rax], al; syscall; 
0x0000000000450ebb: ror byte ptr [rdi], 0x1f; add byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x000000000041d0ac: ror byte ptr [rdi], 0x29; add byte ptr [rax + 0x39], cl; ret 0xeb75; 
0x0000000000452a40: ror byte ptr [rdi], 0x44; ret 0x66c3; 
0x0000000000452804: ror byte ptr [rdi], 0x44; ret 0x8348; 
0x0000000000462808: ror byte ptr [rdi], 0x48; ret 0xc083; 
0x00000000004120a1: ror byte ptr [rdi], 0x84; mov dword ptr [rax], 0x89480000; ret; 
0x000000000042abaf: ror byte ptr [rdi], 0x84; mov edx, 0xf3000000; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000048ca18: ror byte ptr [rdi], 0x84; pop rcx; add eax, 0x1480000; ret; 
0x0000000000495b47: ror byte ptr [rdi], 0x84; ret 0; 
0x000000000047025e: ror byte ptr [rdi], 0x84; ret 0x12; 
0x0000000000487b68: ror byte ptr [rdi], 0x84; ret 0xfffd; 
0x000000000041f3ec: ror byte ptr [rdi], 0x84; ret; 
0x0000000000478e2f: ror byte ptr [rdi], 0x84; retf 0; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004121a0: ror byte ptr [rdi], 0x84; retf 0; add byte ptr [rax - 0x77], cl; ret; 
0x000000000046323f: ror byte ptr [rdi], 0x84; rol byte ptr [rip - 0x76b80000], cl; ret 0x294c; 
0x000000000043f274: ror byte ptr [rdi], 0x84; test eax, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000041e90e: ror byte ptr [rdi], 0x84; xchg eax, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000454eb5: ror byte ptr [rdi], 0x85; jl 0x54eba; add byte ptr [rax], al; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000494991: ror byte ptr [rdi], 0x85; pop rbp; add dword ptr [rax], eax; add byte ptr [rax - 0x39], cl; ret 0xffff; 
0x000000000048b235: ror byte ptr [rdi], 0x85; ret 0; 
0x0000000000477d46: ror byte ptr [rdi], 0x85; rol dword ptr [rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004755bc: ror byte ptr [rdi], 0x85; sub eax, 0xb8000003; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000040de76: ror byte ptr [rdi], 0x88; out 0xff, al; inc dword ptr [rcx]; ret; 
0x000000000040da00: ror byte ptr [rdi], 0x89; push rdi; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004537fd: ror byte ptr [rdi], 0x94; ret; 
0x0000000000465ca5: ror byte ptr [rdi], 0x9e; ret 0xd008; 
0x000000000042b8ea: ror byte ptr [rdi], 0xb6; or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042b4a3: ror byte ptr [rdi], 0xb6; or al, 6; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x000000000045c592: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x1676; 
0x000000000045d43f: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x1776; 
0x000000000045f086: ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x876; 
0x00000000004468de: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x20], edx; movups xmmword ptr [rdi + rdx - 0x10], xmm3; ret; 
0x0000000000446629: ror byte ptr [rdi], 1; adc dword ptr [rdi + rdx - 0x40], edi; ret; 
0x0000000000449467: ror byte ptr [rdi], 1; add esi, edx; je 0x49471; vzeroall; ret; 
0x0000000000449aa1: ror byte ptr [rdi], 1; add esi, edx; je 0x49aab; vzeroall; ret; 
0x000000000044a3f3: ror byte ptr [rdi], 1; add esi, edx; je 0x4a3fd; vzeroall; ret; 
0x0000000000409f97: ror byte ptr [rdi], 1; mov dh, 0x11; test dl, dl; jne 0x9f78; ret; 
0x000000000042b006: ror byte ptr [rdi], 1; test dword ptr [rax + rax - 0x8b70000], ecx; ret 2; 
0x0000000000411c43: ror byte ptr [rdi], 1; xchg byte ptr [rsi + 1], al; add byte ptr [rax], al; xor esi, esi; mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x00000000004182cb: ror byte ptr [rdi], 1; xchg byte ptr [rsi], bh; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x0000000000450f95: ror byte ptr [rdi], 5; cmp rax, -0x1000; ja 0x50fa8; ret; 
0x0000000000474a8a: ror byte ptr [rdi], cl; int1; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000045cb43: ror byte ptr [rdi], cl; mov al, ah; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x000000000040f93c: ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd1; jmp rdx; 
0x000000000040f631: ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd6; jmp rdx; 
0x000000000040f673: ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rax - 0x75], cl; adc al, 0xd7; jmp rdx; 
0x000000000040eb31: ror byte ptr [rdi], cl; mov dh, 0x14; adc byte ptr [rcx - 0x75], cl; adc al, 0xd3; jmp rdx; 
0x000000000044eee0: ror byte ptr [rdi], cl; test byte ptr [rcx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x000000000047680a: ror byte ptr [rdi], cl; test byte ptr [rdx], bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x000000000043f4cb: ror byte ptr [rdi], cl; test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x000000000047b41a: ror byte ptr [rdi], cl; test dword ptr [rcx + 0x5bfff861], eax; pop rbp; pop r12; ret; 
0x000000000047a6fe: ror cl, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000476eba: ror dword ptr [rax + 0x21], 0xce; je 0x76ff0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000041c267: ror dword ptr [rax + 0x21], cl; ret; 
0x000000000044f2f6: ror dword ptr [rax + 0x29], 0xd7; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x00000000004808cc: ror dword ptr [rax + 0x39], 0xd1; jne 0x808a8; mov eax, dword ptr [rcx]; ret; 
0x000000000043fa8c: ror dword ptr [rax + 0x39], 1; int1; jb 0x3f884; mov rax, r8; vzeroupper; ret; 
0x000000000047d537: ror dword ptr [rax + 0x39], 1; ret 0xf48; 
0x000000000043f419: ror dword ptr [rax - 0x3f], 0xe1; and byte ptr [rax + 9], cl; retf 0xf48; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x0000000000490b46: ror dword ptr [rax - 0x3f], cl; out dx, eax; xor byte ptr [rax + 0x21], cl; ret 0x8949; 
0x0000000000488678: ror dword ptr [rax - 0x73], 0x84; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x00000000004555cc: ror dword ptr [rax - 0x75], 0x42; adc byte ptr [rax - 0x7d], cl; ret 0x4810; 
0x0000000000447bf6: ror dword ptr [rax - 0x77], 1; cli; rep stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447d86: ror dword ptr [rax - 0x77], 1; cli; rep stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000490b50: ror dword ptr [rax - 0x77], 1; ret 0xc148; 
0x00000000004704bf: ror dword ptr [rax - 0x77], cl; retf; jmp rdx; 
0x0000000000417fb5: ror dword ptr [rax - 0x7b], 0xd2; jne 0x17fa8; ret; 
0x000000000047338d: ror dword ptr [rax - 0x7b], 0xd2; jne 0x73380; ret; 
0x000000000043f362: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x3f380; bsf rax, rdx; ret; 
0x000000000043f305: ror dword ptr [rax - 0x7d], 0xe0; ror byte ptr [rax - 0x2d], 0xfa; test rdx, rdx; je 0x3f390; bsf rax, rdx; ret; 
0x00000000004099ca: ror dword ptr [rax - 0x7d], 1; ret 0x4001; 
0x0000000000405f26: ror dword ptr [rax - 0x7d], 1; ret 0x4801; 
0x000000000042a173: ror dword ptr [rax - 0x7d], 1; ret 0x4c20; 
0x000000000042a193: ror dword ptr [rax - 0x7d], 1; ret 0x4c40; 
0x000000000042a1b3: ror dword ptr [rax - 0x7d], 1; ret 0x4c60; 
0x0000000000470955: ror dword ptr [rax - 0x7d], cl; ret 0x4104; 
0x0000000000488d98: ror dword ptr [rax], 0x83; ret 0x8001; 
0x000000000040ac20: ror dword ptr [rbx], 1; add byte ptr [rcx], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000044c9e5: ror dword ptr [rcx + rax - 0x3f], 1; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; ret; 
0x000000000042600e: ror dword ptr [rcx + rax - 0x3f], 1; movzx eax, byte ptr [rax + rcx + 0x40]; movzx edx, byte ptr [rdx + rcx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000041252a: ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x0000000000401a99: ror dword ptr [rcx + rcx*4 - 0x40], 0x5b; ret; 
0x000000000044d54c: ror dword ptr [rcx + rdi - 0x26], 1; jae 0x4d520; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000487088: ror dword ptr [rcx + rdx - 0x3e], 0x4e; mov dword ptr [rdi + rbx*8 + 8], ecx; add rdx, r8; mov rax, rdx; pop rbx; ret; 
0x0000000000474f80: ror dword ptr [rcx - 0x4ef00f30], 0x4d; add byte ptr [rsi + rdi - 0x77], dh; ret 0x48e9; 
0x00000000004440eb: ror dword ptr [rcx], cl; ret 0xe074; 
0x00000000004183ce: ror dword ptr [rdi], 0x11; adc byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x00000000004598ea: ror dword ptr [rdi], 0x11; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000418645: ror dword ptr [rdi], 0x11; cmp byte ptr [r11 + 0x5d], bl; pop r12; ret; 
0x0000000000418205: ror dword ptr [rdi], 0x11; or byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x0000000000473a79: ror dword ptr [rdi], 0x11; xor byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x0000000000401993: ror dword ptr [rdi], 0xaf; ret 0x41c3; 
0x0000000000417fb4: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x17fa8; ret; 
0x000000000047338c: ror qword ptr [r8 - 0x7b], 0xd2; jne 0x73380; ret; 
0x0000000000404215: sahf; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; mov qword ptr ss:[rsi + 0x10], rsi; syscall; 
0x000000000045a5eb: sahf; cli; jmp qword ptr [rsi - 0x70]; 
0x000000000044c292: sahf; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000495c32: sahf; mov ch, 0xf6; jmp qword ptr [rsi + 0x2e]; 
0x000000000048ac21: sahf; mov rsi, qword ptr [rax + 8]; lea rdx, [rax + 8]; cmp rcx, rsi; jb 0x8ac06; ret; 
0x000000000043df9e: sahf; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000465ca7: sahf; ret 0xd008; 
0x000000000049368c: sal bh, 0xff; inc dword ptr [rbx - 0x7af0f808]; ret 0xfffe; 
0x0000000000424767: sal bh, 1; ret 0x8000; 
0x0000000000424627: sal bh, 1; ret 0xc000; 
0x00000000004244e7: sal bh, 1; ret 0xe000; 
0x00000000004243a7: sal bh, 1; ret 0xf000; 
0x0000000000424267: sal bh, 1; ret 0xf800; 
0x0000000000424127: sal bh, 1; ret 0xfc00; 
0x0000000000423fe7: sal bh, 1; ret 0xfe00; 
0x0000000000423ea7: sal bh, 1; ret 0xff00; 
0x0000000000423d67: sal bh, 1; ret 0xff80; 
0x0000000000423c27: sal bh, 1; ret 0xffc0; 
0x0000000000423ae7: sal bh, 1; ret 0xffe0; 
0x00000000004239a7: sal bh, 1; ret 0xfff0; 
0x0000000000423867: sal bh, 1; ret 0xfff8; 
0x0000000000423727: sal bh, 1; ret 0xfffc; 
0x00000000004235e7: sal bh, 1; ret 0xfffe; 
0x0000000000469ff4: sal bh, cl; int1; add r8d, eax; mov eax, r8d; ret; 
0x000000000044d0c0: sal bl, 0x48; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d829: sal bl, 0xf; mov esp, 0x72c639c0; or dword ptr [rax + 0x29], ecx; xlatb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d8a7: sal bl, 0xf; mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044db0c: sal bl, 0xf; mov esp, 0x76c239c0; sbb al, 0x48; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000044f8d9: sal bl, 1; bsf eax, eax; add rax, rdi; ret; 
0x000000000044d0a1: sal bl, 1; bsf rax, rax; add rax, rdi; ret; 
0x0000000000497010: sal byte ptr [rax + 0x48ffffff], 0xc7; ret 0x2e60; 
0x0000000000477f05: sal byte ptr [rax + rbx*2 - 0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000044ac75: sal byte ptr [rax + rcx*2 - 0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000045058d: sal byte ptr [rbp + 0x10], 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000048324e: sal byte ptr [rbp + 0x10], cl; mov qword ptr [rbp - 0xb0], r10; call rax; 
0x000000000048806e: sal byte ptr [rbp + 0x1f], cl; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x000000000044b007: sal byte ptr [rbp + 0x26], 0x62; mov dl, 0x65; and byte ptr [rsi], ah; ret; 
0x000000000048b9c6: sal byte ptr [rbp + 0x27], 0xe9; ret 0xfffe; 
0x000000000044db45: sal byte ptr [rbp + 0x28], 0x62; mov bl, 0x45; and byte ptr [rdi], bh; ret 0xc500; 
0x000000000044db54: sal byte ptr [rbp + 0x29], 0xc5; sti; xchg eax, ebx; ret 0xc085; 
0x0000000000478fc2: sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x000000000042af71: sal byte ptr [rbp + 0x2c], 0xc5; std; xlatb; ret 0xc085; 
0x000000000044daf0: sal byte ptr [rbp + 0x2d], 0x83; ret 0xf40; 
0x0000000000479020: sal byte ptr [rbp + 0x2d], 0xc5; std; xlatb; ret; 
0x000000000044bd0f: sal byte ptr [rbp + 0x2e], 0xc5; std; xlatb; ret 0xc085; 
0x00000000004881c5: sal byte ptr [rbp + 0x30], 0x48; test edx, edx; jne 0x88240; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x00000000004792cd: sal byte ptr [rbp + 0x30], 0x83; ret 0xf10; 
0x000000000044db5c: sal byte ptr [rbp + 0x31], 0xc5; sti; xchg eax, ebx; ret; 
0x000000000044dd7b: sal byte ptr [rbp + 0x32], 0x62; mov bl, 0x45; and byte ptr [rdi], bh; ret 0xc500; 
0x000000000044ad8a: sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x000000000044dd8a: sal byte ptr [rbp + 0x33], 0xc5; sti; xchg eax, ebx; ret 0xc085; 
0x000000000042af79: sal byte ptr [rbp + 0x34], 0xc5; std; xlatb; ret; 
0x000000000044bd17: sal byte ptr [rbp + 0x36], 0xc5; std; xlatb; ret; 
0x0000000000479337: sal byte ptr [rbp + 0x36], 0xc5; sti; xchg eax, ebx; ret 0xc085; 
0x000000000043f205: sal byte ptr [rbp + 0x38], 0xc5; mov ch, 0x74; fcmovnb st(0), st(5); std; xlatb; ret; 
0x000000000044dd92: sal byte ptr [rbp + 0x3b], 0xc5; sti; xchg eax, ebx; ret; 
0x000000000047933f: sal byte ptr [rbp + 0x3e], 0xc5; sti; xchg eax, ebx; ret; 
0x000000000043efc5: sal byte ptr [rbp + 0x48], 0xc5; mov ch, 0x74; fcmovnb st(0), st(5); std; xlatb; ret; 
0x000000000042ab12: sal byte ptr [rbp + 0x4b], 0x66; pmovmskb eax, mm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000044fa87: sal byte ptr [rbp + 0x56], 0x31; ror byte ptr [rax - 0x7d], 0xc4; or bl, al; nop dword ptr [rax]; mov eax, 0xe4; syscall; 
0x000000000042ad55: sal byte ptr [rbp + 0x58], 0xc5; std; xlatb; ret 0xc085; 
0x000000000042ad21: sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000042ad5d: sal byte ptr [rbp + 0x60], 0xc5; std; xlatb; ret; 
0x0000000000479c4c: sal byte ptr [rbp + 0x61], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x00000000004503f6: sal byte ptr [rbp + 0x67], 0x44; mov edx, esp; mov rsi, rbp; mov edi, 0xffffff9c; mov eax, 0x101; syscall; 
0x0000000000478014: sal byte ptr [rbp + 0x69], 0x83; ret 0xf40; 
0x00000000004881ca: sal byte ptr [rbp + 0x73], cl; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x0000000000453032: sal byte ptr [rbp + 0xb], cl; ret; 
0x000000000046542e: sal byte ptr [rbp + 0xf], 0x48; add esp, 8; ret; 
0x0000000000466e32: sal byte ptr [rbp + 0xf], 0xb6; add cl, byte ptr [rax + 0x428d4801]; add dword ptr [rcx + 0x39], ecx; ret; 
0x0000000000483a25: sal byte ptr [rbp + 2], cl; call rax; 
0x000000000048bff2: sal byte ptr [rbp + 3], cl; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x0000000000447b16: sal byte ptr [rbp + 4], cl; mov rax, rdi; ret; 
0x0000000000416b38: sal byte ptr [rbp + 5], cl; ret; 
0x0000000000409fd7: sal byte ptr [rbp + 6], 0x5d; ret; 
0x00000000004883e7: sal byte ptr [rbp + 6], 0xf; add ebp, edx; xor eax, eax; ret; 
0x0000000000407efc: sal byte ptr [rbp + 7], 0x5b; xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000413510: sal byte ptr [rbp + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x0000000000410d70: sal byte ptr [rbp + rcx + 0x48], 0x8d; adc eax, 0x89066; add rax, rdx; ret; 
0x000000000044ef60: sal byte ptr [rbp + rcx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x000000000044c4a0: sal byte ptr [rbp + rdi*2 - 0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x0000000000475de8: sal byte ptr [rbp + rdx + 0x53], 0x48; mov ebx, edi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000478328: sal byte ptr [rbp + rdx - 0x78], cl; rol dword ptr [rax + 0x1e740fe1], 1; ret; 
0x0000000000445e20: sal byte ptr [rbp - 0x13], cl; lea rax, [rcx - 1]; ret; 
0x0000000000417fb8: sal byte ptr [rbp - 0x13], cl; ret; 
0x000000000048aba4: sal byte ptr [rbp - 0x17], cl; ret; 
0x0000000000480865: sal byte ptr [rbp - 0x18], 0x48; add esp, 8; mov eax, 1; pop rbx; pop rbp; ret; 
0x0000000000424a8b: sal byte ptr [rbp - 0x1e], 0x31; shr byte ptr [rcx], 0xc8; ret; 
0x0000000000409f9c: sal byte ptr [rbp - 0x27], cl; ret; 
0x0000000000485453: sal byte ptr [rbp - 0x32], cl; movsx eax, cl; neg eax; ret; 
0x0000000000456b8d: sal byte ptr [rbp - 0x4d], 0x80; or eax, 0x759e9; or al, 0x5b; ret; 
0x000000000042b510: sal byte ptr [rbp - 0x53], 0xc5; std; xlatb; ret; 
0x000000000042ade1: sal byte ptr [rbp - 0x64], 0x83; ret 0xf40; 
0x00000000004780e4: sal byte ptr [rbp - 0x67], 0x83; ret 0xf40; 
0x000000000042b508: sal byte ptr [rbp - 0x6b], 0xc5; std; xlatb; ret 0xc0ff; 
0x0000000000477aac: sal byte ptr [rbp - 0xf], cl; ret; 
0x0000000000419fd0: sal byte ptr [rbx + 0x25], 1; movzx eax, byte ptr [rax]; ret; 
0x000000000042aea6: sal byte ptr [rbx + rbx*2 - 0xd], 0xf; mov esp, 0xc80148c0; vzeroupper; ret; 
0x000000000042ac22: sal byte ptr [rbx + rcx*2 - 0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000043f814: sal byte ptr [rcx + rbp*2 - 0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000044bc28: sal byte ptr [rcx + rbx*2 - 0xd], 0xf; mov esp, 0xc80148c0; ret; 
0x0000000000408def: sal byte ptr [rcx + rcx - 0x39], 0; add byte ptr [rax], al; add byte ptr [rax], al; mov dword ptr [rax + 4], ebx; pop rbx; ret; 
0x000000000044bc04: sal byte ptr [rcx + rdi*2 - 0xd], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000043f36c: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; ret; 
0x00000000004784cc: sal byte ptr [rcx + rdx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000454cbc: sal byte ptr [rcx + rdx + 0x48], cl; lea edi, [rcx + rax + 0x48]; jmp rdx; 
0x0000000000478e63: sal byte ptr [rcx], 0xc9; cmp edx, eax; lea rax, [rdi + rax*4]; cmovle rax, rcx; ret; 
0x000000000044ac43: sal byte ptr [rcx], 0xc9; cmp edx, eax; lea rax, [rdi + rax]; cmovle rax, rcx; ret; 
0x000000000042abe3: sal byte ptr [rcx], 0xc9; cmp edx, eax; lea rax, [rdi + rax]; cmovle rax, rcx; vzeroupper; ret; 
0x000000000043f05e: sal byte ptr [rcx], 0xc9; cmp sil, byte ptr [rdx + rax]; lea rax, [rdx + rax]; cmovne rax, rcx; vzeroupper; ret; 
0x00000000004573ca: sal byte ptr [rcx], 0xc9; xor edx, edx; push rax; call rbx; 
0x000000000041a9be: sal byte ptr [rcx], 1; ror byte ptr [rax + 0x39], 0xfa; setae al; ret; 
0x00000000004797e2: sal byte ptr [rcx], cl; imul al; outsb dx, byte ptr ss:[rsi]; std; jmp qword ptr [rsi + 0xf]; 
0x0000000000475186: sal byte ptr [rcx], cl; ror byte ptr [rax - 0x77], cl; out dx, eax; mov esi, 7; mov eax, 0xca; syscall; 
0x00000000004759a9: sal byte ptr [rcx], cl; ror byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000419697: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rcx + 0x58]; 
0x0000000000474f21: sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xef; mov eax, r13d; syscall; 
0x000000000047ba96: sal byte ptr [rdi + 0x48], 0x89; ret; 
0x00000000004806b2: sal byte ptr [rdi + rbp*8 + 0x31], 0xc0; ret; 
0x000000000043f686: sal byte ptr [rdi + rdx*2 - 0xd], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000043f53b: sal byte ptr [rdx + 0x48], cl; bsf eax, edx; ret; 
0x000000000044ef4b: sal byte ptr [rdx + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x0000000000401011: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000478473: sal byte ptr [rdx + rdi*2 + 0x48], cl; bsf eax, edx; shr rax, 2; ret; 
0x00000000004547d1: sal byte ptr [rdx + rdx + 0x48], 0x83; ret; 
0x000000000043ff13: sal byte ptr [rdx + rdx + 0x48], 0xff; ret 0x2288; 
0x0000000000409e9b: sal byte ptr [rdx + rsi*2 + 0x48], 0xc7; ret 0xfff0; 
0x000000000043f0bb: sal byte ptr [rdx - 0xd], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x0000000000418dac: sal byte ptr [rsi + 0x11], 1; mov rax, qword ptr [rbx + 0x48]; add rsp, 0x20; xor edx, edx; pop rbx; jmp rax; 
0x0000000000474311: sal byte ptr [rsi + 0x14], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000419271: sal byte ptr [rsi + 0x1c], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004186be: sal byte ptr [rsi + 0x27], 1; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000474273: sal byte ptr [rsi + 0x2a], 1; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004191de: sal byte ptr [rsi + 0x2f], 1; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000412525: sal byte ptr [rsi + 0x31], 1; movsxd rdx, ebx; mov rsi, r13; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x000000000041270b: sal byte ptr [rsi + 0x3c], 1; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004736fe: sal byte ptr [rsi + 0x3f], 1; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000411e42: sal byte ptr [rsi + 0x4b], 1; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000418068: sal byte ptr [rsi + 0x5d], 1; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x0000000000418608: sal byte ptr [rsi + 0x65], 1; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000418753: sal byte ptr [rsi + 0x6a], 1; movzx esi, byte ptr [r14]; lea r15, [r14 + 1]; mov rdi, r12; call qword ptr [rbx + 0x18]; 
0x000000000041815e: sal byte ptr [rsi + 0xf], 1; mov rax, qword ptr [rbx + 0x18]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000455719: sal byte ptr [rsi + rbp + 0x48], 0x8b; push rax; or byte ptr [rcx + 0x3f095], cl; add dh, dh; ret 0x7402; 
0x000000000043f30f: sal byte ptr [rsi + rdi*2 + 0x48], cl; bsf eax, edx; ret; 
0x000000000042a9c7: sal byte ptr [rsi + rdx + 0xf], 0xbc; ror byte ptr [rax + 1], 0xf8; add rax, rcx; ret; 
0x00000000004460ff: sal byte ptr [rsi + rdx*8 + 0x48], cl; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000048ab9b: sal byte ptr [rsi + rsi*2 + 0x48], 0x8b; push rax; adc byte ptr [rax - 0x7b], cl; sal byte ptr [rbp - 0x17], cl; ret; 
0x000000000041e88e: sal byte ptr [rsp + rdi + 0x48], 0x89; ret 0x8d4c; 
0x000000000046b8ba: sal ch, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000468dac: sal dh, 1; ret 0xf40; 
0x000000000049433f: sal dh, cl; jmp qword ptr [rsi + 0x66]; 
0x000000000047a0a9: sal dword ptr [rax - 8], cl; dec dword ptr [rax - 0x77]; ret; 
0x00000000004808cf: sal dword ptr [rbp - 0x2a], 1; mov eax, dword ptr [rcx]; ret; 
0x000000000044ca71: sal dword ptr [rbp - 0x44], 0x83; ret 0x8320; 
0x000000000048ac00: sal dword ptr [rbx + 0x11], 0x48; mov eax, esi; mov rcx, qword ptr [rax]; mov qword ptr [rdx], rcx; mov qword ptr [rax + 0x10], 0; ret; 
0x000000000044c892: sal dword ptr [rbx + rbx - 0xd], 0xf; mov esp, 0x44b60ff9; cmp byte ptr [rax], ah; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x0000000000497996: sal dword ptr [rcx + rcx*4 + 0x48], 0x89; ret 0xc148; 
0x000000000049753e: sal dword ptr [rdi + rax*4 + 0x48], 0x89; ret 0xc148; 
0x0000000000497696: sal dword ptr [rdx + rcx*4 + 0x48], 0x89; ret 0xc148; 
0x0000000000446749: sal dword ptr [rdx - 0x7c], 1; cmp rdx, qword ptr [rip + 0x80bc5]; jae 0x46760; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000454226: sal dword ptr [rsi + 0x24], 1; ret; 
0x0000000000427986: sal dword ptr [rsi + 0xb], cl; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x0000000000446757: sal ebx, 1; movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x0000000000485458: sal edi, 0xd8; ret; 
0x00000000004972c1: sal esi, 1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000493404: sar ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x0000000000488165: sar bh, 0xff; ret; 
0x0000000000488142: sar bh, 0xff; sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000496129: sar bh, 1; dec dword ptr [rax - 0x77]; ret; 
0x0000000000495f2f: sar bh, cl; jmp qword ptr [rsi + 0xf]; 
0x000000000041e50b: sar bh, cl; jmp qword ptr [rsi - 0x70]; 
0x0000000000401859: sar byte ptr [r14 + 0xc8], 0x48; mov edi, eax; call 0x11ed0; mov eax, 0; leave; ret; 
0x000000000047984e: sar byte ptr [r8 + 0xd9], 1; syscall; 
0x000000000047984e: sar byte ptr [r8 + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0x79860; ret; 
0x0000000000414ddc: sar byte ptr [rax + 0x28], 0x48; mov dword ptr [rbx + 0x90], eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x0000000000451052: sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rax + rax], cl; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000041ebd2: sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rax + rax], cl; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000450352: sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rcx], cl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x000000000044faca: sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rsi], ah; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000465202: sar byte ptr [rax + 0x64ffffff], 0xc7; add byte ptr [rsi], dl; add byte ptr [rax], al; add byte ptr [rax - 1], bh; ret; 
0x0000000000474a8f: sar byte ptr [rax + 0xca], cl; syscall; 
0x000000000047984f: sar byte ptr [rax + 0xd9], 1; syscall; 
0x000000000047984f: sar byte ptr [rax + 0xd9], 1; syscall; cmp rax, -0x1000; ja 0x79860; ret; 
0x00000000004510d5: sar byte ptr [rax - 0x31], 0x48; add esp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x000000000042ad3e: sar byte ptr [rcx], 0xc2; jbe 0x2ada0; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044adaa: sar byte ptr [rcx], 0xc2; jbe 0x4add1; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044db10: sar byte ptr [rcx], 0xc2; jbe 0x4db31; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000478031: sar byte ptr [rcx], 0xc2; jbe 0x780a0; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x0000000000478fe2: sar byte ptr [rcx], 0xc2; jbe 0x79001; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x00000000004792ed: sar byte ptr [rcx], 0xc2; jbe 0x79311; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000044d85f: sar byte ptr [rcx], 0xc6; jb 0x4d83b; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d82d: sar byte ptr [rcx], 0xc6; jb 0x4d83b; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d8ab: sar byte ptr [rcx], 0xc6; jb 0x4d8f4; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044f91b: sar byte ptr [rcx], 0xc6; jb 0x4f92d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044f95c: sar byte ptr [rcx], 0xc6; jb 0x4f92d; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000044f9ab: sar byte ptr [rcx], 0xc6; jb 0x4fa18; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000450477: sar byte ptr [rdi - 0x64], 0xb8; add dword ptr [rcx], eax; add byte ptr [rax], al; syscall; 
0x000000000041b253: sar byte ptr [rdx + 0x7fffffff], cl; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000475d9c: sar byte ptr [rdx + 0x7fffffff], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041b1fb: sar byte ptr [rdx + 0x7fffffff], cl; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041b5d6: sar byte ptr [rdx + 0x7fffffff], cl; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x0000000000488371: sar byte ptr [rdx + 1], 0xf0; cmpxchg dword ptr [rdi], edx; jne 0x883b3; xor eax, eax; ret; 
0x000000000041ab3a: sar byte ptr [rdx + 1], cl; mov eax, 0xca; syscall; 
0x000000000041ab3a: sar byte ptr [rdx + 1], cl; mov eax, 0xca; syscall; ret; 
0x000000000041ab16: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041ab16: sar byte ptr [rdx + 1], cl; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000475971: sar byte ptr [rdx + 1], cl; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000041b2df: sar byte ptr [rdx + 1], cl; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041aabf: sar byte ptr [rdx + 2], cl; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000041aa59: sar byte ptr [rdx + 2], cl; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000048471c: sar byte ptr [rdx + 2], cl; mov esi, 0x80; mov eax, r9d; syscall; 
0x000000000043ea09: sar byte ptr [rdx], 0x48; lea eax, [rdi + rax]; cmp byte ptr [rax], sil; cmovne rax, rdx; ret; 
0x0000000000454151: sar byte ptr [rsi + 0x20], cl; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000475cba: sar byte ptr [rsi + 0x80], cl; mov rdi, rbp; mov eax, r8d; syscall; 
0x000000000040185a: sar byte ptr [rsi + 0xc8], 0x48; mov edi, eax; call 0x11ed0; mov eax, 0; leave; ret; 
0x00000000004626c1: sar byte ptr [rsi + 8], 0x83; call 0x848afcb; pop rbx; ret; 
0x000000000042c62a: sar byte ptr [rsi], 0x41; jmp rcx; 
0x0000000000410f02: sar byte ptr [rsi], 1; jmp rax; 
0x000000000043736b: sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x0000000000455e93: sar dl, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000045745f: sar dl, 1; jmp qword ptr [rsi + 0x2e]; 
0x0000000000436d29: sar dword ptr [rax + rcx*2 + 0x11], 1; imul edi, ebp, 0x487cd162; adc dword ptr [rcx - 2], esi; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436d30: sar dword ptr [rax + rcx*2 + 0x11], 1; jno 0x36d34; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436d37: sar dword ptr [rax + rcx*2 + 0x11], 1; jns 0x36d3c; ret; 
0x0000000000450296: sar dword ptr [rax - 0x8000001], 0xd8; mov dword ptr fs:[rcx], eax; or rax, 0xffffffffffffffff; ret; 
0x0000000000459243: sar dword ptr [rbx - 0x7cb7fffa], 1; ret 0x4901; 
0x0000000000488821: sar dword ptr [rcx], 0xc2; jg 0x88834; pcmpistri xmm1, xmm1, 0x3a; cmp edx, ecx; jle 0x888d0; ret; 
0x0000000000468505: sar dword ptr [rcx], cl; ret 0x4d74; 
0x000000000045424a: sar dword ptr [rdi + 0x13], 1; mov qword ptr [rax + 0x48], r9; mov qword ptr [rax + 0x38], rsi; mov qword ptr [rax + 0x40], rdx; mov byte ptr [rax + 0x50], 1; ret; 
0x0000000000446de7: sar dword ptr [rsi + 0x7f], 0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000040c6c5: sar dword ptr [rsi], 1; jmp rcx; 
0x00000000004931bc: sar eax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047435c: sar eax, 2; sub eax, 1; ret; 
0x000000000042b0b2: sar eax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000047b83a: sar ebp, 0xff; jmp qword ptr [rsi - 0x70]; 
0x0000000000462d67: sar ebx, 1; jmp qword ptr [rsi + 0xf]; 
0x000000000042b633: sar edi, 0xc0; jne 0x2b680; vzeroupper; ret; 
0x0000000000451199: sar edi, 0xf; add byte ptr [rax], al; jne 0x511b0; mov eax, 9; syscall; 
0x000000000048d8cf: sar edi, 0xff; call 0x8dab0; neg eax; sbb eax, eax; add rsp, 8; ret; 
0x000000000048df9a: sar edi, 1; dec dword ptr [rax - 0x77]; adc byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000478cc6: sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000478cd6: sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000478ce6: sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000478cb6: sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x000000000044f924: sar edi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044fa0f: sar edi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x000000000044f9b4: sar edi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044f965: sar edi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000048de49: sar edi, cl; dec dword ptr [rax - 0x77]; sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000474406: sar edx, 2; sub eax, edx; ret; 
0x000000000042b0b8: sar edx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000043f368: sar edx, cl; test rdx, rdx; je 0x3f380; bsf rax, rdx; ret; 
0x000000000043f30b: sar edx, cl; test rdx, rdx; je 0x3f390; bsf rax, rdx; ret; 
0x000000000043f537: sar edx, cl; test rdx, rdx; je 0x3f560; bsf rax, rdx; ret; 
0x000000000043f4c7: sar edx, cl; test rdx, rdx; je 0x3f570; bsf rax, rdx; ret; 
0x000000000044ef47: sar edx, cl; test rdx, rdx; je 0x4ef70; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044eedc: sar edx, cl; test rdx, rdx; je 0x4ef80; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004784c8: sar edx, cl; test rdx, rdx; je 0x784e0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000047846f: sar edx, cl; test rdx, rdx; je 0x784f0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044b530: sar esi, 0x28; jg 0x4b535; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000044b58f: sar esi, 0x28; jg 0x4b594; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000447602: sar esi, 0x48; jg 0x47607; ret; 
0x0000000000447658: sar esi, 0x48; jg 0x4765d; ret; 
0x000000000044dfce: sar esi, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004931bb: sar rax, 0x3f; and eax, 1; mov dword ptr [rsi], eax; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000047435b: sar rax, 2; sub eax, 1; ret; 
0x000000000042b0b1: sar rax, cl; movzx eax, al; sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000044f923: sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044fa0e: sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x000000000044f9b3: sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044f964: sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000474405: sar rdx, 2; sub eax, edx; ret; 
0x000000000042b0b7: sar rdx, cl; movzx edx, dl; sub eax, edx; ret; 
0x000000000043f367: sar rdx, cl; test rdx, rdx; je 0x3f380; bsf rax, rdx; ret; 
0x000000000043f30a: sar rdx, cl; test rdx, rdx; je 0x3f390; bsf rax, rdx; ret; 
0x000000000043f536: sar rdx, cl; test rdx, rdx; je 0x3f560; bsf rax, rdx; ret; 
0x000000000043f4c6: sar rdx, cl; test rdx, rdx; je 0x3f570; bsf rax, rdx; ret; 
0x000000000044ef46: sar rdx, cl; test rdx, rdx; je 0x4ef70; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044eedb: sar rdx, cl; test rdx, rdx; je 0x4ef80; bsf rax, rdx; shr rax, 2; ret; 
0x00000000004784c7: sar rdx, cl; test rdx, rdx; je 0x784e0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000047846e: sar rdx, cl; test rdx, rdx; je 0x784f0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000478dea: sarx eax, eax, ecx; test eax, eax; je 0x78d07; tzcnt eax, eax; ret; 
0x000000000043f7bd: sarx eax, eax, edx; test eax, eax; je 0x3f6e4; tzcnt eax, eax; vzeroupper; ret; 
0x000000000044c6a4: sarx eax, eax, edx; test eax, eax; je 0x4c524; tzcnt eax, eax; add rax, rdx; ret; 
0x000000000044d0e2: sarx eax, eax, edx; test eax, eax; je 0x4d007; tzcnt eax, eax; ret; 
0x000000000044bc22: sarx eax, r8d, eax; test eax, eax; je 0x4bc84; tzcnt eax, eax; add rax, rcx; ret; 
0x000000000044dc82: sarx eax, r8d, eax; test eax, eax; je 0x4dce4; tzcnt eax, eax; add rax, rcx; ret; 
0x0000000000451255: sbb al, 0; add byte ptr [rax], al; syscall; 
0x0000000000451255: sbb al, 0; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x51264; ret; 
0x0000000000484c52: sbb al, 0x24; add rsp, 0x30; ret; 
0x0000000000479ccf: sbb al, 0x41; mov eax, eax; mov rsi, qword ptr [rsp + 0x10]; mov edi, dword ptr [rsp + 0x18]; mov eax, 0x101; syscall; 
0x000000000044db14: sbb al, 0x48; lea eax, [rdi + rax + 0x40]; ret; 
0x00000000004666ba: sbb al, 0x48; mov esi, dword ptr [rsp + 0x10]; mov r8d, eax; mov rdi, qword ptr [rsp + 8]; mov eax, 0x13e; syscall; 
0x00000000004749b3: sbb al, 0x83; ret; 
0x000000000048b780: sbb al, 0xe9; ret 5; 
0x000000000041ee5c: sbb al, 0xe9; xabort -1; jmp qword ptr [rsi + 0xf]; 
0x000000000044fb2b: sbb al, 0xf4; mov eax, esi; syscall; 
0x000000000044b1ed: sbb al, 1; add byte ptr [rax], al; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x00000000004130a2: sbb al, byte ptr [rax + rax]; add byte ptr [rcx - 0x75], cl; xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000004231d5: sbb al, byte ptr [rax - 0x72b7fd1b]; adc eax, 0x25530; lea rax, [rip + 0x25599]; cmove rax, rdx; ret; 
0x0000000000422ff5: sbb al, byte ptr [rax - 0x72b7fd1b]; adc eax, 0x25700; lea rax, [rip + 0x25749]; cmove rax, rdx; ret; 
0x0000000000422de5: sbb al, byte ptr [rax - 0x72b7fd1b]; adc eax, 0x25920; lea rax, [rip + 0x25989]; cmove rax, rdx; ret; 
0x00000000004930c6: sbb al, byte ptr [rax]; add byte ptr [rax], al; mov edi, 1; call rax; 
0x0000000000447c0e: sbb al, byte ptr [rbx + 0x1c7701fa]; jb 0x47be7; mov byte ptr [rax], sil; ret; 
0x00000000004220dd: sbb al, byte ptr [rbx - 0x72b7fb1f]; add eax, 0x1c8d8; lea rdx, [rip + 0x21f91]; cmovne rax, rdx; ret; 
0x000000000047cb6a: sbb al, byte ptr [rbx]; add al, ch; jns 0x7cb69; jmp qword ptr [rsi + 0xf]; 
0x0000000000463137: sbb al, byte ptr [rsi]; add byte ptr [rax - 0x75], cl; add al, 0xd8; test rax, rax; je 0x63145; call rax; 
0x0000000000464f84: sbb al, byte ptr [rsi]; add byte ptr [rax - 0x77], cl; adc eax, 0x61aaa; cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x00000000004139b8: sbb al, ch; ret 9; 
0x000000000048185d: sbb al, ch; sub eax, 0x48fffff7; add esp, 0xd8; ret; 
0x0000000000450e8f: sbb bl, al; nop dword ptr [rax]; mov rdx, rsp; mov esi, 0x10; mov eax, 0x48; syscall; 
0x000000000048481c: sbb bl, byte ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x0000000000443c3a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x000000000044357a: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000443bfb: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044353b: sbb bl, dh; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x0000000000443c39: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; lea rax, [rdi + 0x1b]; ret; 
0x0000000000443579: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov dword ptr [rdi + 0x18], ecx; ret; 
0x0000000000443bfa: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; lea rax, [rdi + 0x19]; ret; 
0x000000000044353a: sbb bl, r14b; movq qword ptr [rdi], mm0; mov qword ptr [rdi + 0x10], rdx; mov word ptr [rdi + 0x18], cx; ret; 
0x000000000041817f: sbb byte ptr [r11 + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000418200: sbb byte ptr [r14 + 0xf], r12b; insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; or byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x0000000000417fe2: sbb byte ptr [r14 + 0xf], r12b; insd dword ptr [rdi], dx; retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000041801d: sbb byte ptr [r14 + 0xf], r12b; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000041a934: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000414e44: sbb byte ptr [r15], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x0000000000466f91: sbb byte ptr [r8 + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x0000000000485c88: sbb byte ptr [r8 + 0x5a], bl; pop rbx; ret; 
0x0000000000417fea: sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000047378e: sbb byte ptr [r9 + r9*4 - 0x1a], al; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x00000000004967a7: sbb byte ptr [r9 - 0x75], r9b; push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x0000000000479cdb: sbb byte ptr [rax + 0x101], bh; syscall; 
0x000000000040a09e: sbb byte ptr [rax + 0x24048b48], dl; mov rdx, r14; mov rsi, r13; mov rdi, r12; call rax; 
0x0000000000466f92: sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x0000000000409f94: sbb byte ptr [rax + 0x31], cl; ror byte ptr [rdi], 1; mov dh, 0x11; test dl, dl; jne 0x9f78; ret; 
0x000000000048a7f8: sbb byte ptr [rax + 0x39], cl; ret; 
0x000000000048a7f7: sbb byte ptr [rax + 0x39], r9b; ret; 
0x0000000000485c89: sbb byte ptr [rax + 0x5a], bl; pop rbx; ret; 
0x000000000040a11e: sbb byte ptr [rax + 0x758b49], dl; mov rdi, qword ptr [r12]; mov rdx, r14; mov rax, qword ptr [rsp]; call rax; 
0x000000000048d8e9: sbb byte ptr [rax - 0x39], cl; ret 0xfff8; 
0x000000000041ff36: sbb byte ptr [rax - 0x39], cl; ret; 
0x0000000000401c92: sbb byte ptr [rax - 0x75], cl; and al, 8; call rax; 
0x000000000045051b: sbb byte ptr [rax - 0x75], cl; je 0x50544; adc byte ptr [rcx - 0x77], al; ror byte ptr [rbx + 0x3108247c], 0xc0; syscall; 
0x000000000045a8f0: sbb byte ptr [rax - 0x75], cl; je 0x5a919; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x28]; call rax; 
0x0000000000493e3a: sbb byte ptr [rax - 0x75], cl; or byte ptr [rax - 0x77], cl; ret; 
0x0000000000418026: sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x0000000000417feb: sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000040537b: sbb byte ptr [rax - 0x77], cl; ret 0x2548; 
0x000000000041e276: sbb byte ptr [rax - 0x77], cl; ret 0x850f; 
0x0000000000494f18: sbb byte ptr [rax - 0x77], cl; ret 0x8548; 
0x0000000000404c3e: sbb byte ptr [rax - 0x77], cl; ret 0x8948; 
0x0000000000494f0b: sbb byte ptr [rax - 0x77], cl; ret 0xbce8; 
0x0000000000419f17: sbb byte ptr [rax - 0x77], cl; sbb eax, 0xae299; add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x0000000000459c40: sbb byte ptr [rax - 0x7d], cl; ret; 
0x0000000000413f2b: sbb byte ptr [rax - 1], bh; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000048246c: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx + rax - 0x10], dh; inc dword ptr [rsi + 0x10]; pop rbx; ret; 
0x000000000045d819: sbb byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rcx - 0xa], al; ret 0x7501; 
0x0000000000450285: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; 
0x0000000000450285: sbb byte ptr [rax], al; add byte ptr [rax], al; syscall; cmp rax, -0xfff; jae 0x50294; ret; 
0x00000000004504e8: sbb byte ptr [rax], al; add byte ptr [rax], al; test eax, eax; jne 0x50500; syscall; 
0x0000000000450588: sbb byte ptr [rax], al; add byte ptr [rax], al; test eax, eax; jne 0x505a0; mov eax, 1; syscall; 
0x0000000000466688: sbb byte ptr [rax], al; add byte ptr [rax], al; test eax, eax; jne 0x666a0; mov eax, 0x13e; syscall; 
0x0000000000479c47: sbb byte ptr [rax], al; add byte ptr [rax], al; test eax, eax; jne 0x79cb0; mov eax, 0x101; syscall; 
0x00000000004527ae: sbb byte ptr [rax], dl; add byte ptr [rax], al; ret; 
0x000000000044ed03: sbb byte ptr [rbp + 0x31], al; ror byte ptr [rax - 0x77], 0xef; call rbx; 
0x000000000041da28: sbb byte ptr [rbp + 0x41], bl; pop rsp; ret; 
0x0000000000418180: sbb byte ptr [rbx + 0x480c2474], cl; mov edi, dword ptr [rsp]; add rsp, 0x10; pop rbx; jmp rax; 
0x0000000000494107: sbb byte ptr [rbx + 0x5d], bl; mov eax, r8d; ret; 
0x000000000040b9db: sbb byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000413889: sbb byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000419b7b: sbb byte ptr [rbx - 0x2fd6efb9], cl; ret; 
0x0000000000494922: sbb byte ptr [rbx - 0x76b7f019], al; ret 0xa2e8; 
0x0000000000490b43: sbb byte ptr [rcx + 0x21], cl; ror dword ptr [rax - 0x3f], cl; out dx, eax; xor byte ptr [rax + 0x21], cl; ret 0x8949; 
0x000000000048c219: sbb byte ptr [rcx + rcx*4 - 0x18], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000047378f: sbb byte ptr [rcx + rcx*4 - 0x1a], al; pop rbx; mov rdi, rbp; pop rbp; pop r12; jmp rax; 
0x000000000040adf2: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop r12; ret; 
0x00000000004528d0: sbb byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x000000000041133c: sbb byte ptr [rcx + rcx*4 - 0x20], cl; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000494053: sbb byte ptr [rcx + rcx*4 - 0x40], al; pop rbx; pop rbp; ret; 
0x00000000004967a8: sbb byte ptr [rcx - 0x75], cl; push rbp; adc byte ptr [rax - 0x7d], cl; ret; 
0x00000000004537f4: sbb byte ptr [rcx], dh; fisttp dword ptr [rbp - 0x75]; pop rbp; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret; 
0x000000000041fe2f: sbb byte ptr [rcx], dh; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x0000000000413eff: sbb byte ptr [rcx], dh; rcr byte ptr [rbx + 0x5d], 0x41; pop rsp; pop r13; ret; 
0x0000000000452acd: sbb byte ptr [rcx], dh; rol byte ptr [rbx + 0x2b7502e1], 0x45; xor eax, eax; mov eax, 0x19; syscall; 
0x0000000000422f7c: sbb byte ptr [rdi + 2], 0; cmove rax, rdx; ret; 
0x0000000000453374: sbb byte ptr [rdi - 0x7cb7fff9], cl; cmp eax, 0x78ef8; add byte ptr [rsi + rbx + 0x48], dh; lea eax, [rip + 0x78ee7]; ret; 
0x0000000000447b67: sbb byte ptr [rdi], cl; adc dword ptr [rax], eax; movups xmmword ptr [rax + rdx - 0x10], xmm0; ret; 
0x000000000041a935: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; add rsp, 0x28; pop rbx; pop rbp; ret; 
0x0000000000414e45: sbb byte ptr [rdi], cl; adc dword ptr [rbx + 0x28], eax; pop rbx; ret; 
0x00000000004904d3: sbb byte ptr [rdx], al; add byte ptr [rax], al; add rsp, 0x98; pop rbp; pop r12; ret; 
0x0000000000473b66: sbb byte ptr [rsi + 0x1f], dh; mov rax, qword ptr [rax + 0xe0]; mov esi, 0xffffffff; call qword ptr [rax + 0x18]; 
0x0000000000418201: sbb byte ptr [rsi + 0xf], ah; insb byte ptr [rdi], dx; ror dword ptr [rdi], 0x11; or byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x0000000000417fe3: sbb byte ptr [rsi + 0xf], ah; insd dword ptr [rdi], dx; retf 0x170f; sbb byte ptr [r8 - 0x77], r9b; movups xmmword ptr [rdi + 8], xmm1; ret; 
0x000000000041801e: sbb byte ptr [rsi + 0xf], ah; insd dword ptr [rdi], dx; ror byte ptr [rax - 0x77], 0x57; sbb byte ptr [rax - 0x77], cl; movups xmmword ptr [rdi + 8], xmm0; ret; 
0x000000000048265a: sbb ch, bh; call qword ptr [rax + 0x48]; 
0x0000000000463c62: sbb cl, byte ptr [rax - 0x77]; ret 0x2548; 
0x0000000000456e9a: sbb cl, byte ptr [rax - 0x77]; ret 0x8948; 
0x00000000004152e7: sbb cl, byte ptr [rbx]; add byte ptr [rbx + 0xc08d], cl; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x000000000043c6dd: sbb cl, byte ptr [rdi]; xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e33a: sbb cl, byte ptr [rdi]; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043db5a: sbb cl, byte ptr [rdi]; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043df4a: sbb cl, byte ptr [rdi]; xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d76a: sbb cl, byte ptr [rdi]; xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d23d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ca1d: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043c1fd: sbb cl, byte ptr [rdi]; xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x000000000043d909: sbb cl, byte ptr [rdi]; xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043cd5d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043c53d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043bd1d: sbb cl, byte ptr [rdi]; xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043cefd: sbb cl, byte ptr [rdi]; xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000043ddfa: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d61a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e72a: sbb cl, byte ptr [rdi]; xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c05d: sbb cl, byte ptr [rdi]; xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043c193: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ce93: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c9b3: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043dcfb: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e62b: sbb cl, byte ptr [rdi]; xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d1d3: sbb cl, byte ptr [rdi]; xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c4d3: sbb cl, byte ptr [rdi]; xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043bff3: sbb cl, byte ptr [rdi]; xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ccf3: sbb cl, byte ptr [rdi]; xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000043de4b: sbb cl, byte ptr [rdi]; xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d66b: sbb cl, byte ptr [rdi]; xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000480b02: sbb dl, byte ptr [rax - 1]; jmp qword ptr [rsi + 0x2e]; 
0x000000000040420f: sbb dword ptr [rax - 0x77], ecx; or byte ptr [rax + 0x9e], r15b; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x00000000004880f6: sbb dword ptr [rax - 0x7b], ecx; div byte ptr [rbp + 0x2c]; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000411126: sbb dword ptr [rax - 0x7d], ecx; ret 0xeb01; 
0x0000000000452ad9: sbb dword ptr [rax], eax; add byte ptr [rax], al; syscall; 
0x000000000040f414: sbb dword ptr [rbx], edx; add byte ptr [rax], al; mov rsi, qword ptr [rsp + 0x38]; mov rdx, r15; mov rdi, rbp; call qword ptr [rbx + 0x38]; 
0x0000000000445af7: sbb eax, -1; ret; 
0x00000000004519a1: sbb eax, 0x1f0f3ceb; add byte ptr [rax - 0x73], cl; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000496725: sbb eax, 0x31a66; test rbx, rbx; jne 0x96710; pop rbx; ret; 
0x000000000048264c: sbb eax, 0x40000003; ret; 
0x000000000048258e: sbb eax, 0x40000003; xor eax, eax; ret; 
0x000000000040a852: sbb eax, 0x441f0f; add byte ptr [rbx + rcx*4 + 0x63], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000433bd5: sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x0000000000433bd0: sbb eax, 0x477f0ff3; sbb eax, 0x46f00ff2; or eax, 0xef00ff2; movdqu xmmword ptr [rdi + 0xd], xmm0; movdqu xmmword ptr [rdi], xmm1; ret; 
0x000000000045144f: sbb eax, 0x49000001; mov edi, dword ptr [rbp]; call rbx; 
0x000000000047064f: sbb eax, 0x5238c; mov ebp, 1; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x00000000004707b8: sbb eax, 0x52423; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, qword ptr [rsp + 0x90]; jmp rdx; 
0x000000000047084b: sbb eax, 0x52490; mov rdx, qword ptr [rbx + rdx*8]; mov rbx, rcx; jmp rdx; 
0x000000000043f812: sbb eax, 0x6974c085; tzcnt eax, eax; vzeroupper; ret; 
0x000000000044faa2: sbb eax, 0x74daf883; and byte ptr [rax - 0x39], cl; ret 0xffb8; 
0x00000000004522f2: sbb eax, 0x7d8b49; call rbx; 
0x000000000040f028: sbb eax, 0x89490000; ret 0x1b8; 
0x000000000047980a: sbb eax, 0x8c48348; pop rbx; pop rbp; ret; 
0x0000000000419f1a: sbb eax, 0xae299; add dword ptr [rip + 0xae28e], 1; pop rbx; ret; 
0x0000000000453e6b: sbb eax, 0xc4834800; or byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x0000000000425ec2: sbb eax, 0xcfbc0ff3; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x000000000040dda5: sbb eax, 0xe9ffffe6; stc; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x0000000000416b16: sbb eax, 0xeaebe474; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x0000000000454123: sbb eax, 2; add byte ptr [rax], al; syscall; 
0x000000000048aca0: sbb eax, 4; add byte ptr [rax], al; pop rbx; ret; 
0x000000000044d6b4: sbb eax, dword ptr [rbp - 0xc988b40]; bsf eax, eax; ret; 
0x0000000000403089: sbb eax, dword ptr [rip - 0x1176b800]; mov edi, 0x3001; mov eax, 0x9e; syscall; 
0x00000000004943be: sbb eax, eax; add rsp, 0x10; pop rbx; pop rbp; pop r12; ret; 
0x000000000048d8d9: sbb eax, eax; add rsp, 8; ret; 
0x0000000000486256: sbb eax, eax; and eax, 2; sub eax, 1; ret; 
0x000000000042b7f7: sbb eax, eax; or eax, 1; ret; 
0x0000000000493d53: sbb eax, eax; ret; 
0x0000000000445af5: sbb eax, eax; sbb eax, -1; ret; 
0x0000000000410fed: sbb ecx, dword ptr [rax - 0x7d]; ret 0x4801; 
0x000000000042b85c: sbb ecx, ecx; or eax, ecx; ret; 
0x0000000000490e2f: sbb edi, dword ptr [rbx + rax + 0x5c60800]; adc eax, 0x80003bc; ret; 
0x000000000046c9a1: sbb edi, dword ptr [rbx - 7]; jmp qword ptr [rsi + 0x66]; 
0x0000000000487ed5: sbb edx, ebx; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x0000000000420499: sbb esi, dword ptr [rsi - 0x1117fff9]; mov ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000044c894: sbb esi, ebx; bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x000000000044c8c4: sbb esi, ebx; bsf edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; ret; 
0x000000000040350c: sbb esi, edi; ret 0; 
0x0000000000487ed4: sbb r10, r11; mov qword ptr [rdi + 8], r10; mov eax, ecx; adc eax, eax; ret; 
0x000000000042a032: scasb al, byte ptr [rdi]; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e38e: scasb al, byte ptr [rdi]; add eax, 0x83480000; ret 0xe910; 
0x0000000000422f0e: scasb al, byte ptr [rdi]; add r8b, byte ptr [r8]; cmove rax, rdx; ret; 
0x000000000047617b: scasb al, byte ptr [rdi]; cli; dec dword ptr [rax - 0x77]; ret; 
0x000000000043e48d: scasd eax, dword ptr [rdi]; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000040ecf1: scasd eax, dword ptr [rdi]; add byte ptr [rax], al; add byte ptr [rdi], cl; xchg dword ptr [rip - 0x76ffffeb], eax; ret 0xc083; 
0x0000000000422e8d: scasd eax, dword ptr [rdi]; add dword ptr [rdx], 0; cmove rax, rdx; ret; 
0x000000000042333d: scasd eax, dword ptr [rdi]; mov eax, 0xd1890001; and ecx, 0x120; cmp ecx, 0x120; je 0x23358; ret; 
0x0000000000413228: scasd eax, dword ptr [rdi]; ret 0x2948; 
0x0000000000401995: scasd eax, dword ptr [rdi]; ret 0x41c3; 
0x0000000000402291: scasd eax, dword ptr [rdi]; ret 0x4853; 
0x0000000000402465: scasd eax, dword ptr [rdi]; ret 0x518d; 
0x000000000040198b: scasd eax, dword ptr [rdi]; ret 0x538d; 
0x0000000000480a2d: scasd eax, dword ptr [rdi]; ret 0x8348; 
0x0000000000401921: scasd eax, dword ptr [rdi]; ret 0xc148; 
0x000000000040246b: scasd eax, dword ptr [rdi]; ret 0xda89; 
0x0000000000402479: scasd eax, dword ptr [rdi]; ret 0xebe9; 
0x00000000004133df: scasd eax, dword ptr [rdi]; ret 0xf748; 
0x000000000048edef: scasd eax, dword ptr [rdi]; ret; 
0x0000000000488677: scasd eax, dword ptr [rdi]; ror dword ptr [rax - 0x73], 0x84; adc byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000401992: scasd eax, dword ptr [rdi]; ror dword ptr [rdi], 0xaf; ret 0x41c3; 
0x0000000000491ebe: scasd eax, dword ptr [rdi]; xchg eax, ebx; pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x80], al; call qword ptr [rcx]; 
0x000000000041a9c4: setae al; ret; 
0x0000000000404567: sete ah; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x000000000046513a: sete dh; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000404566: sete r12b; mov rax, r12; pop rbx; pop rbp; pop r12; ret; 
0x0000000000465139: sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000041afa5: setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x000000000048c3e0: setne al; mov dword ptr [rip + 0x3ff47], eax; add rsp, 0x18; ret; 
0x000000000041b0c7: setne dh; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x000000000041b0c6: setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000497039: shl byte ptr [rax + 0x48ffffff], 0xc7; ret 0x3020; 
0x0000000000416b11: shl byte ptr [rbx + rax*4 + 0x7d], 0; sbb eax, 0xeaebe474; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000044f2fb: shl byte ptr [rcx + 0x48], 1; clc; shr rax, 2; vzeroupper; ret; 
0x000000000043fa0b: shl byte ptr [rcx + 0x48], 1; clc; vzeroupper; ret; 
0x000000000044f251: shl byte ptr [rcx], 0x48; add eax, edi; shr rax, 2; vzeroupper; ret; 
0x000000000043f986: shl byte ptr [rcx], 0x48; add eax, edi; vzeroupper; ret; 
0x0000000000479db6: shl byte ptr [rip + 0x410000], cl; cmp eax, 0x410000; je 0x79df0; mov eax, 0x101; syscall; 
0x0000000000445d3f: shl byte ptr [rsi + 0x44], 0xf; out dx, eax; ret 0xf66; 
0x000000000048827a: shl byte ptr [rsi + 0xf], 0x6c; ret 0x110f; 
0x000000000041b924: shl byte ptr [rsi + 0xf], 0x6c; ret 0xf41; 
0x000000000045406d: shl byte ptr [rsi + 0xf], 0x6c; ror byte ptr [rdi], 0x11; add eax, 0x78287; ret; 
0x00000000004440e7: shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x000000000043ebc5: shl byte ptr [rsi + 0xf], 0xeb; ret 0xf66; 
0x000000000047fee8: shl byte ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x3948; 
0x0000000000476f57: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000476f46: shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x0000000000412c9f: shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0x110f; 
0x0000000000483791: shl byte ptr [rsi + 0xf], cl; insb byte ptr [rdi], dx; ret 0xf41; 
0x0000000000422d21: shl dword ptr [rax], 0x74; or bh, dh; ret 0; 
0x0000000000453041: shl dword ptr [rbx], 0x4e; adc byte ptr [rax - 0x73], cl; or al, 0x8e; add eax, dword ptr [rcx + rdx]; ret; 
0x000000000046663b: shl dword ptr [rcx + 6], 0; call 0x1ab10; xor eax, eax; add rsp, 8; ret; 
0x00000000004830f0: shl dword ptr [rsi + 0x48], 0xf; outsb dx, byte ptr [rsi]; fisub dword ptr [rsi + 0xf]; insb byte ptr [rdi], dx; ret; 
0x000000000048825c: shl dword ptr [rsi + 0x49], 0xf; outsb dx, byte ptr [rsi]; ret 0xd348; 
0x00000000004440df: shl dword ptr [rsi + 0xf], 0x74; fisub dword ptr [rsi + 0xf]; xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000476f42: shl dword ptr [rsi + 0xf], 0xd7; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x0000000000445b9f: shl dword ptr [rsi + 0xf], 0xda; ret; 
0x000000000041c37d: shl dword ptr [rsi + 0xf], 1; insb byte ptr [rdi], dx; ret 0x3b48; 
0x000000000042a6fc: shl dword ptr [rsi + 0xf], 1; xlatb; ret 0xc085; 
0x000000000042ad1d: shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000042b98d: shl dword ptr [rsi - 1], 0xc0; jne 0x2b903; ret; 
0x000000000044d09c: shl eax, 0x20; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x0000000000453dae: shl eax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x53dfa; ret; 
0x00000000004532fc: shl eax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x53310; ret; 
0x00000000004533ac: shl eax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x78ebe], rax; lea rax, [rip + 0x78eaf]; ret; 
0x000000000044f8d5: shl eax, 8; or eax, edx; tzcnt eax, eax; add rax, rdi; ret; 
0x0000000000456c4c: shl eax, cl; ret; 
0x000000000044c641: shl ecx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044adf1: shl ecx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000044bd1f: shl ecx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000043f41b: shl ecx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000456c47: shl ecx, 3; pop r12; shl eax, cl; ret; 
0x0000000000453df0: shl ecx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x53dad; xor eax, eax; ret; 
0x00000000004869cc: shl ecx, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048694b: shl ecx, cl; mov qword ptr [rdi - 8], r9; ret; 
0x000000000048691a: shl ecx, cl; mov qword ptr [rdi], r9; ret; 
0x000000000043ed4a: shl edx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000045331c: shl edx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004880a3: shl edx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x000000000044f0b0: shl esi, 2; bts rax, rsi; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000044f3b4: shl esi, 2; cmp rsi, rax; cmovb eax, esi; shr eax, 2; vzeroupper; ret; 
0x000000000041b0cd: shl esi, 7; xor sil, 0x81; syscall; 
0x00000000004869cb: shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x000000000048694a: shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000486919: shl r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000044d09b: shl rax, 0x20; or rax, rdx; tzcnt rax, rax; add rax, rdi; ret; 
0x0000000000453dad: shl rax, 4; mov rax, qword ptr [rdx + rax]; cmp rax, -1; je 0x53dfa; ret; 
0x00000000004532fb: shl rax, 5; lea rax, [rdx + rax + 0x70]; cmp qword ptr [rax + 8], 0; je 0x53310; ret; 
0x00000000004533ab: shl rax, 5; mov rax, qword ptr [rdx + rax]; mov qword ptr [rip + 0x78ebe], rax; lea rax, [rip + 0x78eaf]; ret; 
0x000000000044c640: shl rcx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044adf0: shl rcx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000044bd1e: shl rcx, 0x20; or rax, rcx; tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000043f41a: shl rcx, 0x20; or rdx, rcx; bsf rdx, rdx; add rax, rdx; sub rax, rdi; ret; 
0x0000000000453def: shl rcx, 4; cmp r8, qword ptr [rcx + rsi + 0x10]; jae 0x53dad; xor eax, eax; ret; 
0x000000000043ed49: shl rdx, 0x30; or rax, rdx; bsf rax, rax; lea rax, [rdi + rax]; ret; 
0x000000000045331b: shl rdx, 5; mov rdx, qword ptr [rcx + rdx]; mov qword ptr [rax + 8], rdx; ret; 
0x00000000004880a2: shl rdx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x00000000004869c4: shld eax, ecx, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000486944: shld eax, ecx, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x00000000004869c3: shld r8, r9, cl; mov qword ptr [rdi - 8], r8; shl r9, cl; mov qword ptr [rdi - 0x10], r9; ret; 
0x0000000000486943: shld r8, r9, cl; mov qword ptr [rdi], r8; shl r9, cl; mov qword ptr [rdi - 8], r9; ret; 
0x0000000000464cc9: shr al, 0x11; ret 0xfffe; 
0x0000000000416764: shr al, 0x46; ret; 
0x00000000004587f5: shr al, 0x55; mov edx, edi; jmp qword ptr [rsi + 0xf]; 
0x00000000004222f4: shr al, 0xd6; movabs eax, dword ptr [0x415d5be0894c0004]; pop rsp; ret; 
0x0000000000467083: shr al, 0xe7; mov esi, 0x2ebffffe; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x000000000048c039: shr bl, 0x9f; nop dword ptr [rax]; call rax; 
0x0000000000479a37: shr bl, 0xb1; call 0x53280; nop; endbr64; mov eax, 0x3f; syscall; 
0x000000000040b2cd: shr bl, cl; or dword ptr [rax - 0x7d], ecx; ret 0x4801; 
0x000000000041466f: shr byte ptr [r10], 0x45; xor eax, eax; mov rcx, r14; mov rsi, r13; mov rdi, r15; call rbx; 
0x000000000040c3e4: shr byte ptr [rax + 0x48004c72], 0x89; ret 0x2949; 
0x0000000000424a8f: shr byte ptr [rcx], 0xc8; ret; 
0x000000000042b66f: shr byte ptr [rcx], 0xc8; vzeroupper; ret; 
0x0000000000478603: shr byte ptr [rcx], 0xd7; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6b3: shr byte ptr [rcx], 0xd7; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000000478623: shr byte ptr [rcx], 0xd7; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6c3: shr byte ptr [rcx], 0xd7; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000000478643: shr byte ptr [rcx], 0xd7; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6d3: shr byte ptr [rcx], 0xd7; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x00000000004785e3: shr byte ptr [rcx], 0xd7; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6a3: shr byte ptr [rcx], 0xd7; inc edi; add eax, edi; vzeroupper; ret; 
0x000000000044cfb3: shr byte ptr [rcx], 0xd7; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000044cfc3: shr byte ptr [rcx], 0xd7; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000044cfd3: shr byte ptr [rcx], 0xd7; lea eax, [rdi + rax + 0x60]; ret; 
0x000000000044cfe3: shr byte ptr [rcx], 0xd7; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000478cc3: shr byte ptr [rcx], 0xd7; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000478cd3: shr byte ptr [rcx], 0xd7; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000478ce3: shr byte ptr [rcx], 0xd7; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000478cb3: shr byte ptr [rcx], 0xd7; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x000000000044df0a: shr byte ptr [rdx + 1], cl; lea r9, [rsp + 0x20]; call rbx; 
0x0000000000414670: shr byte ptr [rdx], 0x45; xor eax, eax; mov rcx, r14; mov rsi, r13; mov rdi, r15; call rbx; 
0x000000000048d887: shr cl, cl; ret; 
0x000000000044412e: shr dword ptr [rax - 0x267af0e0], 1; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x00000000004019b3: shr eax, 0x16; add eax, 1; ret; 
0x00000000004747e6: shr eax, 0xb; and eax, 1; mov dword ptr [rip + 0x539fe], eax; ret; 
0x000000000046555d: shr eax, 1; imul rax, rdi; lea r12, [rcx + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x000000000044eeec: shr eax, 2; ret; 
0x000000000044f09f: shr eax, 2; vzeroupper; ret; 
0x000000000047897e: shr eax, 2; xtest; je 0x7898a; vzeroall; ret; 
0x000000000041b7c0: shr eax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa9ffa], rdx; ret; 
0x000000000044804f: shr ebx, 0x3a; xor eax, eax; ret; 
0x000000000044ae8e: shr ecx, 0x20; and eax, ecx; je 0x4aea1; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044dbfe: shr ecx, 0x20; and eax, ecx; je 0x4dc11; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044f39d: shr ecx, 2; cmp rcx, rsi; jb 0x4f124; mov rax, r8; vzeroupper; ret; 
0x000000000041f512: shr ecx, 3; rep stosq qword ptr [rdi], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004790bb: shr ecx, 8; and eax, ecx; je 0x790ce; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x00000000004793eb: shr ecx, 8; and eax, ecx; je 0x793fe; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000486adc: shr ecx, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000486a65: shr ecx, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000486a34: shr ecx, cl; mov qword ptr [rdi], r9; ret; 
0x0000000000409f92: shr edx, 0x18; xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x9f78; ret; 
0x0000000000477b2e: shr esi, 2; sub rdx, rsi; jbe 0x77e40; add rax, rdi; add rax, rcx; ret; 
0x0000000000477dc5: shr esi, 2; sub rdx, rsi; jbe 0x77e40; add rax, rdi; ret; 
0x0000000000477de5: shr esi, 2; sub rdx, rsi; jbe 0x77e40; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000477e05: shr esi, 2; sub rdx, rsi; jbe 0x77e40; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477e25: shr esi, 2; sub rdx, rsi; jbe 0x77e40; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000486adb: shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000486a64: shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000486a33: shr r9, cl; mov qword ptr [rdi], r9; ret; 
0x000000000046555c: shr rax, 1; imul rax, rdi; lea r12, [rcx + rax]; mov r13, rax; mov rdi, r12; call rbx; 
0x000000000044eeeb: shr rax, 2; ret; 
0x000000000044f1ff: shr rax, 2; vzeroupper; ret; 
0x000000000041b7bf: shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa9ffa], rdx; ret; 
0x000000000044804e: shr rbx, 0x3a; xor eax, eax; ret; 
0x000000000044ae8d: shr rcx, 0x20; and eax, ecx; je 0x4aea1; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044dbfd: shr rcx, 0x20; and eax, ecx; je 0x4dc11; tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000409f91: shr rdx, 0x18; xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x9f78; ret; 
0x0000000000486ad4: shrd eax, ecx, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000486a5e: shrd eax, ecx, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x0000000000486ad3: shrd r8, r9, cl; mov qword ptr [rdi + 8], r8; shr r9, cl; mov qword ptr [rdi + 0x10], r9; ret; 
0x0000000000486a5d: shrd r8, r9, cl; mov qword ptr [rdi], r8; shr r9, cl; mov qword ptr [rdi + 8], r9; ret; 
0x000000000044c0f5: shufps xmm0, xmmword ptr [rdi + 2], 0; lea rax, [rdi + 2]; ret; 
0x0000000000443fd5: shufps xmm0, xmmword ptr [rdi + 2], 0; lea rax, [rdi + 2]; vzeroupper; ret; 
0x000000000044cec5: shufps xmm0, xmmword ptr [rdi + 2], 0; ret; 
0x000000000043fdb5: shufps xmm0, xmmword ptr [rdi + 2], 0; vzeroupper; ret; 
0x0000000000488291: sldt word ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x2944; 
0x000000000045119b: sldt word ptr [rax]; jne 0x511b0; mov eax, 9; syscall; 
0x0000000000401939: sldt word ptr [rax]; lea rax, [rbx + 1]; pop rbx; ret; 
0x000000000040d2d7: sldt word ptr [rax]; mov qword ptr [rbp - 0x8a0], r8; mov rdx, r13; mov rsi, r11; mov rdi, r14; call qword ptr [rcx + 0x38]; 
0x000000000046fdfd: sldt word ptr [rax]; mov rdx, r14; mov rsi, r15; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x0000000000476544: sldt word ptr [rax]; test edx, 0x40000000; je 0x76517; ret; 
0x000000000044571f: stc; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000042232a: stc; and byte ptr [rcx], al; add byte ptr [rax], al; je 0x22338; ret; 
0x000000000042239a: stc; and byte ptr [rcx], al; add byte ptr [rax], al; je 0x223a8; ret; 
0x0000000000422caa: stc; and byte ptr [rcx], al; add byte ptr [rax], al; je 0x22cb8; ret; 
0x00000000004232ca: stc; and byte ptr [rcx], al; add byte ptr [rax], al; je 0x232d8; ret; 
0x000000000042334a: stc; and byte ptr [rcx], al; add byte ptr [rax], al; je 0x23358; ret; 
0x00000000004764fa: stc; and byte ptr [rcx], al; add byte ptr [rax], al; je 0x76508; ret; 
0x00000000004777da: stc; and byte ptr [rcx], al; add byte ptr [rax], al; je 0x777e8; ret; 
0x00000000004543e5: stc; cmp r9, rax; jge 0x54378; ret; 
0x000000000046323b: stc; dec dword ptr [rax - 0x7b]; ror byte ptr [rdi], 0x84; rol byte ptr [rip - 0x76b80000], cl; ret 0x294c; 
0x000000000048ccc3: stc; ja 0x8ccbd; jmp qword ptr [rsi + 0xf]; 
0x00000000004806cd: stc; je 0x806d8; ret; 
0x000000000046bfef: stc; jmp qword ptr [rsi + 0x2e]; 
0x000000000048aa14: stc; jmp qword ptr [rsi + 0x49]; 
0x000000000046c9a3: stc; jmp qword ptr [rsi + 0x66]; 
0x0000000000475ce8: stc; jmp qword ptr [rsi + 0xf]; 
0x000000000048474c: stc; jmp qword ptr [rsi - 0x70]; 
0x000000000044c13f: stc; lea rax, [rdi + rdx]; ret; 
0x000000000044402f: stc; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000042e8d8: stc; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e8d2: stc; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 7], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000044c137: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; ret; 
0x0000000000444027: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044cef7: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; ret; 
0x000000000043fde7: stc; mov qword ptr [rdi], rcx; mov qword ptr [rdi + rdx - 7], r9; vzeroupper; ret; 
0x000000000044c898: stc; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x0000000000425eef: stc; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000044c8c8: stc; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; ret; 
0x0000000000425f0f: stc; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000047c886: stc; or al, 0xf; xchg byte ptr [rbx + rax], bh; add byte ptr [rax + 1], cl; ret 0xba41; 
0x0000000000470920: stc; or dword ptr [rdi], ecx; xchg dword ptr [rax - 0x74fffff8], ecx; pop rdx; or byte ptr [rax - 0x7d], cl; ret 0x8d08; 
0x000000000040fa41: stc; or dword ptr [rdi], ecx; xchg dword ptr [rdi + 0xffffff5], esp; mov dh, 0x4a; add cl, byte ptr [rax - 0x7d]; ret 0x8302; 
0x000000000040ddaa: stc; out 0xff, al; jmp qword ptr [rsi - 0x70]; 
0x0000000000446e49: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000044b58b: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000447654: stc; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000044ceff: stc; ret; 
0x0000000000437238: stc; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043fdef: stc; vzeroupper; ret; 
0x000000000042b73d: stc; xlatb; ret 0xff2d; 
0x00000000004507c9: std; add al, 0; add byte ptr [rax - 0x39], cl; ret; 
0x0000000000412e0e: std; add dword ptr [rsi + rbp - 0x77], esi; ret 0xc085; 
0x000000000040a2b6: std; add r15, r14; call rax; 
0x000000000048265b: std; call qword ptr [rax + 0x48]; 
0x0000000000479a3d: std; call qword ptr [rax - 0x5e1f00d]; mov eax, 0x3f; syscall; 
0x0000000000477899: std; dec dword ptr [rax - 0x73]; adc eax, 0xfffd039e; cmove rax, rdx; ret; 
0x00000000004778b8: std; dec dword ptr [rax - 0x73]; add eax, 0xfffd053f; cmovne rax, rdx; ret; 
0x00000000004805ff: std; dec dword ptr [rax - 0x77]; ret 0x8348; 
0x0000000000495bac: std; dec dword ptr [rcx + rcx*4 - 0x20]; pop rbx; pop rbp; pop r12; ret; 
0x000000000047cd82: std; dec dword ptr [rcx - 0x77]; ret 0x8348; 
0x0000000000456b8a: std; inc dword ptr [rbp - 0x7f4c8a40]; or eax, 0x759e9; or al, 0x5b; ret; 
0x0000000000485bf2: std; jbe 0x85c00; ret; 
0x000000000048ccbe: std; je 0x8ccc3; add al, ch; stc; ja 0x8ccbd; jmp qword ptr [rsi + 0xf]; 
0x00000000004748af: std; jmp qword ptr [rsi + 0x2e]; 
0x00000000004746e1: std; jmp qword ptr [rsi + 0x66]; 
0x00000000004797e8: std; jmp qword ptr [rsi + 0xf]; 
0x0000000000477a8c: std; jmp qword ptr [rsi - 0x70]; 
0x000000000047e872: std; jmp qword ptr [rsi - 0x7f]; 
0x0000000000422287: std; lcall [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000044c11b: std; lea rax, [rdi + rdx]; ret; 
0x000000000044400b: std; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000042e0f3: std; mov cx, word ptr [rsi - 2]; mov word ptr [rdi - 3], dx; mov word ptr [rdi - 2], cx; ret; 
0x000000000044c117: std; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; ret; 
0x0000000000444007: std; mov dword ptr [rdi + rdx - 3], ecx; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000044cee7: std; mov dword ptr [rdi + rdx - 3], ecx; ret; 
0x000000000043fdd7: std; mov dword ptr [rdi + rdx - 3], ecx; vzeroupper; ret; 
0x000000000042e0fb: std; mov word ptr [rdi - 2], cx; ret; 
0x000000000048e42c: std; pop rbx; pop rbp; jmp rdx; 
0x000000000047786f: std; push rsi; ret 0x7420; 
0x00000000004464ec: std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x000000000044ceeb: std; ret; 
0x000000000044c30a: std; sub byte ptr [rdi + 0x57], ch; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x00000000004647eb: std; test rax, rax; je 0x647f3; call rax; 
0x000000000044b799: std; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000044b386: std; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x0000000000447446: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000044785e: std; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x0000000000436f68: std; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d2e: std; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000446216: std; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000043fddb: std; vzeroupper; ret; 
0x000000000042ad59: std; xlatb; ret 0xc085; 
0x000000000042b3f7: std; xlatb; ret 0xc0ff; 
0x000000000042ad61: std; xlatb; ret; 
0x00000000004770f8: std; xlatb; retf 0xfdc5; xlatb; ret; 
0x0000000000477154: std; xlatb; rol ch, cl; std; xlatb; ret; 
0x000000000042ad51: std; xlatb; rol dword ptr [rbp - 0x3aa78a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042af6d: std; xlatb; rol dword ptr [rbp - 0x3ad38a40], 0xfd; xlatb; ret 0xc085; 
0x000000000043f0b7: std; xlatb; rol dword ptr [rbp - 0xc9d8b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000043f682: std; xlatb; rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x000000000042b631: std; xlatb; sar edi, 0xc0; jne 0x2b680; vzeroupper; ret; 
0x000000000042ad1b: std; xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x00000000004028ef: sti; and byte ptr [rdi], cl; test byte ptr [rdx], dh; add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe3a], al; ret; 
0x000000000044fbb5: sti; dec dword ptr [rax - 0x77]; ret; 
0x0000000000455eca: sti; idiv bh; jmp qword ptr [rsi - 0x70]; 
0x000000000046e7be: sti; idiv edi; jmp qword ptr [rsi + 0xf]; 
0x000000000044d349: sti; jbe 0x4d520; movzx eax, byte ptr [rax + rdi]; movzx edx, byte ptr [rdx + rdi]; sub eax, edx; ret; 
0x000000000044ed64: sti; jmp qword ptr [rsi + 0x2e]; 
0x000000000044e358: sti; jmp qword ptr [rsi + 0xf]; 
0x000000000046288c: sti; jmp qword ptr [rsi - 0x70]; 
0x0000000000495f66: sti; mov dh, 0xf6; jmp qword ptr [rsi + 0xf]; 
0x000000000042e4d8: sti; mov dword ptr [rdi - 4], ecx; ret; 
0x000000000042e4d2: sti; mov ecx, dword ptr [rsi - 4]; mov dword ptr [rdi - 5], edx; mov dword ptr [rdi - 4], ecx; ret; 
0x0000000000475dee: sti; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x0000000000475dee: sti; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; mov dword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000042b8b4: sti; movzx eax, byte ptr [rdi]; movzx ecx, byte ptr [rsi]; sub eax, ecx; ret; 
0x0000000000410807: sti; or dword ptr [rdi], ecx; xchg dword ptr [rcx + 0xf000000], edx; mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x8901; 
0x00000000004805b1: sti; ret 4; 
0x00000000004826e1: sti; std; jmp qword ptr [rsi + 0x66]; 
0x0000000000473a2e: sti; test byte ptr [rdi], 2; jne 0x73aa8; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x000000000043722a: sti; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000044b113: sti; xchg eax, ebx; leave; test ecx, ecx; jne 0x4afe4; ret; 
0x000000000044afdc: sti; xchg eax, ebx; leave; test ecx, ecx; jne 0x4afea; ret; 
0x000000000044db58: sti; xchg eax, ebx; ret 0xc085; 
0x000000000044db60: sti; xchg eax, ebx; ret; 
0x000000000044b003: sti; xchg eax, ebx; rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x0000000000479333: sti; xchg eax, ebx; rol byte ptr [rbp - 0x3ac98a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044dd86: sti; xchg eax, ebx; rol byte ptr [rbp - 0x3acc8a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044db50: sti; xchg eax, ebx; rol byte ptr [rbp - 0x3ad68a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044c49c: sti; xchg eax, ebx; rol byte ptr [rbp - 0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000044bc00: sti; xchg eax, ebx; rol byte ptr [rbp - 0xc868b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000044ad83: sti; xchg eax, ebx; rol ch, 0xf8; ja 0x4ad0f; sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x0000000000478fbb: sti; xchg eax, ebx; rol ch, 0xf8; ja 0x78f47; sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x000000000044d0be: sti; xchg eax, ebx; sal bl, 0x48; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044badd: sti; xchg eax, edx; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000447ee0: sti; xchg eax, edx; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000044ac12: stosb byte ptr [rdi], al; add byte ptr [rax], al; add bl, dh; bsf eax, eax; add rax, rdi; ret; 
0x000000000048a406: stosb byte ptr [rdi], al; add eax, dword ptr [rax]; pop rbx; pop rbp; pop r12; ret; 
0x0000000000456c23: stosb byte ptr [rdi], al; add rsp, 0x1d0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000447b28: stosb byte ptr [rdi], al; mov rax, rdx; ret; 
0x0000000000447caf: stosb byte ptr [rdi], al; mov rax, rdx; vzeroupper; ret; 
0x0000000000475c39: stosd dword ptr [rdi], eax; add dword ptr [rbx], 0xe87ee800; clc; jmp qword ptr [rsi + 0x2e]; 
0x000000000041f517: stosd dword ptr [rdi], eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x00000000004764cb: stosd dword ptr [rdi], eax; clc; lcall [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000043f5e4: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; ret; 
0x000000000044eff4: stosd dword ptr [rdi], eax; fimul dword ptr [rax + 0xf]; mov esp, 0xd00148d2; sub rax, rdi; shr rax, 2; ret; 
0x000000000046d891: stosd dword ptr [rdi], eax; mov bh, 2; add al, ch; je 0x6d893; jmp qword ptr [rsi + 0xf]; 
0x0000000000475952: stosd dword ptr [rdi], eax; mov eax, 0x83; ret; 
0x000000000048ded1: stosd dword ptr [rdi], eax; push rbx; cld; jmp qword ptr [rsi + 0x66]; 
0x000000000043f545: stosd dword ptr [rdi], eax; sar rdx, cl; test rdx, rdx; je 0x3f560; bsf rax, rdx; ret; 
0x000000000044d6d2: stosd dword ptr [rdi], eax; tzcnt eax, eax; ret; 
0x000000000044f0b5: stosd dword ptr [rdi], eax; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000043f832: stosd dword ptr [rdi], eax; tzcnt eax, eax; vzeroupper; ret; 
0x000000000041f516: stosq qword ptr [rdi], rax; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000488059: str word ptr [rax + 0x21]; ret 0xc148; 
0x000000000042af73: sub al, 0xc5; std; xlatb; ret 0xc085; 
0x00000000004880fb: sub al, 0xc7; add al, byte ptr [rax]; add byte ptr [rax], al; add byte ptr [rax + 1], bh; ret; 
0x0000000000423100: sub al, 0xce; add dword ptr [rax], eax; lea rdx, [rip + 0x1e6c5]; cmovne rax, rdx; ret; 
0x0000000000422360: sub al, 0xcf; add dword ptr [rax], eax; cmove rax, rdx; ret; 
0x000000000046296d: sub al, 0xf; xchg eax, esp; ret 0xd108; 
0x0000000000476ec0: sub al, 1; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000493211: sub al, byte ptr [rax]; add byte ptr [rax - 0x7b], cl; ror byte ptr [rax + 0xf], 0x45; and al, 0x10; add rsp, 0x28; ret; 
0x0000000000450ddd: sub bh, byte ptr [rax + 0x48]; syscall; 
0x0000000000418895: sub bl, 0xd6; nop dword ptr [rax + rax]; xor eax, eax; ret; 
0x000000000041350c: sub byte ptr [r13 - 0x7b], r8b; sal byte ptr [rbp + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x000000000047ca17: sub byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x0000000000466f95: sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x000000000040fb00: sub byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000047ca18: sub byte ptr [rax + 0x39], cl; ret 0x870f; 
0x000000000045b702: sub byte ptr [rax - 0x75], cl; je 0x5b72b; mov rdi, qword ptr [rsp + 0x50]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000045ea72: sub byte ptr [rax - 0x75], cl; je 0x5ea9b; push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x18]; call rax; 
0x000000000046021b: sub byte ptr [rax - 0x75], cl; je 0x60244; push rax; mov rdi, qword ptr [rsp + 0x48]; mov rax, qword ptr [rsp + 0x10]; call rax; 
0x000000000047ca14: sub byte ptr [rax - 0x75], cl; sub byte ptr [r8 + 0x39], r9b; ret 0x870f; 
0x0000000000472954: sub byte ptr [rax - 0x77], cl; ret 0xc148; 
0x00000000004190e6: sub byte ptr [rax], 0; add byte ptr [rax], al; ret; 
0x000000000040fbb3: sub byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000044e46f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x4e494; add rsp, 0x20; pop rbx; ret; 
0x00000000004502e7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x50301; add rsp, 0x28; ret; 
0x0000000000450df7: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x50e43; add rsp, 0x68; ret; 
0x0000000000450e86: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x50ed3; add rsp, 0x18; ret; 
0x0000000000450f3e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x50f8b; add rsp, 0x58; ret; 
0x000000000045117a: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x51185; add rsp, 0x28; ret; 
0x00000000004527a5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x527c5; add rsp, 0x1018; ret; 
0x0000000000452af1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x52b3d; add rsp, 0x58; ret; 
0x00000000004653c9: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x65414; mov eax, r9d; add rsp, 0x148; ret; 
0x0000000000466ea8: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x66ef5; add rsp, 0x38; ret; 
0x000000000046c4b4: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6c4c2; add rsp, 0xd8; ret; 
0x000000000046c570: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x6c57e; add rsp, 0xd8; ret; 
0x00000000004748a0: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x748ac; add rsp, 0x10; pop rbp; ret; 
0x0000000000474b4e: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x74b5a; add rsp, 0x10; pop rbp; ret; 
0x0000000000475e99: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x75f17; add rsp, 0x98; ret; 
0x0000000000479c6c: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x79d33; add rsp, 0x78; ret; 
0x0000000000479d6f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x79d7d; movzx eax, al; add rsp, 0x58; ret; 
0x0000000000479ddc: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x79e2b; add rsp, 0x58; ret; 
0x0000000000479f18: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x79f44; mov eax, r9d; add rsp, 0x38; ret; 
0x0000000000485d08: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x85d14; add rsp, 0x20; pop rbx; ret; 
0x0000000000485e1f: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485ef1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fc1: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x85ff4; add rsp, 0x58; ret; 
0x00000000004860df: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86197; add rsp, 0x68; ret; 
0x00000000004861f5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x86223; add rsp, 0x38; ret; 
0x0000000000487df6: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x87e75; leave; ret; 
0x000000000048dde2: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8dded; add rsp, 0x28; ret; 
0x000000000048dec5: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8ded0; add rsp, 0x38; ret; 
0x000000000048df35: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8df40; add rsp, 0x38; ret; 
0x000000000048e020: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8e02b; add rsp, 0x38; ret; 
0x000000000048e080: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0x8e08b; add rsp, 0x38; ret; 
0x000000000040b746: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xb754; add rsp, 0xd8; ret; 
0x000000000040b804: sub byte ptr [rax], al; add byte ptr [rax], al; jne 0xb812; add rsp, 0xd8; ret; 
0x00000000004701a0: sub byte ptr [rbp + 0x29], al; ret; 
0x000000000041350d: sub byte ptr [rbp - 0x7b], al; sal byte ptr [rbp + rbp*2 + 0x49], 0x2b; and byte ptr [r8 + 1], r9b; ret; 
0x000000000048ae68: sub byte ptr [rbx + 0x5d], bl; pop r12; pop r13; ret; 
0x00000000004118a9: sub byte ptr [rbx + 0x5d], bl; ret; 
0x000000000048d5d8: sub byte ptr [rbx - 0x1b], dh; mov eax, 1; ret; 
0x000000000048d5d7: sub byte ptr [rbx - 0x1b], sil; mov eax, 1; ret; 
0x00000000004098f9: sub byte ptr [rcx + 1], cl; ret 0x894c; 
0x0000000000466f96: sub byte ptr [rcx + rcx*4 + 4], cl; ret 0x8b4c; 
0x00000000004745cd: sub byte ptr [rcx + rcx*4 - 0x20], al; pop rbx; pop r12; ret; 
0x00000000004651c8: sub byte ptr [rcx - 0x3b76b310], cl; mov rbp, r9; nop; jmp rdx; 
0x0000000000409919: sub byte ptr [rcx - 0x77], cl; ret 0x2274; 
0x000000000048bd91: sub byte ptr [rcx - 0x77], cl; ret; 
0x000000000040f072: sub byte ptr [rcx], ch; ret; 
0x0000000000479e8d: sub byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, 0x10; syscall; 
0x0000000000447fb9: sub byte ptr [rdi + 0x44], bh; adc bh, bh; ret; 
0x000000000044b501: sub byte ptr [rdi + 0x44], bh; cmp bh, bh; ret; 
0x000000000044c30b: sub byte ptr [rdi + 0x57], ch; add al, 0x62; mov bl, 0x75; and byte ptr [rdi], bh; ret 0x6200; 
0x000000000044bf4a: sub byte ptr [rdi + 0x7f], bh; jmp qword ptr [rdx - 0x1f]; 
0x000000000044b461: sub byte ptr [rdi + 1], bh; ret; 
0x000000000044bb67: sub byte ptr [rdi + 1], bh; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000044b45b: sub byte ptr [rdi + 2], bh; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000447358: sub byte ptr [rdi + 6], ch; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044ba4c: sub byte ptr [rdi + 7], bh; ret; 
0x000000000044b2e4: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000044b4e6: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x0000000000447366: sub byte ptr [rdi + 7], bh; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b532: sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000447fb3: sub byte ptr [rdi], bh; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x00000000004105fa: sub byte ptr [rdi], cl; mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x8901; 
0x0000000000450883: sub byte ptr [rdi], cl; xchg eax, esp; ret 0x3948; 
0x0000000000457d83: sub byte ptr [rdi], cl; xchg eax, esp; ret 0xf739; 
0x000000000044db47: sub byte ptr [rdx - 0x4d], ah; and byte ptr [r15], r15b; ret 0xc500; 
0x0000000000409fd2: sub cl, byte ptr [rsi]; add dword ptr [rax], eax; test eax, eax; jne 0x9fe0; pop rbp; ret; 
0x000000000040ca10: sub dh, al; add byte ptr [rcx - 0x7d], cl; ret; 
0x000000000046b645: sub dh, al; add byte ptr [rip - 0x6f117], ch; jmp qword ptr [rsi - 0x70]; 
0x000000000047a152: sub dh, byte ptr [rax - 8]; dec dword ptr [rax - 0x73]; push rbp; add dword ptr [rax + 1], ecx; ret; 
0x000000000047594c: sub dword ptr [r8 + 4], 1; je 0x758fe; mov eax, 0x83; ret; 
0x000000000041c8bc: sub dword ptr [rax + 0x39], ecx; ret 0x840f; 
0x000000000043ee4b: sub dword ptr [rax + 1], ecx; clc; vzeroupper; ret; 
0x000000000047594d: sub dword ptr [rax + 4], 1; je 0x758fe; mov eax, 0x83; ret; 
0x000000000048e506: sub dword ptr [rax - 0x75], ecx; push rbx; or byte ptr [rax - 0x7d], cl; ret; 
0x000000000045242f: sub dword ptr [rax - 0x77], ecx; ret 0xabe; 
0x000000000044d172: sub dword ptr [rcx + 0xf000003], -0x4a; add al, 0x17; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000450b93: sub dword ptr [rcx], edi; sti; jmp qword ptr [rsi + 0xf]; 
0x000000000047569f: sub dword ptr [rdi + 4], 1; je 0x755e8; xor eax, eax; ret; 
0x0000000000476543: sub dword ptr [rdi], ecx; add byte ptr [rax], al; test edx, 0x40000000; je 0x76517; ret; 
0x000000000044bae3: sub dword ptr [rdi], edi; ret; 
0x000000000048bbf6: sub dword ptr [rsi + 0x49fffffc], -0x75; xchg eax, esi; rol byte ptr [rdx], 0; add byte ptr [rcx + 0x248b4ce8], cl; ret 0xf41; 
0x0000000000475d2d: sub dword ptr [rsp + 0x20], eax; call 0x882c0; call rbx; 
0x000000000041b7bc: sub eax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa9ffa], rdx; ret; 
0x000000000044ba92: sub eax, 0x40fa8348; ja 0x4bb00; vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000048185f: sub eax, 0x48fffff7; add esp, 0xd8; ret; 
0x0000000000485ef6: sub eax, 0x58c48348; ret; 
0x0000000000490e1a: sub eax, 0x80003bc; mov byte ptr [rip + 0x3bc27], 8; mov byte ptr [rip + 0x3bc21], 8; mov byte ptr [rip + 0x3bc1b], 8; mov byte ptr [rip + 0x3bc15], 8; ret; 
0x0000000000447e92: sub eax, 0x80fa8148; add byte ptr [rax], al; add byte ptr [rdi + 0x64], dh; vmovdqu64 zmmword ptr [rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x00000000004755bf: sub eax, 0xb8000003; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x000000000043d310: sub eax, 0xc8b0006; mov cl, byte ptr [rbx - 0x37d67dfc]; ret; 
0x000000000046b648: sub eax, 0xfff90ee9; jmp qword ptr [rsi - 0x70]; 
0x000000000042b765: sub eax, 0xffff; jne 0x2b4a0; ret; 
0x0000000000448665: sub eax, 0xffff; jne 0x483a0; ret; 
0x0000000000401931: sub eax, 1; je 0x19b0; and ebx, 0xfff; lea rax, [rbx + 1]; pop rbx; ret; 
0x00000000004626c4: sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x00000000004192cb: sub eax, 1; ret; 
0x0000000000485c3a: sub eax, dword ptr [0]; ret; 
0x0000000000487df3: sub eax, dword ptr [0x28]; jne 0x87e75; leave; ret; 
0x0000000000489ab7: sub eax, dword ptr [rax + rax]; jne 0x89abe; ret; 
0x0000000000404773: sub eax, dword ptr [rbx + 8]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000040c9c0: sub eax, dword ptr [rcx + 0xf]; mov dh, 0x47; or al, 0x83; ret; 
0x000000000044de10: sub eax, dword ptr [rcx + r8*4]; je 0x4ddf8; ret; 
0x000000000044de11: sub eax, dword ptr [rcx + rax*4]; je 0x4ddf8; ret; 
0x000000000041a974: sub eax, dword ptr [rdi + 0x18]; ret; 
0x0000000000419b57: sub eax, dword ptr [rsi + 0x10]; ret; 
0x000000000043d547: sub eax, dword ptr [rsi]; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x0000000000488279: sub eax, eax; punpcklqdq xmm0, xmm2; movups xmmword ptr [rsi], xmm0; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x000000000042b857: sub eax, ecx; cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x000000000044d925: sub eax, ecx; cmp rsi, rax; ja 0x4d727; mov eax, esi; ret; 
0x000000000044fa48: sub eax, ecx; cmp rsi, rax; ja 0x4f807; mov eax, esi; ret; 
0x000000000042b7f3: sub eax, ecx; je 0x2b7fc; sbb eax, eax; or eax, 1; ret; 
0x00000000004486f3: sub eax, ecx; je 0x486fc; sbb eax, eax; or eax, 1; ret; 
0x0000000000488145: sub eax, ecx; mov dword ptr [rdx], eax; mov eax, 1; ret; 
0x0000000000488229: sub eax, ecx; punpcklqdq xmm0, xmm1; movups xmmword ptr [rsi], xmm0; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x00000000004247cc: sub eax, ecx; ret; 
0x0000000000474359: sub eax, ecx; sar rax, 2; sub eax, 1; ret; 
0x00000000004880a0: sub eax, ecx; shl rdx, cl; mov qword ptr [rsi], rdx; mov dword ptr [rdi], eax; mov eax, 1; ret; 
0x00000000004192c9: sub eax, ecx; sub eax, 1; ret; 
0x000000000042604f: sub eax, ecx; vzeroupper; ret; 
0x00000000004483ac: sub eax, ecx; xtest; je 0x483b7; vzeroall; ret; 
0x000000000043f429: sub eax, edi; ret; 
0x000000000044effe: sub eax, edi; shr rax, 2; ret; 
0x0000000000416111: sub eax, edx; pop rbp; pop r12; ret; 
0x0000000000419b7f: sub eax, edx; ret; 
0x0000000000425d52: sub eax, edx; vzeroupper; ret; 
0x0000000000449466: sub eax, edx; xtest; je 0x49471; vzeroall; ret; 
0x000000000044a3f2: sub eax, edx; xtest; je 0x4a3fd; vzeroall; ret; 
0x00000000004854d0: sub eax, esi; ret; 
0x0000000000488278: sub eax, r8d; punpcklqdq xmm0, xmm2; movups xmmword ptr [rsi], xmm0; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x0000000000488228: sub eax, r9d; punpcklqdq xmm0, xmm1; movups xmmword ptr [rsi], xmm0; mov dword ptr [rdi], eax; mov eax, 2; ret; 
0x000000000044db56: sub ebp, eax; sti; xchg eax, ebx; ret 0xc085; 
0x0000000000453fec: sub ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; pop r14; ret; 
0x000000000046c224: sub ebx, dword ptr [rbx + 0x5d]; pop r12; pop r13; ret; 
0x000000000044d4ca: sub ebx, ecx; jbe 0x4d520; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000427985: sub ebx, edx; jbe 0x27994; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004290f5: sub ebx, edx; jbe 0x29104; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a0d5: sub ebx, edx; jbe 0x2a0e4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000043f874: sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x000000000043f864: sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x00000000004193aa: sub ecx, 0x4c6b40; cmp rax, rcx; jbe 0x194e0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rdx + 0x18]; 
0x000000000043f854: sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x000000000043f844: sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000000048d5d2: sub ecx, dword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x8d5c0; mov eax, 1; ret; 
0x0000000000446e48: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000044b58a: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000447653: sub ecx, edi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000043fa8b: sub ecx, edx; cmp rcx, rsi; jb 0x3f884; mov rax, r8; vzeroupper; ret; 
0x000000000044b528: sub ecx, esi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004475fa: sub ecx, esi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000042adc5: sub edi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042ad71: sub edi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044f1f9: sub edi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042af8d: sub edi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000043f21d: sub edi, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000043efdd: sub edi, 0x40; cmp sil, byte ptr [rdi + rax]; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000044f285: sub edi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afb5: sub edi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x000000000043f245: sub edi, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000043f015: sub edi, 0x60; cmp sil, byte ptr [rdi + rax]; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000044f265: sub edi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afa5: sub edi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x0000000000450e6c: sub edi, dword ptr [rax + 0x48]; syscall; 
0x000000000044f24e: sub edi, edx; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043f983: sub edi, edx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044f35c: sub edi, edx; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa5c: sub edi, edx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044f2f8: sub edi, edx; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa08: sub edi, edx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000478604: sub edi, edx; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6b4: sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000000478624: sub edi, edx; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6c4: sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000000478644: sub edi, edx; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6d4: sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x000000000044f2a9: sub edi, edx; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043f9b9: sub edi, edx; inc eax; add rax, rdi; vzeroupper; ret; 
0x00000000004785e4: sub edi, edx; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6a4: sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x000000000044cfb4: sub edi, edx; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000044cfc4: sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000044cfd4: sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x000000000044cfe4: sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000044d865: sub edi, edx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d833: sub edi, edx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d8ec: sub edi, edx; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044d8b1: sub edi, edx; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000478cc4: sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000478cd4: sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000478ce4: sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000478cb4: sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x000000000044f921: sub edi, edx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044fa0c: sub edi, edx; sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x000000000044f9b1: sub edi, edx; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044f962: sub edi, edx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x00000000004906f1: sub edi, esp; jmp qword ptr [rsi + 0x66]; 
0x0000000000478ff4: sub edx, -0x20; cmp edx, eax; jbe 0x79001; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000479304: sub edx, -0x20; cmp edx, eax; jbe 0x79311; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000044adc4: sub edx, -0x80; cmp edx, eax; jbe 0x4add1; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044db24: sub edx, -0x80; cmp edx, eax; jbe 0x4db31; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000040eb2c: sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [r11 + rdx*8]; jmp rdx; 
0x000000000040f937: sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rcx + rdx*8]; jmp rdx; 
0x000000000040f66e: sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rdi + rdx*8]; jmp rdx; 
0x000000000040f62c: sub edx, 0x20; movsxd rdx, edx; movzx edx, byte ptr [rax + rdx]; mov rdx, qword ptr [rsi + rdx*8]; jmp rdx; 
0x0000000000411e3a: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x11e90; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000412703: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x1274a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x0000000000418060: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x180c8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041849b: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x18538; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x0000000000418600: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x18670; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004186b6: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x186e8; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418a31: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x18c30; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418aa3: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x18c70; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004191d6: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x19210; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000419269: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x19290; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004736f6: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x73740; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000047426b: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x742a0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000474309: sub edx, 0x4c6b40; cmp rax, rdx; jbe 0x74328; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000421643: sub edx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000004502e4: sub edx, dword ptr [0x28]; jne 0x50301; add rsp, 0x28; ret; 
0x0000000000450df4: sub edx, dword ptr [0x28]; jne 0x50e43; add rsp, 0x68; ret; 
0x0000000000450e83: sub edx, dword ptr [0x28]; jne 0x50ed3; add rsp, 0x18; ret; 
0x0000000000450f3b: sub edx, dword ptr [0x28]; jne 0x50f8b; add rsp, 0x58; ret; 
0x0000000000451177: sub edx, dword ptr [0x28]; jne 0x51185; add rsp, 0x28; ret; 
0x00000000004527a2: sub edx, dword ptr [0x28]; jne 0x527c5; add rsp, 0x1018; ret; 
0x0000000000452aee: sub edx, dword ptr [0x28]; jne 0x52b3d; add rsp, 0x58; ret; 
0x0000000000466ea5: sub edx, dword ptr [0x28]; jne 0x66ef5; add rsp, 0x38; ret; 
0x000000000046c4b1: sub edx, dword ptr [0x28]; jne 0x6c4c2; add rsp, 0xd8; ret; 
0x000000000046c56d: sub edx, dword ptr [0x28]; jne 0x6c57e; add rsp, 0xd8; ret; 
0x0000000000475e96: sub edx, dword ptr [0x28]; jne 0x75f17; add rsp, 0x98; ret; 
0x0000000000479c69: sub edx, dword ptr [0x28]; jne 0x79d33; add rsp, 0x78; ret; 
0x0000000000479dd9: sub edx, dword ptr [0x28]; jne 0x79e2b; add rsp, 0x58; ret; 
0x0000000000485e1c: sub edx, dword ptr [0x28]; jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485eee: sub edx, dword ptr [0x28]; jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fbe: sub edx, dword ptr [0x28]; jne 0x85ff4; add rsp, 0x58; ret; 
0x00000000004860dc: sub edx, dword ptr [0x28]; jne 0x86197; add rsp, 0x68; ret; 
0x00000000004861f2: sub edx, dword ptr [0x28]; jne 0x86223; add rsp, 0x38; ret; 
0x000000000048dddf: sub edx, dword ptr [0x28]; jne 0x8dded; add rsp, 0x28; ret; 
0x000000000048dec2: sub edx, dword ptr [0x28]; jne 0x8ded0; add rsp, 0x38; ret; 
0x000000000048df32: sub edx, dword ptr [0x28]; jne 0x8df40; add rsp, 0x38; ret; 
0x000000000048e01d: sub edx, dword ptr [0x28]; jne 0x8e02b; add rsp, 0x38; ret; 
0x000000000048e07d: sub edx, dword ptr [0x28]; jne 0x8e08b; add rsp, 0x38; ret; 
0x000000000040b743: sub edx, dword ptr [0x28]; jne 0xb754; add rsp, 0xd8; ret; 
0x000000000040b801: sub edx, dword ptr [0x28]; jne 0xb812; add rsp, 0xd8; ret; 
0x0000000000419b88: sub edx, dword ptr [rax + 0x10]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000419b79: sub edx, dword ptr [rax + 0x18]; mov eax, dword ptr [rdi + 0x10]; sub eax, edx; ret; 
0x0000000000474402: sub edx, dword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000474414: sub edx, dword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000041610c: sub edx, dword ptr [rdi + 8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x000000000042a6ad: sub edx, eax; jbe 0x2a950; add rax, rdi; add rax, rcx; ret; 
0x000000000042a914: sub edx, eax; jbe 0x2a950; add rax, rdi; ret; 
0x000000000042a924: sub edx, eax; jbe 0x2a950; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042a934: sub edx, eax; jbe 0x2a950; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042a944: sub edx, eax; jbe 0x2a950; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004806e9: sub edx, ecx; call 0x1110; mov qword ptr [rip + 0x4c1b9], rax; add rsp, 8; ret; 
0x00000000004129e1: sub edx, esi; call qword ptr [rax + 0x70]; 
0x00000000004460c8: sub edx, esi; cmp edx, ecx; jle 0x460e4; movsxd rax, ecx; ret; 
0x0000000000477b32: sub edx, esi; jbe 0x77e40; add rax, rdi; add rax, rcx; ret; 
0x0000000000477dc9: sub edx, esi; jbe 0x77e40; add rax, rdi; ret; 
0x0000000000477de9: sub edx, esi; jbe 0x77e40; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000477e09: sub edx, esi; jbe 0x77e40; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477e29: sub edx, esi; jbe 0x77e40; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004130d4: sub edx, esi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004156cd: sub edx, esi; mov qword ptr [rsp + 8], rcx; mov rdi, rbp; call rax; 
0x000000000044d8e4: sub esi, 0x40; cmp esi, eax; jb 0x4d8f4; sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x00000000004979b5: sub esp, 8; add rsp, 8; ret; 
0x00000000004883b4: sub esp, 8; call 0x1aaa0; xor eax, eax; add rsp, 8; ret; 
0x00000000004883fa: sub esp, 8; call 0x1ab30; xor eax, eax; add rsp, 8; ret; 
0x00000000004527d5: sub esp, 8; call 0x52370; test eax, eax; je 0x527f0; add rsp, 8; ret; 
0x00000000004825a1: sub esp, 8; call 0x53f00; xor eax, eax; add rsp, 8; ret; 
0x000000000044fa81: sub esp, 8; call rax; 
0x0000000000490930: sub esp, edi; jmp qword ptr [rsi + 0x2e]; 
0x000000000044d4c9: sub r11, rcx; jbe 0x4d520; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000427984: sub r11, rdx; jbe 0x27994; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x00000000004290f4: sub r11, rdx; jbe 0x29104; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000042a0d4: sub r11, rdx; jbe 0x2a0e4; movzx ecx, byte ptr [rsi + rdx]; movzx eax, byte ptr [rdi + rdx]; sub eax, ecx; ret; 
0x000000000049092f: sub r12, r15; jmp qword ptr [rsi + 0x2e]; 
0x000000000041b7bb: sub rax, 0x11; shr rax, 4; lea rdx, [rax + 1]; mov qword ptr [rip + 0xa9ffa], rdx; ret; 
0x0000000000445f73: sub rax, 1; ret; 
0x0000000000485c39: sub rax, qword ptr [0]; ret; 
0x0000000000487df2: sub rax, qword ptr [0x28]; jne 0x87e75; leave; ret; 
0x000000000041a973: sub rax, qword ptr [rdi + 0x18]; ret; 
0x0000000000485c38: sub rax, qword ptr fs:[0]; ret; 
0x0000000000487df1: sub rax, qword ptr fs:[0x28]; jne 0x87e75; leave; ret; 
0x000000000042b856: sub rax, rcx; cmovne eax, edx; sbb ecx, ecx; or eax, ecx; ret; 
0x000000000042b7f2: sub rax, rcx; je 0x2b7fc; sbb eax, eax; or eax, 1; ret; 
0x00000000004486f2: sub rax, rcx; je 0x486fc; sbb eax, eax; or eax, 1; ret; 
0x0000000000474358: sub rax, rcx; sar rax, 2; sub eax, 1; ret; 
0x00000000004192c8: sub rax, rcx; sub eax, 1; ret; 
0x000000000043f428: sub rax, rdi; ret; 
0x000000000044effd: sub rax, rdi; shr rax, 2; ret; 
0x0000000000416110: sub rax, rdx; pop rbp; pop r12; ret; 
0x0000000000446053: sub rax, rdx; ret; 
0x00000000004193a9: sub rcx, 0x4c6b40; cmp rax, rcx; jbe 0x194e0; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rdx + 0x18]; 
0x000000000048d5d1: sub rcx, qword ptr [rax + 0x10]; cmp rcx, qword ptr [rax + 0x28]; jae 0x8d5c0; mov eax, 1; ret; 
0x0000000000446e47: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x000000000044b589: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000447652: sub rcx, rdi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000043fa8a: sub rcx, rdx; cmp rcx, rsi; jb 0x3f884; mov rax, r8; vzeroupper; ret; 
0x000000000044b527: sub rcx, rsi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x00000000004475f9: sub rcx, rsi; inc rsi; rep movsb byte ptr [rdi], byte ptr [rsi]; vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x000000000042adc4: sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042ad70: sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044f1f8: sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042af8c: sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000043f21c: sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000043efdc: sub rdi, 0x40; cmp sil, byte ptr [rdi + rax]; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000044f284: sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afb4: sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x000000000043f244: sub rdi, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000043f014: sub rdi, 0x60; cmp sil, byte ptr [rdi + rax]; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000044f264: sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afa4: sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000044f24d: sub rdi, rdx; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043f982: sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044f35b: sub rdi, rdx; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa5b: sub rdi, rdx; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044f2f7: sub rdi, rdx; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa07: sub rdi, rdx; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000044f2a8: sub rdi, rdx; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043f9b8: sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000044d864: sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d832: sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d8eb: sub rdi, rdx; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044d8b0: sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044f920: sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044fa0b: sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x000000000044f9b0: sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044f961: sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x0000000000411e39: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x11e90; mov rdi, rbx; call qword ptr [rbp + 0x60]; 
0x0000000000412702: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x1274a; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x000000000041805f: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x180c8; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x000000000041849a: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x18538; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x00000000004185ff: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x18670; mov rdi, rbx; call qword ptr [rbp + 0x68]; 
0x00000000004186b5: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x186e8; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418a30: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x18c30; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x0000000000418aa2: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x18c70; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x18]; 
0x00000000004191d5: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x19210; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000419268: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x19290; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x00000000004736f5: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x73740; mov rdi, rbx; call qword ptr [rbp + 0x20]; 
0x000000000047426a: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x742a0; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000474308: sub rdx, 0x4c6b40; cmp rax, rdx; jbe 0x74328; mov esi, 0xffffffff; mov rdi, rbx; call qword ptr [rbp + 0x30]; 
0x0000000000421642: sub rdx, 8; and eax, 1; cmovne rax, rdx; ret; 
0x00000000004502e3: sub rdx, qword ptr [0x28]; jne 0x50301; add rsp, 0x28; ret; 
0x0000000000450df3: sub rdx, qword ptr [0x28]; jne 0x50e43; add rsp, 0x68; ret; 
0x0000000000450e82: sub rdx, qword ptr [0x28]; jne 0x50ed3; add rsp, 0x18; ret; 
0x0000000000450f3a: sub rdx, qword ptr [0x28]; jne 0x50f8b; add rsp, 0x58; ret; 
0x0000000000451176: sub rdx, qword ptr [0x28]; jne 0x51185; add rsp, 0x28; ret; 
0x00000000004527a1: sub rdx, qword ptr [0x28]; jne 0x527c5; add rsp, 0x1018; ret; 
0x0000000000452aed: sub rdx, qword ptr [0x28]; jne 0x52b3d; add rsp, 0x58; ret; 
0x0000000000466ea4: sub rdx, qword ptr [0x28]; jne 0x66ef5; add rsp, 0x38; ret; 
0x000000000046c4b0: sub rdx, qword ptr [0x28]; jne 0x6c4c2; add rsp, 0xd8; ret; 
0x000000000046c56c: sub rdx, qword ptr [0x28]; jne 0x6c57e; add rsp, 0xd8; ret; 
0x0000000000475e95: sub rdx, qword ptr [0x28]; jne 0x75f17; add rsp, 0x98; ret; 
0x0000000000479c68: sub rdx, qword ptr [0x28]; jne 0x79d33; add rsp, 0x78; ret; 
0x0000000000479dd8: sub rdx, qword ptr [0x28]; jne 0x79e2b; add rsp, 0x58; ret; 
0x0000000000485e1b: sub rdx, qword ptr [0x28]; jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485eed: sub rdx, qword ptr [0x28]; jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fbd: sub rdx, qword ptr [0x28]; jne 0x85ff4; add rsp, 0x58; ret; 
0x00000000004860db: sub rdx, qword ptr [0x28]; jne 0x86197; add rsp, 0x68; ret; 
0x00000000004861f1: sub rdx, qword ptr [0x28]; jne 0x86223; add rsp, 0x38; ret; 
0x000000000048ddde: sub rdx, qword ptr [0x28]; jne 0x8dded; add rsp, 0x28; ret; 
0x000000000048dec1: sub rdx, qword ptr [0x28]; jne 0x8ded0; add rsp, 0x38; ret; 
0x000000000048df31: sub rdx, qword ptr [0x28]; jne 0x8df40; add rsp, 0x38; ret; 
0x000000000048e01c: sub rdx, qword ptr [0x28]; jne 0x8e02b; add rsp, 0x38; ret; 
0x000000000048e07c: sub rdx, qword ptr [0x28]; jne 0x8e08b; add rsp, 0x38; ret; 
0x000000000040b742: sub rdx, qword ptr [0x28]; jne 0xb754; add rsp, 0xd8; ret; 
0x000000000040b800: sub rdx, qword ptr [0x28]; jne 0xb812; add rsp, 0xd8; ret; 
0x0000000000474401: sub rdx, qword ptr [rcx + 0x10]; sar rdx, 2; sub eax, edx; ret; 
0x0000000000474413: sub rdx, qword ptr [rcx + 8]; sar rdx, 2; sub eax, edx; ret; 
0x000000000041610b: sub rdx, qword ptr [rdi + 8]; pop rbx; sub rax, rdx; pop rbp; pop r12; ret; 
0x00000000004502e2: sub rdx, qword ptr fs:[0x28]; jne 0x50301; add rsp, 0x28; ret; 
0x0000000000450df2: sub rdx, qword ptr fs:[0x28]; jne 0x50e43; add rsp, 0x68; ret; 
0x0000000000450e81: sub rdx, qword ptr fs:[0x28]; jne 0x50ed3; add rsp, 0x18; ret; 
0x0000000000450f39: sub rdx, qword ptr fs:[0x28]; jne 0x50f8b; add rsp, 0x58; ret; 
0x0000000000451175: sub rdx, qword ptr fs:[0x28]; jne 0x51185; add rsp, 0x28; ret; 
0x00000000004527a0: sub rdx, qword ptr fs:[0x28]; jne 0x527c5; add rsp, 0x1018; ret; 
0x0000000000452aec: sub rdx, qword ptr fs:[0x28]; jne 0x52b3d; add rsp, 0x58; ret; 
0x0000000000466ea3: sub rdx, qword ptr fs:[0x28]; jne 0x66ef5; add rsp, 0x38; ret; 
0x000000000046c4af: sub rdx, qword ptr fs:[0x28]; jne 0x6c4c2; add rsp, 0xd8; ret; 
0x000000000046c56b: sub rdx, qword ptr fs:[0x28]; jne 0x6c57e; add rsp, 0xd8; ret; 
0x0000000000475e94: sub rdx, qword ptr fs:[0x28]; jne 0x75f17; add rsp, 0x98; ret; 
0x0000000000479c67: sub rdx, qword ptr fs:[0x28]; jne 0x79d33; add rsp, 0x78; ret; 
0x0000000000479dd7: sub rdx, qword ptr fs:[0x28]; jne 0x79e2b; add rsp, 0x58; ret; 
0x0000000000485e1a: sub rdx, qword ptr fs:[0x28]; jne 0x85e4e; add rsp, 0x58; ret; 
0x0000000000485eec: sub rdx, qword ptr fs:[0x28]; jne 0x85f24; add rsp, 0x58; ret; 
0x0000000000485fbc: sub rdx, qword ptr fs:[0x28]; jne 0x85ff4; add rsp, 0x58; ret; 
0x00000000004860da: sub rdx, qword ptr fs:[0x28]; jne 0x86197; add rsp, 0x68; ret; 
0x00000000004861f0: sub rdx, qword ptr fs:[0x28]; jne 0x86223; add rsp, 0x38; ret; 
0x000000000048dddd: sub rdx, qword ptr fs:[0x28]; jne 0x8dded; add rsp, 0x28; ret; 
0x000000000048dec0: sub rdx, qword ptr fs:[0x28]; jne 0x8ded0; add rsp, 0x38; ret; 
0x000000000048df30: sub rdx, qword ptr fs:[0x28]; jne 0x8df40; add rsp, 0x38; ret; 
0x000000000048e01b: sub rdx, qword ptr fs:[0x28]; jne 0x8e02b; add rsp, 0x38; ret; 
0x000000000048e07b: sub rdx, qword ptr fs:[0x28]; jne 0x8e08b; add rsp, 0x38; ret; 
0x000000000040b741: sub rdx, qword ptr fs:[0x28]; jne 0xb754; add rsp, 0xd8; ret; 
0x000000000040b7ff: sub rdx, qword ptr fs:[0x28]; jne 0xb812; add rsp, 0xd8; ret; 
0x000000000042a6ac: sub rdx, rax; jbe 0x2a950; add rax, rdi; add rax, rcx; ret; 
0x000000000042a913: sub rdx, rax; jbe 0x2a950; add rax, rdi; ret; 
0x000000000042a923: sub rdx, rax; jbe 0x2a950; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000042a933: sub rdx, rax; jbe 0x2a950; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042a943: sub rdx, rax; jbe 0x2a950; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004806e8: sub rdx, rcx; call 0x1110; mov qword ptr [rip + 0x4c1b9], rax; add rsp, 8; ret; 
0x00000000004129e0: sub rdx, rsi; call qword ptr [rax + 0x70]; 
0x0000000000477b31: sub rdx, rsi; jbe 0x77e40; add rax, rdi; add rax, rcx; ret; 
0x0000000000477dc8: sub rdx, rsi; jbe 0x77e40; add rax, rdi; ret; 
0x0000000000477de8: sub rdx, rsi; jbe 0x77e40; lea rax, [rdi + rax + 0x10]; ret; 
0x0000000000477e08: sub rdx, rsi; jbe 0x77e40; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477e28: sub rdx, rsi; jbe 0x77e40; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004130d3: sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, r15; call rax; 
0x00000000004156cc: sub rdx, rsi; mov qword ptr [rsp + 8], rcx; mov rdi, rbp; call rax; 
0x00000000004979b4: sub rsp, 8; add rsp, 8; ret; 
0x00000000004883b3: sub rsp, 8; call 0x1aaa0; xor eax, eax; add rsp, 8; ret; 
0x00000000004883f9: sub rsp, 8; call 0x1ab30; xor eax, eax; add rsp, 8; ret; 
0x00000000004527d4: sub rsp, 8; call 0x52370; test eax, eax; je 0x527f0; add rsp, 8; ret; 
0x00000000004825a0: sub rsp, 8; call 0x53f00; xor eax, eax; add rsp, 8; ret; 
0x000000000044fa80: sub rsp, 8; call rax; 
0x0000000000401cc4: syscall; 
0x000000000045037c: syscall; cmp eax, 0xfffff000; ja 0x50390; xor eax, eax; ret; 
0x00000000004504f0: syscall; cmp rax, -0x1000; ja 0x50550; ret; 
0x0000000000450595: syscall; cmp rax, -0x1000; ja 0x505f0; ret; 
0x0000000000450629: syscall; cmp rax, -0x1000; ja 0x50638; ret; 
0x0000000000450d79: syscall; cmp rax, -0x1000; ja 0x50d88; ret; 
0x0000000000450f96: syscall; cmp rax, -0x1000; ja 0x50fa8; ret; 
0x0000000000450fc9: syscall; cmp rax, -0x1000; ja 0x50fd8; ret; 
0x0000000000451002: syscall; cmp rax, -0x1000; ja 0x51010; ret; 
0x00000000004511a5: syscall; cmp rax, -0x1000; ja 0x511d0; ret; 
0x0000000000466695: syscall; cmp rax, -0x1000; ja 0x666f0; ret; 
0x0000000000475dac: syscall; cmp rax, -0x1000; ja 0x75dc0; ret; 
0x0000000000479855: syscall; cmp rax, -0x1000; ja 0x79860; ret; 
0x0000000000479e3c: syscall; cmp rax, -0x1000; ja 0x79e50; ret; 
0x000000000048e3b9: syscall; cmp rax, -0x1000; ja 0x8e3c8; ret; 
0x0000000000450289: syscall; cmp rax, -0xfff; jae 0x50294; ret; 
0x00000000004511f9: syscall; cmp rax, -0xfff; jae 0x51204; ret; 
0x0000000000451229: syscall; cmp rax, -0xfff; jae 0x51234; ret; 
0x0000000000451259: syscall; cmp rax, -0xfff; jae 0x51264; ret; 
0x0000000000452b59: syscall; cmp rax, -0xfff; jae 0x52b64; ret; 
0x0000000000479a49: syscall; cmp rax, -0xfff; jae 0x79a54; ret; 
0x0000000000479ab9: syscall; cmp rax, -0xfff; jae 0x79ac4; ret; 
0x0000000000479ae9: syscall; cmp rax, -0xfff; jae 0x79af4; ret; 
0x0000000000479b19: syscall; cmp rax, -0xfff; jae 0x79b24; ret; 
0x0000000000479b49: syscall; cmp rax, -0xfff; jae 0x79b54; ret; 
0x0000000000479b79: syscall; cmp rax, -0xfff; jae 0x79b84; ret; 
0x000000000041ab26: syscall; ret; 
0x000000000044429d: test ah, 0x20; jne 0x44380; test ah, 0x40; jne 0x44390; lea rax, [rdi + 0xf]; ret; 
0x00000000004442a6: test ah, 0x40; jne 0x44390; lea rax, [rdi + 0xf]; ret; 
0x00000000004441be: test ah, 0x40; jne 0x44390; test dh, 0x40; jne 0x44100; lea rax, [rdi + 0xf]; ret; 
0x00000000004190e7: test al, 0; add byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x0000000000450427: test al, 0; add byte ptr [rax], al; add rsp, 0x68; pop rbp; pop r12; ret; 
0x0000000000479a01: test al, 0; add byte ptr [rax], al; pop rbp; pop r12; ret; 
0x0000000000493247: test al, 0; add byte ptr [rax], al; ret; 
0x000000000044424c: test al, 0x20; jne 0x44310; test al, 0x40; jne 0x44320; lea rax, [rdi + 7]; ret; 
0x0000000000444254: test al, 0x40; jne 0x44320; lea rax, [rdi + 7]; ret; 
0x000000000044413c: test al, 0x40; jne 0x44320; test dl, 0x40; jne 0x44100; lea rax, [rdi + 7]; ret; 
0x0000000000451a91: test al, 0x45; mov edi, ebp; call rax; 
0x000000000040c3e5: test al, 0x72; add byte ptr [rax - 0x77], r9b; ret 0x2949; 
0x00000000004154fb: test al, 0x72; add byte ptr [rax - 0x77], r9b; ret 0x294c; 
0x0000000000490855: test al, 0xff; jmp qword ptr [rsi + 0x48]; 
0x0000000000475e16: test al, 2; je 0x75e20; xor eax, eax; ret; 
0x0000000000454d0b: test al, 5; add byte ptr [rax - 0x77], cl; ret 0xff85; 
0x000000000048d3f3: test al, al; cmove esi, eax; mov eax, 0x9e; syscall; 
0x0000000000424a8a: test al, al; jne 0x24a70; xor eax, eax; sub eax, ecx; ret; 
0x0000000000457b0b: test al, ch; add eax, dword ptr [rax]; add byte ptr [rax - 0x77], cl; ret; 
0x00000000004542e3: test al, cl; add byte ptr [rax], al; add byte ptr [rbp - 0x75], cl; or cl, byte ptr [rbx + rcx*4 + 0x50]; cmp byte ptr [rbp - 0x6af0be37], al; ret; 
0x000000000046615b: test al, cl; add byte ptr [rax], al; add byte ptr [rbx + rcx*4 + 0x7b], cl; or byte ptr [rax - 0x7d], cl; ret; 
0x0000000000410d6e: test ax, ax; je 0x10d80; lea rdx, [rip + 0x89066]; add rax, rdx; ret; 
0x00000000004120a3: test bh, al; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000480a4c: test bh, bh; cmove r8, rax; mov rax, r8; ret; 
0x0000000000493f1c: test bh, bh; js 0x93f40; mov qword ptr [r8], rdx; ret; 
0x0000000000495fbc: test bh, bh; js 0x95fe0; mov qword ptr [r8], rdx; ret; 
0x000000000048c071: test bh, dh; jmp qword ptr [rsi + 0x66]; 
0x000000000049140a: test bl, bl; add edi, esi; inc dword ptr [rbx + 0x634801eb]; ret; 
0x000000000044e8e2: test bpl, bpl; jne 0x4e93e; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000482583: test byte ptr [rax + 0x31c], 4; jne 0x825a0; or byte ptr [rdi + 0x31d], 0x40; xor eax, eax; ret; 
0x0000000000482641: test byte ptr [rax + 0x31c], 4; jne 0x82658; or byte ptr [rdi + 0x31d], 0x40; ret; 
0x000000000044674b: test byte ptr [rax + 0x3b], cl; adc eax, 0x80bc5; jae 0x46760; mov rcx, rdx; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x00000000004506cf: test byte ptr [rax + 6], dh; add byte ptr [rax], al; mov qword ptr [rsp + 0x10], rdi; mov rdi, qword ptr [rsp + 0x10]; mov eax, 0x4f; syscall; 
0x00000000004895b3: test byte ptr [rax + rax - 0x76b40000], bh; dec dword ptr [rax - 0x7d]; ret; 
0x000000000045bd03: test byte ptr [rax + rax*4], ah; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x000000000040e9e6: test byte ptr [rax + rbx*2], ah; add dword ptr [rax], eax; add al, ch; call rdi; 
0x00000000004710eb: test byte ptr [rax + rbx*8], ah; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x0000000000452776: test byte ptr [rax + rcx], ah; adc byte ptr [rax], al; add byte ptr [rcx], dh; ror byte ptr [rax - 0x77], 0xe2; mov eax, 0xcc; syscall; 
0x000000000049631d: test byte ptr [rax - 0x16000002], al; mov bl, 0xf6; jmp qword ptr [rsi + 0xf]; 
0x0000000000422cf9: test byte ptr [rax - 0x73], 0x15; fistp qword ptr [rsi + 2]; add byte ptr [rax - 0x73], cl; add eax, 0x2ac38; cmove rax, rdx; ret; 
0x0000000000477829: test byte ptr [rax - 0x73], 0x15; iretd; adc eax, 0x8d480000; add eax, 0x18c8; cmove rax, rdx; ret; 
0x0000000000423319: test byte ptr [rax - 0x73], 0x15; mov edi, 0x48000288; lea eax, [rip + 0x2a918]; cmove rax, rdx; ret; 
0x0000000000458b36: test byte ptr [rax - 0x73], 0x1d; ret 0x73a; 
0x000000000048b9fa: test byte ptr [rax - 0x75], 0x3c; ret 0xb60f; 
0x00000000004951de: test byte ptr [rax - 0x76fffffe], dl; ret 0xe283; 
0x00000000004806e4: test byte ptr [rax - 0x77], 0xcf; sub rdx, rcx; call 0x1110; mov qword ptr [rip + 0x4c1b9], rax; add rsp, 8; ret; 
0x0000000000415ef8: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rbp + 0x70]; 
0x0000000000419699: test byte ptr [rax - 0x77], 0xdf; call qword ptr [rcx + 0x58]; 
0x0000000000411c4b: test byte ptr [rax - 0x77], 0xef; call qword ptr [rbx + 0x10]; 
0x0000000000474f23: test byte ptr [rax - 0x77], 0xef; mov eax, r13d; syscall; 
0x000000000044f0d5: test byte ptr [rax - 0x81], cl; shr eax, 2; vzeroupper; ret; 
0x00000000004748e8: test byte ptr [rax], 1; add byte ptr [rax], al; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x0000000000470256: test byte ptr [rax], ah; add byte ptr [rax], al; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x84; ret 0x12; 
0x00000000004972bc: test byte ptr [rax], al; add al, ch; cld; sal esi, 1; jmp qword ptr [rsi + 0x2e]; 
0x000000000047835a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; add rax, 3; ret; 
0x000000000042a8ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; bsf eax, eax; lea rax, [rax + rdi + 0x10]; ret; 
0x000000000045027a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0x18; syscall; 
0x000000000041867a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000419e4a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, -1; ret; 
0x0000000000419eca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x68]; ret; 
0x000000000049319a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rdi + 0x98]; ret; 
0x000000000045822a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0x743c5]; ret; 
0x0000000000419eaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; mov rax, qword ptr [rip + 0xab2a5]; ret; 
0x00000000004016ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; ret; 
0x000000000041910a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; endbr64; xor eax, eax; ret; 
0x000000000044434a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xa]; ret; 
0x000000000044435a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xb]; ret; 
0x000000000044436a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xc]; ret; 
0x000000000044437a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xd]; ret; 
0x000000000044438a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 0xe]; ret; 
0x00000000004442da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 2]; ret; 
0x00000000004442ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 3]; ret; 
0x00000000004442fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 4]; ret; 
0x000000000044430a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 5]; ret; 
0x000000000044431a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 6]; ret; 
0x000000000044432a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 8]; ret; 
0x000000000044433a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; lea rax, [rdi + 9]; ret; 
0x000000000044396a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; lea rax, [rdi]; ret; 
0x000000000044333a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov byte ptr [rdi], dh; ret; 
0x000000000041459a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, 0xffffffff; ret; 
0x000000000044fb1a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov eax, edx; syscall; 
0x000000000047773a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, -1; ret; 
0x000000000047838a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 2; ret; 
0x000000000047839a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 3; ret; 
0x00000000004783aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 4; ret; 
0x00000000004783ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 5; ret; 
0x00000000004783ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 6; ret; 
0x00000000004783da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, 7; ret; 
0x000000000047772a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e39]; ret; 
0x000000000047771a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e41]; ret; 
0x000000000047770a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e49]; ret; 
0x00000000004776fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e51]; ret; 
0x00000000004776ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e59]; ret; 
0x00000000004776da: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e61]; ret; 
0x00000000004776ca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e69]; ret; 
0x00000000004776ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e71]; ret; 
0x00000000004776aa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e79]; ret; 
0x000000000047769a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, qword ptr [rip + 0x54e81]; ret; 
0x000000000048e7ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; mov rax, r8; ret; 
0x0000000000474aca: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; neg eax; ret; 
0x0000000000465226: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; mov rax, 0xf; syscall; 
0x000000000042b776: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop dword ptr [rax]; xor eax, eax; ret; 
0x00000000004442c9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi + 1]; ret; 
0x00000000004442b9: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; lea rax, [rdi]; ret; 
0x0000000000478379: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; mov rax, 1; ret; 
0x0000000000477e38: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; nop; xor eax, eax; ret; 
0x000000000040848a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; ret; 
0x000000000044c4ea: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c4ba: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x0000000000478eaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000044baaa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000041889a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042ad9a: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor eax, eax; vzeroupper; ret; 
0x00000000004440fa: test byte ptr [rax], al; add byte ptr [rax], al; add byte ptr [rax], al; xor rax, rax; ret; 
0x00000000004460fd: test byte ptr [rbp + 0x48d674d2], 0x63; leave; add rax, rcx; sub rax, rdi; ret; 
0x0000000000465136: test byte ptr [rbp - 0x6bf0bf40], 0xc6; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000048cb2e: test byte ptr [rbp - 0x75000000], cl; adc byte ptr [r13 - 0x2d7bf040], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x000000000042ae76: test byte ptr [rbp - 0xd000000], al; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000044f096: test byte ptr [rbp - 0xd000000], al; bsf eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000419166: test byte ptr [rbp], 0x80; jne 0x19180; pop rbp; ret; 
0x000000000042dee7: test byte ptr [rbx - 0x76b303aa], 0x5f; out dx, al; mov qword ptr [rdi - 0xa], rcx; mov dword ptr [rdi - 4], edx; ret; 
0x0000000000467418: test byte ptr [rbx], bh; add al, byte ptr [rax]; add byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; adc dword ptr [rax - 0xdf6b], ecx; jmp qword ptr [rsi + 0xf]; 
0x0000000000445722: test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x000000000048d3ec: test byte ptr [rcx + 0x2c883f0], 0x45; test al, al; cmove esi, eax; mov eax, 0x9e; syscall; 
0x000000000044eee2: test byte ptr [rcx + 0x48000000], bl; bsf eax, edx; shr rax, 2; ret; 
0x000000000041b206: test byte ptr [rcx + 0xcab8], 0; syscall; 
0x0000000000445719: test byte ptr [rcx + rax - 0x67d0000], al; adc dword ptr [rdi], ecx; test byte ptr [rbx], bl; add al, byte ptr [rax]; add byte ptr [rbx - 0x7bf0ed07], al; ret 2; 
0x00000000004977e0: test byte ptr [rcx + rax - 0x76b80000], al; ret 0xc148; 
0x0000000000476ebf: test byte ptr [rcx + rax], ch; add byte ptr [rax], al; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000041a80c: test byte ptr [rcx + rcx*4 - 0x11], 0xe8; cmp ebp, dword ptr [rax - 2]; dec dword ptr [rax - 0x77]; ret; 
0x00000000004689d4: test byte ptr [rcx + rcx*4 - 0x19], 0x4c; mov dword ptr [rbp - 0xe8], eax; call rax; 
0x00000000004629e8: test byte ptr [rcx + rcx*4 - 0x19], 0xe8; jmp rsi; 
0x000000000041ab36: test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; 
0x000000000041ab36: test byte ptr [rcx - 0x452dcebb], 1; add byte ptr [rax], al; add byte ptr [rax + 0xca], bh; syscall; ret; 
0x000000000043f276: test byte ptr [rcx - 0xc000002], ch; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x00000000004759a5: test byte ptr [rdi + 0x31d23145], 0xd2; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000478ee6: test byte ptr [rdi + 0x80], al; ret; 
0x0000000000479376: test byte ptr [rdi + 0xa0], al; ret; 
0x0000000000479386: test byte ptr [rdi + 0xc0], al; ret; 
0x000000000047934c: test byte ptr [rdi + 0xe0], al; ret; 
0x00000000004775bf: test byte ptr [rdi + rdi*8 - 1], ch; jmp qword ptr [rsi + 0x66]; 
0x000000000044c857: test byte ptr [rdi + rdi*8 - 1], dh; jmp qword ptr [rdx - 0x4e]; 
0x000000000040e820: test byte ptr [rdi - 0x9ffffdf], ah; ret; 
0x0000000000417d74: test byte ptr [rdi], 0x80; jne 0x17d80; ret; 
0x000000000041ef92: test byte ptr [rdi], 0x85; add al, byte ptr [rax]; add byte ptr [rbp - 0x7cfdb9], cl; add dh, byte ptr [rsp - 0x77]; ret 0xb48b; 
0x0000000000402048: test byte ptr [rdi], 0x9f; ret 0xc031; 
0x0000000000473a2f: test byte ptr [rdi], 2; jne 0x73aa8; mov rax, qword ptr [rax + 0xe0]; call qword ptr [rax + 0x68]; 
0x0000000000403f49: test byte ptr [rdx + 0x48000000], ah; add esp, 0x98; ret; 
0x000000000042abb1: test byte ptr [rdx - 0xd000000], bh; bsf eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000044ac11: test byte ptr [rdx - 0xd000000], ch; bsf eax, eax; add rax, rdi; ret; 
0x000000000047680c: test byte ptr [rdx], bl; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xe901; 
0x00000000004028f2: test byte ptr [rdx], dh; add dword ptr [rax], eax; add byte ptr [rbx - 0x7cbefe3a], al; ret; 
0x0000000000489ab4: test byte ptr [rip + 0x42b09], 0x40; jne 0x89abe; ret; 
0x0000000000488694: test byte ptr [rip + 0x43d33], 0x10; lea rdx, [rip + 0x11e]; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x0000000000477768: test byte ptr [rip + 0x54c5f], 8; lea rax, [rip + 0x9da]; lea rdx, [rip + 0xc73]; cmovne rax, rdx; ret; 
0x000000000044e378: test byte ptr [rip + 0x7e04f], 8; lea rax, [rip + 0xa6a]; lea rdx, [rip + 0xaa3]; cmovne rax, rdx; ret; 
0x0000000000422234: test byte ptr [rip + 0xaa193], 0x10; lea rdx, [rip + 0x23e1e]; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x00000000004221d6: test byte ptr [rip + 0xaa1f0], 2; lea rax, [rip + 0x1dc5c]; lea rdx, [rip + 0x1de35]; cmovne rax, rdx; ret; 
0x00000000004777a6: test byte ptr [rip - 0x1a800000], 4; jne 0x77768; ret; 
0x000000000045cb5d: test byte ptr [rip - 0x8fffffb], dl; ret 0; 
0x000000000045cb51: test byte ptr [rip - 0x8fffffc], dh; ret 0; 
0x0000000000403725: test byte ptr [rsi + 0x31fffff9], bl; idiv byte ptr [rdi + 0x3003]; mov eax, 0x9e; syscall; 
0x000000000043f4cd: test byte ptr [rsi + 0x48000000], bl; bsf eax, edx; ret; 
0x0000000000424a5a: test byte ptr [rsi + 0x48fffffe], dl; bsf ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000401a91: test ch, 0xf0; je 0x1a9a; movzx r8d, cl; mov rax, r8; pop rbx; ret; 
0x0000000000422114: test ch, 4; jne 0x220de; ret; 
0x0000000000422187: test ch, 4; jne 0x2214a; ret; 
0x0000000000422207: test ch, 4; jne 0x221ca; ret; 
0x0000000000423127: test ch, 4; jne 0x230ea; ret; 
0x00000000004507c8: test ch, bh; add al, 0; add byte ptr [rax - 0x39], cl; ret; 
0x000000000044e8e3: test ch, ch; jne 0x4e93e; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000445bff: test cl, cl; jne 0x45bf0; ret; 
0x0000000000445caf: test cl, cl; jne 0x45ca0; ret; 
0x0000000000445f6f: test cl, cl; jne 0x45f60; sub rax, 1; ret; 
0x00000000004441c7: test dh, 0x40; jne 0x44100; lea rax, [rdi + 0xf]; ret; 
0x0000000000445656: test dh, 0x40; jne 0x45620; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x000000000044420d: test dh, 4; jne 0x44100; lea rax, [rdi + 0xb]; ret; 
0x0000000000476e25: test dh, al; add dword ptr [rax], eax; add byte ptr [rax + 0xf], cl; mov ebp, 0xf80148c0; ret; 
0x00000000004910c8: test dh, dh; jns 0x91072; mov rdx, qword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000459969: test dh, dh; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x0000000000480a4b: test dil, dil; cmove r8, rax; mov rax, r8; ret; 
0x0000000000493f1b: test dil, dil; js 0x93f40; mov qword ptr [r8], rdx; ret; 
0x0000000000495fbb: test dil, dil; js 0x95fe0; mov qword ptr [r8], rdx; ret; 
0x000000000048c070: test dil, r14b; jmp qword ptr [rsi + 0x66]; 
0x0000000000444144: test dl, 0x40; jne 0x44100; lea rax, [rdi + 7]; ret; 
0x00000000004455a2: test dl, 0x40; jne 0x45620; movzx eax, byte ptr [rdi - 9]; movzx edx, byte ptr [rsi - 9]; sub eax, edx; ret; 
0x0000000000444172: test dl, 4; jne 0x44100; lea rax, [rdi + 3]; ret; 
0x0000000000478e31: test dl, cl; add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004121a2: test dl, cl; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret; 
0x0000000000497498: test dl, cl; add dword ptr [rax], eax; add byte ptr [rax - 0x77], cl; ret 0xc148; 
0x0000000000463241: test dl, dl; add eax, 0x89480000; ret 0x294c; 
0x000000000048cb39: test dl, dl; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; ret; 
0x0000000000478327: test dl, dl; je 0x78340; mov cl, dl; and cl, 0xf; je 0x78350; ret; 
0x0000000000445e1f: test dl, dl; jne 0x45e10; lea rax, [rcx - 1]; ret; 
0x0000000000485452: test dl, dl; jne 0x85424; movsx eax, cl; neg eax; ret; 
0x0000000000409f9b: test dl, dl; jne 0x9f78; ret; 
0x0000000000450426: test dword ptr [rax + 0x48000000], ebp; add esp, 0x68; pop rbp; pop r12; ret; 
0x0000000000472915: test dword ptr [rax + 0x48000000], esp; add esp, 0xa0; pop rbx; pop rbp; pop r12; ret; 
0x0000000000476a28: test dword ptr [rax + 0xf], 0x7a8df7b6; add dword ptr [rax - 0x78], eax; jl 0x76a68; adc byte ptr [rbp - 0x7cb7fd8e], cl; ret 0x4802; 
0x000000000044424f: test dword ptr [rax + rax + 0x40a80000], edi; jne 0x44320; lea rax, [rdi + 7]; ret; 
0x000000000042b008: test dword ptr [rax + rax - 0x8b70000], ecx; ret 2; 
0x0000000000454eb7: test dword ptr [rax + rax], edi; add byte ptr [rax - 0x75], cl; and al, 0x10; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x000000000040d5b2: test dword ptr [rax + rcx*4 - 0x73], 0xfffff714; mov byte ptr [rbp - 0x8e8], r8b; call rax; 
0x0000000000497297: test dword ptr [rax + rdi*8 - 0x247ab701], ecx; jne 0x97280; pop rbx; pop rbp; pop r12; ret; 
0x00000000004537ef: test dword ptr [rax - 0x75], 0x31182444; fisttp dword ptr [rbp - 0x75]; pop rbp; add byte ptr [rax - 0x7b], cl; ror byte ptr [rdi], 0x94; ret; 
0x0000000000451a8d: test dword ptr [rax - 0x75], 0x8945a845; out dx, eax; call rax; 
0x000000000048aa0b: test dword ptr [rax - 0x77], 0xe8082474; retf 0xf951; jmp qword ptr [rsi + 0x49]; 
0x000000000046c658: test dword ptr [rax], eax; add byte ptr [rax], al; add byte ptr [rax + 0x29], cl; ret; 
0x000000000042ae77: test dword ptr [rax], eax; add byte ptr [rax], al; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000044f097: test dword ptr [rax], eax; add byte ptr [rax], al; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000447c80: test dword ptr [rax], eax; add byte ptr [rax], al; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000046dec0: test dword ptr [rax], ecx; idiv edi; call qword ptr [rax]; 
0x000000000040d3bd: test dword ptr [rax], edx; idiv edi; call qword ptr [rax]; 
0x000000000040d480: test dword ptr [rax], edx; idiv edi; dec dword ptr [rdx]; add byte ptr [rax], al; add cl, ch; ret 0xfffc; 
0x0000000000479c71: test dword ptr [rbp + 0x48000000], edi; add esp, 0x78; ret; 
0x00000000004514b6: test dword ptr [rbp + 0x49000000], edx; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000452296: test dword ptr [rbp + 0x49000000], esi; mov edi, dword ptr [rbp]; call rbx; 
0x000000000042a898: test dword ptr [rbx + 0x31000000], esp; rol bl, 0x83; ret 0x6620; 
0x0000000000444208: test dword ptr [rbx + 1], eax; add byte ptr [rax], al; test dh, 4; jne 0x44100; lea rax, [rdi + 0xb]; ret; 
0x000000000042bcf0: test dword ptr [rbx + 3], ebp; add byte ptr [rax], al; ret; 
0x000000000042dd23: test dword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000433643: test dword ptr [rbx - 0x76b703b2], 0x4f89f757; cld; ret; 
0x000000000045f1e3: test dword ptr [rbx], 0x3d8d4800; ret; 
0x000000000045f1ea: test dword ptr [rbx], 0x52cee800; cli; inc dword ptr [rcx - 0x77]; ret; 
0x000000000045f163: test dword ptr [rbx], 0x5355e800; cli; dec dword ptr [rbp - 0x77]; ret; 
0x000000000040bea0: test dword ptr [rbx], edx; add dword ptr [rax], eax; add byte ptr [rax + 0x63], cl; ret; 
0x000000000047b41c: test dword ptr [rcx + 0x5bfff861], eax; pop rbp; pop r12; ret; 
0x0000000000457d88: test dword ptr [rcx + 0xf], 0x2144c09c; ret 0xf283; 
0x000000000047a0a4: test dword ptr [rcx - 0x77], 0x70d3e8f4; clc; dec dword ptr [rax - 0x77]; ret; 
0x0000000000495455: test dword ptr [rcx], eax; ret 0xfff6; 
0x0000000000467e1e: test dword ptr [rdi + rdi*8 - 1], esp; jmp qword ptr [rsi]; 
0x0000000000473b09: test dword ptr [rdi], 0x89304211; je 0x73b5a; add esp, 0x10; mov eax, 1; pop rbx; ret; 
0x00000000004758c5: test dword ptr [rdi], 0xfffd7384; call qword ptr [rax + 0x48]; 
0x0000000000451481: test dword ptr [rdx + 0x49000000], ecx; mov edi, dword ptr [rbp]; call rbx; 
0x0000000000411bf1: test dword ptr [rdx - 0x77000000], edi; ret 0xe281; 
0x0000000000487af1: test dword ptr [rdx], eax; add al, byte ptr [rax]; add byte ptr [rcx - 0x73], cl; or byte ptr [r8 + 0x39], r9b; ret; 
0x000000000040e381: test dword ptr [rdx], ecx; idiv edi; inc edi; test dword ptr [rax], edx; idiv edi; call qword ptr [rax]; 
0x000000000045144e: test dword ptr [rip + 0x49000001], ebx; mov edi, dword ptr [rbp]; call rbx; 
0x00000000004755be: test dword ptr [rip - 0x47fffffd], ebp; add dword ptr [rax], eax; add byte ptr [rax], al; ret; 
0x0000000000477123: test dword ptr [rip - 0x76ffffff], edi; ret 0x8948; 
0x00000000004860e4: test dword ptr [rsi + 0x48000000], ebp; add esp, 0x68; ret; 
0x0000000000493185: test dword ptr [rsi + 0x48fff6e4], ecx; mov dword ptr [rcx], edx; ret; 
0x000000000044416d: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; test dl, 4; jne 0x44100; lea rax, [rdi + 3]; ret; 
0x0000000000445982: test dword ptr [rsi + 1], ebp; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000047c87f: test dword ptr [rsi + rdi*8 - 0x7cb60001], ebp; stc; or al, 0xf; xchg byte ptr [rbx + rax], bh; add byte ptr [rax + 1], cl; ret 0xba41; 
0x000000000042025a: test eax, 0x2ee80007; mov bh, 0xff; jmp qword ptr [rsi + 0x66]; 
0x0000000000482f83: test eax, 0x3ec80148; jmp rax; 
0x0000000000464f83: test eax, 0x4800061a; mov dword ptr [rip + 0x61aaa], edx; cmp qword ptr fs:[rdi], rsi; je 0x64f98; ret; 
0x000000000044bc25: test eax, 0x5974c085; tzcnt eax, eax; add rax, rcx; ret; 
0x0000000000456ad3: test eax, 0x5b00075a; and eax, 0xfffffffc; or eax, 2; mov byte ptr [rip + 0x75a9c], al; ret; 
0x000000000042aea3: test eax, 0x5b74c085; tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x00000000004317e6: test eax, 0x7f0f41f3; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000043f271: test eax, 0x840fc085; test eax, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000043db52: test eax, 0xe3c4c9eb; jns 0x3dbbc; rcr dword ptr [rdx], 0xf; xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043e332: test eax, 0xe3c4c9eb; jns 0x3e39c; rcr dword ptr [rdx], 0xf; xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043f277: test eax, 0xf3fffffe; bsf eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000445f88: test eax, 0xfffd3be9; jmp qword ptr [rsi - 0x70]; 
0x000000000045572d: test eax, eax; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x0000000000452803: test eax, eax; cmove eax, edx; add rsp, 8; ret; 
0x0000000000452a3f: test eax, eax; cmove eax, edx; ret; 
0x0000000000493215: test eax, eax; cmovne rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x0000000000401010: test eax, eax; je 0x1016; call rax; 
0x0000000000401010: test eax, eax; je 0x1016; call rax; add rsp, 8; ret; 
0x0000000000410d6f: test eax, eax; je 0x10d80; lea rdx, [rip + 0x89066]; add rax, rdx; ret; 
0x00000000004016e3: test eax, eax; je 0x16f0; mov edi, 0x4c6ae0; jmp rax; 
0x0000000000401725: test eax, eax; je 0x1730; mov edi, 0x4c6ae0; jmp rax; 
0x0000000000419024: test eax, eax; je 0x19037; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000042a0b8: test eax, eax; je 0x2a0bd; xchg eax, edx; sub eax, edx; ret; 
0x000000000042a9c6: test eax, eax; je 0x2a9e0; bsf eax, eax; add rax, rdi; add rax, rcx; ret; 
0x000000000042abae: test eax, eax; je 0x2ac70; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000042aea5: test eax, eax; je 0x2af04; tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x000000000043ec33: test eax, eax; je 0x3ec40; bsf eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000043f0ba: test eax, eax; je 0x3f120; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x000000000043f273: test eax, eax; je 0x3f124; tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x000000000043f685: test eax, eax; je 0x3f6e0; tzcnt eax, eax; vzeroupper; ret; 
0x000000000043f7c2: test eax, eax; je 0x3f6e4; tzcnt eax, eax; vzeroupper; ret; 
0x000000000043f813: test eax, eax; je 0x3f880; tzcnt eax, eax; vzeroupper; ret; 
0x000000000044ac74: test eax, eax; je 0x4acc0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044bc03: test eax, eax; je 0x4bc80; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044bc27: test eax, eax; je 0x4bc84; tzcnt eax, eax; add rax, rcx; ret; 
0x000000000044c49f: test eax, eax; je 0x4c520; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044c6a9: test eax, eax; je 0x4c524; tzcnt eax, eax; add rax, rdx; ret; 
0x000000000044cfa7: test eax, eax; je 0x4d000; tzcnt eax, eax; ret; 
0x000000000044d0e7: test eax, eax; je 0x4d007; tzcnt eax, eax; ret; 
0x000000000044d6b5: test eax, eax; je 0x4d720; tzcnt eax, eax; ret; 
0x000000000044d9d4: test eax, eax; je 0x4da20; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044dc63: test eax, eax; je 0x4dce0; tzcnt eax, eax; add rax, rdi; ret; 
0x000000000044dc87: test eax, eax; je 0x4dce4; tzcnt eax, eax; add rax, rcx; ret; 
0x000000000044f795: test eax, eax; je 0x4f800; tzcnt eax, eax; ret; 
0x000000000044fa7c: test eax, eax; je 0x4fa98; sub rsp, 8; call rax; 
0x000000000045110c: test eax, eax; je 0x51111; ret; 
0x00000000004527dd: test eax, eax; je 0x527f0; add rsp, 8; ret; 
0x0000000000456cba: test eax, eax; je 0x56cc0; ret; 
0x0000000000457bbf: test eax, eax; je 0x57bde; call 0x54fe0; mov rax, qword ptr [rbp - 0x68]; mov rdi, r12; call rax; 
0x000000000046313f: test eax, eax; je 0x63145; call rax; 
0x00000000004647ed: test eax, eax; je 0x647f3; call rax; 
0x0000000000475de7: test eax, eax; je 0x75e00; push rbx; mov rbx, rdi; mov rdi, qword ptr [rdi + 8]; call qword ptr [rbx]; 
0x000000000047724d: test eax, eax; je 0x77204; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x0000000000477272: test eax, eax; je 0x77290; bsr eax, eax; lea rax, [rdi + rax - 0x20]; vzeroupper; ret; 
0x000000000047761d: test eax, eax; je 0x775d4; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x0000000000477642: test eax, eax; je 0x77650; bsr eax, eax; lea rax, [rdi + rax - 0x20]; ret; 
0x0000000000477f04: test eax, eax; je 0x77f60; tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000478772: test eax, eax; je 0x78664; tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x0000000000478ca7: test eax, eax; je 0x78d00; tzcnt eax, eax; ret; 
0x0000000000478def: test eax, eax; je 0x78d07; tzcnt eax, eax; ret; 
0x0000000000478e2e: test eax, eax; je 0x78f00; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x000000000047912e: test eax, eax; je 0x79200; tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x00000000004806b1: test eax, eax; je 0x806a4; xor eax, eax; ret; 
0x0000000000488b50: test eax, eax; je 0x88b6e; lea rbx, [rbp + rdx*8]; nop dword ptr [rax]; call qword ptr [rbx]; 
0x0000000000489d5d: test eax, eax; je 0x89d6b; mov rax, -0x48; mov eax, dword ptr fs:[rax]; add rsp, 8; ret; 
0x000000000048ab9a: test eax, eax; je 0x8ac14; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x8ab90; ret; 
0x0000000000408dee: test eax, eax; je 0x8dfb; mov dword ptr [rax], 0; mov dword ptr [rax + 4], ebx; pop rbx; ret; 
0x0000000000493c0c: test eax, eax; je 0x93c20; mov edi, 1; jmp rax; 
0x0000000000496f38: test eax, eax; je 0x96f3e; call rax; 
0x0000000000497219: test eax, eax; je 0x97224; call rax; 
0x00000000004626c0: test eax, eax; jle 0x626cc; sub eax, 1; mov dword ptr [rdx + 8], eax; pop rbx; ret; 
0x0000000000418fc4: test eax, eax; jne 0x18fb8; ret; 
0x0000000000419b3c: test eax, eax; jne 0x19b30; ret; 
0x000000000042604b: test eax, eax; jne 0x26030; sub eax, ecx; vzeroupper; ret; 
0x000000000042a4e0: test eax, eax; jne 0x2a4c0; sub eax, ecx; vzeroupper; ret; 
0x000000000042a823: test eax, eax; jne 0x2a900; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x000000000042a8c5: test eax, eax; jne 0x2a920; xor eax, eax; ret; 
0x000000000042a895: test eax, eax; jne 0x2a940; xor eax, eax; ret; 
0x000000000042ab11: test eax, eax; jne 0x2ab60; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x00000000004440f4: test eax, eax; jne 0x44104; nop dword ptr [rax + rax]; xor rax, rax; ret; 
0x000000000044aee9: test eax, eax; jne 0x4aef0; ret; 
0x000000000044b144: test eax, eax; jne 0x4b14d; ret; 
0x000000000044b195: test eax, eax; jne 0x4b1ac; ret; 
0x000000000044ca1b: test eax, eax; jne 0x4ca00; sub eax, ecx; ret; 
0x000000000044d510: test eax, eax; jne 0x4d4f0; sub eax, ecx; ret; 
0x000000000044fa86: test eax, eax; jne 0x4fae0; xor eax, eax; add rsp, 8; ret; 
0x00000000004504ec: test eax, eax; jne 0x50500; syscall; 
0x00000000004504ec: test eax, eax; jne 0x50500; syscall; cmp rax, -0x1000; ja 0x50550; ret; 
0x000000000045058c: test eax, eax; jne 0x505a0; mov eax, 1; syscall; 
0x0000000000454eb4: test eax, eax; jne 0x54f38; mov rcx, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 0x18]; call rcx; 
0x0000000000456afc: test eax, eax; jne 0x56ab3; or byte ptr [rip + 0x75a79], 3; pop rbx; ret; 
0x0000000000456b8c: test eax, eax; jne 0x56b43; or byte ptr [rip + 0x759e9], 0xc; pop rbx; ret; 
0x000000000046542d: test eax, eax; jne 0x65440; add rsp, 8; ret; 
0x000000000046668c: test eax, eax; jne 0x666a0; mov eax, 0x13e; syscall; 
0x00000000004755bb: test eax, eax; jne 0x758f0; mov eax, 1; ret; 
0x0000000000477cd3: test eax, eax; jne 0x77db0; pmovmskb eax, xmm1; bsf eax, eax; lea rax, [rdi + rax + 0x30]; ret; 
0x0000000000477d75: test eax, eax; jne 0x77de0; xor eax, eax; ret; 
0x0000000000477d45: test eax, eax; jne 0x77e20; xor eax, eax; ret; 
0x0000000000479c4b: test eax, eax; jne 0x79cb0; mov eax, 0x101; syscall; 
0x00000000004883e6: test eax, eax; jne 0x883f0; xend; xor eax, eax; ret; 
0x0000000000495926: test eax, eax; jne 0x95930; ret; 
0x0000000000495c76: test eax, eax; jne 0x95c80; ret; 
0x0000000000409fd6: test eax, eax; jne 0x9fe0; pop rbp; ret; 
0x000000000046556f: test eax, eax; js 0x65e26; mov rdi, qword ptr [rsp + 0x10]; mov rdx, rbp; mov rsi, r12; call rbx; 
0x0000000000422f20: test eax, eax; lea rdx, [rip + 0x24c17]; lea rax, [rip + 0x24b90]; cmovne rax, rdx; ret; 
0x0000000000422f02: test eax, eax; lea rdx, [rip + 0x24d55]; lea rax, [rip + 0x24dae]; cmove rax, rdx; ret; 
0x0000000000422f70: test eax, eax; lea rdx, [rip + 0x25f27]; lea rax, [rip + 0x25f80]; cmove rax, rdx; ret; 
0x0000000000422f9c: test eax, eax; lea rdx, [rip + 0x28a7b]; lea rax, [rip + 0x28ad4]; cmove rax, rdx; ret; 
0x0000000000465137: test eax, eax; sete sil; xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x000000000041566e: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x00000000004162f8: test eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x8148; 
0x00000000004154ec: test eax, ebx; add byte ptr [rax], al; add byte ptr [rcx - 0x39], cl; mov byte ptr [rax + 0x6b], 0x4c; add byte ptr [rax - 0x39], cl; ret; 
0x00000000004513f1: test ebp, ebp; jne 0x5146b; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000451421: test ebp, ebp; jne 0x514a0; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045224d: test ebp, ebp; jne 0x522b0; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000496594: test ebp, ebp; jne 0x96580; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000042a800: test ebx, ebx; add byte ptr [rax], al; add byte ptr [rsi + 0xf], ah; xlatb; ret 0xc085; 
0x0000000000483aa4: test ebx, ebx; jne 0x83ab8; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x000000000048ac98: test ebx, ebx; jne 0x8ac88; mov qword ptr [rip + 0x41d81], 0; pop rbx; ret; 
0x00000000004965e7: test ebx, ebx; jne 0x965c0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049672b: test ebx, ebx; jne 0x96710; pop rbx; ret; 
0x000000000049729c: test ebx, ebx; jne 0x97280; pop rbx; pop rbp; pop r12; ret; 
0x0000000000477d48: test ebx, edx; add byte ptr [rax], al; add byte ptr [rcx], dh; rol bl, 0x83; ret 0x6608; 
0x0000000000451198: test ecx, 0xfff; jne 0x511b0; mov eax, 9; syscall; 
0x0000000000444132: test ecx, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7520; 
0x000000000041458a: test ecx, ecx; jne 0x145a0; mov eax, dword ptr [rdx + 0x4c]; cmp dword ptr [rdx + 0x48], eax; cmovne eax, ecx; ret; 
0x000000000044b116: test ecx, ecx; jne 0x4afe4; ret; 
0x000000000044afdf: test ecx, ecx; jne 0x4afea; ret; 
0x000000000041b0c4: test ecx, ecx; setne sil; xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000408018: test edi, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xc602; 
0x00000000004626a8: test edi, edi; je 0x62681; call 0x861a0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x0000000000497210: test edi, edi; je 0x97229; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x97224; call rax; 
0x000000000045147e: test edi, edi; jne 0x51510; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514df: test edi, edi; jne 0x51530; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514b3: test edi, edi; jne 0x51550; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045144b: test edi, edi; jne 0x51570; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000452221: test edi, edi; jne 0x52270; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004522ef: test edi, edi; jne 0x52310; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522c3: test edi, edi; jne 0x52330; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000452293: test edi, edi; jne 0x52350; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000490a7b: test edi, edi; jne 0x909ac; add rsp, 0x38; ret; 
0x0000000000422127: test edx, 0x40000000; je 0x22101; ret; 
0x0000000000422377: test edx, 0x40000000; je 0x22347; ret; 
0x00000000004223e7: test edx, 0x40000000; je 0x223b7; ret; 
0x0000000000423397: test edx, 0x40000000; je 0x23367; ret; 
0x000000000044e3c7: test edx, 0x40000000; je 0x4e3a7; ret; 
0x0000000000476547: test edx, 0x40000000; je 0x76517; ret; 
0x00000000004777b7: test edx, 0x40000000; je 0x77797; ret; 
0x0000000000474a89: test edx, edx; cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000041abeb: test edx, edx; je 0x1abc0; call rdx; 
0x000000000043f2c6: test edx, edx; je 0x3f2ce; bsf eax, edx; ret; 
0x000000000043f36b: test edx, edx; je 0x3f380; bsf rax, rdx; ret; 
0x000000000043f30e: test edx, edx; je 0x3f390; bsf rax, rdx; ret; 
0x000000000043f53a: test edx, edx; je 0x3f560; bsf rax, rdx; ret; 
0x000000000043f4ca: test edx, edx; je 0x3f570; bsf rax, rdx; ret; 
0x00000000004460fe: test edx, edx; je 0x460d8; movsxd rcx, ecx; add rax, rcx; sub rax, rdi; ret; 
0x000000000044ef4a: test edx, edx; je 0x4ef70; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044eedf: test edx, edx; je 0x4ef80; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000454cbb: test edx, edx; je 0x54cd0; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x0000000000463568: test edx, edx; je 0x6356e; call rdx; 
0x0000000000478426: test edx, edx; je 0x78432; bsf eax, edx; shr rax, 2; ret; 
0x00000000004784cb: test edx, edx; je 0x784e0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000478472: test edx, edx; je 0x784f0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000047b419: test edx, edx; jne 0x15a2; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416b37: test edx, edx; jne 0x16b40; ret; 
0x0000000000417fb7: test edx, edx; jne 0x17fa8; ret; 
0x0000000000447b15: test edx, edx; jne 0x47b1d; mov rax, rdi; ret; 
0x0000000000453031: test edx, edx; jne 0x53040; ret; 
0x000000000047338f: test edx, edx; jne 0x73380; ret; 
0x0000000000477aab: test edx, edx; jne 0x77aa0; ret; 
0x000000000048324d: test edx, edx; jne 0x83261; mov qword ptr [rbp - 0xb0], r10; call rax; 
0x0000000000483a24: test edx, edx; jne 0x83a2a; call rax; 
0x000000000048806d: test edx, edx; jne 0x88090; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x00000000004881c9: test edx, edx; jne 0x88240; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x000000000048aba3: test edx, edx; jne 0x8ab90; ret; 
0x000000000048bff1: test edx, edx; jne 0x8bff8; mov qword ptr [rbx], rax; add rsp, 0x10; pop rbx; ret; 
0x000000000041afa3: test edx, edx; setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x0000000000444125: test esi, edx; add dword ptr [rax], eax; add dh, dh; ret 0x7510; 
0x0000000000462678: test esi, esi; je 0x62688; cmp esi, 3; je 0x62688; pop rbx; ret; 
0x00000000004809c8: test esi, esi; je 0x809cf; mov qword ptr [rsi], rcx; mov rax, r8; ret; 
0x0000000000488301: test esi, esi; je 0x88318; mov r8, qword ptr [rdi + 8]; mov rax, qword ptr [rdi]; mov rdi, r8; jmp rax; 
0x000000000043f435: test esi, esi; jne 0x3f43d; xor rax, rax; ret; 
0x000000000044ee35: test esi, esi; jne 0x4ee3d; xor rax, rax; ret; 
0x0000000000452074: test esi, esi; jne 0x52080; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000452122: test esi, esi; jne 0x52130; pop rbp; pop r12; pop r13; ret; 
0x0000000000465118: test esi, esi; jne 0x65128; mov dword ptr [rbx + 0x40], esi; xor eax, eax; pop rbx; ret; 
0x000000000048311e: test esi, esi; jne 0x83124; call rax; 
0x0000000000488111: test esi, esi; jne 0x88102; cmp cx, 0x7fff; jne 0x880fc; mov eax, 1; ret; 
0x00000000004880f8: test esi, esi; jne 0x88128; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x0000000000477828: test esi, esi; lea rdx, [rip + 0x15cf]; lea rax, [rip + 0x18c8]; cmove rax, rdx; ret; 
0x0000000000422cf8: test esi, esi; lea rdx, [rip + 0x27edf]; lea rax, [rip + 0x2ac38]; cmove rax, rdx; ret; 
0x0000000000423318: test esi, esi; lea rdx, [rip + 0x288bf]; lea rax, [rip + 0x2a918]; cmove rax, rdx; ret; 
0x000000000044413f: test esp, ebx; add dword ptr [rax], eax; add dh, dh; ret 0x7540; 
0x00000000004513bf: test esp, esp; jne 0x5140c; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004521e8: test esp, esp; jne 0x52210; mov rdi, qword ptr [rbp]; call rbx; 
0x000000000042dd22: test qword ptr [rbx - 0x76b703aa], 0x5789f74f; cld; ret; 
0x0000000000483aa3: test r11d, r11d; jne 0x83ab8; mov qword ptr [rbp - 0xa0], r10; call rax; 
0x00000000004513be: test r12, r12; jne 0x5140c; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004521e7: test r12, r12; jne 0x52210; mov rdi, qword ptr [rbp]; call rbx; 
0x00000000004513f0: test r13, r13; jne 0x5146b; mov rdi, qword ptr [r12]; call rbx; 
0x0000000000451420: test r13, r13; jne 0x514a0; mov rdi, qword ptr [r12]; call rbx; 
0x000000000045224c: test r13, r13; jne 0x522b0; mov rdi, qword ptr [r12]; call rbx; 
0x000000000048d3f2: test r8b, r8b; cmove esi, eax; mov eax, 0x9e; syscall; 
0x000000000042a0b7: test r8d, r8d; je 0x2a0bd; xchg eax, edx; sub eax, edx; ret; 
0x0000000000451197: test r9d, 0xfff; jne 0x511b0; mov eax, 9; syscall; 
0x0000000000493214: test rax, rax; cmovne rax, qword ptr [rsp + 0x10]; add rsp, 0x28; ret; 
0x000000000040100f: test rax, rax; je 0x1016; call rax; 
0x000000000040100f: test rax, rax; je 0x1016; call rax; add rsp, 8; ret; 
0x00000000004016e2: test rax, rax; je 0x16f0; mov edi, 0x4c6ae0; jmp rax; 
0x0000000000401724: test rax, rax; je 0x1730; mov edi, 0x4c6ae0; jmp rax; 
0x0000000000419023: test rax, rax; je 0x19037; mov qword ptr [rax], 0; mov qword ptr [rax + 8], 0; ret; 
0x000000000044fa7b: test rax, rax; je 0x4fa98; sub rsp, 8; call rax; 
0x000000000045110b: test rax, rax; je 0x51111; ret; 
0x0000000000457bbe: test rax, rax; je 0x57bde; call 0x54fe0; mov rax, qword ptr [rbp - 0x68]; mov rdi, r12; call rax; 
0x000000000046313e: test rax, rax; je 0x63145; call rax; 
0x00000000004647ec: test rax, rax; je 0x647f3; call rax; 
0x00000000004806b0: test rax, rax; je 0x806a4; xor eax, eax; ret; 
0x000000000048ab99: test rax, rax; je 0x8ac14; mov rdx, qword ptr [rax + 0x10]; test rdx, rdx; jne 0x8ab90; ret; 
0x0000000000408ded: test rax, rax; je 0x8dfb; mov dword ptr [rax], 0; mov dword ptr [rax + 4], ebx; pop rbx; ret; 
0x0000000000493c0b: test rax, rax; je 0x93c20; mov edi, 1; jmp rax; 
0x0000000000496f37: test rax, rax; je 0x96f3e; call rax; 
0x0000000000497218: test rax, rax; je 0x97224; call rax; 
0x0000000000418fc3: test rax, rax; jne 0x18fb8; ret; 
0x0000000000419b3b: test rax, rax; jne 0x19b30; ret; 
0x0000000000496593: test rbp, rbp; jne 0x96580; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048ac97: test rbx, rbx; jne 0x8ac88; mov qword ptr [rip + 0x41d81], 0; pop rbx; ret; 
0x00000000004965e6: test rbx, rbx; jne 0x965c0; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000049672a: test rbx, rbx; jne 0x96710; pop rbx; ret; 
0x000000000049729b: test rbx, rbx; jne 0x97280; pop rbx; pop rbp; pop r12; ret; 
0x00000000004626a7: test rdi, rdi; je 0x62681; call 0x861a0; mov qword ptr [rbx + 0x10], 0; pop rbx; ret; 
0x000000000049720f: test rdi, rdi; je 0x97229; mov rax, qword ptr [rdi + 0x20]; test rax, rax; je 0x97224; call rax; 
0x000000000045147d: test rdi, rdi; jne 0x51510; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514de: test rdi, rdi; jne 0x51530; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004514b2: test rdi, rdi; jne 0x51550; mov rdi, qword ptr [r13]; call rbx; 
0x000000000045144a: test rdi, rdi; jne 0x51570; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000452220: test rdi, rdi; jne 0x52270; mov rdi, qword ptr [r12]; call rbx; 
0x00000000004522ee: test rdi, rdi; jne 0x52310; mov rdi, qword ptr [r13]; call rbx; 
0x00000000004522c2: test rdi, rdi; jne 0x52330; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000452292: test rdi, rdi; jne 0x52350; mov rdi, qword ptr [r13]; call rbx; 
0x0000000000474a88: test rdx, rdx; cmovne esi, ecx; xor edx, edx; mov eax, 0xca; syscall; 
0x000000000041abea: test rdx, rdx; je 0x1abc0; call rdx; 
0x000000000043f36a: test rdx, rdx; je 0x3f380; bsf rax, rdx; ret; 
0x000000000043f30d: test rdx, rdx; je 0x3f390; bsf rax, rdx; ret; 
0x000000000043f539: test rdx, rdx; je 0x3f560; bsf rax, rdx; ret; 
0x000000000043f4c9: test rdx, rdx; je 0x3f570; bsf rax, rdx; ret; 
0x000000000044ef49: test rdx, rdx; je 0x4ef70; bsf rax, rdx; shr rax, 2; ret; 
0x000000000044eede: test rdx, rdx; je 0x4ef80; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000454cba: test rdx, rdx; je 0x54cd0; lea rdi, [rcx + rax + 0x48]; jmp rdx; 
0x0000000000463567: test rdx, rdx; je 0x6356e; call rdx; 
0x00000000004784ca: test rdx, rdx; je 0x784e0; bsf rax, rdx; shr rax, 2; ret; 
0x0000000000478471: test rdx, rdx; je 0x784f0; bsf rax, rdx; shr rax, 2; ret; 
0x000000000047b418: test rdx, rdx; jne 0x15a2; pop rbx; pop rbp; pop r12; ret; 
0x0000000000416b36: test rdx, rdx; jne 0x16b40; ret; 
0x0000000000417fb6: test rdx, rdx; jne 0x17fa8; ret; 
0x0000000000447b14: test rdx, rdx; jne 0x47b1d; mov rax, rdi; ret; 
0x000000000047338e: test rdx, rdx; jne 0x73380; ret; 
0x000000000048806c: test rdx, rdx; jne 0x88090; mov dword ptr [rdi], 0; mov eax, 1; ret; 
0x00000000004881c8: test rdx, rdx; jne 0x88240; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x000000000048aba2: test rdx, rdx; jne 0x8ab90; ret; 
0x00000000004809c7: test rsi, rsi; je 0x809cf; mov qword ptr [rsi], rcx; mov rax, r8; ret; 
0x000000000043f434: test rsi, rsi; jne 0x3f43d; xor rax, rax; ret; 
0x000000000044ee34: test rsi, rsi; jne 0x4ee3d; xor rax, rax; ret; 
0x0000000000452073: test rsi, rsi; jne 0x52080; add rsp, 8; pop rbp; pop r12; ret; 
0x0000000000452121: test rsi, rsi; jne 0x52130; pop rbp; pop r12; pop r13; ret; 
0x0000000000488110: test rsi, rsi; jne 0x88102; cmp cx, 0x7fff; jne 0x880fc; mov eax, 1; ret; 
0x00000000004880f7: test rsi, rsi; jne 0x88128; mov dword ptr [rdx], 0; mov eax, 1; ret; 
0x00000000004910c7: test sil, sil; jns 0x91072; mov rdx, qword ptr [rdx]; mov qword ptr [r10], rdx; pop rbx; ret; 
0x0000000000459968: test sil, sil; mov edx, 0xffffffff; cmovs eax, edx; ret; 
0x000000000044b1ac: tzcnt eax, eax; add eax, edx; movzx ecx, byte ptr [rsi + rax - 0x20]; movzx eax, byte ptr [rdi + rax - 0x20]; sub eax, ecx; ret; 
0x000000000044bc2b: tzcnt eax, eax; add rax, rcx; ret; 
0x000000000042aea9: tzcnt eax, eax; add rax, rcx; vzeroupper; ret; 
0x0000000000449089: tzcnt eax, eax; add rax, rcx; xtest; je 0x49099; vzeroall; ret; 
0x000000000044c207: tzcnt eax, eax; add rax, rdi; cmp sil, byte ptr [rax]; jne 0x4c231; ret; 
0x000000000044ac16: tzcnt eax, eax; add rax, rdi; ret; 
0x000000000042abb6: tzcnt eax, eax; add rax, rdi; vzeroupper; ret; 
0x0000000000448085: tzcnt eax, eax; add rax, rdi; xtest; je 0x48095; vzeroall; ret; 
0x0000000000478a28: tzcnt eax, eax; add rax, rdi; xtest; je 0x78a38; vzeroall; ret; 
0x000000000044c6b1: tzcnt eax, eax; add rax, rdx; ret; 
0x000000000043f27b: tzcnt eax, eax; add rax, rdx; vzeroupper; ret; 
0x0000000000449a9b: tzcnt eax, eax; add rax, rdx; xtest; je 0x49aab; vzeroall; ret; 
0x000000000043f230: tzcnt eax, eax; add rdi, -0x80; add rax, rdi; vzeroupper; ret; 
0x000000000042ac40: tzcnt eax, eax; add rdi, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042ac50: tzcnt eax, eax; add rdi, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000042ac60: tzcnt eax, eax; add rdi, 0x61; add rax, rdi; vzeroupper; ret; 
0x000000000044ada7: tzcnt eax, eax; cmp edx, eax; jbe 0x4add1; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044db0d: tzcnt eax, eax; cmp edx, eax; jbe 0x4db31; lea rax, [rdi + rax + 0x40]; ret; 
0x0000000000478fdf: tzcnt eax, eax; cmp edx, eax; jbe 0x79001; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x00000000004792ea: tzcnt eax, eax; cmp edx, eax; jbe 0x79311; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x000000000044d85c: tzcnt eax, eax; cmp esi, eax; jb 0x4d83b; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d82a: tzcnt eax, eax; cmp esi, eax; jb 0x4d83b; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d8a8: tzcnt eax, eax; cmp esi, eax; jb 0x4d8f4; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044d933: tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; ret; 
0x000000000043faa0: tzcnt eax, eax; cmp rsi, rax; cmovb eax, esi; vzeroupper; ret; 
0x000000000044c260: tzcnt eax, eax; cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x4c231; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c3f0: tzcnt eax, eax; cmp sil, byte ptr [rdi + rax + 0x20]; jne 0x4c3d9; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044c220: tzcnt eax, eax; cmp sil, byte ptr [rdi + rax + 0x60]; jne 0x4c231; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000043ee42: tzcnt eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000044c3e0: tzcnt eax, eax; cmp sil, byte ptr [rdi + rax]; jne 0x4c3d9; lea rax, [rdi + rax]; ret; 
0x000000000044c441: tzcnt eax, eax; cmp sil, byte ptr [rdx + rax]; jne 0x4c3d9; add rax, rdx; ret; 
0x000000000042ac30: tzcnt eax, eax; inc rdi; add rax, rdi; vzeroupper; ret; 
0x000000000044f110: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x21]; shr eax, 2; vzeroupper; ret; 
0x000000000044f100: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x41]; shr eax, 2; vzeroupper; ret; 
0x000000000044f0f0: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x61]; shr eax, 2; vzeroupper; ret; 
0x000000000044f0d0: tzcnt eax, eax; lea eax, [rax + rcx*4 - 0x81]; shr eax, 2; vzeroupper; ret; 
0x000000000044f7e0: tzcnt eax, eax; lea eax, [rcx + rax - 0x11]; ret; 
0x000000000044f7d0: tzcnt eax, eax; lea eax, [rcx + rax - 0x19]; ret; 
0x000000000044d710: tzcnt eax, eax; lea eax, [rcx + rax - 0x21]; ret; 
0x000000000044d700: tzcnt eax, eax; lea eax, [rcx + rax - 0x41]; ret; 
0x000000000044d6f0: tzcnt eax, eax; lea eax, [rcx + rax - 0x61]; ret; 
0x000000000044d6e0: tzcnt eax, eax; lea eax, [rcx + rax - 0x81]; ret; 
0x000000000044f7f0: tzcnt eax, eax; lea eax, [rcx + rax - 9]; ret; 
0x000000000044f94f: tzcnt eax, eax; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044ac80: tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044ae20: tzcnt eax, eax; lea rax, [rdi + rax + 0x20]; vzeroupper; ret; 
0x000000000044ac90: tzcnt eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044aca0: tzcnt eax, eax; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044acb0: tzcnt eax, eax; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044db80: tzcnt eax, eax; lea rax, [rdi + rax + 0xa0]; ret; 
0x000000000044db90: tzcnt eax, eax; lea rax, [rdi + rax + 0xc0]; ret; 
0x000000000044db63: tzcnt eax, eax; lea rax, [rdi + rax + 0xe0]; ret; 
0x000000000044bd50: tzcnt eax, eax; lea rax, [rdi + rax - 0x60]; vzeroupper; ret; 
0x000000000044bd40: tzcnt eax, eax; lea rax, [rdi + rax - 0x80]; vzeroupper; ret; 
0x0000000000478eb0: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000478ec0: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x40]; ret; 
0x0000000000478ed0: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x60]; ret; 
0x0000000000478ee0: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0x80]; ret; 
0x0000000000479370: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0xa0]; ret; 
0x0000000000479380: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0xc0]; ret; 
0x0000000000479346: tzcnt eax, eax; lea rax, [rdi + rax*4 + 0xe0]; ret; 
0x0000000000478e36: tzcnt eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000479040: tzcnt eax, eax; lea rax, [rdi + rax*4]; vzeroupper; ret; 
0x000000000044c660: tzcnt eax, eax; lea rax, [rdi + rax]; ret; 
0x000000000042b4c0: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax + 0x20]; movzx eax, byte ptr [rdi + rax + 0x20]; sub eax, ecx; vzeroupper; ret; 
0x000000000042b4e0: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax + 0x40]; movzx eax, byte ptr [rdi + rax + 0x40]; sub eax, ecx; vzeroupper; ret; 
0x000000000044aef0: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; ret; 
0x000000000042b4a0: tzcnt eax, eax; movzx ecx, byte ptr [rsi + rax]; movzx eax, byte ptr [rdi + rax]; sub eax, ecx; vzeroupper; ret; 
0x000000000044cfab: tzcnt eax, eax; ret; 
0x000000000044f09b: tzcnt eax, eax; shr eax, 2; vzeroupper; ret; 
0x000000000047897a: tzcnt eax, eax; shr eax, 2; xtest; je 0x7898a; vzeroall; ret; 
0x000000000043f870: tzcnt eax, eax; sub ecx, 0x21; add eax, ecx; vzeroupper; ret; 
0x000000000043f860: tzcnt eax, eax; sub ecx, 0x41; add eax, ecx; vzeroupper; ret; 
0x000000000043f850: tzcnt eax, eax; sub ecx, 0x61; add eax, ecx; vzeroupper; ret; 
0x000000000043f840: tzcnt eax, eax; sub ecx, 0x81; add eax, ecx; vzeroupper; ret; 
0x000000000043f6b0: tzcnt eax, eax; sub edi, edx; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x000000000043f6c0: tzcnt eax, eax; sub edi, edx; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x000000000043f6d0: tzcnt eax, eax; sub edi, edx; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x000000000043f6a0: tzcnt eax, eax; sub edi, edx; inc edi; add eax, edi; vzeroupper; ret; 
0x000000000044cfb0: tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000044cfc0: tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000044cfd0: tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x60]; ret; 
0x000000000044cfe0: tzcnt eax, eax; sub edi, edx; lea eax, [rdi + rax + 0x80]; ret; 
0x0000000000478cc0: tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000478cd0: tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000478ce0: tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000478cb0: tzcnt eax, eax; sub edi, edx; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x0000000000478ff0: tzcnt eax, eax; sub edx, -0x20; cmp edx, eax; jbe 0x79001; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x0000000000479300: tzcnt eax, eax; sub edx, -0x20; cmp edx, eax; jbe 0x79311; lea rax, [rdi + rax*4 + 0x20]; ret; 
0x000000000044adc0: tzcnt eax, eax; sub edx, -0x80; cmp edx, eax; jbe 0x4add1; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044db20: tzcnt eax, eax; sub edx, -0x80; cmp edx, eax; jbe 0x4db31; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000042adc0: tzcnt eax, eax; sub rdi, -0x21; add rax, rdi; vzeroupper; ret; 
0x000000000042ae40: tzcnt eax, eax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044f280: tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afb0: tzcnt eax, eax; sub rdi, 0x5f; add rax, rdi; vzeroupper; ret; 
0x000000000043f240: tzcnt eax, eax; sub rdi, 0x60; add rax, rdi; vzeroupper; ret; 
0x000000000044f260: tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042afa0: tzcnt eax, eax; sub rdi, 0x7f; add rax, rdi; vzeroupper; ret; 
0x000000000043fa30: tzcnt eax, eax; sub rdi, rdx; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000043fa20: tzcnt eax, eax; sub rdi, rdx; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000044d8c0: tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d8d0: tzcnt eax, eax; sub rdi, rdx; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044f9e0: tzcnt eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044f9c0: tzcnt eax, eax; sub rdi, rdx; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x000000000043f689: tzcnt eax, eax; vzeroupper; ret; 
0x0000000000478e60: tzcnt eax, eax; xor ecx, ecx; cmp edx, eax; lea rax, [rdi + rax*4]; cmovle rax, rcx; ret; 
0x000000000044ac40: tzcnt eax, eax; xor ecx, ecx; cmp edx, eax; lea rax, [rdi + rax]; cmovle rax, rcx; ret; 
0x000000000044a37a: tzcnt eax, eax; xtest; je 0x4a387; vzeroall; ret; 
0x000000000044c8f3: tzcnt ecx, ecx; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; ret; 
0x000000000044c871: tzcnt ecx, ecx; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x000000000042b51b: tzcnt ecx, ecx; movzx eax, byte ptr [rdi + rcx + 0x60]; movzx ecx, byte ptr [rsi + rcx + 0x60]; sub eax, ecx; vzeroupper; ret; 
0x0000000000425ec3: tzcnt ecx, edi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x0000000000425f28: tzcnt ecx, esi; movzx eax, byte ptr [rax + rcx + 0x60]; movzx edx, byte ptr [rdx + rcx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000044c895: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; ret; 
0x0000000000425eec: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x20]; movzx edx, byte ptr [rdx + rdi + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000044c8c5: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; ret; 
0x0000000000425f0c: tzcnt edi, ecx; movzx eax, byte ptr [rax + rdi + 0x40]; movzx edx, byte ptr [rdx + rdi + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000044c70a: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; ret; 
0x0000000000425d60: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x20]; movzx edx, byte ptr [rsi + rdx + 0x20]; sub eax, edx; vzeroupper; ret; 
0x000000000044c71b: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; ret; 
0x0000000000425d80: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x40]; movzx edx, byte ptr [rsi + rdx + 0x40]; sub eax, edx; vzeroupper; ret; 
0x000000000044c72c: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; ret; 
0x0000000000425da0: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx + 0x60]; movzx edx, byte ptr [rsi + rdx + 0x60]; sub eax, edx; vzeroupper; ret; 
0x000000000044c6fb: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; ret; 
0x0000000000425d46: tzcnt edx, ecx; movzx eax, byte ptr [rdi + rdx]; movzx edx, byte ptr [rsi + rdx]; sub eax, edx; vzeroupper; ret; 
0x000000000044d0a2: tzcnt rax, rax; add rax, rdi; ret; 
0x000000000044c3c7: tzcnt rax, rax; cmp sil, byte ptr [rdi + rax + 0x40]; jne 0x4c3d9; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c647: tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044adf7: tzcnt rax, rax; lea rax, [rdi + rax + 0x40]; vzeroupper; ret; 
0x000000000044bd25: tzcnt rax, rax; lea rax, [rdi + rax - 0x40]; vzeroupper; ret; 
0x000000000042ad6b: tzcnt rax, rax; sub rdi, -0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044f1f3: tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000042af87: tzcnt rax, rax; sub rdi, 0x3f; add rax, rdi; vzeroupper; ret; 
0x000000000043f217: tzcnt rax, rax; sub rdi, 0x40; add rax, rdi; vzeroupper; ret; 
0x000000000044c96b: tzcnt rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000425f92: tzcnt rcx, rdi; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; vzeroupper; ret; 
0x00000000004464e5: ud0; lea rsi, [rsi + rcx - 1]; std; rep movsb byte ptr [rdi], byte ptr [rsi]; cld; ret; 
0x0000000000436dc1: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000446ba2: vmovdqu xmm0, xmmword ptr [rsi]; vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000436dc5: vmovdqu xmm1, xmmword ptr [rcx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000446ba6: vmovdqu xmm1, xmmword ptr [rsi + rdx - 0x10]; vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000043fe00: vmovdqu xmm2, xmmword ptr [rsi]; vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000444044: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000043fe04: vmovdqu xmm3, xmmword ptr [rsi + rdx - 0xf]; vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000436dce: vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000447dc6: vmovdqu xmmword ptr [rax + rdx - 0x10], xmm0; vzeroupper; ret; 
0x0000000000447dc2: vmovdqu xmmword ptr [rax], xmm0; vmovdqu xmmword ptr [rax + rdx - 0x10], xmm0; vzeroupper; ret; 
0x0000000000446bb0: vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x000000000044404e: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000043fe0e: vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x0000000000436dca: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [r9 - 0x10], xmm1; ret; 
0x0000000000446bac: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rdi + rdx - 0x10], xmm1; ret; 
0x0000000000446269: vmovdqu xmmword ptr [rdi], xmm0; vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x000000000044404a: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000043fe0a: vmovdqu xmmword ptr [rdi], xmm2; vmovdqu xmmword ptr [rdi + rdx - 0xf], xmm3; vzeroupper; ret; 
0x000000000044626d: vmovdqu xmmword ptr [rsi - 0x10], xmm0; ret; 
0x0000000000436dad: vmovdqu ymm0, ymmword ptr [rsi]; vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000436db1: vmovdqu ymm1, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000446aef: vmovdqu ymm1, ymmword ptr [rsi + rdx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x000000000043fe20: vmovdqu ymm2, ymmword ptr [rsi]; vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x0000000000436d8d: vmovdqu ymm3, ymmword ptr [rcx - 0x20]; vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000444064: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000043fe24: vmovdqu ymm3, ymmword ptr [rsi + rdx - 0x1f]; vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x0000000000446deb: vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000446de6: vmovdqu ymmword ptr [r8], ymm0; vmovdqu ymmword ptr [r8 + 0x20], ymm1; vzeroupper; ret; 
0x0000000000436dba: vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000436da1: vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000436d9b: vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000447ce4: vmovdqu ymmword ptr [rax + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000447ce0: vmovdqu ymmword ptr [rax], ymm0; vmovdqu ymmword ptr [rax + rdx - 0x20], ymm0; vzeroupper; ret; 
0x0000000000446d26: vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000447d64: vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000436d96: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000446be1: vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000446d97: vmovdqu ymmword ptr [rdi + 0x20], ymm5; vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x0000000000447d69: vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000448fa9: vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; xtest; je 0x48fbc; vzeroall; ret; 
0x0000000000446d9c: vmovdqu ymmword ptr [rdi + 0x40], ymm6; vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x0000000000447d6e: vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000448fae: vmovdqu ymmword ptr [rdi + 0x60], ymm0; xtest; je 0x48fbc; vzeroall; ret; 
0x0000000000446da1: vmovdqu ymmword ptr [rdi + 0x60], ymm7; vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x000000000044406e: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000043fe2e: vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x0000000000447c84: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm0; vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x0000000000446af9: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000004487a5: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; je 0x487b4; vzeroall; ret; 
0x0000000000446be6: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000447024: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x0000000000446c59: vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm4; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x000000000044701e: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x0000000000446bec: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000446c5f: vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm5; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000447018: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x0000000000446c65: vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm6; vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000447012: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x60], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm3; vzeroupper; ret; 
0x0000000000446c6b: vmovdqu ymmword ptr [rdi + rdx - 0x80], ymm7; vzeroupper; ret; 
0x0000000000447cf5: vmovdqu ymmword ptr [rdi - 0x20], ymm0; vzeroupper; ret; 
0x0000000000447cf0: vmovdqu ymmword ptr [rdi - 0x40], ymm0; vmovdqu ymmword ptr [rdi - 0x20], ymm0; vzeroupper; ret; 
0x0000000000436db6: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [r9 - 0x20], ymm1; ret; 
0x0000000000447d60: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm0; vmovdqu ymmword ptr [rdi + 0x40], ymm0; vmovdqu ymmword ptr [rdi + 0x60], ymm0; vzeroupper; ret; 
0x0000000000436d92: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [r9 - 0x40], ymm2; vmovdqu ymmword ptr [r9 - 0x20], ymm3; ret; 
0x0000000000446bdd: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + 0x20], ymm1; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x40], ymm3; vzeroupper; ret; 
0x0000000000446af5: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; vzeroupper; ret; 
0x00000000004487a1: vmovdqu ymmword ptr [rdi], ymm0; vmovdqu ymmword ptr [rdi + rdx - 0x20], ymm1; xtest; je 0x487b4; vzeroall; ret; 
0x0000000000447c8a: vmovdqu ymmword ptr [rdi], ymm0; vzeroupper; ret; 
0x000000000044406a: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; lea rax, [rdi + rdx]; vzeroupper; ret; 
0x000000000043fe2a: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rdi + rdx - 0x1f], ymm3; vzeroupper; ret; 
0x000000000044625f: vmovdqu ymmword ptr [rdi], ymm2; vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000446d1d: vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000446d18: vmovdqu ymmword ptr [rdx + 0x40], ymm6; vmovdqu ymmword ptr [rdx + 0x20], ymm7; vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000446da6: vmovdqu ymmword ptr [rdx + rdi - 0x20], ymm8; vzeroupper; ret; 
0x0000000000446d22: vmovdqu ymmword ptr [rdx], ymm8; vmovdqu ymmword ptr [rcx], ymm0; vzeroupper; ret; 
0x0000000000446263: vmovdqu ymmword ptr [rsi - 0x20], ymm2; ret; 
0x0000000000447fc6: vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000447fc0: vmovdqu64 xmmword ptr [rax], xmm16; vmovdqu64 xmmword ptr [rax + rdx - 0x10], xmm16; ret; 
0x0000000000447355: vmovdqu64 ymm16, ymmword ptr [rsi]; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044735b: vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b782: vmovdqu64 ymm19, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000044b2d9: vmovdqu64 ymm19, ymmword ptr [rsi + rdx - 0x40]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000044ba98: vmovdqu64 ymmword ptr [eax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044b535: vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x000000000044b52f: vmovdqu64 ymmword ptr [r8], ymm16; vmovdqu64 ymmword ptr [r8 + 0x20], ymm17; ret; 
0x0000000000447fb6: vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x0000000000447fb0: vmovdqu64 ymmword ptr [rax], ymm16; vmovdqu64 ymmword ptr [rax + rdx - 0x20], ymm16; ret; 
0x000000000044bb6a: vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000044bab0: vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000044bab7: vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000044b45e: vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000044bb64: vmovdqu64 ymmword ptr [rcx], ymm16; vmovdqu64 ymmword ptr [rcx + 0x20], ymm16; vmovdqu64 ymmword ptr [rcx + 0x40], ymm16; vmovdqu64 ymmword ptr [rcx + 0x60], ymm16; ret; 
0x000000000044b2e7: vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000044b4e9: vmovdqu64 ymmword ptr [rdi + 0x20], ymm21; vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000044b4f0: vmovdqu64 ymmword ptr [rdi + 0x40], ymm22; vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000044b368: vmovdqu64 ymmword ptr [rdi + 0x60], ymm19; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm20; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000044b4f7: vmovdqu64 ymmword ptr [rdi + 0x60], ymm23; vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000044ba41: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm16; vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x0000000000447369: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b2ee: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000044b7a2: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000044b36f: vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm20; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000044b79a: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000044b2f6: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x000000000044b377: vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm21; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000044b792: vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000044b37f: vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm22; vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000044b78a: vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x60], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm19; ret; 
0x000000000044b387: vmovdqu64 ymmword ptr [rdi + rdx - 0x80], ymm23; ret; 
0x000000000044ba49: vmovdqu64 ymmword ptr [rdi], ymm16; ret; 
0x000000000044b2e1: vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + 0x20], ymm17; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm18; vmovdqu64 ymmword ptr [rdi + rdx - 0x40], ymm19; ret; 
0x0000000000447363: vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x000000000044b451: vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000044b44a: vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000044b443: vmovdqu64 ymmword ptr [rdx + 0x60], ymm21; vmovdqu64 ymmword ptr [rdx + 0x40], ymm22; vmovdqu64 ymmword ptr [rdx + 0x20], ymm23; vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x000000000044b4fe: vmovdqu64 ymmword ptr [rdx + rdi - 0x20], ymm24; ret; 
0x000000000044b458: vmovdqu64 ymmword ptr [rdx], ymm24; vmovdqu64 ymmword ptr [rcx], ymm16; ret; 
0x0000000000447274: vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000447847: vmovdqu64 zmm19, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x000000000044738b: vmovdqu64 zmm19, zmmword ptr [rsi + rdx - 0x80]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000447601: vmovdqu64 zmmword ptr [r8], zmm16; ret; 
0x0000000000447ea2: vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000447e9c: vmovdqu64 zmmword ptr [rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x0000000000447f68: vmovdqu64 zmmword ptr [rcx + 0x100], zmm16; vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000447f6f: vmovdqu64 zmmword ptr [rcx + 0x140], zmm16; vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000447eb0: vmovdqu64 zmmword ptr [rcx + 0x180], zmm16; vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000447eb7: vmovdqu64 zmmword ptr [rcx + 0x1c0], zmm16; ret; 
0x0000000000447524: vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000447399: vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000447428: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm19; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm20; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x00000000004475c1: vmovdqu64 zmmword ptr [rdi + 0xc0], zmm23; vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000044784f: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x0000000000447447: vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000447e44: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm16; vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000447282: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x00000000004473a0: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000447867: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x000000000044742f: vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm20; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x000000000044785f: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x00000000004473a8: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x0000000000447437: vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm21; vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000447857: vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm19; ret; 
0x000000000044743f: vmovdqu64 zmmword ptr [rdi + rdx - 0xc0], zmm22; vmovdqu64 zmmword ptr [rdi + rdx - 0x100], zmm23; ret; 
0x0000000000447e4c: vmovdqu64 zmmword ptr [rdi], zmm16; ret; 
0x0000000000447393: vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + 0x40], zmm17; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm18; vmovdqu64 zmmword ptr [rdi + rdx - 0x80], zmm19; ret; 
0x000000000044727c: vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x0000000000447517: vmovdqu64 zmmword ptr [rdx + 0x40], zmm23; vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x00000000004475c8: vmovdqu64 zmmword ptr [rdx + rdi - 0x40], zmm24; ret; 
0x000000000044751e: vmovdqu64 zmmword ptr [rdx], zmm24; vmovdqu64 zmmword ptr [rcx], zmm16; ret; 
0x0000000000447e9b: vmovdqu64 zmmword ptr fs:[rax], zmm16; vmovdqu64 zmmword ptr [rax + rdx - 0x40], zmm16; ret; 
0x000000000044bae0: vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000447ee3: vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x0000000000446278: vmovq qword ptr [rdi], xmm0; vmovq qword ptr [rsi - 8], xmm0; ret; 
0x000000000044627c: vmovq qword ptr [rsi - 8], xmm0; ret; 
0x00000000004370c9: vmovups zmmword ptr [r9 + 0x140], zmm13; vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004370d0: vmovups zmmword ptr [r9 + 0x180], zmm14; vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x00000000004370d7: vmovups zmmword ptr [r9 + 0x1c0], zmm15; ret; 
0x0000000000436d21: vmovups zmmword ptr [r9 - 0x100], zmm4; vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436f70: vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d72: vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436d36: vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436f69: vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d6b: vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000436d2f: vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436f62: vmovups zmmword ptr [r9 - 0xc0], zmm13; vmovups zmmword ptr [r9 - 0x80], zmm14; vmovups zmmword ptr [r9 - 0x40], zmm15; ret; 
0x0000000000436d28: vmovups zmmword ptr [r9 - 0xc0], zmm5; vmovups zmmword ptr [r9 - 0x80], zmm6; vmovups zmmword ptr [r9 - 0x40], zmm7; ret; 
0x0000000000436d64: vmovups zmmword ptr [rdi + 0x40], zmm1; vmovups zmmword ptr [r9 - 0x80], zmm2; vmovups zmmword ptr [r9 - 0x40], zmm3; ret; 
0x0000000000446231: vmovups zmmword ptr [rdi + 0x40], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000437224: vmovups zmmword ptr [rdi - 0x140], zmm12; vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000043722b: vmovups zmmword ptr [rdi - 0x180], zmm13; vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000437232: vmovups zmmword ptr [rdi - 0x1c0], zmm14; vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x0000000000437239: vmovups zmmword ptr [rdi - 0x200], zmm15; ret; 
0x000000000044624c: vmovups zmmword ptr [rdi], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000044640e: vmovups zmmword ptr [rsi + 0x140], zmm2; vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446415: vmovups zmmword ptr [rsi + 0x180], zmm2; vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x000000000044641c: vmovups zmmword ptr [rsi + 0x1c0], zmm2; ret; 
0x0000000000446371: vmovups zmmword ptr [rsi + 0x40], zmm2; vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x0000000000446378: vmovups zmmword ptr [rsi + 0x80], zmm2; vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000044637f: vmovups zmmword ptr [rsi + 0xc0], zmm2; ret; 
0x000000000044621e: vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446217: vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x0000000000446210: vmovups zmmword ptr [rsi - 0xc0], zmm2; vmovups zmmword ptr [rsi - 0x80], zmm2; vmovups zmmword ptr [rsi - 0x40], zmm2; ret; 
0x000000000045178e: vpand ymm1, ymm15, ymmword ptr [rdi]; lahf; ret; 
0x000000000042b75d: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2b4a0; ret; 
0x000000000044865d: vpcmpeqb xmm2, xmm2, xmm1; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x483a0; ret; 
0x000000000042b7b7: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2b4a0; ret; 
0x00000000004486b7: vpcmpeqb xmm2, xmm2, xmmword ptr [rdi]; vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x483a0; ret; 
0x000000000042b62a: vpcmpeqb ymm1, ymm1, ymmword ptr [rdi + rdx - 0x20]; vpmovmskb eax, ymm1; inc eax; jne 0x2b680; vzeroupper; ret; 
0x000000000042b5f6: vpcmpeqb ymm4, ymm4, ymmword ptr [rdx + 0x60]; vpmovmskb eax, ymm4; inc eax; jne 0x2b644; vzeroupper; ret; 
0x000000000042b761: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x2b4a0; ret; 
0x0000000000448661: vpmovmskb eax, xmm2; sub eax, 0xffff; jne 0x483a0; ret; 
0x000000000042b630: vpmovmskb eax, ymm1; inc eax; jne 0x2b680; vzeroupper; ret; 
0x000000000043f681: vpmovmskb eax, ymm1; test eax, eax; je 0x3f6e0; tzcnt eax, eax; vzeroupper; ret; 
0x000000000042b5fb: vpmovmskb eax, ymm4; inc eax; jne 0x2b644; vzeroupper; ret; 
0x0000000000472ae0: vpsllw xmm5, xmm2, xmm1; clc; jmp qword ptr [rsi + 0x2e]; 
0x0000000000407b15: vpsubsb xmm12, xmm15, xmmword ptr [rsi + rdx*4 - 1]; dec dword ptr [rax + 0x29]; ret; 
0x0000000000412d41: vrcpss xmm9, xmm1, dword ptr [rax - 0x75]; add al, 0x24; mov esi, 0xffffffff; mov rdi, r8; call qword ptr [rax + 0x18]; 
0x0000000000448091: vzeroall; ret; 
0x0000000000425d54: vzeroupper; ret; 
0x000000000042a6b1: wait; add al, byte ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x0000000000490da6: wait; and edi, 0x20; je 0x90dbc; movss xmm0, dword ptr [rip + 0x239ec]; divss xmm0, dword ptr [rip + 0x239e8]; ret; 
0x000000000048b293: wait; cld; jmp qword ptr [rsi + 0x2e]; 
0x000000000048b27b: wait; cld; jmp qword ptr [rsi - 0x70]; 
0x000000000041ee5e: xabort -1; jmp qword ptr [rsi + 0xf]; 
0x0000000000472502: xchg ah, ah; add dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x8908; 
0x0000000000429703: xchg ah, bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043c6df: xchg ah, bl; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004297f3: xchg ah, ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000429613: xchg ah, cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000040c3d6: xchg al, bl; add byte ptr [rax], al; add byte ptr [rax - 0x39], cl; ret; 
0x000000000045cb3d: xchg al, ch; add al, byte ptr [rax]; add byte ptr [rbp - 0x1f77f02e], al; add al, byte ptr [rax]; add bh, dh; ret 0xf800; 
0x000000000043e33c: xchg bh, bh; add eax, 0x83480000; ret 0x4910; 
0x000000000043db5c: xchg bh, bl; or eax, 0x83480000; ret 0x4910; 
0x000000000043df4c: xchg bh, ch; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d76c: xchg bh, cl; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d258: xchg bl, al; add al, byte ptr [rax]; add byte ptr [rax + 5], cl; add byte ptr [rax], 0; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x0000000000452a36: xchg byte ptr [rax + 0x64ba0007], bl; add byte ptr [rax], al; add byte ptr [rbp - 0x3dbbf040], al; ret; 
0x000000000042a05b: xchg byte ptr [rax + rax - 0x7cb80000], al; ret 0xeb10; 
0x000000000043d23f: xchg byte ptr [rax + rax], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043ca1f: xchg byte ptr [rax + rcx - 0x7cb80000], bl; ret 0xe910; 
0x000000000043c1ff: xchg byte ptr [rax + rdx - 0x7cb80000], bh; ret 0xe910; 
0x0000000000492324: xchg byte ptr [rax - 0x39], cl; ret 0xffff; 
0x00000000004901a1: xchg byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000429bb3: xchg byte ptr [rax - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000422d85: xchg byte ptr [rax], al; add byte ptr [rbp - 0x5d], dh; ret; 
0x000000000043d90b: xchg byte ptr [rax], dh; adc byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000046fdfb: xchg byte ptr [rax], dh; sldt word ptr [rax]; mov rdx, r14; mov rsi, r15; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x000000000041ba1a: xchg byte ptr [rbp + 0x1000a], bl; add byte ptr [rax], al; mov qword ptr [rip + 0xa9d3f], rax; ret; 
0x0000000000471101: xchg byte ptr [rbp + 9], cl; add byte ptr [rax], al; mov rdx, r15; mov rsi, rbp; mov rdi, r12; call qword ptr [rax + 0x38]; 
0x000000000043cd5f: xchg byte ptr [rbp + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429343: xchg byte ptr [rbp + rcx - 0x7cb80000], bl; ret 0xeb10; 
0x000000000043c53f: xchg byte ptr [rbp + rcx], bh; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043bd1f: xchg byte ptr [rbp + rdx - 0x7cb80000], bl; ret 0xe910; 
0x000000000042a6b0: xchg byte ptr [rbx + 0x48000002], bl; add eax, edi; add rax, rcx; ret; 
0x000000000043ceff: xchg byte ptr [rbx + rax - 0x7cb80000], bh; ret 0xe910; 
0x000000000047c889: xchg byte ptr [rbx + rax], bh; add byte ptr [rax + 1], cl; ret 0xba41; 
0x0000000000429d93: xchg byte ptr [rbx + rax], cl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x0000000000429523: xchg byte ptr [rbx + rcx - 0x7cb80000], bh; ret 0xeb10; 
0x0000000000460936: xchg byte ptr [rbx], bh; cli; dec dword ptr [rcx - 0x77]; dec dword ptr [rbp - 0x77]; ret 0xc1e9; 
0x000000000045ecfd: xchg byte ptr [rbx], bl; add eax, dword ptr [rax]; add byte ptr [rcx + 0x3948fc56], cl; ret; 
0x0000000000429f73: xchg byte ptr [rcx + rax], ch; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000046f91f: xchg byte ptr [rdi + rdx], ah; add byte ptr [rax - 0x75], cl; je 0x6f94c; or byte ptr [rax - 0x77], cl; fimul dword ptr [rcx + rcx*4 - 0x19]; call qword ptr [rbp + 0x38]; 
0x00000000004193b4: xchg byte ptr [rdi], ah; add dword ptr [rax], eax; add byte ptr [rsi - 1], bh; mov rdi, rbx; call qword ptr [rdx + 0x18]; 
0x000000000043ddfc: xchg byte ptr [rdi], bh; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043d61c: xchg byte ptr [rdi], bl; adc eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043e72c: xchg byte ptr [rdi], cl; add al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000044d3c9: xchg byte ptr [rdx + 1], dl; add byte ptr [rax], al; movzx eax, byte ptr [rax + rcx]; movzx edx, byte ptr [rdx + rcx]; sub eax, edx; ret; 
0x0000000000429e83: xchg byte ptr [rdx + rax], bl; add byte ptr [rax - 0x7d], cl; ret 0xeb10; 
0x000000000043c05f: xchg byte ptr [rdx + rdx], bl; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000419691: xchg byte ptr [rdx], ah; add dword ptr [rax], eax; add byte ptr [rcx], dh; sal byte ptr [rcx], cl; test byte ptr [rax - 0x77], 0xdf; call qword ptr [rcx + 0x58]; 
0x00000000004297c5: xchg byte ptr [rdx], bl; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004298b5: xchg byte ptr [rdx], ch; or byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004296d5: xchg byte ptr [rdx], cl; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000041630b: xchg byte ptr [rip + 0x4c000001], al; mov edx, esi; mov rsi, r13; mov rdi, rbp; call qword ptr [rax + 0x78]; 
0x0000000000411c45: xchg byte ptr [rsi + 1], al; add byte ptr [rax], al; xor esi, esi; mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x000000000043c195: xchg byte ptr [rsi], ah; adc dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ce95: xchg byte ptr [rsi], ah; add al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000477b35: xchg byte ptr [rsi], al; add eax, dword ptr [rax]; add byte ptr [rax + 1], cl; clc; add rax, rcx; ret; 
0x000000000043c9b5: xchg byte ptr [rsi], al; or dword ptr [rax], eax; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004182cd: xchg byte ptr [rsi], bh; add byte ptr [rax], al; mov esi, 0xffffffff; mov rdi, rbp; call qword ptr [rbx + 0x18]; 
0x000000000043dcfd: xchg byte ptr [rsi], bh; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043e62d: xchg byte ptr [rsi], cl; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x0000000000429433: xchg byte ptr [rsp + rcx - 0x7cb80000], ch; ret 0xeb10; 
0x0000000000415eee: xchg ch, dl; add byte ptr [rax], al; add byte ptr [rcx + rcx*4 - 6], cl; mov rsi, r14; mov rdi, rbx; call qword ptr [rbp + 0x70]; 
0x000000000043d1d5: xchg dh, ah; add byte ptr [rax], al; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043c4d5: xchg dh, ah; or eax, 0x83480000; ret 0x4910; 
0x000000000043bff5: xchg dh, al; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x000000000043ccf5: xchg dh, al; add eax, 0x83480000; ret 0x4910; 
0x000000000043de4d: xchg dh, ch; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x000000000043d66d: xchg dh, cl; adc al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0xe910; 
0x00000000004295e5: xchg dl, bh; or al, byte ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429405: xchg dl, bl; or al, 0; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x00000000004294f5: xchg dl, ch; or eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x4910; 
0x0000000000429315: xchg dl, cl; or eax, 0x83480000; ret 0x4910; 
0x0000000000473a16: xchg dword ptr [rax + 0x48000000], esp; cmp dword ptr [rax + 0x30], 0; je 0x73a28; ret; 
0x0000000000470923: xchg dword ptr [rax - 0x74fffff8], ecx; pop rdx; or byte ptr [rax - 0x7d], cl; ret 0x8d08; 
0x000000000040f4f3: xchg dword ptr [rax - 0x76fffff5], ecx; ret 0xc083; 
0x0000000000414ae5: xchg dword ptr [rax - 0x76ffffff], ebp; ret 0xc083; 
0x0000000000497540: xchg dword ptr [rax - 0x77], ecx; ret 0xc148; 
0x0000000000478eb7: xchg dword ptr [rax], esp; ret; 
0x0000000000478eb6: xchg dword ptr [rax], r12d; ret; 
0x00000000004759a6: xchg dword ptr [rbp + 0x31], eax; sal byte ptr [rcx], cl; ror byte ptr [rcx + rcx*4 - 0x39], cl; mov eax, 0xca; syscall; 
0x0000000000447ae7: xchg dword ptr [rbp + 0xf000000], ebx; adc dword ptr [rdi + rdx - 0x10], eax; movups xmmword ptr [rdi], xmm0; ret; 
0x000000000044fa4e: xchg dword ptr [rbp + rdi*8 - 0xf760001], esi; ret; 
0x0000000000475f39: xchg dword ptr [rbx], ecx; add eax, 0x3c2ee800; add byte ptr [rax], al; mov dword ptr [rip + 0x50b80], eax; add rsp, 8; ret; 
0x000000000041080a: xchg dword ptr [rcx + 0xf000000], edx; mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x8901; 
0x000000000044726f: xchg dword ptr [rcx + 1], ebx; add byte ptr [rax], al; vmovdqu64 zmm17, zmmword ptr [rsi + rdx - 0x40]; vmovdqu64 zmmword ptr [rdi], zmm16; vmovdqu64 zmmword ptr [rdi + rdx - 0x40], zmm17; ret; 
0x000000000044b1ec: xchg dword ptr [rcx + rax], ebx; add byte ptr [rax], al; vmovdqu64 ymm17, ymmword ptr [rsi + rdx - 0x20]; vmovdqu64 ymmword ptr [rdi], ymm16; vmovdqu64 ymmword ptr [rdi + rdx - 0x20], ymm17; ret; 
0x00000000004713cc: xchg dword ptr [rcx - 0x76fffff9], edi; ret 0xc083; 
0x0000000000454354: xchg dword ptr [rdi + 0x49000000], edx; cmp ecx, ecx; jbe 0x5437d; ret; 
0x000000000040fa44: xchg dword ptr [rdi + 0xffffff5], esp; mov dh, 0x4a; add cl, byte ptr [rax - 0x7d]; ret 0x8302; 
0x000000000046c5ae: xchg dword ptr [rdi], eax; cmp eax, 1; jg 0x6c5c0; ret; 
0x0000000000475a38: xchg dword ptr [rdi], edx; cmp edx, 1; jg 0x75a88; nop; add rsp, 0x18; ret; 
0x0000000000475b54: xchg dword ptr [rdi], edx; cmp edx, 1; jg 0x75bb0; nop; add rsp, 0x18; ret; 
0x0000000000470379: xchg dword ptr [rdx - 0x76fffff2], ebp; ret 0xc083; 
0x00000000004885fb: xchg dword ptr [rip + 0x43cdf], eax; cmp eax, 1; jg 0x88638; pop rbp; ret; 
0x000000000046660b: xchg dword ptr [rip + 0x661ef], eax; cmp eax, 1; jg 0x66638; xor eax, eax; add rsp, 8; ret; 
0x0000000000419f60: xchg dword ptr [rip + 0xae24a], eax; cmp eax, 1; jg 0x19f70; ret; 
0x0000000000417ad8: xchg dword ptr [rip + 0xb06d2], eax; cmp eax, 1; jg 0x17b20; add rsp, 8; ret; 
0x000000000040ecf6: xchg dword ptr [rip - 0x76ffffeb], eax; ret 0xc083; 
0x000000000040ef5d: xchg dword ptr [rsi - 0x76ffffee], esi; ret 0xc083; 
0x0000000000410144: xchg dword ptr [rsi - 0x76ffffff], ecx; ret 0xc083; 
0x0000000000422c85: xchg dword ptr [rsi], ebp; add al, byte ptr [rax]; cmove rax, rdx; ret; 
0x000000000047cce2: xchg dword ptr [rsi], ebx; add eax, dword ptr [rax]; add cl, ch; ret 0xfff2; 
0x000000000047c59e: xchg eax, eax; add byte ptr [rax], al; add dh, dh; ret 0x7404; 
0x00000000004514b7: xchg eax, ebp; add byte ptr [rax], al; add byte ptr [rcx - 0x75], cl; jge 0x514bf; call rbx; 
0x0000000000457c54: xchg eax, ebp; cli; jmp qword ptr [rsi + 0xf]; 
0x00000000004933dc: xchg eax, ebp; cmp ah, 0xff; jmp qword ptr [rsi + 0xf]; 
0x00000000004939b7: xchg eax, ebp; cmp dh, 0xff; jmp qword ptr [rsi + 0xf]; 
0x000000000048ed77: xchg eax, ebp; in al, 0xfe; dec dword ptr [rax - 0x77]; ret; 
0x0000000000455721: xchg eax, ebp; lock add eax, dword ptr [rax]; add dh, dh; ret 0x7402; 
0x000000000041b0c8: xchg eax, ebp; mov byte ptr [rbp + 0x31], 0xd2; shl esi, 7; xor sil, 0x81; syscall; 
0x0000000000422e13: xchg eax, ebp; or al, byte ptr [rax]; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x000000000041dd41: xchg eax, ebp; ret 0x2948; 
0x000000000041f936: xchg eax, ebp; ret 0x294c; 
0x00000000004507b4: xchg eax, ebp; ret 0x3948; 
0x0000000000455463: xchg eax, ebp; ret 0x8348; 
0x00000000004541da: xchg eax, ebp; ret 0x894c; 
0x000000000045b02b: xchg eax, ebp; ret 0x8d47; 
0x0000000000455b9f: xchg eax, ebp; ret 0x8d48; 
0x000000000041b2bf: xchg eax, ebp; ret 0xc231; 
0x000000000048f2eb: xchg eax, ebp; ret 0xc931; 
0x000000000041f628: xchg eax, ebp; ret 0xe083; 
0x00000000004542f3: xchg eax, ebp; ret; 
0x000000000048c3e1: xchg eax, ebp; ror byte ptr [rcx + 0x3ff4705], 0; add rsp, 0x18; ret; 
0x000000000045c591: xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x1676; 
0x000000000045d43e: xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x1776; 
0x000000000045f085: xchg eax, ebp; ror byte ptr [rdi], 0xb6; ror byte ptr [rax - 0x7d], 0xc0; add ecx, dword ptr [rax + 0x39]; ret 0x876; 
0x00000000004130a8: xchg eax, ebx; add byte ptr [rax], al; add byte ptr [rax - 0x77], cl; ret 0x294c; 
0x0000000000475669: xchg eax, ebx; add dword ptr [rax], eax; add byte ptr [rbx + 0x5e7421f8], al; mov eax, 0x16; ret; 
0x0000000000480221: xchg eax, ebx; add eax, dword ptr [rax]; add byte ptr [rcx - 0x73], al; push rax; add dword ptr [rcx - 0x6efa09f0], ecx; ret; 
0x000000000044c28a: xchg eax, ebx; leave; bzhi ecx, ecx, eax; jne 0x4c231; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044c24a: xchg eax, ebx; leave; bzhi ecx, ecx, eax; jne 0x4c231; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044b114: xchg eax, ebx; leave; test ecx, ecx; jne 0x4afe4; ret; 
0x000000000044afdd: xchg eax, ebx; leave; test ecx, ecx; jne 0x4afea; ret; 
0x0000000000422236: xchg eax, ebx; movabs eax, dword ptr [0x3e1e158d4810000a]; add al, byte ptr [rax]; lea rax, [rip + 0x23d67]; cmovne rax, rdx; ret; 
0x00000000004129f5: xchg eax, ebx; nop; add byte ptr [rax], al; add byte ptr [rcx + 1], cl; ret; 
0x0000000000423023: xchg eax, ebx; or al, byte ptr [rax]; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x0000000000484255: xchg eax, ebx; pop rax; add al, 0; add cl, ch; ret 0xffef; 
0x0000000000491ebf: xchg eax, ebx; pop rax; add dword ptr [rax], eax; add byte ptr [rax - 0x80], al; call qword ptr [rcx]; 
0x000000000044db59: xchg eax, ebx; ret 0xc085; 
0x0000000000465b2c: xchg eax, ebx; ret 0xd008; 
0x000000000044db61: xchg eax, ebx; ret; 
0x000000000044bc20: xchg eax, ebx; rol ah, 0xc2; jp 0x4bc1d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000044dc80: xchg eax, ebx; rol ah, 0xc2; jp 0x4dc7d; rol byte ptr [rbp - 0xca68b40], 0xf; mov esp, 0xc80148c0; ret; 
0x000000000044b004: xchg eax, ebx; rol byte ptr [rbp + 0x622675c0], 0xb2; and byte ptr gs:[rsi], ah; ret; 
0x0000000000479334: xchg eax, ebx; rol byte ptr [rbp - 0x3ac98a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044dd87: xchg eax, ebx; rol byte ptr [rbp - 0x3acc8a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044db51: xchg eax, ebx; rol byte ptr [rbp - 0x3ad68a40], 0xfb; xchg eax, ebx; ret 0xc085; 
0x000000000044c49d: xchg eax, ebx; rol byte ptr [rbp - 0xc828b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000044bc01: xchg eax, ebx; rol byte ptr [rbp - 0xc868b40], 0xf; mov esp, 0xf80148c0; ret; 
0x000000000044ad84: xchg eax, ebx; rol ch, 0xf8; ja 0x4ad0f; sal byte ptr [rbp + 0x33], 0x83; ret 0xf40; 
0x0000000000478fbc: xchg eax, ebx; rol ch, 0xf8; ja 0x78f47; sal byte ptr [rbp + 0x2b], 0x83; ret 0xf10; 
0x000000000044d0bf: xchg eax, ebx; sal bl, 0x48; bsf eax, eax; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d8a6: xchg eax, ebx; sal bl, 0xf; mov esp, 0x72c639c0; sub rdi, rdx; lea rax, [rdi + rax + 0x80]; ret; 
0x000000000044db0b: xchg eax, ebx; sal bl, 0xf; mov esp, 0x76c239c0; sbb al, 0x48; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000041080b: xchg eax, ecx; add byte ptr [rax], al; add byte ptr [rdi], cl; mov dh, 0x72; add dword ptr [rax - 0x7d], ecx; ret 0x8901; 
0x000000000047218b: xchg eax, ecx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8904; 
0x0000000000491455: xchg eax, ecx; add edi, esi; inc dword ptr [rbx - 0x72b7fe15]; push rdi; add ecx, dword ptr [rax + 0x63]; ret; 
0x000000000043d2e1: xchg eax, ecx; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x0000000000423203: xchg eax, ecx; or al, byte ptr [rax]; add dh, byte ptr [rdi + rax*2 - 0xa]; ret 0x7520; 
0x000000000048022e: xchg eax, ecx; ret; 
0x000000000043736a: xchg eax, ecx; sar ch, 0xff; jmp qword ptr [rdx - 0xf]; 
0x000000000043ba0f: xchg eax, ecx; sub eax, edx; ret; 
0x000000000041e911: xchg eax, edi; add al, byte ptr [rax]; add byte ptr [rax - 0x77], cl; ret 0x8d4c; 
0x0000000000454355: xchg eax, edi; add byte ptr [rax], al; add byte ptr [rcx + 0x39], cl; leave; jbe 0x5437d; ret; 
0x000000000045acd4: xchg eax, edi; cli; jmp qword ptr [rsi + 0xf]; 
0x000000000041205e: xchg eax, edi; fadd dword ptr [rax]; add byte ptr [rax], al; mov rdx, qword ptr [rdi + 0xa0]; mov qword ptr [rdx + 0xe0], rcx; ret; 
0x000000000047c592: xchg eax, edi; lock add eax, dword ptr [rax]; add dh, dh; ret 0x7402; 
0x0000000000412065: xchg eax, edi; movabs al, byte ptr [0xe08a8948000000]; add byte ptr [rax], al; ret; 
0x000000000048060d: xchg eax, edi; ret 4; 
0x0000000000474922: xchg eax, edx; je 0x7492a; cmp eax, -0x4b; jne 0x74910; neg eax; ret; 
0x000000000043e957: xchg eax, edx; lea rcx, [rip + 0x61781]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000043d2d7: xchg eax, edx; lea rcx, [rip + 0x62e01]; mov edx, dword ptr [rcx + rdx*4]; mov eax, dword ptr [rcx + rax*4]; sub eax, edx; ret; 
0x000000000044bade: xchg eax, edx; leave; vmovdqu8 ymmword ptr [rax] {k1}, ymm16; ret; 
0x0000000000447ee1: xchg eax, edx; leave; vmovdqu8 zmmword ptr [rax] {k1}, zmm16; ret; 
0x000000000040d93a: xchg eax, edx; ret 0x3948; 
0x0000000000486cd9: xchg eax, edx; ret 0x8948; 
0x000000000048af97: xchg eax, edx; ret 0xce89; 
0x00000000004460f8: xchg eax, edx; ret 0xf40; 
0x00000000004764ca: xchg eax, edx; stosd dword ptr [rdi], eax; clc; lcall [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000042a0bc: xchg eax, edx; sub eax, edx; ret; 
0x0000000000416b9f: xchg eax, esi; add byte ptr [rax], 0; add byte ptr [rax - 0x77], cl; ret 0xffb8; 
0x0000000000432fe3: xchg eax, esi; add byte ptr [rax], al; add byte ptr [rax - 0x7f], cl; ret 0x80; 
0x000000000041828f: xchg eax, esi; movzx eax, byte ptr [rdx]; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000048bbfd: xchg eax, esi; rol byte ptr [rdx], 0; add byte ptr [rcx + 0x248b4ce8], cl; ret 0xf41; 
0x00000000004152e6: xchg eax, esi; sbb cl, byte ptr [rbx]; add byte ptr [rbx + 0xc08d], cl; add byte ptr [rbp + 0x4f0f48c9], al; ret 0x8948; 
0x000000000043d546: xchg eax, esi; sub eax, dword ptr [rsi]; add byte ptr [rbx + 0x148b8104], cl; xchg eax, ecx; sub eax, edx; ret; 
0x000000000045e968: xchg eax, esp; add byte ptr [rax], al; add byte ptr [rcx + 0x3948fc51], cl; ret; 
0x000000000045f3ad: xchg eax, esp; and al, 0x80; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret; 
0x0000000000418676: xchg eax, esp; nop word ptr [rax + rax]; endbr64; mov eax, 0xffffffff; ret; 
0x0000000000450885: xchg eax, esp; ret 0x3948; 
0x000000000046aa53: xchg eax, esp; ret 0x894c; 
0x0000000000455b7e: xchg eax, esp; ret 0x8d48; 
0x0000000000471858: xchg eax, esp; ret 0xca08; 
0x0000000000411c87: xchg eax, esp; ret 0xd008; 
0x000000000046296f: xchg eax, esp; ret 0xd108; 
0x0000000000488f7b: xchg eax, esp; ret 0xde89; 
0x0000000000489901: xchg eax, esp; ret 0xf631; 
0x0000000000457d85: xchg eax, esp; ret 0xf739; 
0x000000000048d231: xchg eax, esp; ret 0xf883; 
0x00000000004018e7: xchg eax, esp; ret; 
0x0000000000479d7f: xchg eax, esp; std; jmp qword ptr [rsi + 0x2e]; 
0x000000000040bd52: xchg edi, edi; jmp qword ptr [rsi + 0x66]; 
0x000000000048bd33: xchg edi, esi; jmp qword ptr [rsi + 0x2e]; 
0x0000000000460879: xchg esi, esp; add byte ptr [rax], al; add byte ptr [rax + 0x39], cl; ret 0x3676; 
0x0000000000475a3e: xchg rax, r8; add rsp, 0x18; ret; 
0x00000000004883ea: xend; xor eax, eax; ret; 
0x000000000044f24f: xlatb; add eax, 0x21; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043f984: xlatb; add eax, 0x21; add rax, rdi; vzeroupper; ret; 
0x000000000044f35d: xlatb; add eax, 0x41; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa5d: xlatb; add eax, 0x41; add rax, rdi; vzeroupper; ret; 
0x000000000044f2f9: xlatb; add eax, 0x61; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043fa09: xlatb; add eax, 0x61; add rax, rdi; vzeroupper; ret; 
0x0000000000478605: xlatb; add edi, 0x21; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6b5: xlatb; add edi, 0x21; add eax, edi; vzeroupper; ret; 
0x0000000000478625: xlatb; add edi, 0x41; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6c5: xlatb; add edi, 0x41; add eax, edi; vzeroupper; ret; 
0x0000000000478645: xlatb; add edi, 0x61; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6d5: xlatb; add edi, 0x61; add eax, edi; vzeroupper; ret; 
0x0000000000477809: xlatb; and ch, 4; lea rdx, [rip + 0x64c]; lea rax, [rip + 0x295]; cmove rax, rdx; ret; 
0x00000000004232f9: xlatb; and ch, 4; lea rdx, [rip + 0x7b4c]; lea rax, [rip + 0x7655]; cmove rax, rdx; ret; 
0x0000000000422cd9: xlatb; and ch, 4; lea rdx, [rip + 0x7e9c]; lea rax, [rip + 0x7945]; cmove rax, rdx; ret; 
0x00000000004932fb: xlatb; cmp dl, 0xff; dec dword ptr [rax - 0x7d]; ret 0x4c01; 
0x0000000000466d57: xlatb; cmp rax, 9; ja 0x66d30; mov rax, r8; ret; 
0x0000000000422285: xlatb; in eax, dx; std; lcall [rdx + 0x31]; rcr byte ptr [rbp + 0x41], 0x5c; ret; 
0x000000000044f2aa: xlatb; inc eax; add rax, rdi; shr rax, 2; vzeroupper; ret; 
0x000000000043f9ba: xlatb; inc eax; add rax, rdi; vzeroupper; ret; 
0x000000000042b5d0: xlatb; inc ecx; jne 0x2b500; vzeroupper; ret; 
0x00000000004785e5: xlatb; inc edi; add eax, edi; shr eax, 2; vzeroupper; ret; 
0x000000000043f6a5: xlatb; inc edi; add eax, edi; vzeroupper; ret; 
0x000000000042b489: xlatb; iretd; inc ecx; jne 0x2b503; vzeroupper; ret; 
0x00000000004464dc: xlatb; jb 0x464e2; rep movsb byte ptr [rdi], byte ptr [rsi]; ret; 
0x000000000040f67b: xlatb; jmp rdx; 
0x000000000043361b: xlatb; lddqu xmm0, xmmword ptr [rsi - 0x19]; lddqu xmm1, xmmword ptr [rsi - 0x10]; movdqu xmmword ptr [rdi - 0x19], xmm0; movdqu xmmword ptr [rdi - 0x10], xmm1; ret; 
0x000000000044cfb5: xlatb; lea eax, [rdi + rax + 0x20]; ret; 
0x000000000044cfc5: xlatb; lea eax, [rdi + rax + 0x40]; ret; 
0x000000000044cfd5: xlatb; lea eax, [rdi + rax + 0x60]; ret; 
0x000000000044cfe5: xlatb; lea eax, [rdi + rax + 0x80]; ret; 
0x000000000044d866: xlatb; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044d834: xlatb; lea rax, [rdi + rax + 0x40]; ret; 
0x000000000044d8ed: xlatb; lea rax, [rdi + rax + 0x60]; ret; 
0x000000000044d8b2: xlatb; lea rax, [rdi + rax + 0x80]; ret; 
0x0000000000476fa7: xlatb; ret 0x94c; 
0x000000000042a6ff: xlatb; ret 0xc085; 
0x000000000042b3f8: xlatb; ret 0xc0ff; 
0x0000000000424880: xlatb; ret 0xc148; 
0x000000000043f2e8: xlatb; ret 0xf66; 
0x000000000042b73e: xlatb; ret 0xff2d; 
0x000000000042a714: xlatb; ret; 
0x00000000004770f9: xlatb; retf 0xfdc5; xlatb; ret; 
0x000000000042aaf1: xlatb; rol byte ptr [rbp + 0x664975c0], 0xf; xlatb; ret 0xc085; 
0x0000000000477155: xlatb; rol ch, cl; std; xlatb; ret; 
0x000000000042a8c3: xlatb; rol dword ptr [rbp + 0x315775c0], 0xc0; ret; 
0x0000000000477d73: xlatb; rol dword ptr [rbp + 0x316775c0], 0xc0; ret; 
0x0000000000477d43: xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042ad52: xlatb; rol dword ptr [rbp - 0x3aa78a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042af6e: xlatb; rol dword ptr [rbp - 0x3ad38a40], 0xfd; xlatb; ret 0xc085; 
0x000000000042a893: xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000043f0b8: xlatb; rol dword ptr [rbp - 0xc9d8b40], 0xf; mov esp, 0xf80148c0; vzeroupper; ret; 
0x000000000043f683: xlatb; rol dword ptr [rbp - 0xca88b40], 0xf; mov esp, 0x77f8c5c0; ret; 
0x00000000004440ea: xlatb; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000424766: xlatb; sal bh, 1; ret 0x8000; 
0x0000000000424626: xlatb; sal bh, 1; ret 0xc000; 
0x00000000004244e6: xlatb; sal bh, 1; ret 0xe000; 
0x00000000004243a6: xlatb; sal bh, 1; ret 0xf000; 
0x0000000000424266: xlatb; sal bh, 1; ret 0xf800; 
0x0000000000424126: xlatb; sal bh, 1; ret 0xfc00; 
0x0000000000423fe6: xlatb; sal bh, 1; ret 0xfe00; 
0x0000000000423ea6: xlatb; sal bh, 1; ret 0xff00; 
0x0000000000423d66: xlatb; sal bh, 1; ret 0xff80; 
0x0000000000423c26: xlatb; sal bh, 1; ret 0xffc0; 
0x0000000000423ae6: xlatb; sal bh, 1; ret 0xffe0; 
0x00000000004239a6: xlatb; sal bh, 1; ret 0xfff0; 
0x0000000000423866: xlatb; sal bh, 1; ret 0xfff8; 
0x0000000000423726: xlatb; sal bh, 1; ret 0xfffc; 
0x00000000004235e6: xlatb; sal bh, 1; ret 0xfffe; 
0x000000000042b632: xlatb; sar edi, 0xc0; jne 0x2b680; vzeroupper; ret; 
0x0000000000478cc5: xlatb; sar edi, 2; lea eax, [rdi + rax + 0x10]; ret; 
0x0000000000478cd5: xlatb; sar edi, 2; lea eax, [rdi + rax + 0x18]; ret; 
0x0000000000478ce5: xlatb; sar edi, 2; lea eax, [rdi + rax + 0x20]; ret; 
0x0000000000478cb5: xlatb; sar edi, 2; lea eax, [rdi + rax + 8]; ret; 
0x000000000044f922: xlatb; sar rdi, 2; lea rax, [rdi + rax + 0x10]; ret; 
0x000000000044fa0d: xlatb; sar rdi, 2; lea rax, [rdi + rax + 0x18]; ret; 
0x000000000044f9b2: xlatb; sar rdi, 2; lea rax, [rdi + rax + 0x20]; ret; 
0x000000000044f963: xlatb; sar rdi, 2; lea rax, [rdi + rax + 8]; ret; 
0x00000000004440e6: xlatb; shl byte ptr [rsi + 0xf], 0xd7; ror dword ptr [rcx], cl; ret 0xe074; 
0x0000000000476f56: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret 0xf66; 
0x0000000000476f45: xlatb; shl byte ptr [rsi + 0xf], 1; outsd dx, dword ptr [rsi]; ret; 
0x000000000042ad1c: xlatb; shl dword ptr [rsi - 0x70], 0x85; sal byte ptr [rbp + 0x5c], 0x83; ret 0xf40; 
0x000000000042b98c: xlatb; shl dword ptr [rsi - 1], 0xc0; jne 0x2b903; ret; 
0x000000000044d863: xlatb; sub rdi, rdx; lea rax, [rdi + rax + 0x20]; ret; 
0x0000000000477827: xlatb; test esi, esi; lea rdx, [rip + 0x15cf]; lea rax, [rip + 0x18c8]; cmove rax, rdx; ret; 
0x0000000000422cf7: xlatb; test esi, esi; lea rdx, [rip + 0x27edf]; lea rax, [rip + 0x2ac38]; cmove rax, rdx; ret; 
0x0000000000423317: xlatb; test esi, esi; lea rdx, [rip + 0x288bf]; lea rax, [rip + 0x2a918]; cmove rax, rdx; ret; 
0x000000000044dd7d: xor ah, byte ptr [rdx - 0x4d]; and byte ptr [r15], r15b; ret 0xc500; 
0x00000000004472fa: xor al, 0x16; mov dword ptr [rdi], ecx; mov dword ptr [rdi + rdx], esi; ret; 
0x00000000004472ff: xor al, 0x17; ret; 
0x000000000040420e: xor al, 0x19; mov qword ptr [rsi + 8], rax; mov eax, 0x9e; mov qword ptr [rsi], rsi; mov qword ptr [rsi + 0x10], rsi; syscall; 
0x0000000000476cc3: xor al, 0x24; pop r12; pop r13; pop r14; ret; 
0x000000000046a6e3: xor al, 0x29; ret 0x8341; 
0x000000000046559c: xor al, 0x38; nop; mov rdx, rbp; mov rsi, r12; mov rdi, r13; call rbx; 
0x0000000000456b88: xor al, 0x44; std; inc dword ptr [rbp - 0x7f4c8a40]; or eax, 0x759e9; or al, 0x5b; ret; 
0x0000000000488084: xor al, 0xb8; add dword ptr [rax], eax; add byte ptr [rax], al; mov qword ptr [rsi], rdx; ret; 
0x00000000004114eb: xor al, 0xbe; add dword ptr [rax], eax; add byte ptr [rax], al; mov rdi, rbx; call rax; 
0x000000000042af7b: xor al, 0xc5; std; xlatb; ret; 
0x0000000000493dc1: xor al, 0xcc; mov rdx, qword ptr [rbx]; mov rax, qword ptr [rsp]; mov rdi, r15; mov rsi, qword ptr [r14]; call rax; 
0x000000000044c447: xor al, 2; jne 0x4c3d9; add rax, rdx; ret; 
0x000000000043f063: xor al, 2; lea rax, [rdx + rax]; cmovne rax, rcx; vzeroupper; ret; 
0x000000000043ee48: xor al, 7; jne 0x3ee75; add rax, rdi; vzeroupper; ret; 
0x000000000043efe2: xor al, 7; jne 0x3f005; add rax, rdi; vzeroupper; ret; 
0x000000000044c3e6: xor al, 7; jne 0x4c3d9; lea rax, [rdi + rax]; ret; 
0x0000000000478e2d: xor al, byte ptr [rbp - 0x357bf040]; add byte ptr [rax], al; add bl, dh; bsf eax, eax; lea rax, [rdi + rax*4]; ret; 
0x0000000000497027: xor al, ch; ret; 
0x000000000042a81d: xor byte ptr [r14 + 0xf], r12b; xlatb; ret; 
0x0000000000477d3f: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042a88f: xor byte ptr [r14 + 0xf], r12b; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x00000000004190de: xor byte ptr [r15], cl; adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x00000000004180a3: xor byte ptr [r8 - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000472685: xor byte ptr [r9 - 0x75], cl; add byte ptr [rcx + 0x39], cl; ret; 
0x0000000000490b4a: xor byte ptr [rax + 0x21], cl; ret 0x8949; 
0x000000000045087b: xor byte ptr [rax + 0x39], cl; or byte ptr [rax - 0x75], cl; je 0x508a7; sub byte ptr [rdi], cl; xchg eax, esp; ret 0x3948; 
0x0000000000470a01: xor byte ptr [rax + 0x39], cl; ret 0x850f; 
0x000000000045495c: xor byte ptr [rax + 0x39], cl; ret; 
0x000000000043fedf: xor byte ptr [rax - 0x77], cl; add cl, byte ptr [rax - 0x7d]; ret 0x4808; 
0x0000000000450dd3: xor byte ptr [rax - 0x77], cl; and al, 0x20; cmp esi, 9; je 0x50e08; mov eax, 0x48; syscall; 
0x00000000004180a4: xor byte ptr [rax - 0x77], cl; and byte ptr [r9], sil; ror byte ptr [rax - 0x7d], 0xc4; or byte ptr [rbx + 0x5d], bl; ret; 
0x0000000000484c4c: xor byte ptr [rax - 0x77], cl; fmul qword ptr [rax - 0x75]; sbb al, 0x24; add rsp, 0x30; ret; 
0x00000000004881e7: xor byte ptr [rax - 0x77], cl; or byte ptr [rax + 2], r15b; ret; 
0x000000000046403b: xor byte ptr [rax - 0x77], cl; ret; 
0x00000000004881c7: xor byte ptr [rax - 0x7b], cl; sal byte ptr [rbp + 0x73], cl; mov dword ptr [rdi], 0; mov eax, 2; ret; 
0x0000000000403091: xor byte ptr [rax], al; add byte ptr [rax + 0x9e], bh; syscall; 
0x0000000000481703: xor byte ptr [rax], al; add byte ptr [rax], al; mov qword ptr [rsp + 0x18], rax; call 0x80f90; add rsp, 0xd8; ret; 
0x0000000000473a1e: xor byte ptr [rax], al; je 0x73a28; ret; 
0x0000000000419169: xor byte ptr [rbp + 0x14], 0x5d; ret; 
0x000000000044c210: xor byte ptr [rbp + 0x1e], dh; ret; 
0x000000000041b8f5: xor byte ptr [rbp + 1], cl; pop rdx; adc byte ptr [rax + 1], cl; ret 0x349; 
0x00000000004231dc: xor byte ptr [rbp + 2], dl; add byte ptr [rax - 0x73], cl; add eax, 0x25599; cmove rax, rdx; ret; 
0x0000000000409f36: xor byte ptr [rbx + 0x5d], bl; pop r12; pop r13; pop r14; ret; 
0x0000000000490c08: xor byte ptr [rbx + 0x5d], bl; pop r12; ret; 
0x000000000041927e: xor byte ptr [rbx - 0x408a0008], al; add rsp, 8; pop rbx; pop rbp; ret; 
0x0000000000472185: xor byte ptr [rbx - 0x79f0f608], al; xchg eax, ecx; add eax, dword ptr [rax]; add byte ptr [rax - 0x7d], cl; ret 0x8904; 
0x000000000046c2ab: xor byte ptr [rbx - 0x7cb7fb8e], cl; ret 0x4804; 
0x0000000000473a7d: xor byte ptr [rcx + 0x5d5b7453], cl; pop r12; ret; 
0x0000000000451a8a: xor byte ptr [rcx + rcx*4 - 9], cl; mov rax, qword ptr [rbp - 0x58]; mov r15d, r13d; call rax; 
0x0000000000472686: xor byte ptr [rcx - 0x75], cl; add byte ptr [rcx + 0x39], cl; ret; 
0x000000000040d98f: xor byte ptr [rcx - 0x77], cl; ret; 
0x0000000000466f8b: xor byte ptr [rcx - 0x77], cl; ror byte ptr [rax - 0x75], 0x43; sbb byte ptr [rax + 0x2b], cl; sub byte ptr [r9 + r9*4 + 4], cl; ret 0x8b4c; 
0x0000000000446739: xor byte ptr [rdi + rcx + 0x11], al; cmp r14b, al; ret; 
0x00000000004190df: xor byte ptr [rdi], cl; adc dword ptr [rcx + 0x40], eax; mov qword ptr [rax + 0xa8], 0; ret; 
0x000000000044661a: xor byte ptr [rdi], cl; adc dword ptr [rdi + rdx - 0x10], esp; movups xmmword ptr [rdi + rdx - 0x20], xmm5; movups xmmword ptr [rdi + rdx - 0x30], xmm6; movups xmmword ptr [rdi + rdx - 0x40], xmm7; ret; 
0x00000000004466be: xor byte ptr [rdi], cl; adc dword ptr [rdx + 0x20], esi; movups xmmword ptr [rdx + 0x10], xmm7; movups xmmword ptr [rdx], xmm8; movups xmmword ptr [rcx], xmm0; ret; 
0x000000000046fdfc: xor byte ptr [rdi], cl; add byte ptr [rax], al; mov rdx, r14; mov rsi, r15; mov rdi, r12; call qword ptr [rbx + 0x38]; 
0x0000000000477a1c: xor byte ptr [rdx + 1], ch; mov rdi, qword ptr [r13]; push 0; lea rcx, [rax + 1]; lea r9, [rsp + 0x38]; call rbx; 
0x0000000000474783: xor byte ptr [rdx + 9], 0; add byte ptr [rax], al; ret; 
0x000000000045414d: xor byte ptr [rip - 0x412dcead], al; and byte ptr [rax], al; add byte ptr [rax], al; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000476f0c: xor byte ptr [rsi + 0xf], ah; outsd dx, dword ptr [rsi]; ret; 
0x000000000042a81e: xor byte ptr [rsi + 0xf], ah; xlatb; ret; 
0x0000000000477d40: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x2c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x000000000042a890: xor byte ptr [rsi + 0xf], ah; xlatb; rol dword ptr [rbp - 0x5c7af040], 0; add byte ptr [rax], al; xor eax, eax; ret; 
0x0000000000470952: xor cl, byte ptr [rax - 0x77]; ror dword ptr [rax - 0x7d], cl; ret 0x4104; 
0x000000000047bdd6: xor cl, byte ptr [rax - 0x7d]; ret 0x4838; 
0x0000000000493130: xor cl, byte ptr [rax]; jne 0x1612; mov rax, qword ptr [rax]; ret; 
0x000000000041af1a: xor cl, byte ptr [rbx + rax]; mov edx, r12d; mov esi, ebp; mov edi, eax; mov eax, 0xea; syscall; 
0x000000000041aacb: xor dh, 0x80; syscall; 
0x000000000041b205: xor dh, 0x81; mov eax, 0xca; syscall; 
0x000000000041b0d1: xor dh, 0x81; syscall; 
0x000000000041ab35: xor dh, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000041ab35: xor dh, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x00000000004759a4: xor dh, 0x87; xor r10d, r10d; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000048faaa: xor dl, byte ptr [rbx - 4]; jmp qword ptr [rsi - 0x70]; 
0x0000000000412527: xor dword ptr [rax + 0x63], ecx; ror dword ptr [rcx + rcx*4 - 0x12], cl; mov rdi, r15; call qword ptr [rbp + 0x38]; 
0x000000000041f241: xor dword ptr [rax], ecx; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000453df6: xor dword ptr [rax], edx; jae 0x53dad; xor eax, eax; ret; 
0x0000000000453df5: xor dword ptr [rax], r10d; jae 0x53dad; xor eax, eax; ret; 
0x00000000004505d6: xor dword ptr [rcx + rcx*4 - 0x39], eax; mov qword ptr [rsp + 8], rax; call 0x74770; mov rax, qword ptr [rsp + 8]; add rsp, 0x28; ret; 
0x0000000000464bce: xor dword ptr [rcx], edi; ret 0x820f; 
0x0000000000423257: xor dword ptr [rdx], eax; add byte ptr [rax - 0x73], cl; add eax, 0x232df; cmove rax, rdx; ret; 
0x0000000000422167: xor eax, 0x48000029; cmovne eax, edx; ret; 
0x00000000004221e7: xor eax, 0x480001de; cmovne eax, edx; ret; 
0x000000000041ae5e: xor eax, 0x7fb1d; syscall; 
0x000000000041aceb: xor eax, 0x7fc90; mov eax, 0xe; syscall; 
0x00000000004926c5: xor eax, 0x89480000; ret; 
0x000000000046c382: xor eax, 0x8c48348; mov eax, r12d; pop rbx; pop r12; ret; 
0x0000000000422e67: xor eax, 0x8d480002; add eax, 0x236cf; cmove rax, rdx; ret; 
0x000000000040ac6c: xor eax, 0x8e2ff; lea rdi, [rip + 0x8e305]; call 0x44c0; xor eax, eax; ret; 
0x000000000045cb52: xor eax, 0xf7000004; ret 0; 
0x0000000000407a1e: xor eax, dword ptr [rax]; add cl, al; cli; add al, byte ptr [rcx - 0xccc1e]; inc dword ptr [rcx]; ret 0xd089; 
0x0000000000423077: xor eax, dword ptr [rdx]; add byte ptr [rax - 0x73], cl; add eax, 0x2347f; cmove rax, rdx; ret; 
0x0000000000475325: xor eax, eax; add rsp, 0x10; pop rbx; ret; 
0x000000000049404e: xor eax, eax; add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000041786c: xor eax, eax; add rsp, 0x18; pop rbx; pop rbp; ret; 
0x00000000004180a9: xor eax, eax; add rsp, 8; pop rbx; pop rbp; ret; 
0x000000000041fa18: xor eax, eax; add rsp, 8; ret; 
0x0000000000452ace: xor eax, eax; and ecx, 2; jne 0x52b00; xor r8d, r8d; mov eax, 0x19; syscall; 
0x000000000045735b: xor eax, eax; call rbx; 
0x000000000048c3d9: xor eax, eax; cmp dword ptr [rsp + 0xc], 1; setne al; mov dword ptr [rip + 0x3ff47], eax; add rsp, 0x18; ret; 
0x0000000000450e66: xor eax, eax; cmp esi, 9; je 0x50e98; mov eax, 0x48; syscall; 
0x000000000041a9bf: xor eax, eax; cmp rdx, rdi; setae al; ret; 
0x000000000046513d: xor eax, eax; mov dword ptr [rbx + 0x40], esi; pop rbx; ret; 
0x0000000000473baf: xor eax, eax; mov dword ptr [rbx], ecx; pop rbx; ret; 
0x0000000000452ad6: xor eax, eax; mov eax, 0x19; syscall; 
0x0000000000479be5: xor eax, eax; mov eax, r8d; ret; 
0x0000000000488370: xor eax, eax; mov edx, 1; lock cmpxchg dword ptr [rdi], edx; jne 0x883b3; xor eax, eax; ret; 
0x0000000000474997: xor eax, eax; mov r10, rcx; mov edx, r13d; mov eax, 0xca; syscall; 
0x000000000040ac85: xor eax, eax; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000044eb76: xor eax, eax; mov rcx, r12; call rbx; 
0x0000000000414674: xor eax, eax; mov rcx, r14; mov rsi, r13; mov rdi, r15; call rbx; 
0x000000000044ed05: xor eax, eax; mov rdi, rbp; call rbx; 
0x000000000044e142: xor eax, eax; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x0000000000479e8e: xor eax, eax; mov rdx, rsp; mov eax, 0x10; syscall; 
0x000000000045277c: xor eax, eax; mov rdx, rsp; mov eax, 0xcc; syscall; 
0x0000000000458709: xor eax, eax; pop rbp; pop r12; pop r13; pop r14; ret; 
0x0000000000420c44: xor eax, eax; pop rbp; pop r12; pop r13; ret; 
0x0000000000407f00: xor eax, eax; pop rbp; pop r12; ret; 
0x0000000000413f00: xor eax, eax; pop rbx; pop rbp; pop r12; pop r13; ret; 
0x0000000000402369: xor eax, eax; pop rbx; pop rbp; pop r12; ret; 
0x000000000041b21f: xor eax, eax; pop rbx; pop rbp; ret; 
0x0000000000401967: xor eax, eax; pop rbx; ret; 
0x000000000041523f: xor eax, eax; punpcklqdq xmm0, xmm0; movups xmmword ptr [rbx + 8], xmm0; pop rbx; ret; 
0x000000000040237e: xor eax, eax; ret; 
0x0000000000424a8e: xor eax, eax; sub eax, ecx; ret; 
0x0000000000450528: xor eax, eax; syscall; 
0x0000000000450f94: xor eax, eax; syscall; cmp rax, -0x1000; ja 0x50fa8; ret; 
0x0000000000490a79: xor eax, eax; test edi, edi; jne 0x909ac; add rsp, 0x38; ret; 
0x000000000041afa1: xor eax, eax; test edx, edx; setne al; mov dword ptr [rdi + 0x1c], eax; xor eax, eax; ret; 
0x0000000000416b34: xor eax, eax; test rdx, rdx; jne 0x16b40; ret; 
0x00000000004809c5: xor eax, eax; test rsi, rsi; je 0x809cf; mov qword ptr [rsi], rcx; mov rax, r8; ret; 
0x000000000042a4f0: xor eax, eax; vzeroupper; ret; 
0x00000000004885f9: xor eax, eax; xchg dword ptr [rip + 0x43cdf], eax; cmp eax, 1; jg 0x88638; pop rbp; ret; 
0x00000000004573c9: xor eax, eax; xor ecx, ecx; xor edx, edx; push rax; call rbx; 
0x000000000044dd8c: xor eax, ebp; sti; xchg eax, ebx; ret 0xc085; 
0x0000000000476e1f: xor eax, edx; and rax, rcx; je 0x76ff0; bsr rax, rax; add rax, rdi; ret; 
0x00000000004770af: xor eax, edx; and rsi, rax; je 0x76ff0; bsr rax, rsi; add rax, rdi; ret; 
0x0000000000409f96: xor eax, edx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x9f78; ret; 
0x000000000044db5e: xor ebp, eax; sti; xchg eax, ebx; ret; 
0x0000000000470626: xor ebp, ebp; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x0000000000414c36: xor ecx, dword ptr [rax - 0x7d]; ret; 
0x0000000000493d9c: xor ecx, dword ptr [rcx + rcx*4 - 1]; mov rdx, qword ptr [r14]; mov rax, qword ptr [rsp]; mov dword ptr [rsp + 8], ecx; call rax; 
0x0000000000476eb9: xor ecx, eax; and rsi, rcx; je 0x76ff0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x0000000000478e64: xor ecx, ecx; cmp edx, eax; lea rax, [rdi + rax*4]; cmovle rax, rcx; ret; 
0x000000000044ac44: xor ecx, ecx; cmp edx, eax; lea rax, [rdi + rax]; cmovle rax, rcx; ret; 
0x000000000042abe4: xor ecx, ecx; cmp edx, eax; lea rax, [rdi + rax]; cmovle rax, rcx; vzeroupper; ret; 
0x000000000043f05f: xor ecx, ecx; cmp sil, byte ptr [rdx + rax]; lea rax, [rdx + rax]; cmovne rax, rcx; vzeroupper; ret; 
0x0000000000401e1d: xor ecx, ecx; cpuid; lea eax, [rbx + 0x204]; mov qword ptr [rip + 0xca552], rax; pop rbx; ret; 
0x00000000004573cb: xor ecx, ecx; xor edx, edx; push rax; call rbx; 
0x0000000000488696: xor edi, dword ptr [rip + 0x48100004]; lea edx, [rip + 0x11e]; lea rax, [rip + 0x67]; cmovne rax, rdx; ret; 
0x000000000045112e: xor edi, ebx; jmp qword ptr [rsi + 0x2e]; 
0x0000000000490839: xor edi, edi; call 0x54de0; call rax; 
0x00000000004905fd: xor edi, edi; call 0x54de0; nop dword ptr [rax]; call rax; 
0x000000000041ae52: xor edi, edi; mov eax, 0xe; mov rdx, r14; lea rsi, [rip + 0x7fb1d]; syscall; 
0x0000000000401cc0: xor edi, edi; mov eax, edx; syscall; 
0x000000000048d358: xor edi, edi; mov rax, qword ptr [rax + r10*8]; mov rsi, qword ptr [rax + 8]; call 0x54de0; nop word ptr [rax + rax]; ret; 
0x0000000000451000: xor edi, edi; syscall; 
0x0000000000451000: xor edi, edi; syscall; cmp rax, -0x1000; ja 0x51010; ret; 
0x0000000000479db5: xor edx, edx; and eax, 0x410000; cmp eax, 0x410000; je 0x79df0; mov eax, 0x101; syscall; 
0x0000000000469ff3: xor edx, edx; div ecx; add r8d, eax; mov eax, r8d; ret; 
0x0000000000474a8e: xor edx, edx; mov eax, 0xca; syscall; 
0x000000000041b252: xor edx, edx; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000475d9b: xor edx, edx; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041b1fa: xor edx, edx; mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041b5d5: xor edx, edx; mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041ab39: xor edx, edx; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000041ab39: xor edx, edx; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x000000000041ab15: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041ab15: xor edx, edx; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x0000000000475970: xor edx, edx; mov edx, 1; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000041b2de: xor edx, edx; mov edx, 1; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041aabe: xor edx, edx; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000041aa58: xor edx, edx; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000048471b: xor edx, edx; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000454150: xor edx, edx; mov esi, 0x20; mov rdi, rbx; mov eax, 0x14e; syscall; 
0x0000000000475cb9: xor edx, edx; mov esi, 0x80; mov rdi, rbp; mov eax, r8d; syscall; 
0x0000000000450ff7: xor edx, edx; mov esi, edi; mov eax, 0x12e; xor edi, edi; syscall; 
0x0000000000489e81: xor edx, edx; mov qword ptr [rip + 0x3b03e], r9; mov rax, r10; add rsp, 0x28; ret; 
0x00000000004759aa: xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000474deb: xor edx, edx; mov rdi, rbp; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x0000000000475187: xor edx, edx; mov rdi, rbp; mov esi, 7; mov eax, 0xca; syscall; 
0x000000000046fb9b: xor edx, edx; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x0000000000418ddb: xor edx, edx; mov rsi, qword ptr [rsp + 0x10]; mov rdi, qword ptr [rsp + 8]; add rsp, 0x20; pop rbx; jmp rax; 
0x000000000041aea1: xor edx, edx; mov rsi, r14; mov edi, 2; mov eax, 0xe; syscall; 
0x000000000041ad34: xor edx, edx; mov rsi, rbp; mov edi, 2; mov eax, 0xe; syscall; 
0x0000000000418db7: xor edx, edx; pop rbx; jmp rax; 
0x000000000044df09: xor edx, edx; push 1; lea r9, [rsp + 0x20]; call rbx; 
0x00000000004573cd: xor edx, edx; push rax; call rbx; 
0x000000000041b0cb: xor edx, edx; shl esi, 7; xor sil, 0x81; syscall; 
0x00000000004759a8: xor edx, edx; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000475185: xor edx, edx; xor edx, edx; mov rdi, rbp; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000474f20: xor edx, edx; xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x0000000000419696: xor edx, edx; xor esi, esi; mov rdi, rbx; call qword ptr [rcx + 0x58]; 
0x0000000000490835: xor edx, edx; xor esi, esi; xor edi, edi; call 0x54de0; call rax; 
0x00000000004905f9: xor edx, edx; xor esi, esi; xor edi, edi; call 0x54de0; nop dword ptr [rax]; call rax; 
0x00000000004748e7: xor esi, 0x100; or sil, 0x89; xor esi, r8d; xor r8d, r8d; syscall; 
0x00000000004748f2: xor esi, eax; xor r8d, r8d; syscall; 
0x0000000000454aa0: xor esi, esi; lea rdi, [rip + 0x48fe2]; mov eax, 0x15; syscall; 
0x000000000040372a: xor esi, esi; mov edi, 0x3003; mov eax, 0x9e; syscall; 
0x0000000000411c4a: xor esi, esi; mov rdi, rbp; call qword ptr [rbx + 0x10]; 
0x0000000000474f22: xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x0000000000419698: xor esi, esi; mov rdi, rbx; call qword ptr [rcx + 0x58]; 
0x0000000000490837: xor esi, esi; xor edi, edi; call 0x54de0; call rax; 
0x00000000004905fb: xor esi, esi; xor edi, edi; call 0x54de0; nop dword ptr [rax]; call rax; 
0x00000000004748f1: xor esi, r8d; xor r8d, r8d; syscall; 
0x00000000004844e0: xor esp, esp; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000048b101: xor esp, esp; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000404604: xor esp, esp; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x000000000041f240: xor qword ptr [rax], r9; add dword ptr [rax + 0x39], ecx; ret; 
0x0000000000479db4: xor r10d, r10d; and eax, 0x410000; cmp eax, 0x410000; je 0x79df0; mov eax, 0x101; syscall; 
0x000000000041b251: xor r10d, r10d; mov edx, 0x7fffffff; mov eax, 0xca; xor sil, 0x81; syscall; 
0x0000000000475d9a: xor r10d, r10d; mov edx, 0x7fffffff; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041b1f9: xor r10d, r10d; mov edx, 0x7fffffff; mov rdi, r8; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041b5d4: xor r10d, r10d; mov edx, 0x7fffffff; mov rdi, rbx; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041ab38: xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000041ab38: xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x000000000041ab14: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; 
0x000000000041ab14: xor r10d, r10d; mov edx, 1; mov esi, 0x81; mov eax, 0xca; syscall; ret; 
0x000000000047596f: xor r10d, r10d; mov edx, 1; mov esi, 1; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000041b2dd: xor r10d, r10d; mov edx, 1; mov rdi, rbp; xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041aabd: xor r10d, r10d; mov edx, 2; mov eax, 0xca; xor sil, 0x80; syscall; 
0x000000000041aa57: xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, 0xca; syscall; 
0x000000000048471a: xor r10d, r10d; mov edx, 2; mov esi, 0x80; mov eax, r9d; syscall; 
0x0000000000475cb8: xor r10d, r10d; mov esi, 0x80; mov rdi, rbp; mov eax, r8d; syscall; 
0x0000000000489e80: xor r10d, r10d; mov qword ptr [rip + 0x3b03e], r9; mov rax, r10; add rsp, 0x28; ret; 
0x0000000000474dea: xor r10d, r10d; mov rdi, rbp; mov eax, r15d; not esi; and esi, 0x80; syscall; 
0x000000000046fb9a: xor r10d, r10d; mov rdx, qword ptr [r8 + rdx*8]; jmp rdx; 
0x000000000041b0ca: xor r10d, r10d; shl esi, 7; xor sil, 0x81; syscall; 
0x00000000004759a7: xor r10d, r10d; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x0000000000475184: xor r10d, r10d; xor edx, edx; mov rdi, rbp; mov esi, 7; mov eax, 0xca; syscall; 
0x0000000000474f1f: xor r10d, r10d; xor esi, esi; mov rdi, rbp; mov eax, r13d; syscall; 
0x00000000004844df: xor r12d, r12d; add rsp, 8; mov eax, r12d; pop rbp; pop r12; ret; 
0x000000000048b100: xor r12d, r12d; add rsp, 8; mov rax, r12; pop rbx; pop r12; ret; 
0x0000000000404603: xor r12d, r12d; pop rbx; pop rbp; mov rax, r12; pop r12; ret; 
0x0000000000490a78: xor r8, r8; test edi, edi; jne 0x909ac; add rsp, 0x38; ret; 
0x00000000004885f8: xor r8, r8; xchg dword ptr [rip + 0x43cdf], eax; cmp eax, 1; jg 0x88638; pop rbp; ret; 
0x000000000049404d: xor r8d, r8d; add rsp, 0x18; mov eax, r8d; pop rbx; pop rbp; ret; 
0x000000000045735a: xor r8d, r8d; call rbx; 
0x0000000000452ad5: xor r8d, r8d; mov eax, 0x19; syscall; 
0x0000000000479be4: xor r8d, r8d; mov eax, r8d; ret; 
0x0000000000474996: xor r8d, r8d; mov r10, rcx; mov edx, r13d; mov eax, 0xca; syscall; 
0x000000000040ac84: xor r8d, r8d; mov rax, r8; pop rbx; pop rbp; ret; 
0x000000000044eb75: xor r8d, r8d; mov rcx, r12; call rbx; 
0x0000000000414673: xor r8d, r8d; mov rcx, r14; mov rsi, r13; mov rdi, r15; call rbx; 
0x000000000044ed04: xor r8d, r8d; mov rdi, rbp; call rbx; 
0x000000000044e141: xor r8d, r8d; mov rdi, rbp; lea r9, [rsp + 0x30]; call rbx; 
0x00000000004748f4: xor r8d, r8d; syscall; 
0x00000000004809c4: xor r8d, r8d; test rsi, rsi; je 0x809cf; mov qword ptr [rsi], rcx; mov rax, r8; ret; 
0x00000000004573c8: xor r8d, r8d; xor ecx, ecx; xor edx, edx; push rax; call rbx; 
0x000000000043f439: xor rax, rax; ret; 
0x0000000000476e1e: xor rax, rdx; and rax, rcx; je 0x76ff0; bsr rax, rax; add rax, rdi; ret; 
0x00000000004770ae: xor rax, rdx; and rsi, rax; je 0x76ff0; bsr rax, rsi; add rax, rdi; ret; 
0x0000000000409f95: xor rax, rdx; movzx edx, byte ptr [rcx]; test dl, dl; jne 0x9f78; ret; 
0x0000000000476eb8: xor rcx, rax; and rsi, rcx; je 0x76ff0; bsr rsi, rsi; lea rax, [rdi + rsi]; ret; 
0x000000000041aaca: xor sil, 0x80; syscall; 
0x000000000041b204: xor sil, 0x81; mov eax, 0xca; syscall; 
0x000000000041b0d0: xor sil, 0x81; syscall; 
0x000000000041ab34: xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; 
0x000000000041ab34: xor sil, 0x81; xor r10d, r10d; mov edx, 1; mov eax, 0xca; syscall; ret; 
0x00000000004759a3: xor sil, 0x87; xor r10d, r10d; xor edx, edx; mov rdi, r8; mov eax, 0xca; syscall; 
0x000000000044808c: xtest; je 0x48095; vzeroall; ret; 
0x00000000004483ae: xtest; je 0x483b7; vzeroall; ret; 
0x00000000004487ab: xtest; je 0x487b4; vzeroall; ret; 
0x0000000000448fb3: xtest; je 0x48fbc; vzeroall; ret; 
0x0000000000449090: xtest; je 0x49099; vzeroall; ret; 
0x000000000044940d: xtest; je 0x49416; vzeroall; ret; 
0x0000000000449468: xtest; je 0x49471; vzeroall; ret; 
0x0000000000449aa2: xtest; je 0x49aab; vzeroall; ret; 
0x0000000000449d2b: xtest; je 0x49d34; vzeroall; ret; 
0x000000000044a0e8: xtest; je 0x4a0f1; vzeroall; ret; 
0x000000000044a37e: xtest; je 0x4a387; vzeroall; ret; 
0x000000000044a3f4: xtest; je 0x4a3fd; vzeroall; ret; 
0x000000000044abb9: xtest; je 0x4abc2; vzeroall; ret; 
0x000000000044f72c: xtest; je 0x4f735; vzeroall; ret; 
0x00000000004773e9: xtest; je 0x773f2; vzeroall; ret; 
0x0000000000478981: xtest; je 0x7898a; vzeroall; ret; 
0x0000000000478a2f: xtest; je 0x78a38; vzeroall; ret; 

18262 gadgets found
